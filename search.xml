<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的Debain设备与Linux</title>
    <url>/2023/03/06/1/</url>
    <content><![CDATA[<h2 id="我的Debain设备">我的Debain设备</h2>
<h3 id="设备介绍">设备介绍</h3>
<blockquote>
<p>这个东西其实就是随身wifi，但他的硬件很有趣，所以被开发出来了许多玩法</p>
</blockquote>
<p><img src="./A-DebainDeviceAndLinux/images/(1).jpg" alt><br>
<img src="./A-DebainDeviceAndLinux/images/(2).jpg" alt></p>
<h3 id="为什么要用这个设备学习linux">为什么要用这个设备学习linux</h3>
<blockquote>
<p>因为这个学期有linux的课程，所以我就把这个东西拿来学习linux，因为这个东西的硬件比较好，所以我就把他当作我的开发板来学习linux<br>
开始上linux课的时候，要求我们用虚拟机来学习，但是我觉得这样不太好</p>
<ul class="lvl-1">
<li class="lvl-2">一是因为我的电脑是游戏本，很厚重，上课带来带去很麻烦</li>
<li class="lvl-2">二是目前学习linux并不需要很高的性能，这个设备已经有足够的性能来学习linux了</li>
</ul>
</blockquote>
<h3 id="为什么不用安卓手机呢">为什么不用安卓手机呢</h3>
<blockquote>
<p>众所周知安卓手机也使用了linux内核</p>
<ul class="lvl-1">
<li class="lvl-2">安卓手机通常无法获取root权限，这样就无法学习linux内核，即使手机支持root，也需要折腾很久，我不想在主力机上root，因为我的数据都在里面</li>
<li class="lvl-2">安卓的Linux内核经过了修改，所以学习起来会比较麻烦</li>
</ul>
</blockquote>
<h2 id="学习Linux">学习Linux</h2>
<p><img src="./A-DebainDeviceAndLinux/images/(3).png" alt></p>
<blockquote>
<p>其实linux只是个操作系统而已，只是其Gui界面较少，操作通常使用命令行，所以学习linux并不难，只要学会一些基本的命令就可以了</p>
</blockquote>
<h3 id="基本命令">基本命令</h3>
<p>ls:列出当前目录下的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l:列出详细信息</span><br><span class="line"><span class="built_in">ls</span> -a:列出所有文件</span><br><span class="line"><span class="built_in">ls</span> -al:列出所有文件的详细信息</span><br></pre></td></tr></table></figure>
<p>cd:切换目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..:返回上一级目录</span><br><span class="line"><span class="built_in">cd</span> ~:返回根目录</span><br></pre></td></tr></table></figure>
<p>pwd:显示当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> -P:显示真实路径</span><br></pre></td></tr></table></figure>
<p>mkdir:创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p:创建多级目录</span><br></pre></td></tr></table></figure>
<p>rm:删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r:删除目录</span><br><span class="line"><span class="built_in">rm</span> -f:强制删除</span><br></pre></td></tr></table></figure>
<p>rmdir:删除目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> -p:删除多级目录</span><br></pre></td></tr></table></figure>
<p>cp:复制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r:复制目录</span><br><span class="line"><span class="built_in">cp</span> -a:复制目录并保留属性</span><br></pre></td></tr></table></figure>
<p>mv:移动文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> -f:强制移动</span><br></pre></td></tr></table></figure>
<p>cat:显示文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> -n:显示行号</span><br></pre></td></tr></table></figure>
<p>touch:创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> -a:修改文件的访问时间</span><br><span class="line"><span class="built_in">touch</span> -m:修改文件的修改时间</span><br><span class="line"><span class="built_in">touch</span> -c:不创建文件，只修改文件的时间</span><br></pre></td></tr></table></figure>
<p>echo:输出内容到文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt; hello.txt:输出内容到文件</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt;&gt; hello.txt:输出内容到文件末尾</span><br></pre></td></tr></table></figure>
<p>find:查找文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span>:查找当前目录下的hello.txt文件</span><br><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span> -<span class="built_in">type</span> f:查找当前目录下的hello.txt文件并且是文件</span><br><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span> -<span class="built_in">type</span> d:查找当前目录下的hello.txt文件并且是目录</span><br><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;:查找当前目录下的hello.txt文件并且是文件并且删除</span><br></pre></td></tr></table></figure>
<p>grep:查找文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;hello&quot;</span> hello.txt:查找hello.txt文件中的hello</span><br><span class="line">grep -i <span class="string">&quot;hello&quot;</span> hello.txt:忽略大小写</span><br><span class="line">grep -v <span class="string">&quot;hello&quot;</span> hello.txt:查找不包含hello的行</span><br><span class="line">grep -n <span class="string">&quot;hello&quot;</span> hello.txt:查找包含hello的行并且显示行号</span><br><span class="line">grep -c <span class="string">&quot;hello&quot;</span> hello.txt:查找包含hello的行并且显示行数</span><br><span class="line">grep -r <span class="string">&quot;hello&quot;</span> .:查找当前目录下的所有文件中包含hello的行</span><br></pre></td></tr></table></figure>
<p>wc:统计文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> -l hello.txt:统计hello.txt文件的行数</span><br><span class="line"><span class="built_in">wc</span> -w hello.txt:统计hello.txt文件的单词数</span><br><span class="line"><span class="built_in">wc</span> -c hello.txt:统计hello.txt文件的字符数</span><br></pre></td></tr></table></figure>
<p>sort:排序文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> hello.txt:对hello.txt文件进行排序</span><br><span class="line"><span class="built_in">sort</span> -r hello.txt:对hello.txt文件进行倒序排序</span><br><span class="line"><span class="built_in">sort</span> -n hello.txt:对hello.txt文件进行数字排序</span><br><span class="line"><span class="built_in">sort</span> -u hello.txt:对hello.txt文件进行去重排序</span><br></pre></td></tr></table></figure>
<p>uniq:去重文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uniq</span> hello.txt:去重hello.txt文件</span><br><span class="line"><span class="built_in">uniq</span> -c hello.txt:去重并且统计重复次数</span><br></pre></td></tr></table></figure>
<p>head:显示文件头部内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 10 hello.txt:显示hello.txt文件的前10行</span><br></pre></td></tr></table></figure>
<p>tail:显示文件尾部内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 10 hello.txt:显示hello.txt文件的后10行</span><br></pre></td></tr></table></figure>
<p>diff:比较文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff example1.txt example2.txt 比较文件差异</span><br></pre></td></tr></table></figure>
<h3 id="vim">vim</h3>
<p>vim是linux下的文本编辑器，其操作方式与windows下的记事本类似，但是vim的功能更加强大，所以学习vim是学习linux的必备技能</p>
<p>vim的操作方式有两种，一种是命令模式，一种是编辑模式，命令模式下可以进行一些操作，比如复制粘贴，编辑模式下可以进行编辑。vim有多个模式，分别是</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>正常模式(normal mode),默认模式,可以进行复制粘贴等操作</p>
</li>
<li class="lvl-2">
<p>插入模式(insert mode),可以进行编辑</p>
</li>
<li class="lvl-2">
<p>命令行模式(command mode),可以执行一些命令</p>
</li>
<li class="lvl-2">
<p>可视模式(visual mode),可以进行选择</p>
</li>
</ul>
<h4 id="新建保存和退出">新建保存和退出</h4>
<p>新建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim hello.txt</span><br></pre></td></tr></table></figure>
<p>保存文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:w</span><br></pre></td></tr></table></figure>
<p>退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:q</span><br></pre></td></tr></table></figure>
<p>强制退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:q!</span><br></pre></td></tr></table></figure>
<p>保存并退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>
<p>进入编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i</span><br></pre></td></tr></table></figure>
<p>退出编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">esc</span><br></pre></td></tr></table></figure>
<h4 id="初步导航和编辑">初步导航和编辑</h4>
<p>通常vim移动光标的方式是使用方向键，但是vim也提供了一些快捷键，可以使用快捷键来移动光标</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>h:左移</p>
</li>
<li class="lvl-2">
<p>j:下移</p>
</li>
<li class="lvl-2">
<p>k:上移</p>
</li>
<li class="lvl-2">
<p>l:右移</p>
</li>
<li class="lvl-2">
<p>i:插入，插入到当前光标的前面</p>
</li>
<li class="lvl-2">
<p>shift+a或A:追加，追加到当前光标的后面</p>
</li>
</ul>
<p>新建一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">o 新建下一行或者</span><br><span class="line"><span class="built_in">shift</span>+o 新建下一行</span><br></pre></td></tr></table></figure>
<h4 id="进阶导航和编辑">进阶导航和编辑</h4>
<p>行号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure>
<p>移动到最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">shift</span>+g</span><br><span class="line">G</span><br></pre></td></tr></table></figure>
<p>移动到顶部</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gg</span><br></pre></td></tr></table></figure>
<p>相对行号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> rnu</span><br></pre></td></tr></table></figure>
<p>复制粘贴</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yy 复制一行</span><br><span class="line">p 粘贴</span><br></pre></td></tr></table></figure>
<p>删除一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span></span><br></pre></td></tr></table></figure>
<p>重复上一次操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br></pre></td></tr></table></figure>
<p>撤销</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">u</span><br></pre></td></tr></table></figure>
<p>返回上一次操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+r</span><br></pre></td></tr></table></figure>
<p>删除一个单词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dw</span><br></pre></td></tr></table></figure>
<p>改变一个单词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cw</span><br></pre></td></tr></table></figure>
<p>按单词移动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">w 向后移动一个单词</span><br><span class="line">b 向前移动一个单词</span><br></pre></td></tr></table></figure>
<p>跳到单词最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e</span><br></pre></td></tr></table></figure>
<p>跳到单词最前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<h4 id="搜索替换和视觉模式">搜索替换和视觉模式</h4>
<p>搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/word</span><br></pre></td></tr></table></figure>
<p>替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:%s/old/new/g 最后的g是全局的意思</span><br></pre></td></tr></table></figure>
<p>复制一个单词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yw</span><br></pre></td></tr></table></figure>
<p>粘贴3次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3p</span><br></pre></td></tr></table></figure>
<p>删除大括号内的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ci&#123;</span><br><span class="line">ci&#125;</span><br></pre></td></tr></table></figure>
<p>视觉模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+v</span><br></pre></td></tr></table></figure>
<p>其他的快捷键</p>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>:set nu:显示行号</p>
</li>
<li class="lvl-2">
<p>:set nonu:不显示行号</p>
</li>
<li class="lvl-2">
<p>:set ai:自动缩进</p>
</li>
<li class="lvl-2">
<p>:set noai:不自动缩进</p>
</li>
<li class="lvl-2">
<p>:set si:智能缩进</p>
</li>
<li class="lvl-2">
<p>:set nosi:不智能缩进</p>
</li>
<li class="lvl-2">
<p>:set ts=4:设置缩进为4个空格</p>
</li>
<li class="lvl-2">
<p>:set ts=8:设置缩进为8个空格</p>
</li>
<li class="lvl-2">
<p>:set ts=tab:设置缩进为tab</p>
</li>
</ul>
</blockquote>
<p>参考：</p>
<iframe class="video-frame" src="//player.bilibili.com/player.html?aid=983519439&cid=775999565&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>关于电子书</title>
    <url>/2023/05/22/1/</url>
    <content><![CDATA[<h2 id="关于电子书">关于电子书</h2>
<p>我喜欢看电子书，我看过的多数课外书籍基本是电子书。中国有很多电子书平台，如著名的起点中文网。但是，这些平台的电子书都是有版权的，而且有些电子书的版权是很贵的。</p>
<h3 id="ZLibrary">ZLibrary</h3>
<p>ZLibrary是一个免费的电子书网站，上面有很多免费的电子书，还有论文。前些时间，Zlib被美国相关部门封锁了，但是现在（2023-05）又可以访问了。但我看见Zlib给我发的邮件时，我非常感动······</p>
<p>Zlib是互联网精神的一部分，它是一个免费的电子书网站，它的存在是为了让更多的人能够阅读更多的书籍，而不是为了盈利。<br>
<img src="./img/zlib.png" alt></p>
<h3 id="知轩藏书（zxcs-me）">知轩藏书（<span class="exturl" data-url="aHR0cDovL3p4Y3MubWU=">zxcs.me<i class="fa fa-external-link-alt"></i></span>）</h3>
<p>不知道什么时候开始，我就使用知轩藏书来下载电子书了。它上面有很多精校版的电子书，而且是免费的。但是如今，它停止运营了，我感觉很可惜。不知道它的运营者为什么要停止运营，我猜测可能是因为版权问题吧。也不知道能否和Zlib一样，能够重新上线。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">关于“知轩藏书”站点的临时说明</span><br><span class="line">从 2023 年 4 月 5 日开始，用户无法访问知轩藏书站点。笔者通过对网站的基本信息进行分析后，初步判断是站长未续费网站服务器所导致的问题。</span><br><span class="line">后续网站是否能够恢复，取决于站长有没有备份网站数据，以及其是否还有意愿维护网站。</span><br><span class="line"></span><br><span class="line">不复存在的“知轩藏书”站点</span><br><span class="line">当你看到这个页面，说明“知轩藏书”的站长没有续费 92.242.62.123 服务器，并且没有更改域名解析记录。</span><br><span class="line">想了解更多信息请访问“知轩藏书”站点情况说明站点，</span><br><span class="line">因为笔者不打算长期续费此服务器，笔者没有“知轩藏书”站点的网站数据，这是个“重新安装”的服务器。</span><br><span class="line"></span><br><span class="line">过渡方案</span><br><span class="line">在百度贴吧知轩藏书吧内，网友“Anonymous般若”分享了其抓取的“知轩藏书”站点资源。</span><br><span class="line">而网友“鸣庚◎点墨”则根据这些资源，结合 AList 这个文件列表程序，建立了一个知轩藏书备份站。</span><br><span class="line"></span><br><span class="line">ZXCS | 百度网盘（已失效；压缩包密码：@123123）</span><br><span class="line">知轩藏书备份站（由于被攻击，即将关闭。）</span><br><span class="line">阿里云盘（由网友“筒蠹”提供，将文件类型“exe”重命名为“rar”即可解压）</span><br><span class="line">OneDrive for Business 国际版（由网友“神龙氏少主”提供，其同时运营着一个流媒体网站必达影视）</span><br><span class="line">天翼云盘（由网友“贴吧用户_0XN9bX5”提供）</span><br><span class="line">知轩藏书备份站（由网友“Sukanka”提供）</span><br><span class="line">请注意，zxcs.info 或 zxcstxt.com 等绝不是所谓的新站点，站长没有理由放弃运营 zxcs.me，转而运营一个不如其知名的站点。</span><br><span class="line"></span><br><span class="line">如果朋友们知道其他精校小说网站，也欢迎向我反馈，我会在“知轩藏书”站点情况说明站点中分享。</span><br><span class="line"></span><br><span class="line">笔者的电子邮件地址：webmaster@zxcs.wiki（受限于服务商，笔者无法回复邮件，敬请见谅）</span><br><span class="line">笔者不赞同访问 zxcs.info 或 zxcstxt.com 等盗用他人名称的站点，因为这是一种为了不良竞争以及快速获取知名度的手段。</span><br><span class="line">笔者认为如果网站真的足够优秀，那么使用自己原创的站点名称一样能够成功，使用他人名称更多是一种“浑水摸鱼”的做法。</span><br><span class="line"></span><br><span class="line">© 2023 zxcs.me (zxcs.wiki) - 关于“知轩藏书”站点的临时说明</span><br></pre></td></tr></table></figure>
<iframe src="https://www.zxcs.me/"></iframe>
<blockquote>
<p>如果上面的iframe无法显示，或者显示出无关内容，说明知轩藏书已经彻底停止运营了。</p>
</blockquote>
<div itemprop="text">
          <p>
            在百度贴吧<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vZj9pZT11dGYtOCZrdz0lRTclOUYlQTUlRTglQkQlQTklRTglOTclOEYlRTQlQjklQTY=" title="知轩藏书吧-百度贴吧">知轩藏书吧<i class="fa fa-external-link-alt"></i></span>内，网友“Anonymous般若”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">分享了其抓取的“知轩藏书”站点资源<i class="fa fa-external-link-alt"></i></span>。
            <br>
            而网友“鸣庚◎点墨”则根据这些资源，结合 AList 这个文件列表程序，<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84Mzc5NjU0OTgy" title="知轩藏书备份资源下载站来了（地址看2楼）_知轩藏书吧_百度贴吧">建立了一个知轩藏书备份站<i class="fa fa-external-link-alt"></i></span>。
          </p>
          <ul>
            <li><del><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMW1wU2lzTlFXekhLQlI1LTNCZDdYbUE/cHdkPWFqMmo=" title="ZXCS_免费高速下载|百度网盘-分享无限制">ZXCS |
                  百度网盘<i class="fa fa-external-link-alt"></i></span></del><i>（<strong>已失效</strong>；压缩包密码：@123123）</i>
            </li>
            <li><span class="exturl" data-url="aHR0cHM6Ly96eGNzLmRtbmIuY2Yv" title="主页 | 知轩藏书（备份）">知轩藏书备份站<i class="fa fa-external-link-alt"></i></span><i>（由于<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84NDE4OTU3NTQyP2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3NjQxNDIxMDU5IzE0NzY0MTQyMTA1OQ==" title="郑重声明：本站仅提供单文件下载，要下整个库的你直接下anonymous打包的书库去，你别从我这刷！我这里一天只有十万的访问额度【知轩藏书吧】_百度贴吧">被攻击<i class="fa fa-external-link-alt"></i></span>，即将关闭。）</i></li>
            <li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvTEdFaWtpeXNpOEs=" title="阿里云盘分享">阿里云盘<i class="fa fa-external-link-alt"></i></span><i>（由网友“筒蠹”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3P2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3MzI0MTM0MDU0JmNpZD0xNDczMzY3Mzc4MjYjMTQ3MzM2NzM3ODI2" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">提供<i class="fa fa-external-link-alt"></i></span>，将文件类型“exe”重命名为“rar”即可解压）</i></li>
            <li><span class="exturl" data-url="aHR0cHM6Ly9kbC4xNGJpZGEubWUvMTRiaWRhL0Jvb2svJUU3JTlGJUE1JUU4JUJEJUE5JUU4JTk3JThGJUU0JUI5JUE2JUU1JUE0JTg3JUU0JUJCJUJE" title="必达影视下载站 | 知轩藏书备份">OneDrive for Business
                国际版<i class="fa fa-external-link-alt"></i></span><i>（由网友“神龙氏少主”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3P2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3MzI0MTM0MDU0JmNpZD0xNDc0NjU5NjY1MjYjMTQ3NDY1OTY2NTI2" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">提供<i class="fa fa-external-link-alt"></i></span>，其同时运营着一个流媒体网站<span class="exturl" data-url="aHR0cHM6Ly8xNGJpZGEubWUv" title="必达影视">必达影视<i class="fa fa-external-link-alt"></i></span></i>）
            </li>
            <li><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC4xODkuY24vdC9CVmJ5ZW1KRlZWbm0=" title="知轩藏书 全站小说（7681本） 免费高速下载 | 天翼云盘 珍藏美好生活 家庭云|网盘|文件备份|资源分享">天翼云盘<i class="fa fa-external-link-alt"></i></span><i>（由网友“贴吧用户_0XN9bX5”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3P2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3MzI0MTM0MDU0JmNpZD0xNDc1MzkwMDc3NzUjMTQ3NTM5MDA3Nzc1" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">提供<i class="fa fa-external-link-alt"></i></span>）</i></li>
            <li><span class="exturl" data-url="aHR0cHM6Ly9kbC5hc2trLmNjL2NtY2Mv" title="cmcc | Sukanka 的仓库">知轩藏书备份站<i class="fa fa-external-link-alt"></i></span><i>（由<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmFza2suY2Mv" title="sukanka 的博客 - sukanka 的博客">网友“Sukanka”<i class="fa fa-external-link-alt"></i></span>提供）</i></li>
          </ul>
</div>
<h2 id="我的希望"><s>我的希望</s></h2>
<p><s>如果可以，我希望我以后可以自组一台NAS，将Zlib的所有书籍都备份</s></p>
]]></content>
  </entry>
  <entry>
    <title>四月杂谈</title>
    <url>/2024/05/07/1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="15fc5d372789ce2f94dba5e6e763af5325c5651aa63a4c382d715089df412b0e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入访问密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>屎山代码艺术</title>
    <url>/2023/07/06/1/</url>
    <content><![CDATA[<p>每一个进一步了解了编程的人，都会有这样的感觉：编程是一门艺术，而且是一门非常有趣的艺术。编程的艺术，就像是一座座屎山，😅<br>
每当我们想要写出一段优雅的代码时，就会发现自己的代码又多了一座屎山。😉<br>
而每当看到他人写的代码时，会发现自己的代码又是一座屎山。🥴<br>
往往与他人合作写代码时，我眉头微蹙，他人也是眉头微蹙，我们都在看着对方的屎山。🤗</p>
<p>著名的互联网公司 谷歌，出品的著名的浏览器 Chrome，<s>就是一座屎山</s>就是一件伟大的作品。而编写了<s>这座屎山</s>这个作品的人，就是一位艺术家。所以我们有了 <span class="exturl" data-url="aHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL3N0eWxlZ3VpZGUvanNndWlkZS5odG1s">谷歌 JavaScript 风格<i class="fa fa-external-link-alt"></i></span>.👽</p>
<details>
<summary>谷歌 JavaScript 风格</summary>
<iframe src="https://google.github.io/styleguide/jsguide.html" width="100%" height="600px"></iframe>
</details>
<p><s>这样我们就可以写出优美的代码了。</s>下面我要介绍的，就是一位艺术家的作品。<s>一种优美的代码风格。(bushi)</s></p>
<details>
<summary>💩点击展开💩</summary>
<h2 id="垃圾代码书写准则">垃圾代码书写准则</h2>
<p><a href="https://github.com/trekhleb/state-of-the-art-shitcode"><img src="https://img.shields.io/static/v1?label=State-of-the-art&amp;message=Shitcode&amp;color=7B5804" alt></a></p>
<p>这是一个你的项目应该遵循的垃圾代码书写准则的列表，把称为适当的垃圾代码。</p>
<p><em>Read this in other languages:</em><br>
<a href="https://github.com/trekhleb/state-of-the-art-shitcode/blob/master/README.md"><em>English</em></a>,<br>
<a href="https://github.com/trekhleb/state-of-the-art-shitcode/blob/master/README.ko-KR.md"><em>한국어</em></a></p>
<h2 id="获取徽章">获取徽章</h2>
<p>如果你的仓库遵循垃圾代码书写准则，你应该用下面的&quot;state-of-the-art shitcode&quot; 徽章：</p>
<p><a href="https://github.com/trekhleb/state-of-the-art-shitcode"><img src="https://img.shields.io/static/v1?label=State-of-the-art&amp;message=Shitcode&amp;color=7B5804" alt></a></p>
<p>标记徽章的源代码:</p>
<p><a href="https://github.com/trekhleb/state-of-the-art-shitcode"><img src="https://img.shields.io/static/v1?label=State-of-the-art&amp;message=Shitcode&amp;color=7B5804" alt></a></p>
<h2 id="准则">准则</h2>
<h3 id="💩-以一种代码已经被混淆的方式命名变量">💩 以一种代码已经被混淆的方式命名变量</h3>
<p>如果我们键入的东西越少，那么就有越多的时间去思考代码逻辑等问题。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<h3 id="💩-变量-函数混合命名风格">💩 变量/函数混合命名风格</h3>
<p>为不同庆祝一下。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wWidth = <span class="number">640</span>;</span><br><span class="line"><span class="keyword">let</span> w_height = <span class="number">480</span>;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> windowWidth = <span class="number">640</span>;</span><br><span class="line"><span class="keyword">let</span> windowHeight = <span class="number">480</span>;</span><br></pre></td></tr></table></figure>
<h3 id="💩-不要写注释">💩 不要写注释</h3>
<p>反正没人会读你的代码。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cdr = <span class="number">700</span>;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<p>更多时候，评论应该包含一些“为什么”，而不是一些“是什么”。如果“什么”在代码中不清楚，那么代码可能太混乱了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 700ms的数量是根据UX A/B测试结果进行经验计算的。</span></span><br><span class="line"><span class="comment">// @查看: &lt;详细解释700的一个链接&gt;</span></span><br><span class="line"><span class="keyword">const</span> callbackDebounceRate = <span class="number">700</span>;</span><br></pre></td></tr></table></figure>
<h3 id="💩-使用母语写注释">💩 使用母语写注释</h3>
<p>如果您违反了“无注释”原则，那么至少尝试用一种不同于您用来编写代码的语言来编写注释。如果你的母语是英语，你可能会违反这个原则。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Закриваємо модальне віконечко при виникненні помилки.</span></span><br><span class="line"><span class="title function_">toggleModal</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐藏错误弹窗</span></span><br><span class="line"><span class="title function_">toggleModal</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="💩-尽可能混合不同的格式">💩 尽可能混合不同的格式</h3>
<p>为不同庆祝一下。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = [<span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;onion&#x27;</span>, <span class="string">&#x27;mushrooms&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> d = [ <span class="string">&quot;ketchup&quot;</span>, <span class="string">&quot;mayonnaise&quot;</span> ];</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ingredients = [<span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;onion&#x27;</span>, <span class="string">&#x27;mushrooms&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> dressings = [<span class="string">&#x27;ketchup&#x27;</span>, <span class="string">&#x27;mayonnaise&#x27;</span>];</span><br></pre></td></tr></table></figure>
<h3 id="💩-尽可能把代码写成一行">💩 尽可能把代码写成一行</h3>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="regexp">/(^\?)/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>).<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">o,n</span>)&#123;n=n.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);o[n[<span class="number">0</span>]]=n[<span class="number">1</span>];<span class="keyword">return</span> o&#125;,&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span></span><br><span class="line">  .<span class="title function_">replace</span>(<span class="regexp">/(^\?)/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">searchParams, keyValuePair</span>) =&gt;</span> &#123;</span><br><span class="line">    keyValuePair = keyValuePair.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    searchParams[keyValuePair[<span class="number">0</span>]] = keyValuePair[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> searchParams;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="💩-不要处理错误">💩 不要处理错误</h3>
<p>无论何时发现错误，都没有必要让任何人知道它。没有日志，没有错误弹框。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 意料之外的情况。</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// tss... 🤫</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 意料之外的情况。</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="title function_">setErrorMessage</span>(error.<span class="property">message</span>);</span><br><span class="line">  <span class="comment">// and/or</span></span><br><span class="line">  <span class="title function_">logError</span>(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-广泛使用全局变量">💩 广泛使用全局变量</h3>
<p>全球化的原则。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params"></span>) &#123;</span><br><span class="line">  x = x ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">square</span>(); <span class="comment">// 现在x是25</span></span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="title function_">square</span>(x); <span class="comment">// 现在x是25</span></span><br></pre></td></tr></table></figure>
<h3 id="💩-创建你不会使用的变量">💩 创建你不会使用的变量</h3>
<p>以防万一。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> timeout = <span class="number">1300</span>;</span><br><span class="line">  <span class="keyword">const</span> result = a + b;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-如果语言允许，不要指定类型和-或不执行类型检查">💩 如果语言允许，不要指定类型和/或不执行类型检查</h3>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里享受没有注释的快乐</span></span><br><span class="line"><span class="keyword">const</span> guessWhat = <span class="title function_">sum</span>([], &#123;&#125;); <span class="comment">// -&gt; &quot;[object Object]&quot;</span></span><br><span class="line"><span class="keyword">const</span> guessWhatAgain = <span class="title function_">sum</span>(&#123;&#125;, []); <span class="comment">// -&gt; 0</span></span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: number, b: number</span>): ?number &#123;</span><br><span class="line">  <span class="comment">// 当我们在JS中不做置换和/或流类型检查时，覆盖这种情况。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> b !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个应该在转换/编译期间失败。</span></span><br><span class="line"><span class="keyword">const</span> guessWhat = <span class="title function_">sum</span>([], &#123;&#125;); <span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="💩-你应该有不能到达的代码">💩 你应该有不能到达的代码</h3>
<p>这是你的 “Plan B”.</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 这就是我的&quot;Plan B&quot;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-三角法则">💩 三角法则</h3>
<p>就像鸟巢，鸟巢，鸟巢。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">      <span class="title function_">asyncFunction</span>(params, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition1 || !condition2) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncFunction</span>(params);</span><br><span class="line">  <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-混合缩进">💩 混合缩进</h3>
<p>避免缩进，因为它们会使复杂的代码在编辑器中占用更多的空间。如果你不喜欢回避他们，那就和他们捣乱。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> toppings = [<span class="string">&#x27;syrup&#x27;</span>, <span class="string">&#x27;cream&#x27;</span>, </span><br><span class="line">                    <span class="string">&#x27;jam&#x27;</span>, </span><br><span class="line">                    <span class="string">&#x27;chocolate&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> desserts = [];</span><br><span class="line">fruits.<span class="title function_">forEach</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> &#123;</span><br><span class="line">toppings.<span class="title function_">forEach</span>(<span class="function"><span class="params">topping</span> =&gt;</span> &#123;</span><br><span class="line">    desserts.<span class="title function_">push</span>([</span><br><span class="line">fruit,topping]);</span><br><span class="line">    &#125;);&#125;)</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> toppings = [<span class="string">&#x27;syrup&#x27;</span>, <span class="string">&#x27;cream&#x27;</span>, <span class="string">&#x27;jam&#x27;</span>, <span class="string">&#x27;chocolate&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> desserts = [];</span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">forEach</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> &#123;</span><br><span class="line">  toppings.<span class="title function_">forEach</span>(<span class="function"><span class="params">topping</span> =&gt;</span> &#123;</span><br><span class="line">    desserts.<span class="title function_">push</span>([fruit, topping]); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="💩-不要锁住你的依赖项">💩 不要锁住你的依赖项</h3>
<p>以非受控方式更新每个新安装的依赖项。为什么坚持使用过去的版本，让我们使用最先进的库版本。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line"></span><br><span class="line">package.json</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line"></span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>
<h3 id="💩-函数长的比短的好">💩 函数长的比短的好</h3>
<p>不要把程序逻辑分成可读的部分。如果IDE的搜索停止，而您无法找到所需的文件或函数，该怎么办?</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一个文件中10000行代码是OK的。</p>
</li>
<li class="lvl-2">
<p>一个函数体有1000行代码是OK的。</p>
</li>
<li class="lvl-2">
<p>在一个’ service.js ’ 中处理许多服务(第三方库和内部库、一些工具、手写的数据库ORM和jQuery滑块)? 这是OK的。</p>
</li>
</ul>
<h3 id="💩-不要测试你的代码">💩 不要测试你的代码</h3>
<p>这是重复且不需要的工作。</p>
<h3 id="💩-避免代码风格统一">💩 避免代码风格统一</h3>
<p>编写您想要的代码，特别是在一个团队中有多个开发人员的情况下。这是“自由”原则。</p>
<h3 id="💩-构建新项目不需要-README-文档">💩 构建新项目不需要 README 文档</h3>
<p>一开始我们就应该保持。</p>
<h3 id="💩-保存不必要的代码">💩 保存不必要的代码</h3>
<p>不要删除不用的代码，最多注释掉。</p>
</details>
<hr>
<p>参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RyZWtobGViL3N0YXRlLW9mLXRoZS1hcnQtc2hpdGNvZGU=">state-of-the-art-shitcode<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 2</title>
    <url>/2023/03/12/1/</url>
    <content><![CDATA[<h2 id="层次选择器">层次选择器</h2>
<p>层次选择器是用来选择文档树中的某个元素的，它们可以用来选择父元素、子元素、后代元素、相邻兄弟元素和通用兄弟元素。层次选择器的作用是为了更精确的选择元素，从而减少样式的冗余，提高样式的可维护性。</p>
<h3 id="后代选择器">后代选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子代选择器">子代选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="相邻兄弟选择器">相邻兄弟选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><s>其实就是弟弟选择器</s></p>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> + <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通用兄弟选择器">通用兄弟选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> ~ <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用示例">应用示例</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> &gt; <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> + <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> ~ <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> + <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> ~ <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结构伪类选择器">结构伪类选择器</h2>
<p>伪类: 用来选择文档树中的某个元素的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="属性选择器（Attribute-Selector）">属性选择器（Attribute Selector）</h2>
<p>属性选择器用来选择具有某个属性的元素，或者具有某个属性值的元素，是一种常用的选择器。</p>
<h3 id="属性选择器的语法">属性选择器的语法</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line">[attr]</span><br><span class="line">[attr=value]</span><br><span class="line">[attr~=value]</span><br><span class="line">[attr|=value]</span><br><span class="line">[attr^=value]</span><br><span class="line">[attr$=value]</span><br><span class="line">[attr*=value]</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-attr">[attr]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<style>
  [attr] {
      color: red;
    }
[attr=value] {
      color: blue;
    }
    [attr~=value] {
      color: green;
    }
    [attr|=value] {
      color: yellow;
    }
    [attr^=value] {
      color: pink;
    }
    [attr$=value] {
      color: orange;
    }
    [attr*=value] {
      color: purple;
    }
</style>
<div class="parent">
  <p class="child" attr="value">child</p>
  <p class="child" attr="value1 value2">child</p>
  <p class="child" attr="value1-value2">child</p>
  <p class="child" attr="value1value2">child</p>
  <p class="child" attr="value1value2value3">child</p>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr~=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr|=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr^=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr$=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr*=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1 value2&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1-value2&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1value2&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1value2value3&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-attr">[attr]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr~=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr|=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr^=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr$=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr*=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>属性选择器中的属性值是大小写敏感的，如果要忽略大小写，可以使用 i 修饰符。并且，属性选择器中的属性值必须用双引号或单引号括起来。常常使用正则表达式来匹配属性值。例如，要选择所有具有 href 属性的 a 元素，可以使用 [href] 选择器；要选择所有具有 href 属性且属性值以 http:// 开头的 a 元素，可以使用 [href^=“http://”] 选择器。</p>
</blockquote>
<p>属性选择器常常是id选择器和class选择器的补充，因为id和class选择器只能选择具有id或class属性的元素，而属性选择器可以选择具有任意属性的元素。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>BASH sh script</title>
    <url>/2023/03/24/1/</url>
    <content><![CDATA[<h2 id="利用sh脚本计算1到100的和">利用sh脚本计算1到100的和</h2>
<ol>
<li class="lvl-3">利用while循环计算1到100的和</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 100 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line">    i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>利用for…do…done计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>利用for…do…done计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>利用until循环计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -gt 100 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line">    i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>利用awk计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;sum=0;for(i=1;i&lt;=100;i++)sum+=i;print sum&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>利用expr计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=`<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$i</span>`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li class="lvl-3">
<p>利用bc计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=`<span class="built_in">echo</span> <span class="variable">$sum</span>+<span class="variable">$i</span>|bc`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li class="lvl-3">
<p>利用python计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">python -c <span class="string">&quot;print(sum(range(1,101)))&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li class="lvl-3">
<p>利用perl计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">perl -e <span class="string">&#x27;print 100*101/2&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li class="lvl-4">
<p>利用ruby计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ruby -e <span class="string">&#x27;puts (1..100).inject(:+)&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="11">
<li class="lvl-4">
<p>利用sed计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sed -n <span class="string">&#x27;1,100p&#x27;</span> | awk <span class="string">&#x27;&#123;sum+=$1&#125;END&#123;print sum&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="让用户输入一个数字，然后计算1到这个数字的和">让用户输入一个数字，然后计算1到这个数字的和</h2>
<ol>
<li class="lvl-3">
<p>利用while循环计算1到用户输入数字的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Please input a number: &quot;</span> num</span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le <span class="variable">$num</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line">    i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>利用for…do…done计算1到用户输入数字的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Please input a number: &quot;</span> num</span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 <span class="variable">$num</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>调用python计算1到用户输入数字的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Please input a number: &quot;</span> num</span><br><span class="line">python -c <span class="string">&quot;print(sum(range(1,<span class="variable">$num</span>+1)))&quot;</span></span><br></pre></td></tr></table></figure>
<p>etc.</p>
<h2 id="利用for循环嵌套，输出九九乘法表">利用for循环嵌套，输出九九乘法表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 9`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> `<span class="built_in">seq</span> 1 <span class="variable">$i</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$j</span>*<span class="variable">$i</span>=<span class="subst">$(($i*$j)</span>) &quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>调用python</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">python -c <span class="string">&quot;for i in range(1,10):print(&#x27; &#x27;.join([&#x27;%s*%s=%s&#x27;%(j,i,i*j) for j in range(1,i+1)]))&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 4</title>
    <url>/2023/03/19/1/</url>
    <content><![CDATA[<h2 id="背景图像应用及渐变">背景图像应用及渐变</h2>
<h3 id="背景图像">背景图像</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>背景样式</p>
</li>
<li class="lvl-2">
<p>背景图像</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bgtest1</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/00050-1042470473.png</span>); <span class="comment">/* 默认平铺 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/* 不平铺 可以设置repeat-x repeat-y */</span></span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><h4 id="e-g">e.g</h4>
<p>背景图像</p>
</div>
<style>
    .bgtest1{
        background-image: url("./2023/03/19/1/images/00050-1042470473.png"); /* 默认平铺 */
        background-repeat: no-repeat; /* 不平铺 可以设置repeat-x repeat-y */
        background-position: center;
        background-size: 100%;
        border: 1px solid #000;
    }
</style>
<div class="bgtest1" style="width: 200px; height: 200px;"></div>
<h3 id="背景渐变">背景渐变</h3>
<p>使用CSS3的渐变，可以实现更加丰富的背景效果。这里有一个网站帮助你生成渐变代码：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29sb3J6aWxsYS5jb20vZ3JhZGllbnQtZWRpdG9yLw==">https://www.colorzilla.com/gradient-editor/<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JhYmllbnQuY29tLw==">https://www.grabient.com/<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#FF9A8B</span> <span class="number">0%</span>, <span class="number">#FF6A88</span> <span class="number">55%</span>, <span class="number">#FF99AC</span> <span class="number">100%</span>);</span><br></pre></td></tr></table></figure>
<div class="note success"><h4 id="e-g">e.g</h4>
<p>渐变效果</p>
</div>
<div id="navtest">
<style>
    .titletest {
    font-size: 20px;
    font-weight: bold;
    color: #FFFFFF;
    text-indent: 1em;
    line-height: 35px;
    background-color: #FF9A8B;
background-image: linear-gradient(90deg, #FF9A8B 0%, #FF6A88 55%, #FF99AC 100%);
}
/* a:hover {
    color: orange;
    text-decoration: underline;
} */
# navtest {
    width: 200px;
    height: 200px;
}
# treeicon {
    /* width: 15px;
    height: 15px; */
    background: url(./images/ysepan.svg) ;
    background-repeat: no-repeat;
    background-position: 100px 2px;
}
</style>
<h4 class="titletest">网页导航</h4>
<ul style="background-color: #FFDEE9;
background-image: linear-gradient(0deg, #FFDEE9 0%, #B5FFFC 100%);">
    <li id="treeicon" style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20=">视频<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cucGl4aXYubmV0Lw==">插画<i class="fa fa-external-link-alt"></i></span></li>
    <li id="treeicon" style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0ZmxpeC5jb20=">剧集<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cubmljb3ZpZGVvLmpw">动漫<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</div>
<h2 id="盒子模型及边框使用">盒子模型及边框使用</h2>
<h3 id="盒子模型">盒子模型</h3>
<p><img src="https://www.runoob.com/images/box-model.gif" alt title="盒子模型"></p>
<div class="note info"><h4 id="什么是盒子模型">什么是盒子模型</h4>
<ul class="lvl-0">
<li class="lvl-2">margin: 外边距</li>
<li class="lvl-2">border: 边框</li>
<li class="lvl-2">padding: 内边距</li>
<li class="lvl-2">content: 内容</li>
</ul>
</div>
<div class="note info no-icon"><h4 id="边框">边框</h4>
<ul class="lvl-0">
<li class="lvl-2">border-width: 边框宽度</li>
<li class="lvl-2">border-style: 边框样式</li>
<li class="lvl-2">border-color: 边框颜色</li>
</ul>
</div>
<h3 id="边框的使用">边框的使用</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.boxtest1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><p>e.g.<br>
盒子模型及边框使用</p>
</div>
<div class="boxtest1">
<style>
    .boxtest1{
        width: 300px;
        height: 200px;
        border: 1px solid #000;
        background-color: #4158D0;
        background-image: linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%);
        margin: 0 auto;
        padding: 10px;
    }
    #textp{
        color: #fff;
        text-align: center;
    }
    #submittest{
        background-color: #fff;
        color: #000;
        border: 1px solid #000;
        border-radius: 5px;
        width: 100px;
        height: 30px;
        margin: 0 auto;
        align-items: center;
        justify-content: center;
        display: flex;
    }
</style>
<p id="textp">登陆</p>
<form action="/404">
<div>
<span style="color: #fff;line-height:50px">姓名：</span>
<input type="text" name="username" placeholder="请输入姓名" required pattern="[a-zA-Z0-9]{6,12}">
</div>
<div>
<span style="color: #fff;line-height:50px">密码：</span>
<input type="password" name="password" placeholder="请输入密码" required pattern="[a-zA-Z0-9]{6,12}">
</div>
<div>
<input id="submittest" type="submit" value="登陆">
</div>
</form>
</div>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 3</title>
    <url>/2023/03/15/1/</url>
    <content><![CDATA[<h2 id="CSS的作用及字体样式">CSS的作用及字体样式</h2>
<h3 id="为什么美化网页">为什么美化网页</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>美化网页的目的是为了让用户更好的阅读网页内容</p>
</li>
<li class="lvl-2">
<p>有效传递信息</p>
</li>
<li class="lvl-2">
<p>吸引用户</p>
</li>
<li class="lvl-2">
<p>凸显主题</p>
</li>
<li class="lvl-2">
<p>提高用户体验</p>
</li>
</ul>
<h3 id="字体样式">字体样式</h3>
<p>字体的属性</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">font-family</td>
<td style="text-align:left">字体</td>
</tr>
<tr>
<td style="text-align:left">font-size</td>
<td style="text-align:left">字号</td>
</tr>
<tr>
<td style="text-align:left">font-weight</td>
<td style="text-align:left">字体粗细</td>
</tr>
<tr>
<td style="text-align:left">font-style</td>
<td style="text-align:left">字体样式</td>
</tr>
<tr>
<td style="text-align:left">font-variant</td>
<td style="text-align:left">字体变体</td>
</tr>
<tr>
<td style="text-align:left">font</td>
<td style="text-align:left">字体属性的简写</td>
</tr>
</tbody>
</table>
<hr>
<p>可以利用font属性简写字体样式，但是font属性的顺序必须是font-style、font-variant、font-weight、font-size/line-height、font-family。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: italic small-caps bold <span class="number">16px</span> <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br></pre></td></tr></table></figure>
<h2 id="文本样式">文本样式</h2>
<ol>
<li class="lvl-3">
<p>颜色</p>
</li>
<li class="lvl-3">
<p>文本对齐方式</p>
</li>
<li class="lvl-3">
<p>首行缩进</p>
</li>
<li class="lvl-3">
<p>行高</p>
</li>
<li class="lvl-3">
<p>装饰</p>
</li>
</ol>
<p>文本的属性</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left">字体颜色</td>
</tr>
<tr>
<td style="text-align:left">text-align</td>
<td style="text-align:left">文本对齐方式</td>
</tr>
<tr>
<td style="text-align:left">text-indent</td>
<td style="text-align:left">首行缩进</td>
</tr>
<tr>
<td style="text-align:left">text-decoration</td>
<td style="text-align:left">文本修饰</td>
</tr>
<tr>
<td style="text-align:left">text-transform</td>
<td style="text-align:left">文本转换</td>
</tr>
<tr>
<td style="text-align:left">letter-spacing</td>
<td style="text-align:left">字符间距</td>
</tr>
<tr>
<td style="text-align:left">word-spacing</td>
<td style="text-align:left">单词间距</td>
</tr>
<tr>
<td style="text-align:left">line-height</td>
<td style="text-align:left">行高</td>
</tr>
</tbody>
</table>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">    <span class="attribute">font</span>: italic small-caps bold <span class="number">16px</span> <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<style>
.p1 {
    font-family: "Times New Roman", Times, serif;
    font-size: 16px;
    font-weight: bold;
    font-style: italic;
    font-variant: small-caps;
    font: italic small-caps bold 16px "Times New Roman", Times, serif;
    color: #ff0000;
    text-align: center;
    text-indent: 2em;
    text-decoration: underline;
    text-transform: uppercase;
    letter-spacing: 2px;
    word-spacing: 2px;
    line-height: 2em;
}
</style>
<p class="p1">I can eat glass, it does not hurt me.</p>
<h2 id="超链接伪类">超链接伪类</h2>
<h3 id="链接伪类">链接伪类</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>;&#125; <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>;&#125; <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>;&#125; <span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>;&#125; <span class="comment">/* 选定的链接 */</span></span><br></pre></td></tr></table></figure>
<h3 id="列表样式">列表样式</h3>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navtest&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;titletest&quot;</span>&gt;</span>网页导航<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.taobao.com&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jd.com&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.tmall.com&quot;</span>&gt;</span>天猫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.titletest</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none; <span class="comment">/* none 去掉圆点/circle 圆点/square 方块/decimal 数字 */</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#navtest</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div id="navtest">
<style>
    .titletest {
    font-size: 20px;
    font-weight: bold;
    color: #00ff00;
    text-indent: 1em;
    line-height: 35px;
    background: red;
}
/* a:hover {
    color: orange;
    text-decoration: underline;
} */
# navtest {
    width: 200px;
    height: 200px;
    background: #a0a0a0;
}
</style>
<h4 class="titletest">网页导航</h4>
<ul style="background: #a0a0a0;">
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29t">百度<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvYmFvLmNvbQ==">淘宝<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cuamQuY29t">京东<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cudG1hbGwuY29t">天猫<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</div>
<hr>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 5</title>
    <url>/2023/03/23/1/</url>
    <content><![CDATA[<h2 id="内外边距以及div居中">内外边距以及div居中</h2>
<p>外边距是元素的外部边界与外部边界之间的距离。外边距是透明的，不会影响元素的背景色。</p>
<p>内边距是元素的边界与内容之间的距离。内边距是透明的，不会影响元素的背景色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>; <span class="comment">/* 上下左右都是10px margin: 0 auto; 可以实现居中*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>; <span class="comment">/* 上右下左 顺时针*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="盒子模型的计算方式">盒子模型的计算方式</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>width = content + padding-left + padding-right + border-left + border-right</p>
</li>
<li class="lvl-2">
<p>height = content + padding-top + padding-bottom + border-top + border-bottom</p>
</li>
<li class="lvl-2">
<p>盒子的实际大小 = content</p>
</li>
<li class="lvl-2">
<p>盒子占据的空间 = 外边距 + content</p>
</li>
</ul>
<hr>
<h2 id="圆角边框">圆角边框</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4081</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>; <span class="comment">/* 圆角 */</span></span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>; <span class="comment">/* 左上角 */</span></span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>; <span class="comment">/* 右上角 */</span></span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>; <span class="comment">/* 左下角 */</span></span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>; <span class="comment">/* 右下角 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g">e.g</h3>
<style>
    #box2 {
        width: 100px;
        height: 100px;
        background-color: #ff4081;
        border: 1px solid #000;
        border-radius: 10px 20px 30px 40px; /* 圆角 */
    }
</style>
<div id="box2" style="color: #fff"><span>hello</span></div>
<hr>
<h3 id="应用场景">应用场景</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>圆形头像</p>
</li>
</ul>
<style>
    #radius-avatar1 {
        width: 100px;
        height: 100px;
        border-radius: 50%;
    }
    #radius-avatar2 {
        width: 100px;
        height: 100px;
        border-radius: 30%;
    }
</style>
<img id="radius-avatar1" src="./CSS-Journey-5/images/avatar.png" alt="avatar border-radius: 50%">
<img id="radius-avatar2" src="./CSS-Journey-5/images/avatar.png" alt="avatar border-radius: 30%">
<h2 id="盒子阴影">盒子阴影</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#009688</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#000</span>; <span class="comment">/* 水平偏移量 垂直偏移量 模糊半径 阴影颜色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g-2">e.g</h3>
<style>
    #box3 {
        width: 100px;
        height: 100px;
        background-color: #009688;
        box-shadow: 10px 10px 5px #000; /* 水平偏移量 垂直偏移量 模糊半径 阴影颜色 */
    }
</style>
<div id="box3"><span style="color: #fff">hello</span></div>
<h3 id="应用场景-2">应用场景</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>3D效果</p>
</li>
</ul>
<style>
    #box4 {
        width: 100px;
        height: 100px;
        background-color: #009688;
        box-shadow: 5px 5px 50px yellow; /* 水平偏移量 垂直偏移量 模糊半径 阴影颜色 */
        border-radius: 50%;
    }
</style>
<img id="box4" src="./CSS-Journey-5/images/avatar.png" alt="avatar border-radius: 50%">
<hr>
<p>推荐网站：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9pY2Uud29yay8=">飞冰<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04=">Element<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2luZGV4LWNu">Ant Design<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv">Vue<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="display和浮动">display和浮动</h2>
<h3 id="display">display</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box5</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4081</span>;</span><br><span class="line">    <span class="attribute">display</span>: none; <span class="comment">/* 隐藏元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block; <span class="comment">/* 块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: inline; <span class="comment">/* 行内元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block; <span class="comment">/* 行内块级元素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浮动">浮动</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box6</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4081</span>;</span><br><span class="line">    <span class="attribute">float</span>: left; <span class="comment">/* 左浮动 */</span></span><br><span class="line">    <span class="attribute">float</span>: right; <span class="comment">/* 右浮动 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="e-g-3">e.g</h4>
<style>
    #box5 {
        width: 100px;
        height: 100px;
        background-color: #ff4081;
        display: inline-block;
    }
    #box6 {
        width: 100px;
        height: 100px;
        background-color: #ff4081;
        float: right;
    }
</style>
<div id="box5"><span style="color: #fff">hello</span></div>
<div id="box6"><span style="color: #fff">world</span></div>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅</title>
    <url>/2023/03/11/1/</url>
    <content><![CDATA[<h2 id="什么是CSS">什么是CSS</h2>
<p>CSS （Cascading Style Sheets，层叠样式表）是一种用来描述HTML元素样式的语言，它可以控制元素的字体、颜色、大小、位置等等。CSS是一种层叠样式表，它可以对同一个元素设置多个样式，而且后面的样式会覆盖前面的样式。CSS的样式可以通过内联、内部和外部三种方式来设置。</p>
<h2 id="CSS的发展史">CSS的发展史</h2>
<p>CSS的发展史可以分为三个阶段：CSS1、CSS2和CSS3。CSS1。1996年发布的，CSS2。1998年发布的，CSS3。2007年发布的。CSS3的发展速度比CSS1和CSS2都要快，CSS3的标准还在不断的更新中。CSS3的标准分为CSS3模块、CSS3选择器、CSS3背景和边框、CSS3文本效果、CSS3字体、CSS3颜色、CSS3盒模型、CSS3多列布局、CSS3视觉效果、CSS3动画、CSS3媒体查询、CSS3用户界面等模块。</p>
<blockquote>
<p>CSS1.0 1996年发布。<br>
CSS2.0 DIV+CSS布局的兼容性问题,HTML与CSS结构分离的优点，网页变得简。<br>
CSS2.1 添加了浮动、定位等。<br>
CSS3.0 3D转换、多列布局、多背景、边框图片、圆角、阴影、渐变、过渡、动画、媒体查询等</p>
</blockquote>
<h2 id="CSS快速入">CSS快速入</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 规范。&lt;style&gt;标签可以编写CSS样式，每一个声明都是由一个属性和一个值组成，属性和值之间用冒号分隔，每个声明之间用分号分隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择器 &#123; 属性: 值; &#125; */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="存在于HTML文档中的CSS样式称为内联样式">存在于HTML文档中的CSS样式称为内联样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内联样式，通过style属性来设置元素的样。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Style标签内是CSS样式,CSS使用/**/注释</p>
</blockquote>
<p>e.g.</p>
<h4 style="color: red;">Hello World</h4>
<hr>
<h3 id="单独引入CSS文件-通过link标签来引入外部的CSS文件">单独引入CSS文件,通过link标签来引入外部的CSS文件</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部样式，通过link标签来引入外部的CSS文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单独引入CSS文件的优">单独引入CSS文件的优</h4>
<ol>
<li class="lvl-3">
<p>可以让HTML文档和CSS样式分离，让HTML文档更加简洁。</p>
</li>
<li class="lvl-3">
<p>可以让多个HTML文档共享同一个CSS样式文件。</p>
</li>
<li class="lvl-3">
<p>可以让CSS样式文件在不同的HTML文档中重复使用。</p>
</li>
</ol>
<h2 id="4种导入CSS样式的方">4种导入CSS样式的方</h2>
<h3 id="1-行内样式">1. 行内样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>行内样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>行内样式比较方便，但是不推荐使用，因为它会让HTML文档变得臃肿，不利于维护。</p>
</blockquote>
<h3 id="2-内部样式">2. 内部样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>内部样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-外部样式">3. 外部样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-导入样式">4. 导入样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>导入样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@import</span> url(<span class="string">&quot;style.css&quot;</span>);</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>导入样式的优点是可以让多个HTML文档共享同一个CSS样式文件，由CSS2.1引入，但是它的缺点是不支持IE5和IE5以下的浏览器。并且不利于网页渲染。</p>
</blockquote>
<h3 id="4种导入CSS样式的优先级">4种导入CSS样式的优先级</h3>
<p>行内样式 &gt; 内部样式 &gt; 外部样式 &gt; 导入样式</p>
<p>CSS优先级遵循就近原则，如果有多个样式同时作用于同一个元素，那么就近原则会决定哪个样式生效。</p>
<h2 id="CSS选择器">CSS选择器</h2>
<p>CSS选择器是用来选择HTML元素的，CSS选择器可以通过元素名称、类名、ID来选择HTML元素。CSS选择器可以通过标签选择器、类选择器、ID选择器、通配符选择器、后代选择器、子选择器、相邻兄弟选择器、通用兄弟选择器等来选择HTML元素。</p>
<h3 id="标签选择器">标签选择器</h3>
<blockquote>
<p>标签选择器是最常用的选择器，它可以通过标签名称来选择HTML元素。</p>
</blockquote>
<p>标签选择器会匹配所有的这个标签的HTML元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="类选择器">类选择器</h3>
<blockquote>
<p>类选择器是通过class属性来选择HTML元素的，类选择器可以通过一个或多个类名来选择HTML元素。</p>
</blockquote>
<p>类选择器会匹配所有的这个类名的HTML元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ID选择器">ID选择器</h3>
<blockquote>
<p>ID选择器是通过id属性来选择HTML元素的，ID选择器只能通过一个ID名来选择HTML元素。</p>
</blockquote>
<p>ID选择器只会匹配这个ID名的HTML元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>ID选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="选择器的优先">选择器的优先</h3>
<p>ID选择器 &gt; 类选择器 &gt; 标签选择器</p>
<p>参考视频：</p>
<iframe class="video-frame" src="//player.bilibili.com/player.html?aid=81109044&cid=138808880&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 6</title>
    <url>/2023/03/26/1/</url>
    <content><![CDATA[<h2 id="overflow以及父级边框塌陷问题">overflow以及父级边框塌陷问题</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clear</span>: both; //清除浮动</span><br><span class="line"><span class="attribute">clear</span>: left; //清除左浮动</span><br><span class="line"><span class="attribute">clear</span>: right; //清除右浮动</span><br><span class="line"><span class="attribute">clear</span>: none; //默认值，不清除浮动</span><br><span class="line"><span class="attribute">overflow</span>: hidden; //隐藏溢出的内容</span><br><span class="line"><span class="attribute">overflow</span>: auto; //自动出现滚动条</span><br><span class="line"><span class="attribute">overflow</span>: scroll; //强制出现滚动条</span><br><span class="line"><span class="attribute">overflow</span>: visible; //默认值，内容不会被修剪，会呈现在元素框之外</span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span>: inline-block; //使元素呈现为行内块元素</span><br><span class="line"><span class="attribute">display</span>: block; //使元素呈现为块级元素</span><br><span class="line"><span class="attribute">display</span>: inline; //使元素呈现为行内元素</span><br><span class="line"><span class="attribute">display</span>: none; //使元素不可见</span><br><span class="line"></span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>; //用于生成内容</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>浮动元素后加空div清除浮动</p>
</li>
<li class="lvl-3">
<p>父级元素加overflow(不推荐)</p>
</li>
<li class="lvl-3">
<p>设置父级元素的高度</p>
</li>
<li class="lvl-3">
<p>父级元素加伪元素(推荐)</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="定位">定位</h2>
<h3 id="相对定位">相对定位</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: relative; //相对定位</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>; //向下偏移<span class="number">10px</span></span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">10px</span>; //向上偏移<span class="number">10px</span></span><br><span class="line"><span class="attribute">left</span>: <span class="number">10px</span>; //向右偏移<span class="number">10px</span></span><br><span class="line"><span class="attribute">right</span>: <span class="number">10px</span>; //向左偏移<span class="number">10px</span></span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#first</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#second</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#third</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>third<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<style>
# boxtest1 {
    width: 100px;
    height: 100px;
    background-color: black;
    position: relative;
    top: 10px;
    left: 10px;
    margin: 10px;
    padding: 5px;
    line-height: 25px;
    color: white;
    text-align: center;
}
# first {
    border: 1px solid red;
}
# second {
    border: 1px solid blue;
}
# third {
    border: 1px solid green;
}
</style>
<div id="boxtest1">
<div id="first">first</div>
<div id="second">second</div>
<div id="third">third</div>
</div>
<hr>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest2</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ffa1f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa2</span>,<span class="selector-class">.testa4</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa5</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa2&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.taobao.com&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa3&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jd.com&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa4&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.tmall.com&quot;</span>&gt;</span>天猫<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa5&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div hidden>hexo会错误加载带链接a标签的style，故用图片展示</div>
<div style="margin: 0 auto">
<img src="./CSS-Journey-6/images/01.png" alt="效果图" width="30%">
</div>
<hr>
<h3 id="绝对定位">绝对定位</h3>
<p>没有设置定位的元素，相对于浏览器的左上角进行定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute; //绝对定位</span><br></pre></td></tr></table></figure>
<h3 id="固定定位">固定定位</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: fixed; //固定定位</span><br></pre></td></tr></table></figure>
<h3 id="层叠定位">层叠定位</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: static; //层叠定位</span><br></pre></td></tr></table></figure>
<h3 id="Z-index">Z-index</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>; //<span class="attribute">z-index</span>值越大，层级越高</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest3</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ffa1f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest3</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa15</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa16</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa15&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">&quot;testa16&quot;</span> &gt;</span>ACG<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<style>
# boxtest3 {
    width: 100px;
    height: 100px;
    border: 2px solid red;
    background-color: white;
    position: relative;
    top: 10px;
    left: 10px;
    margin: 10px;
    padding: 5px;
    line-height: 30px;
    color: white;
    text-align: center;
}
# boxtest3 a {
    display: block;
    width: 100px;
    height: 100px;
    background-color: #ffa1f2;
    line-height: 100px;
    text-align: center;
    text-decoration: none;
    color: white;
}
# boxtest3 a:hover {
    background-color: #47a4ff;
}
.testa15 {
    position: relative;
}
.testa16 {
    position: relative;
    top: -30px;
    z-index: 1;
    color: white;
    background-color: #47a4ff;
}
</style>
<div id="boxtest3">
    <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29t">哔哩哔哩<i class="fa fa-external-link-alt"></i></span>
    <dt class="testa16">ACG</dt>
</div>
<hr>
<h3 id="透明度">透明度</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: <span class="number">0.5</span>; //透明度</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest4</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest4</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ffa1f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest4</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<style>
# boxtest4 {
    width: 100px;
    height: 100px;
    border: 2px solid red;
    background-color: white;
    position: relative;
    top: 10px;
    left: 10px;
    margin: 10px;
    padding: 5px;
    line-height: 30px;
    color: white;
    text-align: center;
}
# boxtest4 a {
    display: block;
    width: 100px;
    height: 100px;
    background-color: #ffa1f2;
    line-height: 100px;
    text-align: center;
    text-decoration: none;
    color: white;
}
# boxtest4 a:hover {
    background-color: #47a4ff;
    opacity: 0.5;
}
</style>
<div id="boxtest4">
    <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29t">哔哩哔哩<i class="fa fa-external-link-alt"></i></span>
</div>
<hr>
<h2 id="CSS-动画">CSS 动画</h2>
<p>对于CSS动画，我们更倾向于使用JavaScript来实现，但是CSS动画也是有其优势的，比如说，当我们需要实现一个简单的动画效果，而且不需要太多的交互，那么CSS动画就是一个不错的选择。<br>对于初学者而言，我们一般会选择使用现成的css动画库，比如说animate.css，这个库里面包含了很多常用的动画效果，我们可以直接使用，而不需要自己去写css动画。</p>
<h2 id="CSS之旅到此结束">CSS之旅到此结束</h2>
<p>CSS之旅到此结束，我们已经学习了CSS的基础知识，以及CSS的一些高级知识，希望大家能够坚持下去，继续学习JavaScript，加油！</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 动画专题(下)</title>
    <url>/2023/10/19/2/</url>
    <content><![CDATA[<div class="note warning"><p>如果看不见内嵌网页或者连接错误，请刷新。</p>
</div>
<h2 id="transform3D">transform3D</h2>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1mdW5jdGlvbi90cmFuc2xhdGUzZA==">translate3d()<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>常用函数</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>translate3d(x, y, z)</td>
<td>定义 3D 转换，元素从当前位置移动到 (x,y,z)。</td>
</tr>
<tr>
<td>translateX(x)</td>
<td>定义 3D 转换，元素从当前位置水平移动到 x。</td>
</tr>
<tr>
<td>translateY(y)</td>
<td>定义 3D 转换，元素从当前位置垂直移动到 y。</td>
</tr>
<tr>
<td>translateZ(z)</td>
<td>定义 3D 转换，元素从当前位置移动到 z。</td>
</tr>
<tr>
<td>rotate3d(x, y, z, angle)</td>
<td>定义 3D 转换，元素围绕 (x,y,z) 轴移动到 angle。</td>
</tr>
<tr>
<td>rotateX(angle)</td>
<td>定义 3D 转换，元素围绕 x 轴移动到 angle。</td>
</tr>
<tr>
<td>rotateY(angle)</td>
<td>定义 3D 转换，元素围绕 y 轴移动到 angle。</td>
</tr>
<tr>
<td>rotateZ(angle)</td>
<td>定义 3D 转换，元素围绕 z 轴移动到 angle。</td>
</tr>
<tr>
<td>scale3d(x, y, z)</td>
<td>定义 3D 缩放转换，元素从当前尺寸缩放到 (x,y,z)。</td>
</tr>
<tr>
<td>scaleX(x)</td>
<td>定义 3D 缩放转换，元素从当前尺寸水平缩放到 x。</td>
</tr>
<tr>
<td>scaleY(y)</td>
<td>定义 3D 缩放转换，元素从当前尺寸垂直缩放到 y。</td>
</tr>
<tr>
<td>scaleZ(z)</td>
<td>定义 3D 缩放转换，元素从当前尺寸缩放到 z。</td>
</tr>
<tr>
<td>perspective(n)</td>
<td>为 3D 转换元素定义透视视图。</td>
</tr>
</tbody>
</table>
<p>从上表可以看出，3D 转换的函数和 2D 转换的函数是一样的，只是多了一个 z 轴的参数。<br>
<code>transform3D</code> 主要是 3 个参数：<code>translate3d</code>、<code>rotate3d</code>、<code>scale3d</code>。</p>
<p>e.g. 1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform3D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.translate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.rotate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.scale</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;translate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rotate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scale&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g. 2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform3D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: brown solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 放大 1.5 倍 */</span></span></span><br><span class="line"><span class="language-css">                <span class="comment">/*transform: scale3d(1.5, 1.5, 1.5);*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">100px</span>) <span class="built_in">scale3d</span>(<span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*内容旋转 1 周*/</span></span></span><br><span class="line"><span class="language-css">                <span class="comment">/*transform: rotate3d(1, 1, 1, 360deg);*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">100px</span>) <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>Soyo sann ❤️ Love!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="300px" height="350px" frameborder="0" scrolling="0" src="./html/transform3d.html"></iframe>
<p style="color: red">warn:<span style="color: white">如果看不见内嵌网页或者连接错误，请刷新。</span></p>
<p>通过上面这个例子，可以看出，3D 转换的函数和 2D 转换的函数是一样的，只是多了一个 z 轴的参数。</p>
<hr>
<h2 id="过渡属性">过渡属性</h2>
<p>过渡是元素从一种样式逐渐改变为另一种样式的效果。</p>
<ol>
<li class="lvl-3">
<p>指定四个要素</p>
<ol>
<li class="lvl-7">过渡属性，如 <code>background</code>、<code>width</code>、<code>height</code>、<code>color</code> 等等</li>
<li class="lvl-7">过渡时间，如 <code>1s</code>、<code>2s</code> 等等</li>
<li class="lvl-7">过渡函数，如 <code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code>、<code>ease-in-out</code> 等等</li>
<li class="lvl-7">延迟时间，如 <code>1s</code>、<code>2s</code> 等等</li>
</ol>
</li>
<li class="lvl-3">
<p>触发过渡通过用户的行为触发过渡，如 <code>:hover</code>、<code>:active</code>、<code>:focus</code> 等等</p>
</li>
</ol>
<blockquote>
<p>transition-property</p>
</blockquote>
<p><code>transition-property</code> 属性用于设置过渡效果的 CSS 属性的名称。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>: none|all|property;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>none：默认值，没有属性会获得过渡效果</p>
</li>
<li class="lvl-2">
<p>all：所有属性都将获得过渡效果</p>
</li>
<li class="lvl-2">
<p>property：定义应用过渡效果的 CSS 属性的名称列表</p>
</li>
</ul>
<blockquote>
<p>transition-duration</p>
</blockquote>
<p><code>transition-duration</code> 属性用于设置过渡效果的持续时间。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-duration</span>: time;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>time：必需，规定完成过渡效果需要花费的时间，以秒或毫秒计</p>
</li>
</ul>
<blockquote>
<p>transition-timing-function</p>
</blockquote>
<p><code>transition-timing-function</code> 属性用于设置过渡效果的速度曲线。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-timing-function</span>: linear|ease|ease-in|ease-out|ease-in-out|<span class="built_in">cubic-bezier</span>(n,n,n,n)|step-start|step-end|<span class="built_in">steps</span>(int,start|end)|initial|inherit;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>linear：默认值，规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）</p>
</li>
<li class="lvl-2">
<p>ease：规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）</p>
</li>
<li class="lvl-2">
<p>ease-in：规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）</p>
</li>
<li class="lvl-2">
<p>ease-out：规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）</p>
</li>
<li class="lvl-2">
<p>ease-in-out：规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）</p>
</li>
<li class="lvl-2">
<p>cubic-bezier(n,n,n,n)：在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值</p>
</li>
<li class="lvl-2">
<p>step-start：规定在开始时立即过渡到目标值，没有过渡效果（等于 steps(1,start)）</p>
</li>
<li class="lvl-2">
<p>step-end：规定在结束时立即过渡到目标值，没有过渡效果（等于 steps(1,end)）</p>
</li>
<li class="lvl-2">
<p>steps(int,start|end)：规定在指定的百分比处发生指定的过渡效果。可能的值是 0 至 1 之间的数值，以及 start 和 end</p>
</li>
<li class="lvl-2">
<p>initial：设置该属性为它的默认值</p>
</li>
<li class="lvl-2">
<p>inherit：从父元素继承该属性</p>
</li>
</ul>
<blockquote>
<p>transition-delay</p>
</blockquote>
<p><code>transition-delay</code> 属性用于设置过渡效果的延迟时间。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-delay</span>: time;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>time：必需，规定过渡效果何时开始，以秒或毫秒计</p>
</li>
</ul>
<hr>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transition<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*transition: all 1s;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡属性*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-property</span>: width, height, background-color, font-size, color;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡时间*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡函数*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-timing-function</span>: ease-in-out;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡延迟*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: royalblue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Soyo sann ❤️ Love!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="100%" height="400px" frameborder="0" scrolling="0" src="./html/transition.html"></iframe>
<p style="color: red">warn:<span style="color: white">如果看不见内嵌网页或者连接错误，请刷新。</span></p>
<hr>
<p>我们还可以使用 <code>transition</code> 属性来简写上面的代码。</p>
<p>比如<code>transition: width 1s ease-in-out 1s, height 1s ease-in-out 1s, background-color 1s ease-in-out 1s, font-size 1s ease-in-out 1s, color 1s ease-in-out 1s;</code>。</p>
<p>如果不需要精准控制，可以使用 <code>all</code> 来简写，比如 <code>transition: all 1s ease-in-out 1s;</code>。</p>
<h2 id="动画-Animation">动画 Animation</h2>
<p>过渡属性只能实现简单的动画效果，如果需要实现复杂的动画效果，就需要使用动画属性了。</p>
<p><code>animation</code> 属性用于设置动画效果。通过<mark>关键帧</mark>控制动画的每一步，通过<mark>动画属性</mark>控制动画的播放方式。</p>
<blockquote>
<p>@keyframes</p>
</blockquote>
<p><code>@keyframes</code> 规则用于创建动画。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> animationname &#123;</span><br><span class="line">    keyframes-selector &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name &#123;</span><br><span class="line">    <span class="selector-tag">from</span>|<span class="number">0%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">75%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>|<span class="number">100%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>animation 属性</p>
</blockquote>
<p><code>animation</code> 属性用于设置动画效果。</p>
<p>调用 <code>@keyframes</code> 规则中定义的动画。设置动画的持续时间、速度曲线、延迟等等。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: name duration timing-function delay iteration-count direction;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>name：必需，规定需要绑定到选择器的 keyframe 名称</p>
</li>
<li class="lvl-2">
<p>duration：必需，规定完成动画所花费的时间，以秒或毫秒计</p>
</li>
<li class="lvl-2">
<p>timing-function：可选，规定动画的速度曲线，默认是 <code>ease</code></p>
</li>
<li class="lvl-2">
<p>delay：可选，规定在动画开始之前的延迟，默认是 <code>0</code></p>
</li>
<li class="lvl-2">
<p>iteration-count：可选，规定动画应该播放的次数，默认是 <code>1</code></p>
</li>
<li class="lvl-2">
<p>direction：可选，规定是否应该轮流反向播放动画，默认是 <code>normal</code></p>
</li>
</ul>
<hr>
<p>e.g. banner 轮播图</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Banner<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#banner</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*display: flex;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: center;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*align-items: center;*/</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: move <span class="number">12s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: move <span class="number">12s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">6s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">8s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">20%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">80%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_tomori.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tomori&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_anon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;anon&quot;</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_rana.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;rana&quot;</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_soyo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;soyo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_taki.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;taki&quot;</span> <span class="attr">id</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="./html/animation.html" target="_blank">点击查看效果</a></p>
<p style="color: red">warn:<span style="color: white">如果看不见内嵌网页或者连接错误，请刷新。</span></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 动画专题(上)</title>
    <url>/2023/10/19/1/</url>
    <content><![CDATA[<div class="note warning"><p>如果看不见内嵌网页或者连接错误，请刷新。</p>
</div>
<h2 id="浏览器私有前缀">浏览器私有前缀</h2>
<p>CSS3 新特性在实现时，由于不同浏览器的实现方式不同，所以会出现兼容性问题。为了解决这个问题，浏览器厂商会在实现新特性时，加上浏览器私有前缀，以示区别。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-webkit-：谷歌、Safari、iOS、Android</p>
</li>
<li class="lvl-2">
<p>-moz-：Firefox</p>
</li>
<li class="lvl-2">
<p>-ms-：IE</p>
</li>
<li class="lvl-2">
<p>-o-：Opera</p>
</li>
</ul>
<p>要使用一些实验性质的 CSS3 属性，需要加上浏览器私有前缀，比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个只是为了演示，实际上如今的浏览器都已经支持 <code>border-radius</code> 属性了，所以不需要加上浏览器私有前缀。</p>
<p>为了用户体验与兼容性，有时我们会使用上面这种写法，即先写上浏览器私有前缀，再写上标准写法，这样即使浏览器支持标准写法，也会优先使用标准写法，而不是浏览器私有前缀。</p>
<p>如果需要查询某个属性是否需要加上浏览器私有前缀，可以访问 <span class="exturl" data-url="aHR0cHM6Ly9jYW5pdXNlLmNvbS8=">caniuse<i class="fa fa-external-link-alt"></i></span> 网站。</p>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="selector-tag">text</span>-<span class="attribute">stroke</span>: <span class="number">1px</span> pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Soyo sann ❤️ Love!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div style="font-size: 25px; -webkit-text-stroke: 1px pink;">Soyo sann ❤️ Love!</div>
<p hidden>使用行内样式是不优雅的，但是这是为了 markdown 方便书写</p>
---
<h2 id="圆角边框">圆角边框</h2>
<p><code>border-radius</code> 属性用于设置元素的圆角边框。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>; // 设置四个角的圆角半径</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span>; // 设置左上角和右下角的圆角半径</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>; // 设置左上角、右上角和右下角的圆角半径</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>; // 设置左上角、右上角、右下角和左下角的圆角半径</span><br></pre></td></tr></table></figure>
<p>规律：顺时针方向，左上角开始，分别设置四个角的圆角半径。</p>
<h2 id="阴影">阴影</h2>
<blockquote>
<p>盒子阴影</p>
</blockquote>
<p><code>box-shadow</code> 属性用于设置元素的阴影。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>h-shadow：必需，水平阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>v-shadow：必需，垂直阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>blur：可选，模糊距离</p>
</li>
<li class="lvl-2">
<p>spread：可选，阴影的尺寸</p>
</li>
<li class="lvl-2">
<p>color：可选，阴影的颜色</p>
</li>
<li class="lvl-2">
<p>inset：可选，将外部阴影（outset）改为内部阴影</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="width: 200px; height: 200px; background-color: pink; box-shadow: 10px 10px 10px 10px #000;"></div>
<hr>
<blockquote>
<p>文本阴影</p>
</blockquote>
<p><code>text-shadow</code> 属性用于设置文本的阴影。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>h-shadow：必需，水平阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>v-shadow：必需，垂直阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>blur：可选，模糊距离</p>
</li>
<li class="lvl-2">
<p>color：可选，阴影的颜色</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="font-size: 25px; text-shadow: 10px 10px 10px brown;">Soyo sann ❤️ Love!</div>
<p>文本阴影可以多次叠加，实现更加丰富的效果。具体使用时使用逗号分隔即可。</p>
<h2 id="渐变-Gradients">渐变 Gradients</h2>
<blockquote>
<p>线性渐变</p>
</blockquote>
<p><code>linear-gradient()</code> 函数用于设置线性渐变。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">linear-gradient(<span class="attribute">direction</span>, <span class="attribute">color</span>-stop1, <span class="attribute">color</span>-stop2, ...);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>direction：必需，渐变的方向，可以是角度值或者关键字，比如 <code>to left</code>、<code>to right</code>、<code>to top</code>、<code>to bottom</code>、<code>to left top</code>、<code>to right bottom</code> 等等</p>
</li>
<li class="lvl-2">
<p>color-stop：必需，渐变的起始颜色和结束颜色，可以是颜色值或者关键字，比如 <code>red</code>、<code>#000</code>、<code>rgb(0, 0, 0)</code>、<code>transparent</code> 等等</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, red, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="width: 200px; height: 200px; background-image: linear-gradient(to right, red, yellow);"></div>
<hr>
<blockquote>
<p>径向渐变</p>
</blockquote>
<p><code>radial-gradient()</code> 函数用于设置径向渐变。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">radial-gradient(shape size at <span class="attribute">position</span>, start-<span class="attribute">color</span>, ..., last-<span class="attribute">color</span>);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>shape：可选，渐变的形状，可以是 <code>circle</code> 或者 <code>ellipse</code>，默认是 <code>ellipse</code></p>
</li>
<li class="lvl-2">
<p>size：可选，渐变的大小，可以是 <code>closest-side</code>、<code>closest-corner</code>、<code>farthest-side</code>、<code>farthest-corner</code>，默认是 <code>farthest-corner</code></p>
</li>
<li class="lvl-2">
<p>at position：可选，渐变的位置，可以是 <code>center</code>、<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>，也可以是像素值或者百分比值，比如 <code>10px 20px</code>、<code>10% 20%</code> 等等</p>
</li>
<li class="lvl-2">
<p>start-color：必需，渐变的起始颜色</p>
</li>
<li class="lvl-2">
<p>last-color：可选，渐变的结束颜色</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle, red, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="width: 200px; height: 200px; background-image: radial-gradient(circle, red, yellow);"></div>
<hr>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JhYmllbnQuY29tLw==">Grabient<i class="fa fa-external-link-alt"></i></span> 网站可以在线生成渐变色。</p>
<h2 id="价格选项卡">价格选项卡</h2>
<details>
<summary>点击查看代码</summary>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span> <span class="selector-tag">li</span><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content active&quot;</span>&gt;</span>Content1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;---&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// $(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     $(&#x27;.tab li&#x27;).click(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         $(this).addClass(&#x27;active&#x27;).siblings().removeClass(&#x27;active&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         var index = $(this).index();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         $(&#x27;.content&#x27;).eq(index).addClass(&#x27;active&#x27;).siblings().removeClass(&#x27;active&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#125;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tabs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.tab li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> contents = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            tabs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">tab, index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                tab.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    tabs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">tab</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        tab.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    contents.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">content</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        content.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    contents[index].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="100%" height="300px" frameborder="0" scrolling="0" src="./html/optionalTab.html"></iframe>
</details>
<hr>
<h2 id="transform2D">transform2D</h2>
<blockquote>
<p>位移</p>
</blockquote>
<p><code>translate()</code> 函数用于设置元素的位移。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">translate</span>(<span class="attribute">x</span>, <span class="attribute">y</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>旋转</p>
</blockquote>
<p><code>rotate()</code> 函数用于设置元素的旋转。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rotate</span>(angle);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缩放</p>
</blockquote>
<p><code>scale()</code> 函数用于设置元素的缩放。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scale</span>(<span class="attribute">x</span>, <span class="attribute">y</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>倾斜</p>
</blockquote>
<p><code>skew()</code> 函数用于设置元素的倾斜。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">skew(<span class="attribute">x</span>-angle, <span class="attribute">y</span>-angle);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>矩阵</p>
</blockquote>
<p><code>matrix()</code> 函数用于设置元素的变形。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">matrix(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c, d, e, f);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>a：必需，水平缩放</p>
</li>
<li class="lvl-2">
<p>b：必需，水平倾斜</p>
</li>
<li class="lvl-2">
<p>c：必需，垂直倾斜</p>
</li>
<li class="lvl-2">
<p>d：必需，垂直缩放</p>
</li>
<li class="lvl-2">
<p>e：必需，水平位移</p>
</li>
<li class="lvl-2">
<p>f：必需，垂直位移</p>
</li>
</ul>
<hr>
<p>e.g. 1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform2D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.translate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.rotate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.scale</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.skew</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>, <span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.matrix</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">matrix</span>(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;translate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rotate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scale&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skew&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;matrix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g. 2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform2D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: brown solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 放大 1.5 倍 */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*内容旋转 1 周*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>Soyo sann ❤️ Love!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="300px" height="350px" frameborder="0" scrolling="0" src="./html/transform2d.html"></iframe>
<p><code>rotate</code> 和 <code>scale</code> 会覆盖 <code>translate</code>。并且，它们不能在同一个 <code>transform</code> 中，需要分开写。所以上面这个例子中，在第一个 <code>&lt;div id=&quot;box1&quot;&gt;</code> 中，使用了 <code>scale</code>;<br>
在第二个 <code>&lt;div id=&quot;box2&quot;&gt;</code> 中，使用了 <code>rotate</code>。这样就能实现鼠标悬停时，放大 1.5 倍，且旋转 1 周的效果了。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>⟪天使な小生意気⟫ 专题现已推出！</title>
    <url>/2024/03/26/1/</url>
    <content><![CDATA[<h2 id="专题现已推出">专题现已推出</h2>
<p>这部让我感触颇深的作品，我为此专门开设了一个专题！</p>
<div class="note default"><p><a href="/html/application/a-cheeky-angel/">点击这里查看专题</a></p>
</div>
<p><img src="./Tenshinakonamaiki.webp" alt></p>
<hr>
<h2 id="更新">更新</h2>
<p>3.15 更新</p>
<p>基本路由和页面的搭建资源页面的搭建</p>
<p>3.18 更新</p>
<p>Markdown 查看实现</p>
<p>3.22 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>概要</p>
</li>
<li class="lvl-2">
<p>问题</p>
</li>
</ul>
<p>3.23 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>关于</p>
</li>
<li class="lvl-2">
<p>评论01</p>
</li>
<li class="lvl-2">
<p>评论03</p>
</li>
</ul>
<p>更新 Markdown 的查看</p>
<p>3.26 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>评论02</p>
</li>
<li class="lvl-2">
<p>名场面以及伏笔01</p>
</li>
</ul>
<p>恢复暗色模式下 Markdown 的查看不正常的问题</p>
<p>3.31 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔02</p>
</li>
</ul>
<p>更新 MarkdownView 的实现</p>
<p>6.23 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔05</p>
</li>
</ul>
<p>6.24 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔06</p>
</li>
</ul>
<p>11.6 更新</p>
<p>上个月去看的时候，发现这个专题的页面有问题，banner 图片加载不出来，因为这个是从日本一个同人社区直接取的图片，然而那个社区已经关闭了，所以这个图片也就加载不出来了。今天写博客记起这件事，就说明一下。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ほんとにごめんなさい！🥲</p>
</li>
</ul>
<p>24年 终了</p>
<p>25年</p>
<p>1.1 更新</p>
<p>今天想去再翻译几篇文章，结果发现原作者的网站炸了，好在有互联网档案馆，可以找到一些文章的备份</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔07</p>
</li>
<li class="lvl-2">
<p>名场面以及伏笔08</p>
</li>
<li class="lvl-2">
<p>名场面以及伏笔09</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Cisco Packet Tracer 进行组网实验 1</title>
    <url>/2024/11/10/2/</url>
    <content><![CDATA[<h2 id="安装和汉化">安装和汉化</h2>
<ol>
<li class="lvl-3">下载安装包官网下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0YWNhZC5jb20vemgtY24vYWJvdXQvY29udGFjdC11cy9wYWNrZXQtdHJhY2Vy">Cisco Packet Tracer<i class="fa fa-external-link-alt"></i></span></li>
<li class="lvl-3">安装</li>
<li class="lvl-3">汉化</li>
</ol>
<p><img alt="Network Knowledge" src="https://www.netacad.com/sfa-assets/images/svg/netacad_logo_black.svg" decoding="async" width="128" height="128"></p>这个思科的模拟器，我制作了相关汉化<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvQ2lzY28tUGFja2V0LVRyYWNlci1DaGluZXNl">Cisco-Packet-Tracer-Chinese<i class="fa fa-external-link-alt"></i></span>
<p>遵循项目中的 <code>README.md</code> 进行操作即可。</p>
<h2 id="组建对等网">组建对等网</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>2950-24</code> 交换机，两台 <code>PT-PC</code><br>
使用铜直通线连接交换机和电脑</p>
<p><img src="./%E7%BB%84%E5%BB%BA%E5%AF%B9%E7%AD%89%E7%BD%91.png" alt></p>
</li>
<li class="lvl-2">
<p>在配置页面配置 PC IP 地址</p>
<p>分别为192.168.2.1/192.168.2.2/192.168.2.3</p>
</li>
<li class="lvl-2">
<p>ping 测试</p>
<p>在 PC1 中 ping PC2 和 PC3，查看是否能够通信</p>
</li>
</ul>
<p>常见思科交换机命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">config -t <span class="comment"># 进入全局配置模式 -t 表示进入特定模式</span></span><br><span class="line">int f0/1 <span class="comment"># 进入接口配置模式</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出当前模式</span></span><br></pre></td></tr></table></figure>
<h2 id="跨交换机VLAN通信">跨交换机VLAN通信</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>2950-24</code> 交换机，4台 <code>PT-PC</code><br>
<code>PC1</code> 和 <code>PC2</code> 连接到 <code>Switch0</code>，<code>PC3</code> 和 <code>PC4</code> 连接到 <code>Switch1</code><br>
<code>PC</code> 与 <code>Switch</code> 之间使用铜直通线连接<br>
<code>Switch</code> 之间使用交叉线连接</p>
<p><img src="./%E8%B7%A8%E4%BA%A4%E6%8D%A2%E6%9C%BAVLAN%E9%80%9A%E4%BF%A1.png" alt></p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p><code>PC0</code> 为 <code>192.168.2.1</code><br>
<code>PC1</code> 为 <code>192.168.3.1</code><br>
<code>PC2</code> 为 <code>192.168.2.2</code><br>
<code>PC3</code> 为 <code>192.168.3.2</code></p>
</li>
<li class="lvl-2">
<p>ping 测试</p>
<p>在 <code>PC0</code> 中 ping <code>PC1</code> 和 <code>PC2</code>，查看是否能够通信</p>
</li>
<li class="lvl-2">
<p>配置 <code>VLAN</code></p>
<p>两台交换机分别配置 <code>VLAN</code>，并将 <code>PC</code> 分配到不同的 <code>VLAN</code> 中</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access <span class="comment"># 设置端口模式为访问模式</span></span><br><span class="line">switchport access vlan 10 <span class="comment"># 设置端口所属的 VLAN</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置 <code>Trunk</code> 端口</p>
<p>两台交换机之间的连接端口配置为 <code>Trunk</code> 端口</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有没有配置成功可以在图形界面上查看端口</p>
</blockquote>
</li>
<li class="lvl-2">
<p>ping 测试</p>
<p>在 <code>PC0</code> 中 ping <code>PC2</code>，查看是否能够通信在 <code>PC1</code> 中 ping <code>PC3</code>，查看是否能够通信</p>
</li>
<li class="lvl-2">
<p>模拟测试</p>
<p>在 <code>PC0</code> 中使用 <code>ping</code> 命令，在模拟器中查看数据包的传输过程（仅查看 ICMP 以提升效率）</p>
</li>
</ul>
<blockquote>
<p>trunk 端口是用来连接两台交换机的，可以传输多个 VLAN 的数据，而 access 端口只能传输一个 VLAN 的数据。</p>
</blockquote>
<h2 id="路由器和网关">路由器和网关</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置1台 <code>1841-Router</code>，2台 <code>PT-PC</code><br>
<code>PC0</code> 和 <code>PC1</code> 使用铜交叉线连接到 <code>Router</code></p>
<p><img src="./%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E5%85%B3.png" alt></p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
<p>FastEthernet0/0 为 <code>192.168.2.1</code><br>
FastEthernet0/1 为 <code>192.168.3.1</code></p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p><code>PC0</code> 为 <code>192.168.2.2</code><br>
<code>PC1</code> 为 <code>192.168.3.2</code></p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 网关</p>
<p><code>PC0</code> 的网关为 <code>192.168.2.1</code><br>
<code>PC1</code> 的网关为 <code>192.168.3.1</code></p>
</li>
<li class="lvl-2">
<p>ping 测试在 <code>PC0</code> 中 ping <code>PC1</code>，查看是否能够通信</p>
</li>
</ul>
<blockquote>
<p>路由器是用来连接不同网络的设备，可以实现不同网络之间的通信。网关(Gateway)是用来连接不同网络的设备，可以实现不同网络之间的通信。</p>
</blockquote>
<h2 id="单臂路由">单臂路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>2950-24</code> 交换机，两台 <code>PT-PC</code><br>
使用铜直通线连接交换机和电脑</p>
<p><img src="./%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>Switch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
<code>Switch0</code> 的 <code>f0/3</code> 端口连接到 <code>Router0</code> 的 <code>f0/0</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 192.168.1.1/24 网关 192.168.1.2<br>
PC1: 192.168.2.1/24 网关 192.168.2.2</p>
</li>
<li class="lvl-2">
<p>交换机划分 VLAN</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.1</span><br><span class="line">encapsulation dot1Q 10</span><br><span class="line">ip address 192.168.1.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.2</span><br><span class="line">encapsulation dot1Q 20</span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br><span class="line">show ip route</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping</p>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
</li>
</ul>
<h2 id="多层交换机路由">多层交换机路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置两台 <code>PT-PC</code>，1台 <code>3560-24PS</code> 多层交换机使用铜直通线连接交换机和电脑</p>
<p><img src="./%E5%A4%9A%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>MultilayerSwitch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>MultilayerSwitch0</code> 的 <code>f0/2</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 192.168.1.1/24 网关 192.168.1.2<br>
PC1: 192.168.2.1/24 网关 192.168.2.2</p>
</li>
<li class="lvl-2">
<p><code>MultilayerSwitch0</code> 配置</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/1</span><br><span class="line">no switchport</span><br><span class="line">ip address 192.168.1.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">no switchport</span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">show ip route</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping</p>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
</li>
</ul>
<h2 id="静态NAT配置">静态NAT配置</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>1841</code> 路由器，3台 <code>PT-PC</code>，1台 <code>2950-24</code> 交换机使用铜交叉线连接 <code>Router0</code> 和 <code>PC0</code><br>
使用铜直通线连接 <code>Switch0</code> 和 <code>PC1</code>, <code>PC2</code></p>
<p><img src="./%E9%9D%99%E6%80%81NAT%E9%85%8D%E7%BD%AE.png" alt></p>
<p>PC0 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/3</code> 端口<br>
<code>Switch0</code> 的 <code>f0/1</code> 端口连接到 <code>Router0</code> 的 <code>f0/1</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 20.20.20.1 网关 20.20.20.2<br>
PC1: 192.168.2.1 网关 192.168.2.2<br>
PC2: 192.168.3.1 网关 192.168.3.2</p>
</li>
<li class="lvl-2">
<p>交换机划分 VLAN</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode trunk</span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line">int f0/3</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 20.20.20.2</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.1</span><br><span class="line">encapsulation dot1Q 10</span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.2</span><br><span class="line">encapsulation dot1Q 20</span><br><span class="line">ip address 192.168.3.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在路由器配置静态NAT</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int f0/0</span><br><span class="line">ip nat outside</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">ip nat inside</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip nat inside <span class="built_in">source</span> static 192.168.2.1 20.20.20.3</span><br><span class="line">ip nat inside <span class="built_in">source</span> static 192.168.3.1 20.20.20.4</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">show ip nat translations</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>测试</p>
<p>在内网任意一台 <code>PC</code> 上 ping 外网 <code>PC0</code></p>
</li>
</ul>
<h2 id="注意事项1">注意事项1</h2>
<ol>
<li class="lvl-3">
<p>交换机的 <code>Trunk</code> 端口用于连接两台交换机，可以传输多个 <code>VLAN</code> 的数据。</p>
</li>
<li class="lvl-3">
<p>交换机的 <code>Access</code> 端口用于连接 <code>PC</code>，只能传输一个 <code>VLAN</code> 的数据。</p>
</li>
<li class="lvl-3">
<p>通常，路由器的端口默认是关闭的，需要手动打开。</p>
</li>
<li class="lvl-3">
<p>静态路由是在路由器上手动配置的路由，用于指定到达目的网络的下一跳地址。</p>
</li>
<li class="lvl-3">
<p>NAT 配置时，<code>inside</code> 表示内网，<code>outside</code> 表示外网</p>
</li>
<li class="lvl-3">
<p>配置 <code>NAT</code> 时，<code>inside</code> 的 <code>IP</code> 地址是内网 <code>IP</code> 地址，<code>outside</code> 的 <code>IP</code> 地址是外网 <code>IP</code> 地址</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>利用 Cisco Packet Tracer 进行组网实验 2</title>
    <url>/2024/12/21/1/</url>
    <content><![CDATA[<p><a href="/2024/11/10/2/">上文</a></p>
<p>前两个是设计题，后几个是应用题。</p>
<h2 id="配置Serial静态路由">配置Serial静态路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>Router-PT</code>，2台 <code>PT-PC</code><br>
<code>PC0</code> 和 <code>PC1</code> 使用铜交叉线连接到 <code>Router0</code><br>
<code>Router0</code> 和 <code>Router1</code> 使用<code>串行DCE</code>线连接</p>
<p><img src="./%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.png" alt></p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address [IP] [MASK]</span><br><span class="line">no shutdown</span><br></pre></td></tr></table></figure>
<p>路由器0左边配置为192.168.1.0网段</p>
<p>路由器0至路由器1配置为192.168.2.0网段</p>
<p>路由器1右边配置为192.168.3.0网段</p>
<p>路由器0 f0/0 为 <code>192.168.1.1/24</code><br>
路由器0 s2/0 为 <code>192.168.2.1/24</code><br>
路由器1 f0/0 为 <code>192.168.3.1/24</code><br>
路由器1 s2/0 为 <code>192.168.2.2/24</code></p>
</li>
<li class="lvl-2">
<p>使用IP配置工具分别配置PC0和PC1的IP和网关</p>
<p><code>PC0</code> 为 <code>192.168.1.2/24</code> 网关为 <code>192.168.1.1</code><br>
<code>PC1</code> 为 <code>192.168.3.2/24</code> 网关为 <code>192.168.3.1</code></p>
</li>
<li class="lvl-2">
<p>同步串行DCE线的时钟</p>
<p>在路由器与路由器之间使用串行DCE线连接时，需要同步时钟</p>
<p>鼠标指向线两端的三角形，会浮出时钟图标，则该路由器需要配置时钟</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int s2/0</span><br><span class="line">clock rate 64000</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置静态路由</p>
<p>在路由器中配置到达下一跳的路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route [目标网段] [子网掩码] [下一跳地址]</span><br></pre></td></tr></table></figure>
<p>路由器0</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip route 192.168.3.0 255.255.255.0 192.168.2.2</span><br></pre></td></tr></table></figure>
<p>路由器1</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip route 192.168.1.0 255.255.255.0 192.168.2.1</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟通信</p>
<p>在 <code>PC0</code> 中 ping <code>PC1</code>，查看是否能够通信</p>
<p>在模拟器中查看数据包的传输过程</p>
</li>
</ul>
<blockquote>
<p>静态路由是在路由器上手动配置的路由，用于指定到达目的网络的下一跳地址。</p>
</blockquote>
<h2 id="两层交换机路由">两层交换机路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>2960-24</code> 交换机，4台 <code>PT-PC</code>，1台 <code>1841</code> 路由器使用铜直通线连接交换机和电脑以及路由器</p>
<p><img src="./%E4%B8%A4%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>Switch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
PC2 连接到 <code>Switch1</code> 的 <code>f0/1</code> 端口<br>
PC3 连接到 <code>Switch1</code> 的 <code>f0/2</code> 端口<br>
<code>Switch0</code> 的 <code>f0/3</code> 端口连接到 <code>Router0</code> 的 <code>f0/0</code> 端口<br>
<code>Switch1</code> 的 <code>f0/3</code> 端口连接到 <code>Router0</code> 的 <code>f0/1</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 10.0.0.2/8 网关 10.0.0.1<br>
PC1: 20.0.0.2/8 网关 20.0.0.1<br>
PC2: 30.0.0.2/8 网关 30.0.0.1<br>
PC3: 40.0.0.2/8 网关 40.0.0.1</p>
</li>
<li class="lvl-2">
<p><code>Switch0</code> 和 <code>Switch1</code> 划分 VLAN</p>
<p><code>Switch0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
<p><code>Switch1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 30</span><br><span class="line">name vlan30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 40</span><br><span class="line">name vlan40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.1</span><br><span class="line">encapsulation dot1Q 10</span><br><span class="line">ip address 10.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.2</span><br><span class="line">encapsulation dot1Q 20</span><br><span class="line">ip address 20.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.3</span><br><span class="line">encapsulation dot1Q 30</span><br><span class="line">ip address 30.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.4</span><br><span class="line">encapsulation dot1Q 40</span><br><span class="line">ip address 40.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping<br>
PC2 ping<br>
PC3 ping</p>
</li>
</ul>
<h2 id="三层交换机双臂路由">三层交换机双臂路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>2960-24</code> 交换机，4台 <code>PT-PC</code>，1台 <code>3560-24PS</code> 三层交换机使用铜直通线连接交换机和电脑</p>
<p><img src="./%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%8F%8C%E8%87%82%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>Switch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
PC2 连接到 <code>Switch1</code> 的 <code>f0/1</code> 端口<br>
PC3 连接到 <code>Switch1</code> 的 <code>f0/2</code> 端口<br>
<code>Switch0</code> 的 <code>f0/3</code> 端口连接到 <code>MultilayerSwitch0</code> 的 <code>f0/1</code> 端口<br>
<code>Switch1</code> 的 <code>f0/3</code> 端口连接到 <code>MultilayerSwitch0</code> 的 <code>f0/2</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 10.0.0.2/8 网关 10.0.0.1<br>
PC1: 20.0.0.2/8 网关 20.0.0.1<br>
PC2: 30.0.0.2/8 网关 30.0.0.1<br>
PC3: 40.0.0.2/8 网关 40.0.0.1</p>
</li>
<li class="lvl-2">
<p><code>MultilayerSwitch0</code> 划分 VLAN</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 10</span><br><span class="line">ip address 10.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 20</span><br><span class="line">ip address 20.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 30</span><br><span class="line">ip address 30.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 40</span><br><span class="line">ip address 40.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p><code>Switch0</code> 和 <code>Switch1</code> 划分 VLAN</p>
<p><code>Switch0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
<p><code>Switch1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 30</span><br><span class="line">name vlan30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 40</span><br><span class="line">name vlan40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping<br>
PC2 ping<br>
PC3 ping</p>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
</li>
</ul>
<h2 id="自动-DHCP-配置">自动 DHCP 配置</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>PT-Router</code> 路由器，2台 <code>PT-PC</code><br>
使用铜交叉线连接 <code>Router</code> 和 <code>PC</code><br>
使用串行DCE线连接两台 <code>Router</code></p>
<p><img src="./%E8%87%AA%E5%8A%A8DHCP%E9%85%8D%E7%BD%AE.png" alt></p>
<p>PC0 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口<br>
PC1 连接到 <code>Router1</code> 的 <code>f0/0</code> 端口<br>
<code>Router0</code> 的 <code>s2/0</code> 连接到 <code>Router1</code> 的 <code>s2/0</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 172.16.0.1 255.255.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.2 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>DCE 线配置</p>
<p>找到有时钟标记的 <code>Router</code>，在该 <code>Router</code> 上配置 <code>DCE</code> 线</p>
<p><code>Router</code> :</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int s2/0</span><br><span class="line">clock rate 64000</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 之间的路由</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 172.16.0.0 255.255.0.0 192.168.20.2</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 192.168.1.0 255.255.255.0 192.168.20.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip dhcp pool LAN1</span><br><span class="line">network 192.168.1.0 255.255.255.0</span><br><span class="line">default-router 192.168.1.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router1</code> 上配置 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip dhcp pool LAN2</span><br><span class="line">network 172.16.0.0 255.255.0.0</span><br><span class="line">default-router 172.16.0.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>PC 配置</p>
<p>PC0: <code>DHCP</code><br>
PC1: <code>DHCP</code></p>
</li>
<li class="lvl-2">
<p>测试</p>
<p>PC0 ping PC1</p>
</li>
</ul>
<h2 id="中继代理-DHCP-配置">中继代理 DHCP 配置</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>PT-Router</code> 路由器，2台 <code>PT-PC</code><br>
使用铜交叉线连接 <code>Router</code> 和 <code>PC</code><br>
使用串行DCE线连接两台 <code>Router</code></p>
<p><img src="./%E4%B8%AD%E7%BB%A7%E4%BB%A3%E7%90%86DHCP.png" alt></p>
<p>PC0 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口 网段 192.168.1.0<br>
PC1 连接到 <code>Router1</code> 的 <code>f0/0</code> 端口 网段 172.16.0.0<br>
<code>Router0</code> 的 <code>s2/0</code> 连接到 <code>Router1</code> 的 <code>s2/0</code> 端口 网段 192.168.20.0</p>
<p><code>Router0</code> 自动 DHCP 服务，<code>Router1</code> 中继代理 DHCP 服务</p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 172.16.0.1 255.255.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.2 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>DCE 线配置</p>
<p>找到有时钟标记的 <code>Router</code>，在该 <code>Router</code> 上配置 <code>DCE</code> 线</p>
<p><code>Router</code> :</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int s2/0</span><br><span class="line">clock rate 64000</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 之间的路由</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 172.16.0.0 255.255.0.0 192.168.20.2</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 192.168.1.0 255.255.255.0 192.168.20.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip dhcp pool LAN1</span><br><span class="line">network 192.168.1.0 255.255.255.0</span><br><span class="line">default-router 192.168.1.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip dhcp pool LAN2</span><br><span class="line">network 172.16.0.0 255.255.0.0</span><br><span class="line">default-router 172.16.0.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router1</code> 上配置 中继代理 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">service dhcp</span><br><span class="line">int f0/0</span><br><span class="line">ip helper-address 192.168.20.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>ip helper-address</code> 用于将广播的 DHCP 请求转发到指定的 DHCP 服务器</p>
</li>
<li class="lvl-2">
<p>测试</p>
<p>PC0 ping PC1</p>
</li>
</ul>
<h2 id="访问控制列表">访问控制列表</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>1841</code> 路由器，两台 <code>PT-PC</code>，1台 <code>Server-PT</code> 服务器使用铜交叉线连接交换机和电脑以及服务器</p>
<p><img src="./%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8.png" alt><br>
对 <code>Router0</code> 进行改装，增加2个 <code>WIC-1NET</code> 模块，或者 <code>WIC-4ESW</code> 模块，本次使用 <code>WIC-4ESW</code> 模块<br>
PC0 连接到 <code>Router0</code> 的 <code>fa0/0/0</code> 端口<br>
PC1 连接到 <code>Router0</code> 的 <code>fa0/0/1</code> 端口<br>
<code>Server0</code> 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 192.168.2.2/24 网关 192.168.2.1<br>
PC1: 192.168.3.2/24 网关 192.168.3.1<br>
Server0: 192.168.4.2/24 网关 192.168.4.1</p>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0/0</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 10</span><br><span class="line">ip address 192.168.2.1 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 20</span><br><span class="line">ip address 192.168.3.1 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0</span><br><span class="line">ip address 192.168.4.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置拒绝192.168.2.0网段的机子访问服务器。(ftp ping web-server 都不通)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">configure terminal</span><br><span class="line">access-list 101 deny ip 192.168.2.0 0.0.0.255 host 192.168.4.2</span><br><span class="line">access-list 101 permit ip any any</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置禁止192.168.3.0网段的机子访问服务器的HTTP服务(<code>http://192.168.4.2</code>)，其他服务正常(可以 ftp ping)。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">access-list 102 deny tcp 192.168.3.0 0.0.0.255 host 192.168.4.2 eq www</span><br><span class="line">access-list 102 permit ip any any</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 启用访问控制列表</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip access-group 101 out</span><br><span class="line">ip access-group 102 out</span><br></pre></td></tr></table></figure>
<blockquote>
<p>in 表示进入接口，out 表示出接口，服务器在 f0/0 端口，是出接口，是外部访问，所以使用 out</p>
</blockquote>
</li>
<li class="lvl-2">
<p>查看访问控制列表</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show access-list</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
<p>PC0 ping<br>
PC1 ping<br>
PC1 访问 <code>Server0</code> 的 <code>HTTP</code> 服务（使用 Web 浏览器访问 <code>192.168.4.2</code>）</p>
</li>
</ul>
<h2 id="注意事项">注意事项</h2>
<ol>
<li class="lvl-3">
<p>相同设备用交叉线连接，不同设备用直通线连接。比如 <code>PC</code> 和 <code>Router</code> 之间用交叉线连接，<code>Router</code> 之间用直通线连接。PC 和交换机之间用直通线连接。</p>
</li>
<li class="lvl-3">
<p>访问控制列表时，<code>permit</code> 表示允许，<code>deny</code> 表示拒绝</p>
</li>
<li class="lvl-3">
<p>访问控制列表时，<code>in</code> 表示进入接口，<code>out</code> 表示出接口</p>
</li>
<li class="lvl-3">
<p>访问控制列表时，<code>access-list</code> 后面的数字表示访问控制列表的编号</p>
</li>
<li class="lvl-3">
<p>多层交换机路由时，<code>no switchport</code> 表示将端口转换为路由端口</p>
</li>
<li class="lvl-3">
<p>三层交换机双臂路由时，<code>ip routing</code> 表示开启路由功能</p>
</li>
<li class="lvl-3">
<p>路由器的 <code>FastEthernet</code> 端口用于连接 <code>PC</code>，<code>Serial</code> 端口用于连接其他路由器。</p>
</li>
<li class="lvl-3">
<p>在连接两台路由器时，需要使用 <code>DCE</code> 线连接，并且需要配置时钟。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络杂记-01</title>
    <url>/2023/10/26/1/</url>
    <content><![CDATA[<h2 id="三种交换方式">三种交换方式</h2>
<ol>
<li class="lvl-3">电路交换</li>
<li class="lvl-3">报文交换</li>
<li class="lvl-3">分组交换</li>
</ol>
<h3 id="电路交换">电路交换</h3>
<p>电路交换是在通信双方通信之前，先建立一条物理通路，然后通信双方就可以通过这条物理通路进行通信。通信结束后，再释放这条物理通路。</p>
<p>电路交换的优点是通信质量高，缺点是通信双方独占物理通路，通信效率低。</p>
<h3 id="报文交换">报文交换</h3>
<p>报文交换是在通信双方通信之前，先建立一条逻辑通路，然后通信双方就可以通过这条逻辑通路进行通信。通信结束后，再释放这条逻辑通路。</p>
<p>报文交换的优点是通信效率高，缺点是通信质量低。</p>
<h3 id="分组交换">分组交换</h3>
<p>分组交换是在通信双方通信之前，先建立一条逻辑通路，然后通信双方就可以通过这条逻辑通路进行通信。通信结束后，再释放这条逻辑通路。</p>
<p>分组交换的优点是通信效率高，缺点是通信质量低。</p>
<h3 id="电路交换与报文交换的区别">电路交换与报文交换的区别</h3>
<p>电路交换与报文交换的区别在于，电路交换是在通信双方通信之前，先建立一条物理通路，然后通信双方就可以通过这条物理通路进行通信。通信结束后，再释放这条物理通路。而报文交换是在通信双方通信之前，先建立一条逻辑通路，然后通信双方就可以通过这条逻辑通路进行通信。通信结束后，再释放这条逻辑通路。</p>
<h2 id="计算机网络的定义">计算机网络的定义</h2>
<p>首先，计算机网络的定义并未统一。计算机网络的最简单的定义是：计算机网络是互连的、自治的计算机集合。这个定义的缺点是：计算机网络的定义过于简单，没有体现计算机网络的特点。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>互联：计算机网络是由若干计算机互联而成的。</p>
</li>
<li class="lvl-2">
<p>自治：计算机网络中的每台计算机都是自治的，即每台计算机都有自己的操作系统、软件、硬件等。</p>
</li>
<li class="lvl-2">
<p>集合：计算机网络中的每台计算机都是相互联系的，没有一台计算机是孤立的。</p>
</li>
</ul>
<p>还有一种较好的定义是：计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，而这些硬件并非专门为某个特定的目的而设计的。这些可编程的硬件能够用来传送多种不同类型的数据，并且能够<strong>支持广泛的和不断变化的应用</strong>。</p>
<h2 id="计算机网络的分类">计算机网络的分类</h2>
<p>按交换技术分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>电路交换</p>
</li>
<li class="lvl-2">
<p>报文交换</p>
</li>
<li class="lvl-2">
<p>分组交换</p>
</li>
</ul>
<p>按使用者分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>公用网</p>
</li>
<li class="lvl-2">
<p>专用网</p>
</li>
</ul>
<p>按传输介质分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>有线网络</p>
</li>
<li class="lvl-2">
<p>无线网络</p>
</li>
</ul>
<p>按网络的作用范围分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>广域网 WAN</p>
</li>
<li class="lvl-2">
<p>城域网 MAN</p>
</li>
<li class="lvl-2">
<p>局域网 LAN</p>
</li>
<li class="lvl-2">
<p>个域网 PAN</p>
</li>
</ul>
<p>按拓扑结构分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>总线型</p>
</li>
<li class="lvl-2">
<p>星型</p>
</li>
<li class="lvl-2">
<p>环型</p>
</li>
<li class="lvl-2">
<p>网状型</p>
</li>
</ul>
<h2 id="计算机网络性能指标">计算机网络性能指标</h2>
<table>
<thead>
<tr>
<th style="text-align:center">指标</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">速率</td>
<td style="text-align:left">传输数据的速率</td>
</tr>
<tr>
<td style="text-align:center">带宽</td>
<td style="text-align:left">传输数据的最高速率</td>
</tr>
<tr>
<td style="text-align:center">吞吐量</td>
<td style="text-align:left">单位时间内通过某个网络的数据量</td>
</tr>
<tr>
<td style="text-align:center">时延</td>
<td style="text-align:left">数据从网络的一端传送到另一端所需的时间</td>
</tr>
<tr>
<td style="text-align:center">时延带宽积</td>
<td style="text-align:left">传输数据的长度与带宽的乘积</td>
</tr>
<tr>
<td style="text-align:center">往返时间 RTT</td>
<td style="text-align:left">从发送方发送数据开始，到发送方收到来自接收方的确认总共经历的时间</td>
</tr>
<tr>
<td style="text-align:center">利用率</td>
<td style="text-align:left">信道有百分之多少时间是被利用的</td>
</tr>
<tr>
<td style="text-align:center">误码率</td>
<td style="text-align:left">传输错误的比特数与传输总比特数的比值</td>
</tr>
<tr>
<td style="text-align:center">丢包率</td>
<td style="text-align:left">传输丢失的数据包的比率</td>
</tr>
</tbody>
</table>
<blockquote>
<p>有关<strong>比特</strong>的相关知识</p>
</blockquote>
<p>8 bit = 1 Byte<br>
KB = 2^10 Byte<br>
MB = K<em>KB = 2^20 Byte<br>
GB = K</em>MB = 2^30 Byte<br>
TB = K<em>GB = 2^40 Byte<br>
PB = K</em>TB = 2^50 Byte</p>
<blockquote>
<p>有关<strong>速率</strong>的相关知识</p>
</blockquote>
<p>bit/s = bps<br>
kb/s = Kbps = 10^3 bps<br>
Mb/s = Mbps = 10^6 bps<br>
Gb/s = Gbps = 10^9 bps<br>
Tb/s = Tbps = 10^12 bps</p>
<p>注意，<code>b</code> 与 <code>B</code> 的区别，<code>b</code> 表示比特，<code>B</code> 表示字节。</p>
<blockquote>
<p>有关<strong>带宽</strong>的相关知识</p>
</blockquote>
<p>在模拟信号中，带宽是指信号的频带宽度，即信号的最高频率与最低频率之差。在数字信号中，带宽是指数字信号的速率，即单位时间内传送的比特数。(一般单位是Hz)</p>
<p>在计算机网络中，带宽是指网络中某一信道所能传送的<em>最高数据率</em>。带宽的单位是 bps。</p>
<p>上面的两种说法其实也存在密切联系。一条通信线路的带宽越大，它所能传送的信号频带宽度就越大，从而它所能传送的数字信号的速率也就越大。</p>
<blockquote>
<p>有关<strong>吞吐量</strong>的相关知识</p>
</blockquote>
<p>吞吐量常用于对网络的性能进行描述，它是指单位时间内通过某个网络的数据量。吞吐量的单位是 bps。</p>
<p>吞吐量受到网络带宽的限制，但是吞吐量与带宽并不相等。吞吐量是指单位时间内通过某个网络的数据量，而带宽是指网络中某一信道所能传送的最高数据率。</p>
<blockquote>
<p>有关<strong>时延</strong>的相关知识</p>
</blockquote>
<p>时延是指数据从网络的一端传送到另一端所需的时间。时延的单位是 s。</p>
<p>时延可以分为以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送时延：指从分组的第一个比特开始进入链路的传输所需的时间。</p>
</li>
<li class="lvl-2">
<p>传播时延：指从分组的第一个比特开始进入链路到该比特全部到达接收端所需的时间。</p>
</li>
<li class="lvl-2">
<p>处理时延：指分组在路由器或者主机中进行处理所需的时间。</p>
</li>
<li class="lvl-2">
<p>排队时延：指分组在经过路由器进行排队等待处理所需的时间。</p>
</li>
</ul>
<p>其中，发送时延、传播时延和处理时延是固定的，而排队时延是不固定的。</p>
<p>比如，数据块长度为 100 MB，信道宽度为 1 Mb/s，传送距离为 1000 km，计算出发送时延和传播时延。</p>
<p>发送时延：100 <em>2^20 b / 10^6 bps = 838.86 s<br>
传播时延：1000</em> 10^3 m / 2 * 10^8 m/s = 5 s</p>
<p>另一个例子，数据快长度为 1 B，信道宽度为 1 Mb/s，传送距离为 1000 km，计算出发送时延和传播时延。</p>
<p>发送时延：1 <em>8 b / 10^6 bps = 8</em> 10^-6 s<br>
传播时延：1000 <em>10^3 m / 2</em> 10^8 m/s = 0.005 s</p>
<p>所以，可以得出：发送时延 = 分组长度（bit）/ 信道带宽（bps）；传播时延 = 传输距离（m）/ 传播速率（m/s）。</p>
<blockquote>
<p>有关<strong>时延带宽积</strong>的相关知识</p>
</blockquote>
<p>时延带宽积是指传输数据的长度与带宽的乘积。时延带宽积的单位是 b。</p>
<p>链路的时延带宽积又称为<strong>以比特为单位的链路长度</strong>。</p>
<blockquote>
<p>有关往返时间<strong>RTT</strong>的相关知识</p>
</blockquote>
<p>RTT 是 Round Trip Time 的缩写，<br>
RTT 是指从发送方发送数据开始，到发送方收到来自接收方的确认总共经历的时间。RTT 的单位是 s。</p>
<p>在卫星链路中，RTT 通常是几百毫秒，而在光纤链路中，RTT 通常是几十毫秒。</p>
<blockquote>
<p>有关<strong>利用率</strong>的相关知识</p>
</blockquote>
<p>利用率是指信道有百分之多少时间是被利用的。利用率的单位是 %。</p>
<p>利用率分为两种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>信道利用率：指信道有百分之多少时间是被利用的。</p>
</li>
<li class="lvl-2">
<p>网络利用率：指网络有百分之多少时间是被利用的。</p>
</li>
</ul>
<p>某信道的利用率增大，意味着该信道的吞吐量增大，该信道引起的时延也就增大。所以，信道利用率并非越大越好。</p>
<p>用 D0 表示网络空闲时的时延，D 表示网络当前的时延，利用率 U 的计算公式为：</p>
<p>D = D0 / (1 - U)<br>
U = D0 / (D0 + D)</p>
<p>所以，当网络利用率 U 为 50% 时，D = 2 <em>D0。之后，当网络利用率 U 为 90% 时，D = 10</em> D0。所以不能让网络利用率过高。应该让网络利用率在合理的范围内。</p>
<blockquote>
<p>有关<strong>丢包率</strong>的相关知识</p>
</blockquote>
<p>丢包率是指传输丢失的数据包的比率。丢包率的单位是 %。</p>
<p>分组交换网络中，分组在传输过程中可能会丢失。丢包率是指传输丢失的数据包的比率。通常存在两种丢包的原因：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>信道出错：信道出错是指信道中的比特发生了错误，这种错误是由于信道噪声引起的。</p>
</li>
<li class="lvl-2">
<p>缓存溢出：缓存溢出是指路由器的缓存队列已满，而又有新的分组到达，这时就会发生缓存溢出。</p>
</li>
</ul>
<p>丢包率反映了网络的拥塞程度。丢包率越大，说明网络的拥塞程度越大。无拥塞时，丢包率为 0%；轻度拥塞可能在 1% ~ 4%；中度拥塞可能在 10% ~ 20%；重度拥塞可能在 50% ~ 100%。</p>
<h2 id="计算机网络的体系结构">计算机网络的体系结构</h2>
<h3 id="常见的体系结构">常见的体系结构</h3>
<p>为了使得不同体系结构的网络都能够互联，国际标准化组织 ISO 制定了一个通用的体系结构，即 OSI 体系结构。</p>
<h4 id="OSI-体系结构">OSI 体系结构</h4>
<p>包括了 7 层，分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用层</p>
</li>
<li class="lvl-2">
<p>表示层</p>
</li>
<li class="lvl-2">
<p>会话层</p>
</li>
<li class="lvl-2">
<p>传输层</p>
</li>
<li class="lvl-2">
<p>网络层</p>
</li>
<li class="lvl-2">
<p>数据链路层</p>
</li>
<li class="lvl-2">
<p>物理层</p>
</li>
</ul>
<h4 id="TCP-IP-体系结构">TCP/IP 体系结构</h4>
<p>包括了 4 层，分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用层</p>
</li>
<li class="lvl-2">
<p>传输层</p>
</li>
<li class="lvl-2">
<p>网络层（也称为网际层）</p>
</li>
<li class="lvl-2">
<p>网络接口层</p>
</li>
</ul>
<p>TCP/IP 是一个四层的体系结构，而 OSI 是一个七层的体系结构。TCP/IP 体系结构中的网络接口层相当于 OSI 体系结构中的数据链路层和物理层。</p>
<h4 id="原理体系结构">原理体系结构</h4>
<p>通常，为了方便学习，我们将 TCP/IP 体系结构中的网络接口层拆分为两层，分别是数据链路层和物理层。这样，TCP/IP 体系结构就变成了一个五层的体系结构，分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用层</p>
</li>
<li class="lvl-2">
<p>传输层</p>
</li>
<li class="lvl-2">
<p>网络层</p>
</li>
<li class="lvl-2">
<p>数据链路层</p>
</li>
<li class="lvl-2">
<p>物理层</p>
</li>
</ul>
<p>这是适用于教学的体系结构。</p>
<h3 id="分层的必要性">分层的必要性</h3>
<p><strong>分层</strong>可以将庞大而复杂的问题分解为若干个较小的问题，从而简化问题的解决过程。</p>
<p>我们面对的问题:</p>
<ol>
<li class="lvl-3">
<p>物理层：解决使用何种信号来传输比特的问题</p>
<ul class="lvl-2">
<li class="lvl-6">采用什么样的传输介质？</li>
<li class="lvl-6">采用什么样的编码方式？</li>
<li class="lvl-6">采用什么样的物理接口？</li>
</ul>
</li>
<li class="lvl-3">
<p>数据链路层：解决分组在一条链路上的传输问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何标识网络上的主机？</li>
<li class="lvl-6">如何将数据组织成帧？</li>
<li class="lvl-6">如何协调各主机争用信道的使用？</li>
</ul>
</li>
<li class="lvl-3">
<p>网络层：解决分组在多个网络上的传输问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何标识各网络以及主机？</li>
<li class="lvl-6">路由器如何转发分组？</li>
</ul>
</li>
<li class="lvl-3">
<p>传输层：解决进程之间的通信问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何保证端到端的可靠传输？</li>
<li class="lvl-6">如何保证端到端的流量控制？</li>
</ul>
</li>
<li class="lvl-3">
<p>应用层：解决应用进程之间的通信问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何标识应用进程？</li>
<li class="lvl-6">如何实现不同主机上的应用进程之间的通信？</li>
</ul>
</li>
</ol>
<h3 id="专用术语解释">专用术语解释</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>实体：一个实体是指一个功能上相对独立的部分，它可以是一个硬件设备，也可以是一个软件模块。</p>
</li>
<li class="lvl-2">
<p>对等实体：两个相互通信的实体在同一层，它们之间的通信是水平的，也就是说，它们在通信时所起的作用是完全相同的。</p>
</li>
<li class="lvl-2">
<p>协议：协议是指通信双方就通信中要采取的步骤达成的一种约定。协议是对等实体间通信的规则的集合。</p>
</li>
<li class="lvl-2">
<p>协议三要素：语法、语义、协议</p>
<ul class="lvl-2">
<li class="lvl-4">语法：语法是指数据与控制信息的结构或格式。</li>
<li class="lvl-4">语义：语义是指需要发出何种控制信息以及完成何种动作。</li>
<li class="lvl-4">协议：协议是指在何种情况下发出何种控制信息以及完成何种动作。</li>
</ul>
</li>
<li class="lvl-2">
<p>协议是水平的，服务是垂直的。</p>
</li>
<li class="lvl-2">
<p>实体是看得见相邻下层所提供的服务的，看不见相邻上层所提供的服务的。也就是说，下面协议对上面协议是透明的，上面协议对下面协议是不透明的。</p>
</li>
<li class="lvl-2">
<p>服务访问点 SAP：服务访问点是指一个实体向协议栈中的某一层提出的服务请求的接口。</p>
<ul class="lvl-2">
<li class="lvl-4">数据链路层的服务访问点为帧的类型字段。</li>
<li class="lvl-4">网络层的服务访问点为 IP 地址。</li>
<li class="lvl-4">传输层的服务访问点为端口号。</li>
</ul>
</li>
<li class="lvl-2">
<p>协议数据单元 PDU：协议数据单元是指在协议的某一层中，信息的组成单位。</p>
<ul class="lvl-2">
<li class="lvl-4">数据链路层的协议数据单元为帧。</li>
<li class="lvl-4">网络层的协议数据单元为数据报。</li>
<li class="lvl-4">传输层的协议数据单元为报文段。</li>
</ul>
</li>
<li class="lvl-2">
<p>服务：服务是指一个实体向协议栈中的某一层提供的服务的接口。</p>
</li>
<li class="lvl-2">
<p>服务原语：服务原语是指一个实体向协议栈中的某一层提供的服务的接口。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-02</title>
    <url>/2023/10/30/1/</url>
    <content><![CDATA[<h2 id="网络体系中的物理层">网络体系中的物理层</h2>
<p>物理层的作用是：通过物理媒体传输比特流。</p>
<p>物理层协议的主要任务</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>机械特性：规定了物理连接器的形状、引脚数目、引脚的用途、固定器件的位置等。</p>
</li>
<li class="lvl-2">
<p>电气特性：规定了电压的高低、电平的定义、接口的电流等。</p>
</li>
<li class="lvl-2">
<p>功能特性：规定了接口的功能，如何检测和控制数据的流动，如何检测和控制数据的流动，如何检测和控制错误，如何同步等。</p>
</li>
<li class="lvl-2">
<p>过程特性：规定了通信的建立和拆除的步骤，如何管理通信线路等。</p>
</li>
</ul>
<h3 id="传输媒体">传输媒体</h3>
<p>传输媒体分为两大类：导引型传输媒体和非导引型传输媒体。</p>
<blockquote>
<p>导引型传输媒体</p>
</blockquote>
<p>又称为有线传输媒体，是指能够传输电磁波的传输媒体。如双绞线、同轴电缆、光纤等。</p>
<ol>
<li class="lvl-3">
<p>双绞线双绞线是一种双股绝缘导线，两股导线以一定的规则绞合在一起，用来传输信号。</p>
</li>
<li class="lvl-3">
<p>同轴电缆同轴电缆是一种中心导线被绝缘层包围，绝缘层外面又有一层金属网的传输媒体。</p>
</li>
<li class="lvl-3">
<p>光纤光纤是一种以光的形式传输信号的传输媒体。</p>
</li>
</ol>
<blockquote>
<p>非导引型传输媒体</p>
</blockquote>
<p>又称为无线传输媒体，是指能够传输电磁波的传输媒体。如无线电波、微波、红外线等。</p>
<h3 id="传输方式">传输方式</h3>
<p>传输方式分为两大类：串行传输和并行传输。</p>
<blockquote>
<p>串行传输</p>
</blockquote>
<p>串行传输是指在传输数据时，每次只传输一位数据。串行传输的优点是：传输距离远，传输速率高，传输线路简单。</p>
<blockquote>
<p>并行传输</p>
</blockquote>
<p>并行传输是指在传输数据时，每次传输多位数据。并行传输的优点是：传输速率高，传输效率高。</p>
<p>此外，还有同步传输和异步传输。</p>
<blockquote>
<p>同步传输</p>
</blockquote>
<p>同步传输是指在传输数据时，发送方和接收方的时钟信号是同步的。</p>
<blockquote>
<p>异步传输</p>
</blockquote>
<p>异步传输是指在传输数据时，发送方和接收方的时钟信号是异步的。</p>
<p>单工传输、半双工传输和全双工传输。</p>
<p>这些传输方式的区别在于：传输方向、传输速率、传输效率、传输距离、传输线路复杂程度。</p>
<p>单工传输是指在传输数据时，数据只能单向传输。如广播电台。</p>
<p>半双工传输是指在传输数据时，数据可以双向传输，但是不能同时双向传输。如对讲机。</p>
<p>全双工传输是指在传输数据时，数据可以双向传输，而且可以同时双向传输。如电话机。</p>
<h3 id="编码与调制">编码与调制</h3>
<p>编码是指将数字信号转换为模拟信号的过程。</p>
<p>调制是指将数字信号转换为模拟信号的过程。</p>
<p>我们使用一个树状图来表示编码和调制的过程。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">消息</span><br><span class="line">↓ 运送消息的实体</span><br><span class="line">数据</span><br><span class="line">↓ 数据的电磁形式</span><br><span class="line">信号</span><br><span class="line">↓ 信源发出的原始电信号</span><br><span class="line">基带信号</span><br><span class="line">|-------------------|</span><br><span class="line">↓                   ↓</span><br><span class="line">数字信号            模拟信号</span><br><span class="line">|-----|            |-----|</span><br><span class="line">↓     ↓            ↓     ↓</span><br><span class="line">编码  调制          编码  调制</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>码元：是指数字信号中的一个离散值。</p>
</li>
</ul>
<p>传输媒体与信道不能直接划等号，信道是指传输媒体的一部分。</p>
<blockquote>
<p>常用编码</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>非归零编码非归零编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平。</p>
</li>
<li class="lvl-2">
<p>归零编码归零编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平，但是每个码元的电平都会回到基准电平。</p>
</li>
<li class="lvl-2">
<p>曼彻斯特编码曼彻斯特编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平，但是每个码元的电平都会回到基准电平，而且每个码元的中间都会有一个电平跳变。</p>
</li>
<li class="lvl-2">
<p>差分曼彻斯特编码差分曼彻斯特编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平，但是每个码元的电平都会回到基准电平，而且每个码元的中间都会有一个电平跳变，而且每个码元的中间都会有一个电平跳变，而且每个码元的中间都会有一个电平跳变，而且每个码元的中间都会有一个电平跳变。</p>
</li>
</ul>
<blockquote>
<p>基本调制方法</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>调幅 AM<br>
调幅是指在传输数据时，通过改变信号的幅度来传输数据。</p>
</li>
<li class="lvl-2">
<p>调频 FM<br>
调频是指在传输数据时，通过改变信号的频率来传输数据。</p>
</li>
<li class="lvl-2">
<p>调相 PM<br>
调相是指在传输数据时，通过改变信号的相位来传输数据。</p>
</li>
<li class="lvl-2">
<p>数字基带调制数字基带调制是指在传输数据时，通过改变信号的幅度、频率、相位来传输数据。</p>
</li>
</ul>
<blockquote>
<p>混合调制</p>
</blockquote>
<p>混合调制是指在传输数据时，通过改变信号的幅度、频率、相位来传输数据。</p>
<p>通常情况下，相位和振幅可以结合在一起，称为正交相幅调制 QAM。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>QAM-16</p>
<ul class="lvl-2">
<li class="lvl-4">12种相位</li>
<li class="lvl-4">每种相位有 1/2 种振幅</li>
<li class="lvl-4">可以调出 16 种码元，每种码元可以表示 4 个比特</li>
<li class="lvl-4">码元与 4 个比特的对应关系采用格雷码</li>
<li class="lvl-4">任意两个相邻码元只有一个比特不同</li>
</ul>
</li>
</ul>
<h3 id="信道的极限容量">信道的极限容量</h3>
<p>信道的极限容量是指在单位时间内，信道所能传输的最大数据量。</p>
<p>码间串扰是指在传输数据时，由于信号的干扰，导致接收方无法正确识别发送方发送的信号。</p>
<p>失真的因素</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>码元传输速率</p>
</li>
<li class="lvl-2">
<p>信号传输距离</p>
</li>
<li class="lvl-2">
<p>噪声干扰</p>
</li>
<li class="lvl-2">
<p>传输媒体质量</p>
</li>
</ul>
<blockquote>
<p>奈氏准则</p>
</blockquote>
<p>奈氏准则是指在传输数据时，信道的极限容量与信道的带宽和信噪比有关。</p>
<p>理想低通信道的最高码元传输速率 = <code>2 * 带宽 * log2V</code><br>
理想带通信道的最高码元传输速率 = <code>带宽 * log2V</code></p>
<blockquote>
<p>香农定理</p>
</blockquote>
<p>香农定理是指在传输数据时，信道的极限容量与信道的带宽和信噪比有关。</p>
<p><code>c = W * log2(1 + S/N)</code>单位：比特/秒</p>
<p>其中，c 是信道的极限容量，W 是信道的带宽，S 是信道的信号功率，N 是信道的噪声功率。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-03</title>
    <url>/2023/11/02/1/</url>
    <content><![CDATA[<h2 id="数据链路层">数据链路层</h2>
<p>数据链路层的作用是：将网络层传下来的IP数据报组装成帧，然后在通信的两个结点之间传送帧。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>帧：数据链路层的数据单位。</p>
</li>
<li class="lvl-2">
<p>数据链路：两个相邻结点之间的传输介质。</p>
</li>
</ul>
<blockquote>
<p>数据链路层的三个基本问题</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>封装成帧</p>
</li>
<li class="lvl-3">
<p>可靠传输</p>
</li>
<li class="lvl-3">
<p>差错检测</p>
</li>
</ol>
<h3 id="封装成帧">封装成帧</h3>
<p>封装成帧是指在数据报前后添加首部和尾部，组成帧。</p>
<blockquote>
<p>帧的结构</p>
</blockquote>
<p>以太网V2的MAC帧格式如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>帧头：7个字段，共14个字节</p>
<ul class="lvl-2">
<li class="lvl-4">目的MAC地址：6个字节</li>
<li class="lvl-4">源地址：6个字节</li>
<li class="lvl-4">类型：2个字节，表示上层协议类型</li>
</ul>
</li>
<li class="lvl-2">
<p>数据：46~1500个字节</p>
</li>
<li class="lvl-2">
<p>帧尾：4个字节，表示帧的结束</p>
</li>
</ul>
<p>每个结构的作用</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>帧头和帧尾中包含了帧的定界符，用于标识帧的开始和结束；以及重要的控制信息。</p>
</li>
<li class="lvl-2">
<p>透明传输是指数据链路对上层交付的数据不加以解释和修改，即不对数据进行任何处理。</p>
</li>
<li class="lvl-2">
<p>为了提高帧的传输效率，应当使帧的数据部分的长度尽可能大些；数据链路层采用了帧的填充技术。</p>
</li>
<li class="lvl-2">
<p>帧的填充技术是指在数据中出现特定字符时，数据链路层自动在该字符前面插入一个转义字符，以免与帧的定界符混淆。</p>
</li>
<li class="lvl-2">
<p>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的最大长度，即最大传送单元MTU（Maximum Transmission Unit）。</p>
</li>
</ul>
<h3 id="差错检测">差错检测</h3>
<p>实际的通信链路都是不可靠的，比特在传输过程中可能会出错：1变为0，0变为1，这种错误称为比特差错。</p>
<p>在一段时间内，传输错误的比特的个数称为比特差错率。</p>
<p>使用差错检测码可以检测出数据在传输过程中是否出错。</p>
<h4 id="奇偶校验码">奇偶校验码</h4>
<p>奇偶校验码是一种最简单的差错检测码，它的原理是：在每一帧的数据后面添加一个附加位，使得每一帧的数据加上附加位中1的个数为奇数或者偶数。</p>
<p>在奇校验中，如果传输过程产生 1 位差错，那么接收方检测到的附加位中1的个数就是奇数，就知道数据出错了。但是如果传输过程产生 2 位差错，那么接收方检测到的附加位中1的个数就是偶数，就无法检测出数据出错了。</p>
<p>偶校验与奇校验相反。</p>
<h4 id="循环冗余检测码-CRC（Cyclic-Redundancy-Check）">循环冗余检测码 CRC（Cyclic Redundancy Check）</h4>
<p>CRC码是一种最常用的差错检测码，它的原理是：将数据看成是二进制数，用一个除数去除这个二进制数，得到的余数作为附加位。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>收发双方事先约定好除数，这个除数称为生成多项式 G(x)。</p>
</li>
<li class="lvl-2">
<p>发送方将数据看成是二进制数，用生成多项式 G(x) 去除这个二进制数，得到的余数作为附加位。</p>
</li>
<li class="lvl-2">
<p>接收方将接收到的数据看成是二进制数，用生成多项式 G(x) 去除这个二进制数，得到的余数如果为0，说明数据没有出错；如果不为0，说明数据出错了。</p>
</li>
</ul>
<p>e.g. 生成多项式 G(x) = x^4 + x^2 + x + 1，求生成多项式各项系数构成的比特串。</p>
<p>G(x) = <strong>1</strong> x^4 + <strong>0</strong> x^3 + <strong>1</strong> x^2 + <strong>1</strong> x + <strong>1</strong> x^0 = 10111</p>
<p>e.g. 生成多项式 G(x) = x^3 + x^2 + 1，数据 101001，计算过程如下：</p>
<p>1、构造被除数；待发送信息后面添加生成式最高次数个0，即 101001<strong>000</strong>。<br>
2、构造除数；生成式各项系数构成的比特串，1101。<br>
3、进行除法运算；将被除数与除数进行异或运算，得到的结果再与除数进行异或运算，直到被除数的位数小于除数的位数为止。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sign      110101</span><br><span class="line">      ————————————</span><br><span class="line">1101 / 101001000</span><br><span class="line">     ⊕ 1101</span><br><span class="line">    ——————</span><br><span class="line">       01110</span><br><span class="line">      ⊕ 1101</span><br><span class="line">      ——————</span><br><span class="line">        001110</span><br><span class="line">        ⊕ 1101</span><br><span class="line">        ——————</span><br><span class="line">          001100</span><br><span class="line">          ⊕ 1101</span><br><span class="line">          ——————</span><br><span class="line">            0001</span><br></pre></td></tr></table></figure>
<p>其中，sign 表示此时是否够除，如果够除，sign 为 1，否则为 0。sign的作用是：当被除数的位数小于除数的位数时，将被除数的最高位补 0，使得被除数的位数大于除数的位数，这样才能进行异或运算。</p>
<p>4、得到的余数即为 CRC 码。余数的位数与生成式的最高次数相同，即 3 位，如果不够 3 位，前面补 0。<br>
5、将余数添加到待发送信息后面，得到的结果即为发送的信息。即 101001<strong>000</strong> + 001 = 101001<strong>001</strong>。</p>
<blockquote>
<p>说明</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>检错码只能检测出数据在传输过程中是否出错，不能纠正数据出错。</p>
</li>
<li class="lvl-2">
<p>CRC 码的检错能力与生成多项式的次数有关，生成多项式的次数越高，检错能力越强。</p>
</li>
<li class="lvl-2">
<p>想要纠正数据出错，需要使用纠错码。但是纠错码的计算量很大，一般不用于数据链路层。</p>
</li>
</ul>
<h2 id="可靠传输">可靠传输</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>利用差错检测技术，可以检测出数据在传输过程中是否出错，但是无法纠正数据出错。</p>
</li>
<li class="lvl-2">
<p>数据链路层向上层提供的服务类型</p>
<ul class="lvl-2">
<li class="lvl-4">不可靠服务：数据链路层不对数据进行检错和重发，只是简单地将数据从一端传送到另一端。仅仅丢弃出错的帧，不进行重发。</li>
<li class="lvl-4">可靠服务：数据链路层对数据进行检错和重发，确保数据从一端传送到另一端的正确性。</li>
</ul>
</li>
<li class="lvl-2">
<p>有线链路误码率一般在 10^-9 ~ 10^-12 之间，无线链路误码率一般在 10^-3 ~ 10^-6 之间。所以，有线链路一般不需要可靠传输，而无线链路一般需要可靠传输。</p>
</li>
<li class="lvl-2">
<p>比特差错只是数据链路层可能出现的差错之一，还有很多其他的差错，如：丢帧、重复帧、帧失序等。</p>
</li>
<li class="lvl-2">
<p>从整个网络体系结构来看，传输差错还包括：分组丢失、分组失序、分组重复等。</p>
</li>
<li class="lvl-2">
<p>可靠传输服务并不局限于数据链路层，网络层也可以提供可靠传输服务。</p>
</li>
</ul>
<p>下面，我们将记录一些可靠传输协议。这些协议并不局限于数据链路层，也可以应用于网络层。</p>
<h3 id="停止等待协议-SW（Stop-and-Wait）">停止等待协议 SW（Stop-and-Wait）</h3>
<p>停止等待协议是一种最简单的可靠传输协议，它的原理是：发送方发送一帧后，停止发送，等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
<p>确认与否定</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">  |   DATA     |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  |  DATA(误码) |</span><br><span class="line">  |  -------&gt;  | 丢</span><br><span class="line">  |            |</span><br><span class="line">  |   NCK      |</span><br><span class="line">重|  &lt;-------  | 弃</span><br><span class="line">  |            |</span><br><span class="line">  |   DATA     |</span><br><span class="line">传|  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<p>ACK：肯定确认帧，表示接收方正确收到了帧。<br>
NCK：否定确认帧，表示接收方没有正确收到帧。</p>
<blockquote>
<p>说明</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送方发送一帧后，停止发送，等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
</li>
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的 NCK，就认为帧没有出错，不需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就认为帧出错，需要重发。</p>
</li>
</ul>
<p>超时重传：发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
<blockquote>
<p>为什么需要超时重传？</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
</ul>
<p>超时重传</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">  |   DATA     |</span><br><span class="line">——|  -----丢失  |</span><br><span class="line">等|            |</span><br><span class="line">待|   DATA     |</span><br><span class="line">——|  -------&gt;  |</span><br><span class="line">重|            |</span><br><span class="line">传|   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  |   DATA     |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
</ul>
<p>确认丢失</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">——|   DATA     |</span><br><span class="line">等|  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">待|   ACK      |</span><br><span class="line">——|  丢失-----  |</span><br><span class="line">重|            |</span><br><span class="line">传|   DATA     |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<p>上面的情况，ACK 丢失，发送方会重发，接收方会丢弃重复的帧。为了避免这种情况，需要在 ACK 中添加序号，这样接收方就可以检测出重复的帧。用1个比特来编号，就可以表示 0 和 1 两种状态，这种编号方式称为<strong>停止等待协议的可靠传输</strong>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">——|   DATA0    |</span><br><span class="line">等|  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">待|   ACK      |</span><br><span class="line">——|  丢失-----  |</span><br><span class="line">重|            |</span><br><span class="line">传|   DATA0    |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  |   DATA1    |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<p>如果因为某些原因，接收方收到了重复的帧，就丢弃重复的帧，不发送 ACK。</p>
<p>确认迟到</p>
<p>ACK 因为某些原因，没有及时发送，而是延迟发送，这种情况称为<strong>确认迟到</strong>。</p>
<p>这时，我们在 ACK 中添加序号，这样发送方就可以检测出重复的帧。</p>
<p>在数据链路层中，通常不用给ACK编号，因为数据链路层的传输速率很高，一般不会出现确认迟到的情况。</p>
<blockquote>
<p>SW 协议的信道利用率</p>
</blockquote>
<p>信道利用率是指信道中有用的时间与总时间的比值。</p>
<p>U = TD / (TD + RTT + TA)</p>
<p>U 是信道利用率，TD 是数据传输时间，RTT 是往返时间，TA 是确认时间。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据传输时间 TD = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
<li class="lvl-2">
<p>往返时间 RTT = 2 * d / v，d 是信道的长度，v 是信号的传播速率。</p>
</li>
<li class="lvl-2">
<p>确认时间 TA = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
</ul>
<p>U = L / (L + 2 * d / v + L / R)</p>
<blockquote>
<p>说明</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>信道利用率是指信道中有用的时间与总时间的比值。</p>
</li>
<li class="lvl-2">
<p>数据传输时间 TD = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
<li class="lvl-2">
<p>往返时间 RTT = 2 * d / v，d 是信道的长度，v 是信号的传播速率。</p>
</li>
<li class="lvl-2">
<p>确认时间 TA = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
</ul>
<p>通过上面的公式可以看出，信道利用率与帧的长度有关，帧的长度越大，信道利用率越高。所以，这暴露了 SW 协议的一个缺点：帧的长度不能太小，否则信道利用率会很低。所以，因为 SW 协议的信道利用率低，所以 SW 协议一般不用于数据链路层，而是用于网络层。</p>
<h3 id="回退-N-帧协议-ARQ（Automatic-Repeat-Request）">回退 N 帧协议 ARQ（Automatic Repeat Request）</h3>
<p>SW 协议的信道利用率低，而且只能发送一帧，所以，我们可以将 SW 协议扩展成回退 N 帧协议 ARQ。</p>
<p>该协议也叫 Go-Back-N 协议，它的原理是：发送方连续发送 N 帧，而不需要等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
<p>该协议采用流水线技术，发送方可以连续发送多帧，而不需要等待接收方的确认帧。</p>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnlmeGllLmNvbS9jb21wYXJpc29uLW9mLW5ldHdvcmstZ2JuLXNyLWFuZC10Y3Av">計算機網路概論 GBN、SR、TCP 比較<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR28tQmFjay1OX0FSUQ==">Go-Back-N ARQ – Wikipedia<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<blockquote>
<p>发送方</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送窗口尺寸 WT 取值范围为 1 &lt; WT &lt;= 2^n - 1，其中 n 为比特数。</p>
<ul class="lvl-2">
<li class="lvl-4">WT = 1 时，退化为 SW 协议。</li>
<li class="lvl-4">WT = 2^n - 1 时，退化为 SR 协议。</li>
</ul>
</li>
<li class="lvl-2">
<p>发送方可在未收到确认帧的情况下，将序号为 SN ~ SN + WT - 1 的帧连续发送出去。</p>
</li>
<li class="lvl-2">
<p>发送方收到确认帧后，将窗口向前滑动，即 SN = SN + 1，然后发送 SN + WT - 1 帧。</p>
</li>
<li class="lvl-2">
<p>发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>发送方在规定的时间内没有收到接收方的 NCK，就认为帧没有出错，不需要重发。</p>
</li>
</ul>
<blockquote>
<p>接收方</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>接收窗口尺寸 WR 取值范围为 WR = 1。因此，接收方只能接收序号为 RN 的帧。</p>
</li>
<li class="lvl-2">
<p>接收方收到序号为 RN 的帧后，发送确认帧，然后接收下一帧。</p>
</li>
<li class="lvl-2">
<p>接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
</ul>
<h3 id="选择重传协议-SR（Selective-Repeat）">选择重传协议 SR（Selective Repeat）</h3>
<p>SR 协议也是一种流水线协议，它的原理是：发送方连续发送 N 帧，而不需要等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
<blockquote>
<p>发送方</p>
</blockquote>
<p>发送方的发送窗口尺寸 WT 取值范围为 1 &lt; WT &lt;= 2^(n-1)，其中 n 为比特数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>WT = 1 时，退化为 SW 协议。</p>
</li>
<li class="lvl-2">
<p>WT &gt; 2^(n-1) 时，发送方的发送窗口尺寸超过了接收方的接收窗口尺寸，这种情况下，接收方无法接收所有的帧，所以，这种情况下，发送方的发送窗口尺寸应该等于接收方的接收窗口尺寸。</p>
</li>
</ul>
<blockquote>
<p>接收方</p>
</blockquote>
<p>接收方的接收窗口尺寸 WR 取值范围为 1 &lt; WR &lt;= WT = 2^(n-1)，其中 n 为比特数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>WR = 1 时，退化为 SW 协议。</p>
</li>
<li class="lvl-2">
<p>WR &gt; 2^(n-1) 时，无意义。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-04</title>
    <url>/2023/11/07/1/</url>
    <content><![CDATA[<h2 id="点对点协议PPP-Point-to-Point-Protocol">点对点协议PPP Point-to-Point Protocol</h2>
<p>PPP是一种数据链路层协议，它规定了点对点通信的协议标准。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>PPP 为在点对点通信链路上传输网络层数据报提供了一种标准方法。</p>
<ul class="lvl-2">
<li class="lvl-4">PPP 为多种网络层协议提供了一种通用的封装方法。（封装成帧）</li>
<li class="lvl-4">PPP 为在两数据链路层提供了<code>链路控制协议LCP</code>，用于建立、配置和测试数据链路连接。</li>
<li class="lvl-4">PPP 为在两数据链路层提供了<code>网络控制协议NCP</code>，用于在两个节点之间传输网络层协议的数据包。</li>
</ul>
</li>
</ul>
<blockquote>
<p>帧格式</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">帧的首部                            |     数据     | 帧的尾部</span><br><span class="line">|   F   |   A    |   C    |   P    |    DATA     |   FSC  |   F    |</span><br><span class="line">| 1 byte| 1 byte | 1 byte | 2 byte | 0~1500 byte | 2 byte | 1 byte |</span><br></pre></td></tr></table></figure>
<p>标志 Flag 字段 F：标志字段是一个字节，它的值为 0x7E，表示帧的开始和结束。地址 Address 字段 A：地址字段是一个字节，它的值为 0xFF，表示广播地址。预留，但目前没有使用。控制 Control 字段 C：控制字段是一个字节，它的值为 0x03，表示无控制信息。预留，但目前没有使用。协议 Protocol 字段 P：协议字段是两个字节，指明上层协议类型。如 0x0021 表示 IP 协议、0xC021 表示 LCP 协议、0x8021 表示 IPX 协议、0x8023 表示 IPX 协议。数据 Data 字段：数据字段是 0~1500 个字节，表示上层协议的数据。帧检验序列 FCS 字段：帧检验序列字段是两个字节，用于差错检测。</p>
<blockquote>
<p>透明传输</p>
</blockquote>
<p>如果在帧的数据部分出现了和帧首部相同的字符，数据链路层就会误认为帧结束，因此，数据链路层必须对数据进行处理，以免出现这种情况。</p>
<p>数据链路层对数据进行处理的方法是：在数据中出现特定字符时，数据链路层自动在该字符前面插入一个转义字符，以免与帧的定界符混淆。</p>
<p>发送方的处理：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>出现的每一个 0x7E 字符，都用 0x7D 0x5E 代替。</p>
</li>
<li class="lvl-2">
<p>出现的每一个 0x7D 字符，都用 0x7D 0x5D 代替。</p>
</li>
<li class="lvl-2">
<p>出现每一个 ASCII 码小于 0x20 的字符，都用 0x7D 加上该字符的 ASCII 码的值加上 0x20 代替。</p>
</li>
</ul>
<p>接收方的处理：只需要将 0x7D 0x5E 转换为 0x7E，将 0x7D 0x5D 转换为 0x7D，将 0x7D 加上 0x20 的值转换为原来的字符即可。</p>
<blockquote>
<p>面向比特的同步链路采用插入比特0的比特填充方法</p>
</blockquote>
<p>对发送方的处理:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在数据中出现 5 个连续的 1 时，就在后面插入一个 0。</p>
</li>
</ul>
<p>对接收方的处理:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在接收到 5 个连续的 1 时，就删除后面的 0。</p>
</li>
</ul>
<blockquote>
<p>差错侦测</p>
</blockquote>
<p>在FCS字段中使用CRC-CCITT差错检测码。</p>
<p>CRC-CCITT生成多项式为：$x<sup>{16}+x</sup>{12}+x^5+1$</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmMxNjYyI2FwcGVuZGl4LUMuMg==">RFC 1662<i class="fa fa-external-link-alt"></i></span></p>
<p>接收方在接收到帧后，对帧进行差错检测，如果发现差错，则丢弃该帧。</p>
<blockquote>
<p>PPP 的工作状态</p>
</blockquote>
<p><img src="./ppp_status.png" alt></p>
<h2 id="媒体接入控制">媒体接入控制</h2>
<p>由于多路访问信道是由多个节点共享的，因此，必须对多路访问信道进行管理，以便在多个节点同时发送数据时，不会发生冲突。</p>
<p>这时，就需要使用媒体接入控制（MAC Media Access Control）子层。</p>
<p>媒体接入控制分为两种类型：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>静态媒体接入控制</p>
<ul class="lvl-2">
<li class="lvl-4">频分多址</li>
<li class="lvl-4">时分多址</li>
<li class="lvl-4">码分多址</li>
</ul>
</li>
<li class="lvl-2">
<p>动态媒体接入控制</p>
<ul class="lvl-2">
<li class="lvl-4">受控接入
<ul class="lvl-4">
<li class="lvl-6">集中控制</li>
<li class="lvl-6">分布控制</li>
</ul>
</li>
</ul>
</li>
<li class="lvl-2">
<p>随机接入</p>
</li>
</ul>
<p>预先固定分配好信道的使用权，这类方法非常不灵活，对于突发性的数据传输，效率很低。通常在无线网络物理层使用。</p>
<p>在动态接入控制中的集中控制，有一个主站以循环的方式向各个节点询问是否有数据要发送，如果有，则允许发送，否则，就询问下一个节点。缺点是主站成为了系统的瓶颈，如果主站出现故障，整个系统就无法工作。</p>
<p>而分布控制则是将主站的功能分散到各个节点，各个节点之间通过协商的方式来决定谁有权利发送数据。这种方法的缺点是，如果各个节点之间的协商出现问题，就会导致系统无法工作。</p>
<p>以上两种方式现在竞争中被淘汰了。</p>
<p>随机接入是一种分布式的媒体接入控制方法，它不需要主站，各个节点之间也不需要协商，而是通过一定的算法来决定谁有权利发送数据。</p>
<h3 id="静态划分信道">静态划分信道</h3>
<blockquote>
<p>信道复用</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>复用 Multiplexing：将多个信号合成一个信号的过程。</p>
</li>
<li class="lvl-2">
<p>分用 Demultiplexing：将复用后的信号分解成多个信号的过程。</p>
</li>
<li class="lvl-2">
<p>当网络传输媒体的带宽有限时，就需要对带宽进行复用，以便多个用户共享带宽。</p>
</li>
</ul>
<blockquote>
<p>常见复用技术</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>频分复用 FDM Frequency Division Multiplexing</p>
</li>
<li class="lvl-2">
<p>时分复用 TDM Time Division Multiplexing</p>
</li>
<li class="lvl-2">
<p>波分复用 WDM Wave Division Multiplexing</p>
</li>
<li class="lvl-2">
<p>码分复用 CDM Code Division Multiplexing</p>
</li>
</ul>
<p>码片 Chip：在 CDMA 中，每一个比特时间被分为多个小的时间间隔，每一个小的时间间隔称为一个码片，每一个码片都有一个唯一的码片序列，每一个用户都有一个唯一的码片序列，用户的数据就是通过这个码片序列来进行传输的。</p>
<p>使用 CDMA 时，每一个用户都有一个唯一的码片序列，这样，即使多个用户同时发送数据，也不会发生冲突。这个叫 m bit 的码片序列（Chip Sequence）。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一个站如果发送比特1，则发送它自己的 m 个码片序列。</p>
</li>
<li class="lvl-2">
<p>一个站如果发送比特0，则发送它自己的 m 个码片序列的二进制反码。</p>
</li>
</ul>
<p>上面这种通讯方式叫做直接序列扩频通讯（DS-CDMA Direct Sequence Code Division Multiple Access）。</p>
<p>码片的挑选规则：</p>
<ol>
<li class="lvl-3">
<p>分配给每个用户的码片序列必须是正交的。（规格化内积为0）</p>
</li>
<li class="lvl-3">
<p>分配给每个用户的码片序列必须各不相同。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-05</title>
    <url>/2023/11/14/1/</url>
    <content><![CDATA[<h2 id="随机接入-CSMA-CD-协议">随机接入 CSMA/CD 协议</h2>
<p>Carrier Sense Multiple Access with Collision Detection 载波监听多路访问/碰撞检测</p>
<p>在早期的以太网中，采用的是随机接入的方式，即任何一个站点都可以在任何时刻发送数据帧，但是由于多个站点同时发送数据帧会造成碰撞，因此需要进行碰撞检测，如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。</p>
<p><strong>MA 多址接入</strong>，即多个站点共享同一个信道，每个站点都有机会发送数据帧。</p>
<p><strong>CS 载波监听</strong>，即在发送数据帧之前，先监听信道，如果信道空闲，就发送数据帧，否则等待一段时间后再次监听。（先听后说）</p>
<p><strong>CD 碰撞检测</strong>，即在发送数据帧的过程中，如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。（边说边听）</p>
<blockquote>
<p>争用期</p>
</blockquote>
<p>争用期是指在发送数据帧之前，先监听信道，如果信道空闲，就发送数据帧，否则等待一段时间后再次监听。</p>
<blockquote>
<p>最小帧长</p>
</blockquote>
<p>最小帧长是指发送数据帧的最小长度，如果发送的数据帧长度小于最小帧长，就会出现碰撞检测失效的情况。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>以太网的最小帧长是 64 字节，如果发送的数据帧长度小于 64 字节，就会出现碰撞检测失效的情况。</p>
</li>
<li class="lvl-2">
<p>最小帧长的目的是为了保证在发送数据帧的过程中，能够检测到碰撞。</p>
</li>
<li class="lvl-2">
<p>在争用期内，没有检测到碰撞，就可以认为发送的数据帧没有发生碰撞。如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。所以但凡长度小于 64 字节的数据帧都是由于碰撞而异常终止的无效帧。</p>
</li>
</ul>
<blockquote>
<p>最大帧长</p>
</blockquote>
<p>最大帧长是指发送数据帧的最大长度，如果发送的数据帧长度大于最大帧长，就会出现碰撞检测失效的情况。最大帧长为 1518 字节。</p>
<blockquote>
<p>二进制指数退避算法</p>
</blockquote>
<p>二进制指数退避算法是指在发送数据帧的过程中，如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>若连续发生 k 次碰撞，就等待一个 0 到 2^k-1 之间的随机数，然后再次发送数据帧。</p>
</li>
<li class="lvl-2">
<p>若连续发生 16 次碰撞，就等待一个 0 到 2^16-1 之间的随机数，然后再次发送数据帧。 2^16-1 = 65535，即最大等待时间为 65535 微秒，即 65.535 毫秒。16 次仍不成功，就放弃发送数据帧，并向上层报告发送失败。</p>
</li>
</ul>
<blockquote>
<p>信道利用率</p>
</blockquote>
<p>信道利用率是指在发送数据帧的过程中，信道被利用的时间与总时间的比值。</p>
<p>应考虑以下这种理想情况</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>各个主机发送帧不发生碰撞</p>
</li>
<li class="lvl-2">
<p>总线一旦空闲，就立即有主机发送帧</p>
</li>
<li class="lvl-2">
<p>发送一帧的时间为 t + T0，其中 t 为传播时延，T0 为帧长</p>
</li>
</ul>
<p>S(max) = 1 / (1 + a)</p>
<p>a = t / T0</p>
<h2 id="随机接入-CSMA-CA-协议">随机接入 CSMA/CA 协议</h2>
<p>在无线局域网中，仍然可以使用随机接入的方式，但是由于无线信道的特殊性，无法进行碰撞检测，因此需要采用其他的方式来避免碰撞。</p>
<blockquote>
<p>为何无线网路不能使用 碰撞检测</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>对硬件要求高，需要在发送数据帧的过程中，能够检测到碰撞。</p>
</li>
<li class="lvl-2">
<p>存在隐藏终端问题，即 A 与 B 之间存在 C，A 与 C 之间存在 B，A 与 B 之间无法检测到碰撞，但是 A 与 C 之间存在碰撞。</p>
</li>
</ul>
<blockquote>
<p>Carrier Sense Multiple Access with Collision Avoidance 载波监听多路访问/碰撞避免</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>802.11 无线局域网采用的是随机接入的方式，但是由于无线信道的特殊性，无法进行碰撞检测，因此需要采用其他的方式来<strong>避免碰撞</strong>。</p>
</li>
<li class="lvl-2">
<p>由于不可能避免所有碰撞，并且无线信道误码率较高，802.11 标准使用了<strong>数据链路层的 ARQ 机制</strong>来保证可靠传输。</p>
</li>
<li class="lvl-2">
<p>802.11 的 MAC 层定义了两种基本的协议，即 DCF 分布式协调函数和 PCF 点对点协调函数。</p>
<ul class="lvl-2">
<li class="lvl-4">Distributed Coordination Function 分布式协调函数: 采用的是随机接入的方式，即任何一个站点都可以在任何时刻发送数据帧。</li>
<li class="lvl-4">Point Coordination Function 点对点协调函数: 采用的是集中控制的方式，即只有一个站点可以在任何时刻发送数据帧。</li>
</ul>
</li>
</ul>
<blockquote>
<p>InterFrame Space 帧间间隔</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>IFS 是指在发送数据帧的过程中，需要等待的时间。</p>
</li>
<li class="lvl-2">
<p>IFS 的长度与发送的数据帧的类型有关，即发送的数据帧的类型不同，IFS 的长度也不同。</p>
</li>
<li class="lvl-2">
<p>IFS 的长度越长，优先级越高，即发送的数据帧的类型越重要。</p>
</li>
<li class="lvl-2">
<p>常用的 IFS 有以下几种类型</p>
<ul class="lvl-2">
<li class="lvl-4"><strong>SIFS</strong> Short InterFrame Space 短帧间间隔；GitHub Copilot: SIFS是Short InterFrame Space的缩写，是一种短帧间间隔。在802.11协议中，SIFS是指在发送数据帧的过程中，需要等待的最短时间。SIFS的长度比PIFS和DIFS都要短，通常为16微秒。SIFS的作用是在发送数据帧的过程中，保证高优先级的数据帧能够优先传输。在802.11协议中，SIFS主要用于ACK帧和CTS帧的发送。</li>
<li class="lvl-4">PIFS PCF InterFrame Space PCF 帧间间隔</li>
<li class="lvl-4"><strong>DIFS</strong> DCF InterFrame Space DCF 帧间间隔；GitHub Copilot: DIFS是DCF InterFrame Space的缩写，是一种DCF帧间间隔。在802.11协议中，DIFS是指在发送数据帧的过程中，需要等待的时间。DIFS的长度比SIFS长，比PIFS短，通常为34微秒。DIFS的作用是在发送数据帧的过程中，保证低优先级的数据帧能够等待一段时间，以便高优先级的数据帧能够优先传输。在802.11协议中，DIFS主要用于发送数据帧和ACK帧之间的间隔。</li>
<li class="lvl-4">EIFS Extended InterFrame Space 扩展帧间间隔</li>
</ul>
</li>
</ul>
<blockquote>
<p>协议的工作原理</p>
</blockquote>
<p><img src="./principal.png" alt></p>
<blockquote>
<p>协议的退避算法</p>
</blockquote>
<p><img src="./algorithm1.png" alt><br>
<img src="./algorithm2.png" alt></p>
<blockquote>
<p>信道预约与虚拟载波监听</p>
</blockquote>
<p>为了提高信道利用率，802.11 无线局域网采用了信道预约的方式，即在发送数据帧之前，先发送 RTS 帧，然后接收 CTS 帧，最后发送数据帧。</p>
<p><img src="./channelappointandvirtuallisten.png" alt><br>
<img src="./cavlpic.png" alt></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-06</title>
    <url>/2023/12/01/1/</url>
    <content><![CDATA[<h2 id="MAC-地址">MAC 地址</h2>
<p>MAC 地址是指网卡的物理地址，它是一个 48 位的二进制数，通常用 12 位的十六进制数表示。属于数据链路层的地址。</p>
<h3 id="MAC-地址的作用">MAC 地址的作用</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>当多个主机连接在同一个以太网中时，每个主机都必须有一个唯一的标识，即一个数据链路层地址。</p>
</li>
<li class="lvl-2">
<p>在每个主机发送的帧中，都必须包含目的主机的数据链路层地址。由于这类地址是用于媒体接入控制的，因此又称为 Media Access Control Address，简称 MAC 地址。</p>
<ul class="lvl-2">
<li class="lvl-4">MAC 地址一般由网卡的制造商来分配，被固化在 EEPROM 中，每个网卡都有一个唯一的 MAC 地址，这称之为<strong>硬件地址</strong>。但是，近年来，一些设备提供了随机生成 MAC 地址的功能，这样就可以保护用户的隐私。</li>
<li class="lvl-4">有时也被称为<strong>物理地址</strong>，但是这种说法不准确，因为 MAC 地址并不是物理上的地址，<strong>而是逻辑上的地址</strong>。</li>
</ul>
</li>
<li class="lvl-2">
<p>一般，用户有两个网络适配器，一个是有线网卡，一个是无线网卡，每个网卡都有一个唯一的 MAC 地址。<strong>这是对接口的唯一标识，而不是对设备的唯一标识</strong>。</p>
</li>
</ul>
<h3 id="IEEE-802-MAC-地址">IEEE 802 MAC 地址</h3>
<p>IEEE 802 MAC 地址是指在 IEEE 802 标准中定义的 MAC 地址，它是一个 48 位的二进制数，通常用 12 位的十六进制数表示。也是扩展的唯一标识符 EUI-48。</p>
<p>通过 MAC 地址，我们可以知道这个网卡是由哪个厂商生产的，这个网卡是什么型号，这个网卡是什么时候生产的。</p>
<p>IEEE 802 MAC 地址的前 24 位称为组织唯一标识符 OUI，由 IEEE 的注册管理机构分配给组织，用于标识组织。这 24位分成3个字段，每个字段包含 8 位，称为 OUI 的第一、第二、第三字节。</p>
<p>IEEE 802 MAC 地址的后 24 位称为扩展标识符 EI，由组织自行分配，用于标识组织内的设备。这 24 位分成 3 个字段，每个字段包含 8 位，称为 EI 的第一、第二、第三字节。也叫第四、第五、第六字节。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>标准表示法: XX-XX-XX-XX-XX-XX<br>
例如: 00-0C-29-3F-2C-1A<br>
这在 Windows 系统中使用的是最常见的表示法。</p>
</li>
<li class="lvl-2">
<p>以太网表示法: XX:XX:XX:XX:XX:XX<br>
例如: 00:0C:29:3F:2C:1A<br>
这在 Linux 系统中使用的是最常见的表示法。IOS、Mac OS X、Android 也使用这种表示法。</p>
</li>
<li class="lvl-2">
<p>无分隔符表示法: XXXXXXXXXXXX<br>
例如: 000C293F2C1A<br>
这种表示法在 Cisco IOS 中使用。</p>
</li>
<li class="lvl-2">
<p>其他表示法 1: XX.XX.XX.XX.XX.XX<br>
例如: 00.0C.29.3F.2C.1A</p>
</li>
<li class="lvl-2">
<p>其他表示法 2: XXXX-XXXX-XXXX<br>
例如: 000C-293F-2C1A</p>
</li>
<li class="lvl-2">
<p>其他表示法 3: XXXX.XXXX.XXXX<br>
例如: 000C.293F.2C1A</p>
</li>
</ul>
<p><img src="./IEEE-MAC.png" alt></p>
<blockquote>
<p>第一字节</p>
</blockquote>
<table>
<thead>
<tr>
<th>位</th>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>b0</td>
<td>0</td>
<td>单播地址</td>
</tr>
<tr>
<td>b0</td>
<td>1</td>
<td>组播地址</td>
</tr>
<tr>
<td>b1</td>
<td>0</td>
<td>全球管理</td>
</tr>
<tr>
<td>b1</td>
<td>1</td>
<td>本地管理</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>b0=0</th>
<th>b0=1</th>
<th>b1=0</th>
<th>b1=1</th>
<th>MAC 地址类型</th>
<th>地址占比</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td>全球管理单播地址</td>
<td>25%</td>
<td>厂商生产网络设备时固化</td>
</tr>
<tr>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td>本地管理单播地址</td>
<td>25%</td>
<td>由网络管理员分配</td>
</tr>
<tr>
<td></td>
<td>√</td>
<td>√</td>
<td></td>
<td>全球管理组播地址</td>
<td>25%</td>
<td></td>
</tr>
<tr>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td>本地管理组播地址</td>
<td>25%</td>
<td>用户对主机进行配置时使用，如果剩余46位全为1，则表示广播地址 FF-FF-FF-FF-FF-FF</td>
</tr>
</tbody>
</table>
<p>所以可以计算总地址数量为 $2^{48} = 281,474,976,710,656$ 个。</p>
<h2 id="IP-地址">IP 地址</h2>
<p>IP 地址是指互联网协议地址，它是一个 32 位的二进制数，通常用 4 个 8 位的十进制数表示。属于网络层的地址。</p>
<h3 id="IP-地址的作用">IP 地址的作用</h3>
<p>IP 地址是因特网上主机和路由器的标识符，用于标识两部分信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网络号：用于标识主机所在的网络</p>
</li>
<li class="lvl-2">
<p>主机号：用于标识主机</p>
</li>
</ul>
<p>所以，MAC 地址不具备区分网络的能力，而 IP 地址具备区分网络的能力。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果是单独网络，不接入因特网，那么只需要使用 MAC 地址就可以了。</p>
</li>
<li class="lvl-2">
<p>如果是接入因特网，那么就需要 IP 地址与 MAC 地址配合使用。</p>
</li>
</ul>
<h2 id="ARP-协议">ARP 协议</h2>
<p>ARP 协议是指地址解析协议，它是一种将 IP 地址解析为 MAC 地址的协议，属于网络层的协议。</p>
<p><img src="./conclude.png" alt></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-07</title>
    <url>/2023/12/02/1/</url>
    <content><![CDATA[<h2 id="集线器与交换机">集线器与交换机</h2>
<blockquote>
<p>使用双绞线和集线器 HUB 的星形以太网</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用集线器的以太网在<strong>逻辑上仍然是一个总线网</strong>，各站共享总线资源，使用的是 CSMA/CD 协议。</p>
</li>
<li class="lvl-2">
<p>集线器<strong>工作在物理层</strong>，只是将收到的信号放大后再转发，不具备任何的逻辑功能。</p>
</li>
<li class="lvl-2">
<p>集线器一般拥有少量容错能力以及故障管理能力，但是这些功能都是<strong>基于物理层</strong>的，而不是基于数据链路层的。</p>
</li>
</ul>
<p>使用集线器 HUB 在物理层扩展以太网。但是，存在以下问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>以太网的带宽是共享的，当网络中的主机数量增多时，带宽会越来越小。</p>
</li>
<li class="lvl-2">
<p>以太网的冲突域是共享的，当网络中的主机数量增多时，冲突域会越来越大，冲突会越来越多，网络的性能会越来越差。</p>
</li>
</ul>
<blockquote>
<p>使用交换机 SWITCH 的以太网</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>以太网交换机通常有 24 个或 48 个端口，每个端口都是一个独立的冲突域，因此，以太网交换机可以将一个以太网划分成多个冲突域，从而提高网络的性能。</p>
</li>
<li class="lvl-2">
<p>一般工作在<strong>全双工模式</strong>，因此，可以同时发送和接收数据，不会发生冲突。</p>
</li>
<li class="lvl-2">
<p>一般工作在<strong>数据链路层</strong>，具有数据链路层的逻辑功能，可以<strong>识别以太网帧的 MAC 地址</strong>，从而可以根据 MAC 地址转发数据帧。</p>
</li>
<li class="lvl-2">
<p>具有<strong>并行性</strong>，能同时连通多个端口，因此，可以同时转发多个数据帧。</p>
</li>
<li class="lvl-2">
<p>交换机是一种即插即用的设备，其内部帧交换表是<strong>自学习</strong>的，不需要管理员配置。</p>
</li>
<li class="lvl-2">
<p>使用两种交换方式：<strong>存储转发</strong>和<strong>直通转发</strong></p>
</li>
</ul>
<p><img src="./hubVSswitch.png" alt></p>
<p>现在，以太网交换机已经成为以太网的主流设备，集线器已经被淘汰。</p>
<h2 id="交换机自学习与转发">交换机自学习与转发</h2>
<p>交换机是一种即插即用的设备，刚刚启动时，交换机的帧交换表是空的，交换机不知道哪个端口连接哪个主机，也不知道哪个 MAC 地址在哪个端口，因此，交换机需要学习。</p>
<p>流程：</p>
<ol>
<li class="lvl-3">
<p>当交换机收到一个数据帧时，交换机会提取数据帧中的源 MAC 地址，然后将源 MAC 地址和接收到该数据帧的端口号记录在交换机的帧交换表中。</p>
</li>
<li class="lvl-3">
<p>当交换机收到一个数据帧时，交换机会提取数据帧中的目的 MAC 地址，然后在交换机的帧交换表中查找该目的 MAC 地址对应的端口号。</p>
</li>
<li class="lvl-3">
<p>如果找到了，交换机就将该数据帧转发到该端口，否则，交换机就将该数据帧转发到所有的端口（广播）。</p>
</li>
</ol>
<p>然而，交换机的帧交换表是会自动删除的，这是因为，当主机断开连接时，交换机就无法再收到该主机发送的数据帧，因此，交换机就无法再学习该主机的 MAC 地址，因此，交换机需要定期删除帧交换表中的记录。</p>
<h2 id="交换机生成树协议-STP">交换机生成树协议 STP</h2>
<p>交换机生成树协议 Spanning Tree Protocol，简称 STP，是一种<strong>链路层</strong>的<strong>网络协议</strong>，用于在<strong>有环路</strong>的<strong>以太网</strong>中防止<strong>广播风暴</strong>。</p>
<p>添加冗余链路，提高网络的可靠性。但是，添加冗余链路会导致环路，导致以下问题</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>广播风暴</strong>：大量消耗网络资源，导致网络瘫痪。</p>
</li>
<li class="lvl-2">
<p>主机收到<strong>重复的广播帧</strong>，导致网络性能下降。</p>
</li>
<li class="lvl-2">
<p>交换机的<strong>帧交换震荡</strong>：交换机的帧交换表中的记录不断变化，导致网络性能下降。</p>
</li>
</ul>
<p>所以，需要一种协议来解决这些问题，这就是 STP。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不论网络中有多少个交换机，STP 都能够自动计算出一棵<strong>无环路</strong>的<strong>生成树</strong>，从而防止广播风暴。</p>
</li>
</ul>
<blockquote>
<p>最终生成的树型拓扑结构要<strong>连通整个网络</strong>；首次连接交换机或网络物理拓扑结构发生变化时，STP 会<strong>重新计算生成树</strong>。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>STP 通过<strong>端口状态</strong>来防止<strong>帧交换震荡</strong>，从而提高网络性能。</p>
</li>
</ul>
<h2 id="虚拟局域网-VLAN">虚拟局域网 VLAN</h2>
<p>虚拟局域网 Virtual Local Area Network，简称 VLAN，是一种<strong>链路层</strong>的<strong>网络协议</strong>，用于在<strong>物理上</strong>将<strong>一个局域网</strong>分割成<strong>多个虚拟局域网</strong>，从而实现<strong>逻辑上的隔离</strong>。</p>
<h3 id="巨大的广播域">巨大的广播域</h3>
<p>以太网交换机可以将一个以太网划分成多个冲突域，从而提高网络的性能。但是，以太网交换机不能将一个以太网划分成多个广播域，因此，以太网交换机不能实现逻辑上的隔离。巨大的广播域会导致以下问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安全性差：网络中的主机可以通过 ARP 欺骗攻击等方式攻击其他主机。</p>
</li>
<li class="lvl-2">
<p>网络性能差：网络中的主机可以通过大量的广播帧来消耗网络资源，导致网络瘫痪。</p>
</li>
<li class="lvl-2">
<p>网络管理困难：网络管理员无法对网络中的主机进行有效的管理。</p>
</li>
</ul>
<h3 id="网络中会频繁出现广播信息">网络中会频繁出现广播信息</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>TCP/IP</strong></p>
<ul class="lvl-2">
<li class="lvl-4">ARP 已知 IP 地址获取 MAC 地址</li>
<li class="lvl-4">DHCP 动态主机配置协议</li>
<li class="lvl-4">ICMP 互联网控制报文协议</li>
<li class="lvl-4">RIP 路由信息协议</li>
</ul>
</li>
<li class="lvl-2">
<p>NetBIOS</p>
<ul class="lvl-2">
<li class="lvl-4">NetBIOS Name Service</li>
<li class="lvl-4">NetBIOS Datagram Service</li>
<li class="lvl-4">NetBIOS Session Service</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>NetBEUI</strong></p>
<ul class="lvl-2">
<li class="lvl-4">NetBEUI Name Service</li>
<li class="lvl-4">NetBEUI Datagram Service</li>
<li class="lvl-4">NetBEUI Session Service</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>IPX/SPX</strong></p>
<ul class="lvl-2">
<li class="lvl-4">SAP 服务广播协议</li>
<li class="lvl-4">RIPX 路由信息协议</li>
<li class="lvl-4">NCP NetWare 核心协议</li>
<li class="lvl-4">SPX NetWare 传输协议</li>
</ul>
</li>
<li class="lvl-2">
<p>AppleTalk 苹果公司的网络协议</p>
</li>
</ul>
<h3 id="虚拟局域网-VLAN-技术">虚拟局域网 VLAN 技术</h3>
<p>分割广播域的方法，可以使用路由器隔离广播域，但是路由器成本高，性能差，不适合在局域网中使用。</p>
<p>VLAN 可以将一个以太网划分成多个广播域，从而实现逻辑上的隔离。</p>
<h2 id="VLAN-的实现方法">VLAN 的实现方法</h2>
<p>这需要交换机支持 VLAN 功能，交换机需要支持以下两种功能：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>IEEE 802.1Q 协议</p>
</li>
<li class="lvl-2">
<p>交换机端口类型</p>
</li>
</ul>
<p><img src="./802Q.png" alt></p>
<h3 id="端口类型">端口类型</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Access 端口：连接主机的端口，只能属于一个 VLAN。</p>
</li>
<li class="lvl-2">
<p>Trunk 端口：连接交换机的端口，可以属于多个 VLAN。</p>
</li>
<li class="lvl-2">
<p>Hybrid 端口：连接主机的端口，可以属于多个 VLAN。但是思科交换机不支持该端口类型。</p>
</li>
</ul>
<p>交换机各端口的省缺 VLAN ID</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>思科交换机：Native VLAN，即本征 VLAN</p>
</li>
<li class="lvl-2">
<p>华为交换机：Port VLAN ID，即端口 VLAN ID, PVID</p>
</li>
</ul>
<h4 id="Access-端口">Access 端口</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>Access 端口只能属于一个 VLAN，因此，Access 端口只能接收属于该 VLAN 的数据帧。</p>
</li>
<li class="lvl-2">
<p>Access 端口可以连接主机，也可以连接路由器。</p>
</li>
<li class="lvl-2">
<p>Access 端口可以连接另一个交换机，但是，另一个交换机的端口必须是 Trunk 端口。</p>
</li>
</ul>
<p><img src="./access.png" alt></p>
<h4 id="Trunk-端口">Trunk 端口</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>Trunk 端口可以属于多个 VLAN，因此，Trunk 端口可以接收多个 VLAN 的数据帧。</p>
</li>
<li class="lvl-2">
<p>Trunk 端口只能连接交换机，不能连接主机。</p>
</li>
<li class="lvl-2">
<p>Trunk 端口可以连接另一个交换机，但是，另一个交换机的端口必须是 Trunk 端口。</p>
</li>
</ul>
<p>Trunk 端口发送处理方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对于等于本征 VLAN ID 的数据帧，交换机会将其发送到本征 VLAN 中。</p>
</li>
<li class="lvl-2">
<p>对于不等于本征 VLAN ID 的数据帧，交换机会将其发送到所有的 VLAN 中。</p>
</li>
</ul>
<p>Trunk 端口接收处理方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对于等于本征 VLAN ID 的数据帧，交换机会将其发送到本征 VLAN 中。</p>
</li>
<li class="lvl-2">
<p>对于不等于本征 VLAN ID 的数据帧，交换机会将其丢弃。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-08</title>
    <url>/2023/12/08/1/</url>
    <content><![CDATA[<h2 id="网络层">网络层</h2>
<p>网络层的主要功能是将分组从源端传送到目的端，网络层的两个主要问题是路由和拥塞控制。</p>
<p>实现网络层需要解决的问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>向运输层提供的服务：尽最大努力交付、带宽保证、时延保证、安全性</p>
</li>
<li class="lvl-2">
<p>网络层寻址问题：IP地址</p>
</li>
<li class="lvl-2">
<p>路由选择问题：路由选择算法</p>
</li>
</ul>
<p>网络层在 TCP/IP 协议族中叫网际层，主要包括 IP 协议、ICMP 协议、ARP 协议和 RARP 协议。</p>
<h3 id="网络层的两种主要服务模式">网络层的两种主要服务模式</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>面向连接的虚电路服务</p>
</li>
<li class="lvl-2">
<p>无连接的数据报服务</p>
</li>
</ul>
<h4 id="虚电路">虚电路</h4>
<p>虚电路是一种面向连接的服务，虚电路的建立需要消耗网络资源，虚电路的拆除也需要消耗网络资源。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>可靠通信由网络层保证，网络层使用确认、超时重传、序号、流量控制等机制保证可靠通信</p>
</li>
<li class="lvl-2">
<p>必须建立网络层连接–虚电路 Virtual Circuit，虚电路由三部分组成：虚电路标识符、源和目的地址、沿途经过的路由器序列</p>
</li>
<li class="lvl-2">
<p>目的主机的地址仅在建立连接时使用，之后沿途的路由器使用虚电路标识符来识别虚电路</p>
</li>
<li class="lvl-2">
<p>通信结束后，必须拆除网络层连接，释放网络资源</p>
</li>
</ul>
<h4 id="数据报">数据报</h4>
<p>数据报是一种无连接的服务，数据报不需要建立连接，也不需要拆除连接，因此不需要消耗网络资源。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不可靠通信，网络层不保证数据报能够成功到达目的地</p>
</li>
<li class="lvl-2">
<p>不需要建立网络层连接，不需要消耗网络资源</p>
</li>
<li class="lvl-2">
<p>每个分组都携带完整的目的地址，因此每个分组都可以独立发送，沿途的路由器也可以独立转发</p>
</li>
<li class="lvl-2">
<p>每个分组的转发路由可以不同，因此分组可能不按序到达</p>
</li>
<li class="lvl-2">
<p>网络本身不提供端到端的可靠传输服务，使得路由器的设计和实现变得简单</p>
</li>
<li class="lvl-2">
<p>将复杂的网络处理功能放在端系统中，使得网络层的设计和实现变得简单</p>
</li>
</ul>
<h2 id="IP-协议">IP 协议</h2>
<p>有关 IP 协议中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>分类编址 IPv4 地址</p>
</li>
<li class="lvl-2">
<p>划分子网</p>
</li>
<li class="lvl-2">
<p>无分类编址 CIDR</p>
</li>
<li class="lvl-2">
<p>IPv4 地址应用规划</p>
</li>
</ul>
<p>详见 <span class="exturl" data-url="aHR0cHM6Ly95dXpoaWkwNzE4LmdpdGh1Yi5pby8yMDIzLzA2LzA0LzIv">计算机网络（IPv4部分）<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="IP-数据报的发送和转发">IP 数据报的发送和转发</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>主机发送 IP 数据报</p>
</li>
<li class="lvl-2">
<p>路由器转发 IP 数据报</p>
</li>
</ul>
<p>略…</p>
<h2 id="路由">路由</h2>
<p>路由是指从源到目的地的路径，路由选择是指在多个路由中选择一条路由的过程。</p>
<h3 id="静态路由配置以及可能产生的问题">静态路由配置以及可能产生的问题</h3>
<p>静态路由配置是指在路由器中手动配置路由表，静态路由配置的优点是简单、可靠，缺点是不适合大型网络。</p>
<p>静态路由配置的问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>静态路由配置不适合大型网络</p>
</li>
<li class="lvl-2">
<p>静态路由配置不适合网络拓扑变化频繁的网络</p>
</li>
<li class="lvl-2">
<p>静态路由配置不适合网络中的路由器故障频繁的网络</p>
</li>
</ul>
<p>静态路由的过程：</p>
<ol>
<li class="lvl-3">
<p>路由器收到数据报，检查目的地址，如果目的地址在路由表中，则转发数据报，否则执行下一步</p>
</li>
<li class="lvl-3">
<p>路由器将数据报转发给默认路由器，如果默认路由器不在，则丢弃数据报</p>
</li>
</ol>
<p>默认路由器是指当路由表中没有目的地址的路由时，路由器将数据报转发给默认路由器。</p>
<p>特定主机路由过程：</p>
<ol>
<li class="lvl-3">
<p>路由器收到数据报，检查目的地址，如果目的地址在路由表中，则转发数据报，否则执行下一步</p>
</li>
<li class="lvl-3">
<p>路由器将数据报转发给默认路由器，如果默认路由器不在，则丢弃数据报</p>
</li>
</ol>
<p>特定主机路由网络前缀是 32 位，默认路由网络前缀是 0 位。</p>
<p>所以，特定主机路由网络前缀最长，路由最具体；默认路由网络前缀最短，路由最笼统。</p>
<p>为了<strong>防止 IP 数据报在路由环路中永久循环</strong>，IP 协议规定每个 IP 数据报的<strong>生存时间字段 TTL</strong>，每经过一个路由器，TTL 减 1，当 TTL 为 0 时，路由器丢弃该数据报。</p>
<p>聚合了不存在的网络前缀的路由称为黑洞路由，黑洞路由的作用是丢弃数据报，不向源主机发送任何 ICMP 消息。</p>
<p>黑洞路由的下一跳地址是 null0，null0 是一个虚拟接口，它不属于任何网络，它的作用是丢弃数据报。</p>
<h2 id="路由选择协议">路由选择协议</h2>
<table>
<thead>
<tr>
<th style="text-align:center">静态路由</th>
<th style="text-align:center">动态路由</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工配置</td>
<td style="text-align:center">自动配置</td>
</tr>
<tr>
<td style="text-align:center">适合小型网络</td>
<td style="text-align:center">适合大型网络</td>
</tr>
<tr>
<td style="text-align:center">不适合网络拓扑变化频繁的网络</td>
<td style="text-align:center">适合网络拓扑变化频繁的网络</td>
</tr>
<tr>
<td style="text-align:center">不适合网络中的路由器故障频繁的网络</td>
<td style="text-align:center">适合网络中的路由器故障频繁的网络</td>
</tr>
</tbody>
</table>
<p>因特网所采用的路由选择协议的特点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>自适应：动态路由选择，能较好的适应网络拓扑变化</p>
</li>
<li class="lvl-2">
<p>分布式：路由器之间交换路由信息</p>
</li>
<li class="lvl-2">
<p>分层次：整个因特网划分为多个自治系统(Autonomous System)，每个自治系统内部使用某种路由选择协议，自治系统之间使用某种路由选择协议</p>
</li>
</ul>
<blockquote>
<p>自治系统内部使用 <code>IGP</code>（Interior Gateway Protocol）协议，自治系统之间使用 <code>EGP</code>（Exterior Gateway Protocol）协议；<code>IGP</code> 协议有 <strong>RIP、OSPF</strong>、IS-IS、IGRP、EIGRP 等；<code>EGP</code> 协议有 <strong>BGP</strong> 等。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>RIP 协议：路由信息协议；基于<strong>距离向量</strong></p>
<ul class="lvl-2">
<li class="lvl-4">在因特网最早使用</li>
</ul>
</li>
<li class="lvl-2">
<p>IGRP 协议：内部网关路由选择协议；基于<strong>距离向量</strong></p>
<ul class="lvl-2">
<li class="lvl-4">用于 Cisco 路由器</li>
<li class="lvl-4">但是 IGRP 协议是私有协议，不是开放协议，现在已被 EIGRP 协议取代</li>
</ul>
</li>
<li class="lvl-2">
<p>OSPF 协议：开放最短路径优先协议；基于<strong>链路状态</strong></p>
<ul class="lvl-2">
<li class="lvl-4">用于大型网络，在因特网中使用较多</li>
</ul>
</li>
<li class="lvl-2">
<p>IS-IS 协议：中间系统到中间系统协议；基于<strong>链路状态</strong></p>
<ul class="lvl-2">
<li class="lvl-4">集成化 IS-IS 协议是 ISP 网络中使用的一种 IGP 协议</li>
</ul>
</li>
</ul>
<hr>
<p>路由器的基本结构：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>输入端口</p>
</li>
<li class="lvl-2">
<p>交换结构</p>
</li>
<li class="lvl-2">
<p>输出端口</p>
</li>
</ul>
<blockquote>
<ol>
<li class="lvl-3">
<p>路由表一般包含两个部分：目的地址和下一跳地址</p>
</li>
<li class="lvl-3">
<p>路由表需要对网络拓扑变化做出响应，因此路由表需要动态更新</p>
</li>
<li class="lvl-3">
<p>转发表是路由表的一部分</p>
</li>
<li class="lvl-3">
<p>转发表的结构应当使查找过程尽可能快速</p>
</li>
</ol>
</blockquote>
<h2 id="RIP-协议-距离向量路由选择协议">RIP 协议 - 距离向量路由选择协议</h2>
<p>路由信息协议 RIP（Routing Information Protocol）是一种距离向量路由选择协议，RIP 协议使用距离作为路由选择的度量，距离的度量单位是跳数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>RIP 协议是内部网关协议 IGP 中最先得到广泛应用的一种协议，相关文档是 RFC 1058</p>
</li>
<li class="lvl-2">
<p>该协议要求 AS 内的所有路由器都运行 RIP 协议，维护从它到其他所有目的网络的距离向量(距离向量 D-V Distance Vector)</p>
</li>
<li class="lvl-2">
<p>使用跳数(Hop Count)作为距离的度量单位</p>
<ul class="lvl-2">
<li class="lvl-4">最大跳数为 15，超过 15 跳的网络被认为是不可达的</li>
<li class="lvl-4">路由器到直连网络的距离为 1</li>
<li class="lvl-4">路由器到其他网络的距离为 1 加上到达该路由器的距离</li>
</ul>
</li>
<li class="lvl-2">
<p>RIP 协议使用 UDP 端口号 520</p>
</li>
</ul>
<blockquote>
<p>RIP 认为，跳数越少，路径越短，因此跳数越少的路径越好。当到达同一目的网络的两条路径的跳数相同时，RIP 协议可以进行等价<strong>负载均衡</strong>。</p>
</blockquote>
<p>RIP 包含 3 个要点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>和邻居交换路由信息(和谁)</p>
</li>
<li class="lvl-2">
<p>路由信息的更新(什么)</p>
</li>
<li class="lvl-2">
<p>周期性交换信息(何时)</p>
</li>
</ul>
<hr>
<h3 id="RIP-协议的基本工作过程">RIP 协议的基本工作过程</h3>
<ol>
<li class="lvl-3">
<p>路由器收到 RIP 报文，检查报文类型，如果是请求报文，则执行下一步，否则丢弃该报文</p>
</li>
<li class="lvl-3">
<p>路由器检查请求报文中的目的地址，如果目的地址是本路由器，则执行下一步，否则丢弃该报文</p>
</li>
<li class="lvl-3">
<p>路由器将本路由器的路由表中的所有路由信息封装在响应报文中，发送给请求报文的源路由器</p>
</li>
</ol>
<blockquote>
<ol>
<li class="lvl-3">
<p>路由器刚开始工作时，只知道自己到直连网络的距离为 1，其他网络的距离为 16</p>
</li>
<li class="lvl-3">
<p>路由器仅和直接相连的路由器交换路由信息</p>
</li>
<li class="lvl-3">
<p>若干次交换后，路由器就可以获得到达其他网络的距离，称之为收敛</p>
</li>
</ol>
</blockquote>
<hr>
<p>RIP 协议的缺点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>RIP 协议的最大跳数为 15，因此 RIP 协议只适合小型网络</p>
</li>
<li class="lvl-2">
<p>RIP 协议的收敛速度慢，因为 RIP 协议的更新时间间隔为 30 秒，因此 RIP 协议的收敛时间为 90 秒</p>
</li>
<li class="lvl-2">
<p>RIP 协议的路由选择不是最优的，因为 RIP 协议的路由选择是基于距离的，而不是基于带宽的</p>
</li>
</ul>
<h2 id="OSPF-协议-开放最短路径优先协议">OSPF 协议 - 开放最短路径优先协议</h2>
<p>开放最短路径优先协议 OSPF（Open Shortest Path First）是一种链路状态路由选择协议，OSPF 协议使用最短路径作为路由选择的度量，最短路径的度量单位是代价。最短路径优先算法是 Dijkstra 提出的 SPF 算法。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>OSPF 协议是内部网关协议 IGP 中最先得到广泛应用的一种协议，相关文档是 RFC 2328</p>
</li>
<li class="lvl-2">
<p>该协议要求 AS 内的所有路由器都运行 OSPF 协议，维护从它到其他所有目的网络的链路状态(链路状态 L-S Link State)</p>
</li>
<li class="lvl-2">
<p>使用代价(Cost)作为距离的度量单位</p>
<ul class="lvl-2">
<li class="lvl-4">代价越小，路径越短，因此代价越小的路径越好</li>
<li class="lvl-4">代价的计算公式：代价 = 100Mbps / 带宽</li>
</ul>
</li>
<li class="lvl-2">
<p>OSPF 协议使用 IP 协议号 89</p>
</li>
</ul>
<hr>
<p>该协议相邻路由器之间通过交互问候(Hello)报文来建立邻居关系，通过交互链路状态(LS)报文来交换链路状态信息。</p>
<p>OSPF 有五种分组：</p>
<ol>
<li class="lvl-3">
<p>问候(Hello)分组：用于建立邻居关系</p>
</li>
<li class="lvl-3">
<p>数据库描述(Database Description)分组：用于交换链路状态数据库</p>
</li>
<li class="lvl-3">
<p>链路状态请求(Link State Request)分组：用于请求链路状态信息</p>
</li>
<li class="lvl-3">
<p>链路状态更新(Link State Update)分组：用于发送链路状态信息</p>
</li>
<li class="lvl-3">
<p>链路状态确认(Link State Acknowledgement)分组：用于确认链路状态信息</p>
</li>
</ol>
<h2 id="BGP-协议-边界网关协议">BGP 协议 - 边界网关协议</h2>
<p>边界网关协议 BGP（Border Gateway Protocol）是一种路径矢量路由选择协议，BGP 协议使用路径作为路由选择的度量，路径的度量单位是 AS。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在不同的自治系统内，度量路由的代价是不同的，因此代价不适合作为路由选择的度量单位。</p>
</li>
<li class="lvl-2">
<p>自治系统间的路由选择需要考虑自治系统间的策略，比如政治、经济、安全等因素。</p>
</li>
<li class="lvl-2">
<p>BGP 协议是外部网关协议 EGP 中最先得到广泛应用的一种协议，相关文档是 RFC 4271</p>
</li>
</ul>
<h3 id="BGP-协议的基本工作过程">BGP 协议的基本工作过程</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>管理员在配置 BGP 协议时，需要配置至少一个路由器作为该自治系统的 <code>BGP 发言人</code>，该路由器负责和其他自治系统的 <code>BGP 发言人</code> 交换路由信息</p>
</li>
<li class="lvl-2">
<p>不同自治系统的 <code>BGP 发言人</code> 之间交换信息，必须建立 TCP 连接，使用 TCP 端口号 179</p>
</li>
<li class="lvl-2">
<p>使用TCP 连接交换路由信息的两个 <code>BGP 发言人</code> 之间称为 <code>BGP 对等体</code>/<code>邻站</code>/<code>对等点</code>/<code>对等路由器</code></p>
</li>
<li class="lvl-2">
<p><code>BGP 发言人</code> 除了运行 BGP 协议，还需要运行 IGP 协议，IGP 协议用于在自治系统内部交换路由信息，BGP 协议用于在自治系统之间交换路由信息</p>
</li>
</ul>
<hr>
<p>BGP-4 的四种分组：</p>
<ol>
<li class="lvl-3">
<p>打开(Open)分组：用于建立 TCP 连接</p>
</li>
<li class="lvl-3">
<p>更新(Update)分组：用于交换路由信息</p>
</li>
<li class="lvl-3">
<p>通知(Notification)分组：用于通知错误信息</p>
</li>
<li class="lvl-3">
<p>空闲(Keepalive)分组：用于保持 TCP 连接</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-09</title>
    <url>/2023/12/21/1/</url>
    <content><![CDATA[<h2 id="IPv4-数据报的首部格式">IPv4 数据报的首部格式</h2>
<p><img src="./IPv4-DataGram-Header-Format.png" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>版本：4 位，指明 IP 协议的版本，IPv4 的版本号为 4</p>
</li>
<li class="lvl-2">
<p>首部长度：4 位，指明首部的长度，单位为 4 字节，最大值为 15，即最大长度为 60 字节</p>
</li>
<li class="lvl-2">
<p>区分服务：8 位，用于指明数据报的优先级，最高 3 位为优先级，最低 3 位为服务类型，中间 2 位保留</p>
</li>
<li class="lvl-2">
<p>总长度：16 位，指明整个数据报的长度，单位为字节，最大值为 65535 字节</p>
</li>
<li class="lvl-2">
<p>可选项：可选项的长度为 0 或 4 的倍数，最大长度为 40 字节，可选项的长度由首部长度字段指明</p>
</li>
<li class="lvl-2">
<p>填充：填充字段的长度为 0 或 4 的倍数，最大长度为 40 字节，填充字段的长度由首部长度字段指明</p>
</li>
<li class="lvl-2">
<p>标识：16 位，用于唯一标识主机发送的每一个数据报，当数据报被分片时，每个分片的标识字段相同</p>
</li>
<li class="lvl-2">
<p>标志：3 位，用于指明数据报是否被分片，最高位为保留位，中间位为 DF，最低位为 MF(DF: Don’t Fragment, MF: More Fragment)</p>
</li>
<li class="lvl-2">
<p>片偏移：13 位，用于指明分片的偏移量，单位为 8 字节，最大值为 8191，即最大偏移量为 65528 字节</p>
</li>
</ul>
<blockquote>
<p>这三个字段共同指明了分片的偏移量，当数据报被分片时，每个分片的标识字段相同，标志字段的 MF 位为 1，最后一个分片的 MF 位为 0，每个分片的片偏移字段指明了分片的偏移量，单位为 8 字节，最大值为 8191，即最大偏移量为 65528 字节</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>生存时间：8 位，用于指明数据报在网络中的存活时间，单位为秒，最大值为 255，即最大存活时间为 255 秒(TTL: Time To Live)</p>
</li>
<li class="lvl-2">
<p>协议：8 位，用于指明数据报的上层协议，如 TCP、UDP、ICMP、IGMP 等</p>
</li>
<li class="lvl-2">
<p>首部校验和：16 位，用于校验首部的正确性，不校验数据部分，校验和的计算方法为：将首部中的所有 16 位字相加，然后取反得到校验和，如果计算结果中有进位，则将进位加到最低位中</p>
</li>
<li class="lvl-2">
<p>源地址：32 位，指明发送数据报的主机的 IP 地址</p>
</li>
<li class="lvl-2">
<p>目的地址：32 位，指明接收数据报的主机的 IP 地址</p>
</li>
</ul>
<h2 id="网际控制报文协议-ICMP">网际控制报文协议 ICMP</h2>
<p>ICMP (Internet Control Message Protocol) 是一个网络层协议，它用于在主机和路由器之间传递控制消息，它是 IP 协议的一个子协议，ICMP 报文被封装在 IP 数据报中，ICMP 报文的首部长度为 8 字节</p>
<h3 id="IMCP-差错报文种类">IMCP 差错报文种类</h3>
<ol>
<li class="lvl-3">
<p>目的不可达差错报文目的不可达差错报文用于指明主机或路由器无法将数据报交付给目的主机，目的不可达差错报文的类型字段为 3</p>
</li>
<li class="lvl-3">
<p>源抑制差错报文源抑制差错报文用于指明主机或路由器因为拥塞而丢弃数据报，源抑制差错报文的类型字段为 4</p>
</li>
<li class="lvl-3">
<p>时间超过差错报文时间超过差错报文用于指明数据报在网络中的存活时间超过了生存时间，时间超过差错报文的类型字段为 11</p>
</li>
<li class="lvl-3">
<p>参数问题差错报文参数问题差错报文用于指明主机或路由器收到的数据报中有一些字段的值不正确，参数问题差错报文的类型字段为 12</p>
</li>
<li class="lvl-3">
<p>改变路由差错报文改变路由差错报文用于指明主机或路由器收到的数据报的路由发生了改变，改变路由差错报文的类型字段为 5</p>
</li>
<li class="lvl-3">
<p>重定向差错报文(在某些资料中，重定向差错报文不属于 ICMP 差错报文)<br>
重定向差错报文用于指明主机或路由器收到的数据报的路由发生了改变，重定向差错报文的类型字段为 5</p>
</li>
</ol>
<h3 id="不发送差错报文的情况">不发送差错报文的情况</h3>
<ol>
<li class="lvl-3">
<p>如果数据报的首部校验和不正确，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的生存时间为 0，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的首部长度字段的值小于 5，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是广播地址或多播地址，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是本机地址，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是回环地址，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是</p>
<ul class="lvl-2">
<li class="lvl-6">127.0.0.0</li>
<li class="lvl-6">0.0.0.0</li>
</ul>
</li>
</ol>
<h3 id="常用的-ICMP-询问报文">常用的 ICMP 询问报文</h3>
<ol>
<li class="lvl-3">
<p>回送请求报文回送请求报文用于询问目的主机是否可达，回送请求报文的类型字段为 8</p>
</li>
<li class="lvl-3">
<p>回送应答报文回送应答报文用于回答回送请求报文，回送应答报文的类型字段为 0</p>
</li>
<li class="lvl-3">
<p>时间戳请求报文时间戳请求报文用于询问目的主机的时间，时间戳请求报文的类型字段为 13</p>
</li>
<li class="lvl-3">
<p>时间戳应答报文时间戳应答报文用于回答时间戳请求报文，时间戳应答报文的类型字段为 14</p>
</li>
<li class="lvl-3">
<p>网络掩码请求报文网络掩码请求报文用于询问目的主机的子网掩码，网络掩码请求报文的类型字段为 17</p>
</li>
<li class="lvl-3">
<p>网络掩码应答报文网络掩码应答报文用于回答网络掩码请求报文，网络掩码应答报文的类型字段为 18</p>
</li>
</ol>
<p>其中，第 1、2 种报文是必须的，第 3、4 种报文是可选的，第 5、6 种报文是必须的</p>
<h3 id="典型应用">典型应用</h3>
<ol>
<li class="lvl-3">
<p>ping<br>
ping 是一个常用的网络工具，它用于测试目的主机是否可达，它的原理是向目的主机发送回送请求报文，如果目的主机可达，则目的主机会回答回送应答报文，如果目的主机不可达，则目的主机不会回答回送应答报文简言之：</p>
<ul class="lvl-2">
<li class="lvl-6">ping 用来测试目的主机是否可达</li>
<li class="lvl-6">应用层向网络层发送回送请求报文</li>
<li class="lvl-6">网络层向应用层发送回送应答报文</li>
</ul>
</li>
<li class="lvl-3">
<p>traceroute<br>
traceroute 是一个常用的网络工具，它用于测试数据报从源主机到目的主机经过的路由，它的原理是向目的主机发送回送请求报文，如果目的主机可达，则目的主机会回答回送应答报文，如果目的主机不可达，则目的主机不会回答回送应答报文，traceroute 会向目的主机发送多个回送请求报文，每个回送请求报文的生存时间不同，当数据报的生存时间为 1 时，数据报只能到达第一个路由器，当数据报的生存时间为 2 时，数据报只能到达第二个路由器，以此类推，当数据报的生存时间为 n 时，数据报只能到达第 n 个路由器，当数据报的生存时间为 n+1 时，数据报到达目的主机，traceroute 通过这种方式来确定数据报经过的路由简言之：</p>
<ul class="lvl-2">
<li class="lvl-6">traceroute 用来测试数据报从源主机到目的主机经过的路由</li>
<li class="lvl-6">应用层向网络层发送回送请求报文</li>
<li class="lvl-6">网络层向应用层发送回送应答报文</li>
<li class="lvl-6">每个回送请求报文的生存时间不同</li>
<li class="lvl-6">通过生存时间来确定数据报经过的路由</li>
</ul>
</li>
</ol>
<blockquote>
<p>在 Windows 系统中，ping 和 traceroute (tracert) 都是使用 ICMP 协议，但是在 Linux 系统中，ping 使用 ICMP 协议，traceroute 使用 UDP 协议</p>
</blockquote>
<h2 id="虚拟专用网-VPN-Virtual-Private-Network-以及-网络地址转换-NAT-Network-Address-Translation">虚拟专用网 VPN (Virtual Private Network) 以及 网络地址转换 NAT (Network Address Translation)</h2>
<h3 id="虚拟专用网-VPN">虚拟专用网 VPN</h3>
<p>虚拟专用网 VPN 是一种通过公用网络来搭建专用网络的技术，它的原理是通过加密技术将数据报加密，然后将加密后的数据报封装在 IP 数据报中，再将 IP 数据报封装在 IP 数据报中，最后将 IP 数据报发送到目的主机，目的主机收到 IP 数据报后，将 IP 数据报解封装，然后将解封装后的 IP 数据报发送到目的主机，目的主机收到 IP 数据报后，将 IP 数据报解封装，然后将解封装后的数据报发送到目的主机，这样，源主机和目的主机之间就建立了一条专用的加密通道，这条专用的加密通道就是虚拟专用网 VPN。</p>
<p>虚拟专用网中的各主机所分配到的地址应该是本机构可自由分配的专用地址，而无需申请</p>
<p>在因特网数字分配机构 IANA (Internet Assigned Numbers Authority) 中，有三个地址段是专门用于虚拟专用网的，它们是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>10.0.0.0/8</p>
</li>
<li class="lvl-2">
<p>172.16.0.0/12</p>
</li>
<li class="lvl-2">
<p>192.168.0.0/16</p>
</li>
</ul>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvaXB2NC1hZGRyZXNzLXNwYWNlL2lwdjQtYWRkcmVzcy1zcGFjZS54aHRtbA==">IANA IPv4 Address Space Registry<i class="fa fa-external-link-alt"></i></span></p>
<p>外联网 VPN 的访问需要使用 IP 隧道技术，这里不做介绍。</p>
<h3 id="网络地址转换-NAT">网络地址转换 NAT</h3>
<p>网络地址转换 NAT 是一种通过公用网络来搭建专用网络的技术，它的原理是通过路由器将内部网络的 IP 地址转换为外部网络的 IP 地址，然后再将外部网络的 IP 地址转换为内部网络的 IP 地址，这样，内部网络的主机就可以通过路由器访问外部网络，外部网络的主机也可以通过路由器访问内部网络，这样，内部网络和外部网络之间就建立了一条专用的通道，这条专用的通道就是网络地址转换 NAT。</p>
<p>NAT 的发明是为了解决 IPv4 地址不足的问题，NAT 有三种类型，它们分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>静态 NAT</p>
</li>
<li class="lvl-2">
<p>动态 NAT</p>
</li>
<li class="lvl-2">
<p>PAT (Port Address Translation)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-10</title>
    <url>/2024/03/24/1/</url>
    <content><![CDATA[<h2 id="运输层">运输层</h2>
<p>运输层的主要任务是为应用层提供端到端的通信服务，运输层的协议有 TCP 和 UDP，TCP 提供面向连接的可靠的数据传输服务，UDP 提供无连接的不可靠的数据传输服务。</p>
<p>UDP (User Datagram Protocol) 是无连接的，不可靠的数据传输服务，UDP 不提供可靠的数据传输服务，UDP 不提供拥塞控制，UDP 不提供流量控制，UDP 不提供差错恢复。</p>
<p>TCP (Transmission Control Protocol) 是面向连接的，可靠的数据传输服务，TCP 提供可靠的数据传输服务，TCP 提供拥塞控制，TCP 提供流量控制，TCP 提供差错恢复。</p>
<p>物理层、数据链路层、网络层共同完成了主机之间的通信，但实际上主机之间的通信是进程之间的通信，运输层的主要任务就是为进程之间的通信提供端到端的通信服务。</p>
<p>运输层向高层用户屏蔽了下层通信的细节，运输层向高层用户提供的是<strong>逻辑通信</strong>，而不是物理通信，运输层的逻辑通信是端到端的逻辑通信，而不是主机到主机的逻辑通信。</p>
<h2 id="端口号、复用与分用">端口号、复用与分用</h2>
<p>端口号是一个 16 位的无符号整数，端口号的范围是 0~65535，端口号的范围是 0~1023 的端口号是保留端口号，1024~49151 的端口号是注册端口号，49152~65535 的端口号是动态端口号。</p>
<p>端口号只具有本地意义，端口号只在本地主机中具有唯一性，不同主机中的端口号可以相同，在因特网中，不同计算机中的端口号是没有联系的。</p>
<hr>
<p>复用是指多个应用层进程可以使用同一个运输层协议，分用是指运输层协议可以将收到的分组交付到正确的应用层进程。</p>
<p>在发送方中：</p>
<p>使用 UDP 协议封装的数据报是 UDP 复用，协议号为 17，使用 TCP 协议封装的数据报是 TCP 复用，协议号为 6。</p>
<p>IP 复用是指多个应用层进程可以使用同一个 IP 地址，IP 分用是指 IP 协议可以将收到的数据报交付到正确的主机。</p>
<p>在接接收方中：</p>
<p>使用 UDP 协议封装的数据报是 UDP 分用，使用 TCP 协议封装的数据报是 TCP 分用。</p>
<h3 id="常用的端口号">常用的端口号</h3>
<p>UDP 协议使用的端口号：</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:left">服务</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">520</td>
<td style="text-align:left">RIP (路由信息协议)</td>
</tr>
<tr>
<td style="text-align:center">161</td>
<td style="text-align:left">SNMP (简单网络管理协议)</td>
</tr>
<tr>
<td style="text-align:center">69</td>
<td style="text-align:left">TFTP (简单文件传输协议)</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:left">DNS (域名系统)</td>
</tr>
<tr>
<td style="text-align:center">67/68</td>
<td style="text-align:left">DHCP (动态主机配置协议)</td>
</tr>
</tbody>
</table>
<p>TCP 协议使用的端口号：</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:left">服务</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:left">HTTP (超文本传输协议)</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:left">SMTP (简单邮件传输协议)</td>
</tr>
<tr>
<td style="text-align:center">21/20</td>
<td style="text-align:left">FTP (文件传输协议)</td>
</tr>
<tr>
<td style="text-align:center">179</td>
<td style="text-align:left">BGP (边界网关协议)</td>
</tr>
<tr>
<td style="text-align:center">443</td>
<td style="text-align:left">HTTPS (安全超文本传输协议)</td>
</tr>
</tbody>
</table>
<h2 id="UDP-与-TCP-的对比">UDP 与 TCP 的对比</h2>
<table>
<thead>
<tr>
<th style="text-align:center">UDP</th>
<th style="text-align:left">TCP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无连接</td>
<td style="text-align:left">面向连接</td>
</tr>
<tr>
<td style="text-align:center">不可靠</td>
<td style="text-align:left">可靠</td>
</tr>
<tr>
<td style="text-align:center">不提供拥塞控制</td>
<td style="text-align:left">提供拥塞控制</td>
</tr>
<tr>
<td style="text-align:center">不提供流量控制</td>
<td style="text-align:left">提供流量控制</td>
</tr>
<tr>
<td style="text-align:center">不提供差错恢复</td>
<td style="text-align:left">提供差错恢复</td>
</tr>
<tr>
<td style="text-align:center">适用于实时应用</td>
<td style="text-align:left">适用于可靠传输的应用</td>
</tr>
<tr>
<td style="text-align:center">支持一对一、一对多、多对一、多对多的通信</td>
<td style="text-align:left">只支持一对一的通信</td>
</tr>
<tr>
<td style="text-align:center">首部开销小</td>
<td style="text-align:left">首部开销大</td>
</tr>
</tbody>
</table>
<h2 id="TCP-流量控制">TCP 流量控制</h2>
<p>一般，我们希望数据传输的速度尽可能的快，但是如果发送方的发送速度过快，接收方的接收速度跟不上，那么接收方的缓冲区就会溢出，这就是流量控制的问题。</p>
<p>TCP 通过滑动窗口机制来解决流量控制的问题，滑动窗口是接收方告诉发送方自己的缓冲区还有多少空间，发送方根据接收方的滑动窗口大小来发送数据。</p>
<h2 id="TCP-拥塞控制">TCP 拥塞控制</h2>
<p>拥塞控制是指当网络中的数据包过多时，网络的性能就会下降，这就是拥塞控制的问题。</p>
<p>TCP 通过拥塞窗口来解决拥塞控制的问题，拥塞窗口是发送方告诉接收方网络的拥塞程度，接收方根据发送方的拥塞窗口大小来接收数据。</p>
<p>有4种算法可以用来解决拥塞控制的问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>慢开始算法</p>
</li>
<li class="lvl-2">
<p>拥塞避免算法</p>
</li>
<li class="lvl-2">
<p>快重传算法</p>
</li>
<li class="lvl-2">
<p>快恢复算法</p>
</li>
</ul>
<p>一般，第一种算法与第二种算法结合使用，第三种算法与第四种算法结合使用。</p>
<p>我们创造一个理想环境</p>
<ol>
<li class="lvl-3">
<p>数据单向传输，另一方只传送确认</p>
</li>
<li class="lvl-3">
<p>接收方有足够大的缓冲区，而发送方发送窗口大小由网络拥塞程度决定</p>
</li>
<li class="lvl-3">
<p>以 TCP 最大报文段长度 MSS 个数为单位计算</p>
</li>
</ol>
<h3 id="慢开始算法">慢开始算法</h3>
<p>慢开始算法是指发送方在开始发送数据时，先将拥塞窗口的大小设置为 1，然后每经过一个往返时间 RTT 就将拥塞窗口的大小加倍，直到拥塞窗口的大小达到一个阈值，然后进入拥塞避免算法。</p>
<h3 id="拥塞避免算法">拥塞避免算法</h3>
<p>拥塞避免算法是指发送方在拥塞窗口的大小达到一个阈值之后，每经过一个往返时间 RTT 就将拥塞窗口的大小加 1，直到拥塞窗口的大小达到一个阈值，然后进入快重传算法。</p>
<h3 id="快重传算法">快重传算法</h3>
<p>快重传算法是指接收方在接收到一个失序的数据包时，就立即发送一个重复确认，发送方在接收到 3 个重复确认时就立即重传丢失的数据包。</p>
<h3 id="快恢复算法">快恢复算法</h3>
<p>快恢复算法是指发送方在接收到 3 个重复确认时，就将拥塞窗口的大小减半，然后进入拥塞避免算法。</p>
<h2 id="TCP-超时重传的时间选择">TCP 超时重传的时间选择</h2>
<p>超时重传是TCP协议中的一个重要机制，当发送方发送数据后，如果在一个往返时间 RTT 内没有收到接收方的确认，那么发送方就会重传数据。</p>
<p>RFC 6298 中提出了一个计算超时重传时间的算法：</p>
<p><code>RTO = RTT + 4 * RTTVar</code></p>
<p>RTT 是一个往返时间，RTTVar 是一个往返时间的方差，RTO 是一个超时重传时间。</p>
<p>RTT 的计算公式如下：</p>
<p><code>RTT = (1 - α) * RTT + α * SampleRTT</code></p>
<p>RTTVar 的计算公式如下：</p>
<p><code>RTTVar = (1 - β) * RTTVar + β * |SampleRTT - RTT|</code></p>
<p>α 和 β 是两个参数，一般取值为 0.125。</p>
<hr>
<p>出现超时重传时无法准确计算 RTT 的问题，Karn 算法是解决这个问题的一个方法，在计算加权平均 RTT 时，只要报文段重传了，就不计算这个报文段的 RTT。也就是说，出现重传时，不计算 RTT。而超时重传时间RTO也不会被更新。</p>
<p>但是这样引发了新的问题：如果报文段的时延突然增大了许多，并且长时间不变，那么这个时延就会被忽略，在原来的重传时间内，不会收到确认，导致重传。重传时间无法更新，导致报文段反复重传。</p>
<p>所以要对 Karn 算法进行改进，当报文段重传时，把超时重传时间RTO增大一些，经典的做法是将 RTO 增大一倍。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-11</title>
    <url>/2024/09/04/1/</url>
    <content><![CDATA[<h2 id="参考资料">参考资料</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="cmVsaWFiaWxpdHlodHRwczovL2hvdWJiLmdpdGh1Yi5pby8yMDE5LzA0LzA1L3Byb3RvY29sLXRjcC1pcC0wNS10Y3AtcmVsaWFiaWxpdHkjOn46dGV4dD1UQ1AlMjAlRTglQTYlODElRTYlQjElODIlRTQlQjglOEQlRTglQUUlQkE=">TCP/IP 协议-05-TCP 如何保证传输的可靠性<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl4dWVkdWFuLmNvbS9wb3N0cy9uZXR3b3JrLzAzLXRjcC1yZWxpYWJpbGl0eS8=">计算机网络(三)–TCP如何保证传输可靠性<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ob3ViYi5naXRodWIuaW8vMjAyMy8wMi8yMi9uZXQtMDYtbmV0LXRjcC0xMi10aW1lX3dhaXRfcmVjdl9zeW4=">NET 网络专题汇总-06-12-在 TIME_WAIT 状态的 TCP 连接，收到 SYN 后会发生什么？<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="TCP-可靠传输的实现">TCP 可靠传输的实现</h2>
<p>TCP 基于<strong>以字节为单位的滑动窗口</strong>机制实现可靠传输，TCP 的滑动窗口机制是 TCP 实现可靠传输的核心机制。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送方的发送窗口是根据接收方的接收窗口大小和网络拥塞程度动态调整的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口大小相等的</p>
<ul class="lvl-2">
<li class="lvl-4">网络传送窗口值需要经历一定时间滞后，并且这个时间不是固定的，而是动态变化的</li>
<li class="lvl-4">发送方还可能根据网络拥塞程度调整发送窗口的大小，发送方的发送窗口大小并不总是和接收方的接收窗口大小相等的</li>
</ul>
</li>
<li class="lvl-2">
<p>对于不按序到达的数据的处理,并无明确的说明</p>
<ul class="lvl-2">
<li class="lvl-4">接收方把不按序到达的数据丢弃，那么发送方会重传这些数据，虽然接受窗口的管理比较简单，但是这种方式会导致网络资源的浪费</li>
<li class="lvl-4">通常将不按序到达的数据缓存起来，等待缺失的数据到达后再交付给应用层，这种方式会增加接收方的复杂度，但是可以减少网络资源的浪费</li>
</ul>
</li>
<li class="lvl-2">
<p>TCP 要求接收方必须有累计确认和捎带确认两种确认方式</p>
<ul class="lvl-2">
<li class="lvl-4">这样可以减少传输开销，接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息捎带上去</li>
<li class="lvl-4">但接收方不应该过分延迟确认，否则会导致发送方重传数据，浪费网络资源</li>
<li class="lvl-4">捎带不常用，因为大多数应用程序很少同时在两个方向上传输数据</li>
</ul>
</li>
<li class="lvl-2">
<p>TCP 是全双工通信的，发送方和接收方都有自己的发送窗口和接收窗口</p>
<ul class="lvl-2">
<li class="lvl-4">发送方的发送窗口是根据接收方的接收窗口大小和网络拥塞程度动态调整的</li>
<li class="lvl-4">接收方的接收窗口是根据发送方的发送窗口大小和接收方的处理能力动态调整的</li>
</ul>
</li>
</ul>
<h2 id="TCP-运输连接管理">TCP 运输连接管理</h2>
<h3 id="TCP-连接的建立">TCP 连接的建立</h3>
<p>TCP 连接的建立是三次握手的过程，三次握手的过程是为了确保双方都能够发送和接收数据。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一次握手：客户端发送一个 SYN 报文段给服务器端，请求建立连接</p>
</li>
<li class="lvl-2">
<p>第二次握手：服务器端接收到客户端发送的 SYN 报文段后，发送一个 SYN 报文段和一个 ACK 报文段给客户端，确认客户端的请求</p>
</li>
<li class="lvl-2">
<p>第三次握手：客户端接收到服务器端发送的 SYN 报文段和 ACK 报文段后，发送一个 ACK 报文段给服务器端，确认服务器端的请求</p>
</li>
</ul>
<h3 id="TCP-连接的释放">TCP 连接的释放</h3>
<p>TCP 连接的释放是四次挥手的过程，四次挥手的过程是为了确保双方都能够正确关闭连接。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一次挥手：客户端发送一个 FIN 报文段给服务器端，请求关闭连接</p>
</li>
<li class="lvl-2">
<p>第二次挥手：服务器端接收到客户端发送的 FIN 报文段后，发送一个 ACK 报文段给客户端，确认客户端的请求</p>
</li>
<li class="lvl-2">
<p>第三次挥手：服务器端发送一个 FIN 报文段给客户端，请求关闭连接</p>
</li>
<li class="lvl-2">
<p>第四次挥手：客户端接收到服务器端发送的 FIN 报文段后，发送一个 ACK 报文段给服务器端，确认服务器端的请求</p>
</li>
</ul>
<h2 id="TCP-报文段的首部格式">TCP 报文段的首部格式</h2>
<p>TCP 报文段的首部格式如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>源端口号：16 位，标识发送方的端口号</p>
</li>
<li class="lvl-2">
<p>目的端口号：16 位，标识接收方的端口号</p>
</li>
<li class="lvl-2">
<p>序列号：32 位，标识数据的顺序</p>
</li>
<li class="lvl-2">
<p>确认号：32 位，标识数据的确认</p>
</li>
<li class="lvl-2">
<p>首部长度：4 位，标识首部的长度</p>
</li>
<li class="lvl-2">
<p>URG：1 位，标识紧急指针是否有效</p>
</li>
<li class="lvl-2">
<p>ACK：1 位，标识确认号是否有效</p>
</li>
<li class="lvl-2">
<p>PSH：1 位，标识接收方是否应该立即交付数据</p>
</li>
<li class="lvl-2">
<p>RST：1 位，标识连接是否重置</p>
</li>
<li class="lvl-2">
<p>SYN：1 位，标识连接是否建立</p>
</li>
<li class="lvl-2">
<p>FIN：1 位，标识连接是否释放</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计模式总结 02</title>
    <url>/2024/12/31/1/</url>
    <content><![CDATA[<h2 id="单例模式">单例模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Singleton &#123;
        - instance: Singleton
        - Singleton()
        + getInstance(): Singleton
    &#125;
    note for Singleton &quot;if (instance == null) &#123;
        instance = new Singleton();
        return instance; &#125;&quot;
    Singleton o--&gt; Singleton : instance</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Singleton</p>
</li>
</ul>
<p>单例模式只有一个类，没有接口。</p>
<blockquote>
<p>单例模式是一种创建型设计模式，让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。</p>
</blockquote>
<h2 id="适配器模式">适配器模式</h2>
<pre><code class="highlight mermaid">---
title: class adapter
---
classDiagram
    class Target &#123;
        &lt;&lt;interface&gt;&gt;
        + request()
    &#125;
    class Adaptee &#123;
        + request()
    &#125;
    class Adapter &#123;
        - specificRequest()
    &#125;
    note for Adapter &quot;super.request();&quot;
    class Client
    Client ..&gt; Target
    Target &lt;|.. Adapter
    Adapter --&gt; Adaptee</code></pre>
<pre><code class="highlight mermaid">---
title: object adapter
---
classDiagram
    class Target &#123;
        + request()
    &#125;
    class Adaptee &#123;
        + request()
    &#125;
    class Adapter &#123;
        + specificRequest()
    &#125;
    note for Adapter &quot;adaptee.specificRequest();&quot;
    class Client
    Client ..&gt; Target
    Target &lt;|-- Adapter
    Adapter --&gt; Adaptee</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Target</p>
</li>
<li class="lvl-2">
<p>Adaptee</p>
</li>
<li class="lvl-2">
<p>Adapter</p>
</li>
</ul>
<p>Target 是客户端所期待的接口，Adaptee 是需要适配的类，Adapter 是适配器。</p>
<blockquote>
<p>适配器模式是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。</p>
</blockquote>
<h2 id="桥接模式">桥接模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Implementor &#123;
        &lt;&lt;interface&gt;&gt;
        + operationImpl()
    &#125;
    class ConcreteImplementorA &#123;
        + operationImpl()
    &#125;
    class ConcreteImplementorB &#123;
        + operationImpl()
    &#125;
    class Abstraction &#123;
        + operation()
    &#125;
    class Client
    note for Abstraction &quot;impl.operationImpl();&quot;
    class RefinedAbstraction &#123;
        + operation()
    &#125;
    Abstraction &lt;|-- RefinedAbstraction
    Abstraction o--&gt; Implementor : impl
    ConcreteImplementorA ..|&gt; Implementor
    ConcreteImplementorB ..|&gt; Implementor

    class Client
    Client ..&gt; Abstraction
    Client ..&gt; Implementor</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Implementor - 实现者接口</p>
</li>
<li class="lvl-2">
<p>ConcreteImplementor - 具体实现者</p>
</li>
<li class="lvl-2">
<p>Abstraction - 抽象类</p>
</li>
<li class="lvl-2">
<p>RefinedAbstraction - 扩充抽象类</p>
</li>
</ul>
<blockquote>
<p>桥接模式是一种结构型设计模式，可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用。</p>
</blockquote>
<h2 id="组合模式">组合模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Component &#123;
        &lt;&lt;interface&gt;&gt;
        + operation()
    &#125;
    class Leaf &#123;
        + operation()
    &#125;
    class Composite &#123;
        + operation()
        + add(Component c)
        + remove(Component c)
        + getChild(int index): Component
    &#125;
    note for Composite &quot;for (Component c : children) &#123;
        c.operation(); &#125;&quot;
    class Client
    Component &lt;|-- Leaf
    Component &lt;|-- Composite
    Composite o--&gt; Component : children
    Client ..&gt; Component</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Component - 抽象构件</p>
</li>
<li class="lvl-2">
<p>Leaf - 叶节点</p>
</li>
<li class="lvl-2">
<p>Composite - 容器构件</p>
</li>
</ul>
<blockquote>
<p>组合模式是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。</p>
</blockquote>
<h2 id="装饰器模式">装饰器模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Component &#123;
        + operation()
    &#125;
    class ConcreteComponent &#123;
        + operation()
    &#125;
    class Decorator &#123;
        + operation()
    &#125;
    note for Decorator &quot;component.operation();&quot;
    class ConcreteDecoratorA &#123;
        - addedState
        + operation()
    &#125;
    class ConcreteDecoratorB &#123;
        - addedBehavior
        + operation()
    &#125;
    note for ConcreteDecoratorA &quot;super.operation();
    addedBehavior();&quot;
    Component &lt;|-- ConcreteComponent
    Component &lt;|-- Decorator
    Component &lt;--o Decorator : component
    Decorator &lt;|-- ConcreteDecoratorA
    Decorator &lt;|-- ConcreteDecoratorB</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Component - 抽象构件</p>
</li>
<li class="lvl-2">
<p>ConcreteComponent - 具体构件</p>
</li>
<li class="lvl-2">
<p>Decorator - 抽象装饰器</p>
</li>
<li class="lvl-2">
<p>ConcreteDecorator - 具体装饰器</p>
</li>
</ul>
<blockquote>
<p>装饰器模式是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。</p>
</blockquote>
<h2 id="外观模式">外观模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Subsystem1 &#123;
        + operation1()
    &#125;
    class Subsystem2 &#123;
        + operation2()
    &#125;
    class Subsystem3 &#123;
        + operation3()
    &#125;
    class Facade &#123;
        + operation()
    &#125;
    note for Facade &quot;subsystem1.operation1();
    subsystem2.operation2();
    subsystem3.operation3();&quot;
    Client ..&gt; Facade
    Facade --&gt; Subsystem1 : subsystem1
    Facade --&gt; Subsystem2 : subsystem2
    Facade --&gt; Subsystem3 : subsystem3</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Subsystem - 子系统</p>
</li>
<li class="lvl-2">
<p>Facade - 外观</p>
</li>
</ul>
<blockquote>
<p>外观模式是一种结构型设计模式，它为复杂子系统提供一个简单接口，使其更易于使用。</p>
</blockquote>
<h2 id="代理模式">代理模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Subject &#123;
        &lt;&lt;interface&gt;&gt;
        + request()
    &#125;
    class RealSubject &#123;
        + request()
    &#125;
    class Proxy &#123;
        - realSubject: RealSubject
        + preRequest()
        + request()
        + postRequest()
    &#125;
    note for Proxy &quot;preRequest();
    realSubject.request();
    postRequest();&quot;
    Subject &lt;|-- RealSubject
    Subject &lt;|-- Proxy
    Proxy --&gt; RealSubject : realSubject
    Client ..&gt; Subject</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Subject - 抽象主题</p>
</li>
<li class="lvl-2">
<p>RealSubject - 真实主题</p>
</li>
<li class="lvl-2">
<p>Proxy - 代理</p>
</li>
</ul>
<blockquote>
<p>代理模式是一种结构型设计模式，让你能提供对象的替代品或其占位符。代理控制对于原始对象的访问，并允许在将请求提交给对象前后进行一些处理。</p>
</blockquote>
<h2 id="迭代器模式">迭代器模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Iterator &#123;
        &lt;&lt;interface&gt;&gt;
        + first()
        + next()
        + isDone()
        + currentItem()
    &#125;
    class ConcreteIterator &#123;
        + first()
        + next()
        + isDone()
        + currentItem()
    &#125;
    class Aggregate &#123;
        &lt;&lt;interface&gt;&gt;
        + createIterator()
    &#125;
    class ConcreteAggregate &#123;
        + createIterator()
    &#125;
    Iterator &lt;|.. ConcreteIterator
    Aggregate &lt;|.. ConcreteAggregate
    ConcreteAggregate ..&gt; ConcreteIterator
    ConcreteAggregate &lt;-- ConcreteIterator : aggregate</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Iterator - 迭代器</p>
</li>
<li class="lvl-2">
<p>ConcreteIterator - 具体迭代器</p>
</li>
<li class="lvl-2">
<p>Aggregate - 抽象聚合</p>
</li>
<li class="lvl-2">
<p>ConcreteAggregate - 具体聚合</p>
</li>
</ul>
<blockquote>
<p>迭代器模式是一种行为设计模式， 让你能在不暴露集合底层表现形式（列表、栈和树等）的情况下遍历集合中所有的元素。</p>
</blockquote>
]]></content>
      <categories>
        <category>SoftwareEngineering</category>
      </categories>
  </entry>
  <entry>
    <title>软件设计模式总结 01</title>
    <url>/2024/10/14/1/</url>
    <content><![CDATA[<h2 id="什么是设计模式">什么是设计模式</h2>
<p>设计模式是一套被反复使用、多数人知晓、经过分类编目的代码设计经验的总结。使用设计模式是为了重用代码，让代码更容易被他人理解，保证代码可靠性。</p>
<h3 id="基本要素">基本要素</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>模式名称(Pattern Name)</p>
</li>
<li class="lvl-2">
<p>问题(Problem)</p>
</li>
<li class="lvl-2">
<p>解决方案(Solution)</p>
</li>
<li class="lvl-2">
<p>效果(Consequences)</p>
</li>
</ul>
<h3 id="分类">分类</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>目的</p>
<ul class="lvl-2">
<li class="lvl-4">创建型模式</li>
<li class="lvl-4">结构型模式</li>
<li class="lvl-4">行为型模式</li>
</ul>
</li>
<li class="lvl-2">
<p>作用范围</p>
<ul class="lvl-2">
<li class="lvl-4">类模式</li>
<li class="lvl-4">对象模式</li>
</ul>
</li>
</ul>
<h2 id="OOP-设计原则">OOP 设计原则</h2>
<ol>
<li class="lvl-3">
<p>Single Responsibility Principle 单一职责原则</p>
</li>
<li class="lvl-3">
<p>Open Closed Principle 开闭原则</p>
</li>
<li class="lvl-3">
<p>Liskov Substitution Principle 里氏替换原则</p>
</li>
<li class="lvl-3">
<p>Interface Segregation Principle 接口隔离原则</p>
</li>
<li class="lvl-3">
<p>Dependency Inversion Principle 依赖倒置原则</p>
</li>
<li class="lvl-3">
<p>Composite Reuse Principle 合成复用原则</p>
</li>
<li class="lvl-3">
<p>Law of Demeter 迪米特法则</p>
</li>
</ol>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU09MSUQ=">SOLID - wikipedia<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nZWVrLWRvY3MuY29tL2Rlc2lnbi1wYXR0ZXJuL2Rlc2lnbi1wcmluY2lwbGUvZGVzaWduLXByaW5jaXBsZS1pbmRleC5odG1s">设计原则 - 极客教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="认识-ClassDiagram">认识 ClassDiagram</h2>
<p>参考链接：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkLm5vZGVqcy5jbi9zeW50YXgvY2xhc3NEaWFncmFtLmh0bWw=">中文<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkLmpzLm9yZy9zeW50YXgvY2xhc3NEaWFncmFtLmh0bWw=">英文<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>要素：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>标题</p>
</li>
<li class="lvl-2">
<p>类</p>
</li>
<li class="lvl-2">
<p>符号</p>
</li>
<li class="lvl-2">
<p>连线</p>
</li>
<li class="lvl-2">
<p>箭头</p>
</li>
<li class="lvl-2">
<p>注释</p>
</li>
</ul>
<pre><code class="highlight mermaid">---
title: Animal example
---
classDiagram
    note &quot;From Duck till Zebra&quot;
    Animal &lt;|-- Duck
    note for Duck &quot;can fly\ncan swim\ncan dive\ncan help in debugging&quot;
    Animal &lt;|-- Fish
    Animal &lt;|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck&#123;
        +String beakColor
        +swim()
        +quack()
    &#125;
    class Fish&#123;
        -int sizeInFeet
        -canEat()
    &#125;
    class Zebra&#123;
        +bool is_wild
        +run()
    &#125;
</code></pre>
<h3 id="类、接口、抽象类">类、接口、抽象类</h3>
<pre><code class="highlight mermaid">classDiagram
    class NormalClass1&#123;
        +int age
        +String
        +isMammal() boolean
        +mate() void
    &#125;
    class interface1&#123;
        &lt;&lt;interface&gt;&gt;
        +int age
        +String
        +isMammal() boolean
        +mate() void
    &#125;
    class abstract1&#123;
        &lt;&lt;abstract&gt;&gt;
        +int age
        +String
        +isMammal() boolean
        +mate() void
    &#125;</code></pre>
<blockquote>
<p>在一些图中，接口会显示为一个 -o 的标记，不是直接显示 <code>&lt;&lt;interface&gt;&gt;</code>。</p>
</blockquote>
<h3 id="符号">符号</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ Public // 公共</span><br><span class="line">- Private // 私有</span><br><span class="line"># Protected // 保护</span><br><span class="line">~ Package/Internal // 包内</span><br></pre></td></tr></table></figure>
<h3 id="连线">连线</h3>
<pre><code class="highlight mermaid">classDiagram
    class A
    class B
    A -- B

    class C
    class D
    C .. D</code></pre>
<blockquote>
<p>连线可以使用 <code>--</code> 或 <code>..</code>，前者表示实线，后者表示虚线。代表不同的关系。</p>
</blockquote>
<h3 id="箭头">箭头</h3>
<pre><code class="highlight mermaid">classDiagram
    class A
    class B
    A --&gt; B

    class C
    class D
    C --o D

    class E
    class F
    E --|&gt; F

    class G
    class H
    G --* H</code></pre>
<blockquote>
<p>箭头有多种类型，代表不同的关系。配合不同的连线，代表不同的关系，目前有 8 种不同的关系。</p>
</blockquote>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>中文</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;|–</td>
<td>Inheritance</td>
<td>继承</td>
</tr>
<tr>
<td>*–</td>
<td>Composition</td>
<td>组合</td>
</tr>
<tr>
<td>o–</td>
<td>Aggregation</td>
<td>聚合</td>
</tr>
<tr>
<td>–&gt;</td>
<td>Association</td>
<td>关联</td>
</tr>
<tr>
<td>–</td>
<td>Link (Solid)</td>
<td>链接（实线）</td>
</tr>
<tr>
<td>…&gt;</td>
<td>Dependency</td>
<td>依赖</td>
</tr>
<tr>
<td>…|&gt;</td>
<td>Realization</td>
<td>实现</td>
</tr>
<tr>
<td>…</td>
<td>Link (Dashed)</td>
<td>链接（虚线）</td>
</tr>
</tbody>
</table>
<pre><code class="highlight mermaid">classDiagram
classA &lt;|-- classB : Inheritance继承
classC *-- classD : Composition组合
classE o-- classF : Aggregation聚合
classG &lt;-- classH : Association关联</code></pre>
<pre><code class="highlight mermaid">classDiagram
classI -- classJ : Link实线
classK &lt;.. classL : Dependency依赖
classM &lt;|.. classN : Realization实现
classO .. classP : Link虚线</code></pre>
<blockquote>
<p>一条带有箭头的线表示两个类之间的关系，一条连线可以有2个箭头，分别指向不同的类。</p>
</blockquote>
<h2 id="简单工厂模式">简单工厂模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class chart &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;
    class HistogramChart &#123;
        +HistogramChart()
        +display() void
    &#125;
    class PieChart &#123;
        +PieChart()
        +display() void
    &#125;
    class LineChart &#123;
        +LineChart()
        +display() void
    &#125;
    class ChartFactory &#123;
        +getChart(String type) chart
    &#125;

    chart &lt;|.. HistogramChart
    chart &lt;|.. PieChart
    chart &lt;|.. LineChart
    ChartFactory ..&gt; HistogramChart : create
    ChartFactory ..&gt; PieChart : create
    ChartFactory ..&gt; LineChart : create</code></pre>
<blockquote>
<p>简单工厂模式：一个工厂类根据传入的参数决定创建哪一种产品类的实例。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>工厂</p>
</li>
<li class="lvl-2">
<p>抽象产品</p>
</li>
<li class="lvl-2">
<p>具体产品</p>
</li>
</ul>
<h2 id="工厂方法模式">工厂方法模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Client
    class Factory &#123;
        &lt;&lt;interface&gt;&gt;
        +create() Product
    &#125;
    class ConcreteFactoryA &#123;
        +create() Product
    &#125;
    class ConcreteFactoryB &#123;
        +create() Product
    &#125;
    class Product &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;
    class ConcreteProductA &#123;
        +display() void
    &#125;
    class ConcreteProductB &#123;
        +display() void
    &#125;

    Factory &lt;|.. ConcreteFactoryA
    Factory &lt;|.. ConcreteFactoryB
    Product &lt;|.. ConcreteProductA
    Product &lt;|.. ConcreteProductB
    ConcreteProductA &lt;.. ConcreteFactoryA : create
    ConcreteProductB &lt;.. ConcreteFactoryB : create
    Client --&gt; Factory : factory
    Client --&gt; Product : product</code></pre>
<blockquote>
<p>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象工厂</p>
</li>
<li class="lvl-2">
<p>具体工厂</p>
</li>
<li class="lvl-2">
<p>抽象产品</p>
</li>
<li class="lvl-2">
<p>具体产品</p>
</li>
</ul>
<h3 id="反射与配置文件">反射与配置文件</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>反射：在运行状态中，动态获取类的信息并创建对象。</p>
</li>
<li class="lvl-2">
<p>配置文件：将参数放置在配置文件中，用户通过输入数字来决定选择哪个具体的工厂对象。</p>
</li>
</ul>
<h3 id="工厂方法的重载与隐藏">工厂方法的重载与隐藏</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>重载：在一个类中定义多个同名方法，参数列表不同。</p>
</li>
<li class="lvl-2">
<p>隐藏：在工厂中直接调用产品类业务方法，客户端无需调用工厂方法创建产品对象。</p>
</li>
</ul>
<h2 id="抽象工厂模式">抽象工厂模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Client
    class SkinFactory &#123;
        &lt;&lt;interface&gt;&gt;
        +createButton() Button
        +createTextField() TextField
    &#125;

    class SpringSkinFactory &#123;
        +createButton() : Button
        +createTextField() TextField
    &#125;

    class SummerSkinFactory &#123;
        +createButton() : Button
        +createTextField() TextField
    &#125;

    class Button &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;

    class SpringButton &#123;
        +display() void
    &#125;

    class SummerButton &#123;
        +display() void
    &#125;

    class TextField &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;

    class SpringTextField &#123;
        +display() void
    &#125;

    class SummerTextField &#123;
        +display() void
    &#125;

    SkinFactory &lt;|.. SpringSkinFactory
    SkinFactory &lt;|.. SummerSkinFactory
    Button &lt;|.. SpringButton
    Button &lt;|.. SummerButton
    TextField &lt;|.. SpringTextField
    TextField &lt;|.. SummerTextField

    SpringButton &lt;.. SpringSkinFactory : create
    SpringTextField &lt;.. SpringSkinFactory : create
    SummerButton &lt;.. SummerSkinFactory : create
    SummerTextField &lt;.. SummerSkinFactory : create

    Client ..&gt; SkinFactory : factory
    Client ..&gt; Button
    Client ..&gt; TextField</code></pre>
<blockquote>
<p>抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象工厂</p>
</li>
<li class="lvl-2">
<p>具体工厂</p>
</li>
<li class="lvl-2">
<p>抽象产品</p>
</li>
<li class="lvl-2">
<p>具体产品</p>
</li>
</ul>
<h3 id="开闭原则的倾斜性">开闭原则的倾斜性</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>开闭原则：对扩展开放，对修改关闭。</p>
</li>
<li class="lvl-2">
<p>倾斜性：抽象工厂模式在增加新产品时，需要修改抽象工厂接口和所有具体工厂类。</p>
</li>
</ul>
<h2 id="建造者模式">建造者模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Actor &#123;
        +type : String
        +gender : String
        +face : String
        +costume : String
        +hairstyle : String
        +setType(String type) void
        +setGender(String gender) void
        +setFace(String face) void
        +setCostume(String costume) void
        +setHairstyle(String hairstyle) void
        +getType() String
        +getGender() String
        +getFace() String
        +getCostume() String
        +getHairstyle() String
    &#125;
    class ActorBuilder &#123;
        &lt;&lt;abstract&gt;&gt;
        #actor : Actor
        +buildType() void
        +buildGender() void
        +buildFace() void
        +buildCostume() void
        +buildHairstyle() void
        +createActor() Actor
    &#125;
    class HeroBuilder &#123;
        +buildType() void
        +buildGender() void
        +buildFace() void
        +buildCostume() void
        +buildHairstyle() void
    &#125;
    class AngelBuilder &#123;
        +buildType() void
        +buildGender() void
        +buildFace() void
        +buildCostume() void
        +buildHairstyle() void
    &#125;
    class ActorController &#123;
        +construct(ActorBuilder ab) Actor
    &#125;

    Actor &lt;--* ActorBuilder
    ActorBuilder &lt;|-- HeroBuilder
    ActorBuilder &lt;|-- AngelBuilder
    ActorController ..&gt; ActorBuilder : builder</code></pre>
<blockquote>
<p>建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象建造者</p>
</li>
<li class="lvl-2">
<p>具体建造者</p>
</li>
<li class="lvl-2">
<p>产品</p>
</li>
<li class="lvl-2">
<p>指挥者</p>
</li>
</ul>
<h3 id="Hook方法">Hook方法</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Hook方法：在抽象建造者中定义一个或多个方法，让子类实现。</p>
</li>
</ul>
<h2 id="原型模式">原型模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Cloneable &#123;
        &lt;&lt;interface&gt;&gt;
    &#125;
    class Object &#123;
        +clone() Object
    &#125;
    class ConcretePrototype &#123;
        +clone() Object
    &#125;
    class Client &#123;
        +operation(Prototype prototype) void
    &#125;

    Object &lt;|-- ConcretePrototype
    Cloneable &lt;|.. ConcretePrototype
    Client &lt;--o ConcretePrototype : prototype</code></pre>
<blockquote>
<p>原型模式：用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象原型</p>
</li>
<li class="lvl-2">
<p>具体原型</p>
</li>
<li class="lvl-2">
<p>客户端</p>
</li>
</ul>
<h3 id="序列化与反序列化">序列化与反序列化</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>序列化：将对象转换为字节序列。</p>
</li>
<li class="lvl-2">
<p>反序列化：将字节序列转换为对象。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SoftwareEngineering</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp-01</title>
    <url>/2024/01/25/1/</url>
    <content><![CDATA[<h2 id="开发环境以及-IDE-的使用">开发环境以及 IDE 的使用</h2>
<p>IDE：Visual Studio 2022</p>
<p>选择工作负荷：.NET 桌面开发</p>
<h3 id="创建一个控制台应用程序">创建一个控制台应用程序</h3>
<ol>
<li class="lvl-3">
<p>打开 Visual Studio 2022</p>
</li>
<li class="lvl-3">
<p>选择“创建新项目”</p>
</li>
<li class="lvl-3">
<p>选择“控制台应用程序 (.NET Framework)”</p>
</li>
<li class="lvl-3">
<p>填写项目名称</p>
</li>
<li class="lvl-3">
<p>点击“创建”</p>
</li>
</ol>
<blockquote>
<p>项目名称与解决方案的关系项目名称：项目的名称解决方案：项目的容器，一个解决方案可以包含多个项目</p>
</blockquote>
<h3 id="项目结构">项目结构</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Properties：项目属性</p>
</li>
<li class="lvl-2">
<p>References：引用</p>
</li>
<li class="lvl-2">
<p>Program.cs：程序入口</p>
</li>
<li class="lvl-2">
<p>App.config：配置文件</p>
</li>
<li class="lvl-2">
<p>Packages.config：NuGet 包管理</p>
</li>
<li class="lvl-2">
<p>.vs：Visual Studio 配置文件</p>
</li>
<li class="lvl-2">
<p>bin：编译后的文件</p>
</li>
<li class="lvl-2">
<p>obj：编译过程中的文件</p>
</li>
</ul>
<h2 id="Hello-World">Hello World</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorldCS</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 类型</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">// 函数、方法</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基础结构">基础结构</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>命名空间：namespace</p>
</li>
<li class="lvl-2">
<p>类型：class、struct、interface、enum</p>
</li>
<li class="lvl-2">
<p>函数、方法：static void Main(string[] args)</p>
</li>
<li class="lvl-2">
<p>语句块：{}</p>
</li>
<li class="lvl-2">
<p>语句：;</p>
</li>
<li class="lvl-2">
<p>注释：//、/* */</p>
</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最小结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基础语法">基础语法</h2>
<h3 id="注释">注释</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="标识符">标识符</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>由字母、数字、下划线组成</p>
</li>
<li class="lvl-2">
<p>不能以数字开头</p>
</li>
<li class="lvl-2">
<p>不能是关键字</p>
</li>
</ul>
<h3 id="关键字">关键字</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>保留的关键字，不能用作标识符</p>
</li>
<li class="lvl-2">
<p>保留的关键字</p>
<blockquote>
<p>abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long namespace new null object operator out override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual void volatile while</p>
</blockquote>
</li>
</ul>
<h2 id="变量">变量</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>变量的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="built_in">int</span> a;</span><br><span class="line"><span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="built_in">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="built_in">int</span> c, d, e;</span><br><span class="line"><span class="comment">// 声明多个变量并赋值</span></span><br><span class="line"><span class="built_in">int</span> f = <span class="number">1</span>, g = <span class="number">2</span>, h = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>变量的命名规范</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>驼峰命名法</p>
</li>
<li class="lvl-4">
<p>大驼峰：每个单词首字母大写</p>
</li>
<li class="lvl-4">
<p>小驼峰：第一个单词首字母小写，其他单词首字母大写</p>
</li>
<li class="lvl-4">
<p>命名规范</p>
</li>
<li class="lvl-4">
<p>变量名要有意义</p>
</li>
<li class="lvl-4">
<p>变量名不能是关键字</p>
</li>
<li class="lvl-4">
<p>变量名不能以数字开头</p>
</li>
<li class="lvl-4">
<p>变量名不能包含空格</p>
</li>
<li class="lvl-4">
<p>变量名不能包含特殊字符</p>
</li>
<li class="lvl-4">
<p>变量名不能包含中文</p>
</li>
<li class="lvl-4">
<p>变量名不能包含下划线</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p>变量的作用域</p>
<ul class="lvl-2">
<li class="lvl-4">局部变量：在方法中声明的变量</li>
<li class="lvl-4">成员变量：在类中声明的变量</li>
</ul>
</li>
<li class="lvl-2">
<p>变量的类型</p>
<ul class="lvl-2">
<li class="lvl-4">值类型：存储在栈中，直接存储数据</li>
<li class="lvl-4">整型：byte、short、int、long</li>
<li class="lvl-4">浮点型：float、double</li>
<li class="lvl-4">字符型：char</li>
<li class="lvl-4">布尔型：bool</li>
<li class="lvl-4">引用类型：存储在堆中，存储数据的地址</li>
<li class="lvl-4">字符串：string</li>
<li class="lvl-4">数组：int[]</li>
</ul>
</li>
<li class="lvl-2">
<p>变量的转换</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>隐式转换：小类型转换为大类型</p>
</li>
<li class="lvl-4">
<p>显式转换：大类型转换为小类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐式转换</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">double</span> b = a;</span><br><span class="line"><span class="comment">// 显式转换</span></span><br><span class="line"><span class="built_in">double</span> c = <span class="number">1.1</span>;</span><br><span class="line"><span class="built_in">int</span> d = (<span class="built_in">int</span>)c;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>变量的默认值</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0</td>
</tr>
<tr>
<td>float</td>
<td>0</td>
</tr>
<tr>
<td>double</td>
<td>0</td>
</tr>
<tr>
<td>char</td>
<td>\0</td>
</tr>
<tr>
<td>bool</td>
<td>false</td>
</tr>
<tr>
<td>string</td>
<td>null</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<h2 id="常量">常量</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>常量的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 声明多个常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> b = <span class="number">1</span>, c = <span class="number">2</span>, d = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>常量的命名规范</p>
<ul class="lvl-2">
<li class="lvl-4">常量名要有意义</li>
<li class="lvl-4">常量名不能是关键字</li>
<li class="lvl-4">常量名不能以数字开头</li>
<li class="lvl-4">常量名不能包含空格</li>
<li class="lvl-4">常量名不能包含特殊字符</li>
<li class="lvl-4">常量名不能包含中文</li>
<li class="lvl-4">常量名不能包含下划线</li>
</ul>
</li>
<li class="lvl-2">
<p>常量的作用域</p>
<ul class="lvl-2">
<li class="lvl-4">局部常量：在方法中声明的常量</li>
<li class="lvl-4">成员常量：在类中声明的常量</li>
</ul>
</li>
</ul>
<h2 id="运算符">运算符</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>算术运算符</p>
<ul class="lvl-2">
<li class="lvl-4">加法：+</li>
<li class="lvl-4">减法：-</li>
<li class="lvl-4">乘法：*</li>
<li class="lvl-4">除法：/</li>
<li class="lvl-4">取余：%</li>
<li class="lvl-4">自增：++</li>
<li class="lvl-4">自减：–</li>
</ul>
</li>
<li class="lvl-2">
<p>赋值运算符</p>
<ul class="lvl-2">
<li class="lvl-4">赋值：=</li>
<li class="lvl-4">加法赋值：+=</li>
<li class="lvl-4">减法赋值：-=</li>
<li class="lvl-4">乘法赋值：*=</li>
<li class="lvl-4">除法赋值：/=</li>
<li class="lvl-4">取余赋值：%=</li>
</ul>
</li>
<li class="lvl-2">
<p>比较运算符</p>
<ul class="lvl-2">
<li class="lvl-4">等于：==</li>
<li class="lvl-4">不等于：!=</li>
<li class="lvl-4">大于：&gt;</li>
<li class="lvl-4">小于：&lt;</li>
<li class="lvl-4">大于等于：&gt;=</li>
<li class="lvl-4">小于等于：&lt;=</li>
</ul>
</li>
<li class="lvl-2">
<p>逻辑运算符</p>
<ul class="lvl-2">
<li class="lvl-4">与：&amp;&amp;</li>
<li class="lvl-4">或：||</li>
<li class="lvl-4">非：!</li>
</ul>
</li>
<li class="lvl-2">
<p>位运算符</p>
<ul class="lvl-2">
<li class="lvl-4">与：&amp;</li>
<li class="lvl-4">或：|</li>
<li class="lvl-4">非：~</li>
<li class="lvl-4">异或：^</li>
<li class="lvl-4">左移：&lt;&lt;</li>
<li class="lvl-4">右移：&gt;&gt;</li>
</ul>
</li>
<li class="lvl-2">
<p>条件运算符</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>三元运算符：?:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> c = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li class="lvl-2">
<p>其他运算符</p>
<ul class="lvl-2">
<li class="lvl-4">is：判断类型</li>
<li class="lvl-4">as：类型转换</li>
<li class="lvl-4">sizeof：获取类型的大小</li>
<li class="lvl-4">typeof：获取类型</li>
<li class="lvl-4">default：获取类型的默认值</li>
<li class="lvl-4">checked：检查溢出</li>
<li class="lvl-4">unchecked：不检查溢出</li>
</ul>
</li>
</ul>
<h2 id="流程控制">流程控制</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>if 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;a &gt; b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;a &lt; b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;a = b&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>switch 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;a = 1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;a = 2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;a = 3&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>while 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>do while 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">    a++;</span><br><span class="line">&#125; <span class="keyword">while</span> (a &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>for 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>foreach 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arr)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>break 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>continue 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>goto 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> label;</span><br><span class="line">    &#125;   </span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line">label:</span><br><span class="line">Console.WriteLine(<span class="string">&quot;goto&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp-02</title>
    <url>/2024/01/29/1/</url>
    <content><![CDATA[<h2 id="方法">方法</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>方法的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值无参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Method1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无返回值有参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method2</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值无参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method3</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值有参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method4</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>方法的调用</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值无参数</span></span><br><span class="line">Method1();</span><br><span class="line"><span class="comment">// 无返回值有参数</span></span><br><span class="line">Method2(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 有返回值无参数</span></span><br><span class="line"><span class="built_in">int</span> a = Method3();</span><br><span class="line"><span class="comment">// 有返回值有参数</span></span><br><span class="line"><span class="built_in">int</span> b = Method4(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>方法的重载</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值无参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Method1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无返回值有参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值无参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值有参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>方法的参数</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>值参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>引用参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>输出参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>可选参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a = <span class="number">1</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>参数数组</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li class="lvl-2">
<p>方法的修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">public：公开的</li>
<li class="lvl-4">private：私有的</li>
<li class="lvl-4">internal：内部的</li>
<li class="lvl-4">protected：受保护的</li>
<li class="lvl-4">static：静态的</li>
<li class="lvl-4">virtual：虚方法</li>
<li class="lvl-4">override：重写方法</li>
<li class="lvl-4">abstract：抽象方法</li>
<li class="lvl-4">sealed：密封方法</li>
<li class="lvl-4">extern：外部方法</li>
</ul>
</li>
</ul>
<h2 id="类">类</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>类的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>类的实例化</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">p.age = <span class="number">18</span>;</span><br><span class="line">p.Say();</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>类的访问修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">public：公开的</li>
<li class="lvl-4">private：私有的</li>
<li class="lvl-4">internal：内部的</li>
<li class="lvl-4">protected：受保护的</li>
</ul>
</li>
<li class="lvl-2">
<p>类的成员修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">static：静态的</li>
<li class="lvl-4">virtual：虚方法</li>
<li class="lvl-4">override：重写方法</li>
<li class="lvl-4">abstract：抽象方法</li>
<li class="lvl-4">sealed：密封方法</li>
<li class="lvl-4">extern：外部方法</li>
</ul>
</li>
<li class="lvl-2">
<p>类的构造函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>类的析构函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Person()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;析构 Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="结构体">结构体</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>结构体的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>结构体的实例化</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">p.age = <span class="number">18</span>;</span><br><span class="line">p.Say();</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>结构体的访问修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">public：公开的</li>
<li class="lvl-4">private：私有的</li>
<li class="lvl-4">internal：内部的</li>
<li class="lvl-4">protected：受保护的</li>
</ul>
</li>
<li class="lvl-2">
<p>结构体的成员修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">static：静态的</li>
<li class="lvl-4">virtual：虚方法</li>
<li class="lvl-4">override：重写方法</li>
<li class="lvl-4">abstract：抽象方法</li>
<li class="lvl-4">sealed：密封方法</li>
<li class="lvl-4">extern：外部方法</li>
</ul>
</li>
<li class="lvl-2">
<p>结构体的构造函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>结构体的析构函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Person()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;析构 Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp-03</title>
    <url>/2024/01/31/1/</url>
    <content><![CDATA[<h2 id="错误处理">错误处理</h2>
<p>如果程序中出现了错误，就会抛出异常。如果没有处理异常，程序就会终止。</p>
<h3 id="try-catch">try-catch</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能会出现异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 出现异常时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="finally">finally</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能会出现异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 出现异常时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不管是否出现异常都会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="throw">throw</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能会出现异常的代码</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 出现异常时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不管是否出现异常都会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义异常">自定义异常</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span>(<span class="params"><span class="built_in">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g-除数为-0-时会抛出异常">e.g.  除数为 0 时会抛出异常</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> c = a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(ex.Message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OOP">OOP</h2>
<p>在面向对象编程中，类是一种模板，用于创建对象。对象是类的实例。</p>
<p>面向对象是一种思想，它将对象作为程序的基本单元，将程序和数据封装在对象中。</p>
<p>我学习了很多门语言了，故我对面向对象编程有了一定的了解。</p>
<p>不再赘述。</p>
<h2 id="类">类</h2>
<h3 id="定义类">定义类</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建对象">创建对象</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">p.age = <span class="number">20</span>;</span><br><span class="line">p.SayHello();</span><br></pre></td></tr></table></figure>
<h3 id="构造函数">构造函数</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Static">Static</h2>
<p>静态成员属于类，而不属于类的实例。静态成员在类加载时就会被初始化。</p>
<h3 id="静态字段">静态字段</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">Console.WriteLine(Person.count);</span><br></pre></td></tr></table></figure>
<h3 id="静态方法">静态方法</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person.SayHello();</span><br></pre></td></tr></table></figure>
<h2 id="代码抽离">代码抽离</h2>
<h3 id="命名空间">命名空间</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用命名空间">引用命名空间</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> MyNamespace;</span><br></pre></td></tr></table></figure>
<h3 id="e-g">e.g.</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyClass mc = <span class="keyword">new</span> MyClass();</span><br><span class="line">        mc.SayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp-04</title>
    <url>/2024/02/07/1/</url>
    <content><![CDATA[<h2 id="DLL">DLL</h2>
<p>DLL（Dynamic Link Library）是动态链接库的缩写。它是一种包含可供程序调用的函数和数据的文件。DLL 文件可以包含多个函数，这些函数可以被多个程序调用。DLL 文件的扩展名是 .dll。</p>
<h3 id="创建-DLL">创建 DLL</h3>
<ol>
<li class="lvl-3">
<p>新建一个类库项目。</p>
</li>
<li class="lvl-3">
<p>在类库项目中添加类。</p>
</li>
<li class="lvl-3">
<p>在类库项目中编写类的代码。</p>
</li>
<li class="lvl-3">
<p>在类库项目中编译代码。</p>
</li>
<li class="lvl-3">
<p>在类库项目的输出目录中找到编译后的 DLL 文件。</p>
</li>
</ol>
<h3 id="使用-DLL">使用 DLL</h3>
<ol>
<li class="lvl-3">
<p>在项目中添加引用。</p>
</li>
<li class="lvl-3">
<p>在项目中使用引用的类。</p>
</li>
</ol>
<p>比如，我需要引用一个 <code>example.dll</code> 文件，我可以在项目中添加引用，然后使用引用的类。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Example;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="文件操作">文件操作</h2>
<h3 id="文件读取">文件读取</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = File.ReadAllText(path);</span><br><span class="line">        Console.WriteLine(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件写入">文件写入</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        File.WriteAllText(path, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件追加">文件追加</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        File.AppendAllText(path, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件删除">文件删除</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        File.Delete(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g">e.g</h3>
<p>编写一个程序，读取一个文件，然后将文件内容倒序写入另一个文件，比如 <code>example.txt</code> 内容为 <code>Hello, World!</code>，则 <code>example-reverse.txt</code> 内容为 <code>!dlroW ,olleH</code>。</p>
<ol>
<li class="lvl-3">
<p>创建 example.txt 文件。</p>
</li>
<li class="lvl-3">
<p>给 example.txt 写入内容为 `Hello, World!</p>
</li>
<li class="lvl-3">
<p>读取 example.txt 文件。</p>
</li>
<li class="lvl-3">
<p>将读取的内容打印到控制台。</p>
</li>
<li class="lvl-3">
<p>将读取的内容倒序写入 example-reverse.txt 文件。</p>
</li>
<li class="lvl-3">
<p>查看 example-reverse.txt 文件。</p>
</li>
<li class="lvl-3">
<p>删除 example.txt 和 example-reverse.txt 文件。</p>
</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        File.WriteAllText(path, content);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> readContent = File.ReadAllText(path);</span><br><span class="line">        Console.WriteLine(readContent);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> reverseContent = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = readContent.Length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            reverseContent += readContent[i];</span><br><span class="line">        &#125;</span><br><span class="line">        File.WriteAllText(<span class="string">&quot;example-reverse.txt&quot;</span>, reverseContent);</span><br><span class="line"></span><br><span class="line">        File.Delete(path);</span><br><span class="line">        File.Delete(<span class="string">&quot;example-reverse.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他文件操作">其他文件操作</h3>
<blockquote>
<p>文件操作类 <code>File</code>。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>File.Copy</code> 复制文件。</p>
</li>
<li class="lvl-2">
<p><code>File.Move</code> 移动文件。</p>
</li>
<li class="lvl-2">
<p><code>File.Exists</code> 判断文件是否存在。</p>
</li>
<li class="lvl-2">
<p><code>File.GetCreationTime</code> 获取文件创建时间。</p>
</li>
<li class="lvl-2">
<p><code>File.GetLastAccessTime</code> 获取文件最后访问时间。</p>
</li>
<li class="lvl-2">
<p><code>File.GetLastWriteTime</code> 获取文件最后写入时间。</p>
</li>
</ul>
<blockquote>
<p>获取文件夹内容可以使用 <code>Directory</code> 类。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>Directory.GetFiles</code> 获取文件夹中的文件。</p>
</li>
<li class="lvl-2">
<p><code>Directory.GetDirectories</code> 获取文件夹中的文件夹。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 教程</title>
    <url>/2023/06/30/2/</url>
    <content><![CDATA[<h2 id="Docker-简介">Docker 简介</h2>
<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。<br>
Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。</p>
<h2 id="Docker-架构">Docker 架构</h2>
<p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。<br>
Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。</p>
<h2 id="为什么要使用-Docker？">为什么要使用 Docker？</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>更高效的利用系统资源</p>
</li>
<li class="lvl-2">
<p>更快速的启动时间</p>
</li>
<li class="lvl-2">
<p>一致的运行环境</p>
</li>
<li class="lvl-2">
<p>持续交付和部署</p>
</li>
<li class="lvl-2">
<p>更轻松的迁移</p>
</li>
<li class="lvl-2">
<p>更轻松的维护和扩展</p>
</li>
</ul>
<h2 id="Docker-与传统虚拟化的区别">Docker 与传统虚拟化的区别</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，而容器内的应用直接运行在宿主机的操作系统上。</p>
</li>
<li class="lvl-2">
<p>容器不需要进行硬件虚拟以及操作系统虚拟，因此容器的性能开销极小。</p>
</li>
<li class="lvl-2">
<p>Docker 属于操作系统层面的虚拟化技术。</p>
</li>
</ul>
<h2 id="容器与虚拟机的区别">容器与虚拟机的区别</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>容器是用户态的进程，而虚拟机是内核态的进程。</p>
</li>
<li class="lvl-2">
<p>容器是不需要虚拟出一套硬件，不需要进行硬件虚拟以及操作系统虚拟，因此容器的性能开销极小。</p>
</li>
<li class="lvl-2">
<p>容器是直接运行在宿主机的操作系统上，而虚拟机是运行在虚拟机监控器（VMM）上。</p>
</li>
</ul>
<h2 id="Docker-基本原理和概念">Docker 基本原理和概念</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>镜像（Image）</p>
</li>
<li class="lvl-2">
<p>容器（Container）</p>
</li>
<li class="lvl-2">
<p>仓库（Repository）</p>
</li>
</ul>
<h2 id="Docker-安装">Docker 安装</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=">Docker 官网<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20v">Docker 官方文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=">Docker Hub<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>注意：Docker for Windows 要求系统打开 Hyper-V，而 VMware Workstation 和 VirtualBox 等虚拟机软件也需要使用到虚拟化技术，因此这些软件不能在同一台机器上同时运行。详见链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhYnJpZWxsZV9PeU8vYXJ0aWNsZS9kZXRhaWxzLzEyMDM2MTIxOA==">Windows 下 Docker 与 VMware 共存<i class="fa fa-external-link-alt"></i></span></p>
<p>这里我选择在 Windows 系统下安装 VMware Workstation 虚拟机，然后在虚拟机中安装 Ubuntu 系统，再在 Ubuntu 系统中安装 Docker。<s>套娃了属于是</s></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Ubuntu 22.04.2 LTS</span><br><span class="line">The latest LTS version of Ubuntu, for desktop PCs and laptops. LTS stands for long-term support — which means five years of free security and maintenance updates, guaranteed until April 2027.</span><br><span class="line"></span><br><span class="line">Ubuntu 22.04 LTS release notes</span><br><span class="line"></span><br><span class="line">Recommended system requirements:</span><br><span class="line"></span><br><span class="line">2 GHz dual-core processor or better </span><br><span class="line">4 GB system memory </span><br><span class="line">25 GB of free hard drive space </span><br><span class="line">Internet access is helpful </span><br><span class="line">Either a DVD drive or a USB port for the installer media</span><br></pre></td></tr></table></figure>
<h2 id="容器化和-Dockerfile">容器化和 Dockerfile</h2>
<p>容器化是指将应用程序及其依赖，打包成一个镜像，运行时再通过这个镜像来创建容器，这样就实现了应用程序的容器化。</p>
<p>Dockerfile 是一个文本文件，用来配置镜像，Docker 根据 Dockerfile 的配置信息来构建镜像。</p>
<ol>
<li class="lvl-3">
<p>编写 Dockerfile 文件</p>
</li>
<li class="lvl-3">
<p>执行 docker build 命令来构建镜像</p>
</li>
<li class="lvl-3">
<p>执行 docker run 命令来创建并启动容器</p>
</li>
</ol>
<h2 id="实践">实践</h2>
<ol>
<li class="lvl-3">
<p>创建项目目录 <code>HelloDocker</code></p>
</li>
<li class="lvl-3">
<p>在项目目录下创建 <code>index.js</code> 文件</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">conslone.<span class="title function_">log</span>(<span class="string">&#x27;Hello Docker!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>使用命令 <code>node index.js</code> 来运行 <code>index.js</code> 文件，输出 <code>Hello Docker!</code>。</p>
</li>
<li class="lvl-3">
<p>在项目目录下创建 <code>Dockerfile</code> 文件</p>
</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14.17</span>.<span class="number">0</span>-alpine3.<span class="number">13</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> index.js /app/index.js</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> node index.js</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>使用命令 <code>docker build -t hello-docker .</code> 来构建镜像</p>
</li>
<li class="lvl-3">
<p>使用命令 <code>docker image ls</code> 来查看镜像列表</p>
</li>
<li class="lvl-3">
<p>使用命令 <code>docker run hello-docker</code> 来创建并启动容器</p>
</li>
<li class="lvl-3">
<p>(可选) 使用命令 <code>docker ps -a</code> 来查看容器列表</p>
</li>
<li class="lvl-3">
<p>(可选) 使用命令 <code>docker rm -f &lt;container-id&gt;</code> 来删除容器</p>
</li>
<li class="lvl-4">
<p>(可选) 使用命令 <code>docker rmi &lt;image-id&gt;</code> 来删除镜像</p>
</li>
<li class="lvl-4">
<p>(可选) 上传镜像到 Docker Hub</p>
</li>
<li class="lvl-4">
<p>(可选) 在线运行镜像，使用 <span class="exturl" data-url="aHR0cHM6Ly9sYWJzLnBsYXktd2l0aC1kb2NrZXIuY29tLw==">Docker Playground<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ol>
<h2 id="DockerCompose">DockerCompose</h2>
<p>DockerCompose 是一个用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，可以使用 YML 文件来配置应用程序需要的所有服务，然后使用一个命令，即可从 YML 文件配置中创建并启动所有服务。<br>
Compose 可以在所有环境中工作：生产、阶段、开发、测试等。</p>
<p>docker-compose.yml 文件示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure>
<p>Compose 有两个重要的概念：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</p>
</li>
<li class="lvl-2">
<p>项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</p>
</li>
</ul>
<p>Compose 的常用命令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>docker-compose up</code>：创建并启动所有容器。</p>
</li>
<li class="lvl-2">
<p><code>docker-compose up -d</code>：创建并启动所有容器，后台运行。</p>
</li>
<li class="lvl-2">
<p><code>docker-compose up --build</code>：创建并启动所有容器，强制重新构建镜像。</p>
</li>
<li class="lvl-2">
<p><code>docker-compose up -d --build</code>：创建并启动所有容器，后台运行，强制重新构建镜像。</p>
</li>
<li class="lvl-2">
<p><code>docker-compose ps</code>：查看项目中的容器。</p>
</li>
<li class="lvl-2">
<p><code>docker-compose logs</code>：查看容器日志。</p>
</li>
<li class="lvl-2">
<p><code>docker-compose logs -f</code>：查看容器日志，实时输出。</p>
</li>
</ul>
<p>参考链接：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS8=">Docker Compose<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODc4NDAzODE=">docker compose 配置文件 .yml 全面指南<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>中兴 ZTE E8820S 路由器经验分享</title>
    <url>/2024/03/10/1/</url>
    <content><![CDATA[<h2 id="1-介绍">1. 介绍</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>外观：白色机身，双天线，三个指示灯位于下方，天线不可拆卸，</p>
</li>
<li class="lvl-2">
<p>接口：全在天线侧，包括电源、WAN、LAN1、LAN2、LAN3、LAN4、RESET、WPS、开关。WAN口和LAN口都是千兆口。</p>
</li>
<li class="lvl-2">
<p>规格：双核CPU，256MB内存，128MB存储，支持2.4G和5G双频，支持IPv6*，支持USB2.0*。</p>
</li>
<li class="lvl-2">
<p>价格：二手网约 40 元左右。（24年3月）</p>
</li>
<li class="lvl-2">
<p>硬件参数：</p>
<ul class="lvl-2">
<li class="lvl-4">主控芯片：联发科芯片 ramips架构的 MT7621@880MHz</li>
<li class="lvl-4">2.4G芯片：MT7603</li>
<li class="lvl-4">5G芯片：MT7612</li>
<li class="lvl-4">存储芯片：NAND FLASH（128M）</li>
<li class="lvl-4">主板内存: 256M DDR3@1200MHz</li>
</ul>
</li>
<li class="lvl-2">
<p>GPIO引脚：</p>
<ul class="lvl-2">
<li class="lvl-4">POWER_LED:  GPIO#3</li>
<li class="lvl-4">RESET:  GPIO#18</li>
<li class="lvl-4">WPS:     GPIO#8</li>
<li class="lvl-4">WIFI:    GPIO#10</li>
</ul>
</li>
</ul>
<p>纸面参数看起来不错，但是实际使用中，有一些问题：</p>
<p>2.4G 信号不错，但是速度不行，5G 信号不稳定，闭源驱动速度快，但是稳定性不行，开源驱动稳定性好，但是速度不行。</p>
<p>且没有屏蔽罩，容易干扰，倒装主板，散热不行，容易发热。</p>
<p>实测中 1000M 宽带，2.4G 速度 20-30M；5G 速度 500M 左右,开源驱动 5G 速度 200M 左右；LAN 速度 1000M。</p>
<p>*：官方固件未开启，需要刷机。<br>
*：硬件给的是 USB3.0，但是实际是 USB2.0。</p>
<h2 id="2-breed-不死-BootLoader-安装">2. breed 不死 BootLoader 安装</h2>
<p><strong>在开始之前，确保你知道自己在做什么，刷机有风险，刷机有风险，刷机有风险。</strong></p>
<p><mark>如果机器背面的信息贴纸是完整的，那么就可以开始了。如果贴纸被撕掉了，那么你先要进入管理界面，保存 MAC 地址以及 SN 码。这台路由器的管理界面进入专家模式就可以看到所有信息，建议截图保存。</mark></p>
<p>这台设备没有自带不死 BootLoader，所以需要先安装一个。</p>
<p>网上流行了一个老版本的 breed，这个版本是移植自<code>极路由4 HC5962/B70</code>的，功能有限，且 部分 GPIO 无法使用，无法备份 EEPROM。</p>
<p>所以使用新版本的 breed，新增 ZTE E8820S 专用版，支持极路由4 HC5962/B70 固件；支持 MTK SDK 分区的固件；支持启动原厂固件以及升级原厂编程器固件。</p>
<p>资源：<span class="exturl" data-url="aHR0cHM6Ly9icmVlZC5oYWNrcGFzY2FsLm5ldC8=">breed<i class="fa fa-external-link-alt"></i></span></p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC0xNjE5MDYtMS0xLmh0bWw=">【2022-07-26】AR/QCA/MTK Breed，功能强大的多线程 Bootloader-OPENWRT专版-恩山无线论坛<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="通过-ttl-线刷入-breed">通过 ttl 线刷入 breed</h3>
<p>没什么好说的，路由器拆开，找到串口，接上 ttl 线，然后通过串口刷入 breed。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cubXlkaWdpdC5jbi90aHJlYWQtMjAwMDc2LTEtMS5odG1s">最详细的中兴E8820S的TTL刷机教程，附最完美的Padavan固件 - WiFi/路由器 数码之家<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="免拆路由器刷入-breed">免拆路由器刷入 breed</h3>
<p>中兴其实留有一个固件升级的接口，可以通过这个接口刷入 breed。</p>
<ol>
<li class="lvl-3">
<p>断开路由器电源，拔掉 Wan 口的网线</p>
</li>
<li class="lvl-3">
<p>电脑打开控制面板-网络和共享中心-更改适配器设置-找到本地连接-属性-IPv4-设置为</p>
<ol>
<li class="lvl-7">IP 地址：192.168.1.2</li>
<li class="lvl-7">子网掩码：255.255.255.0</li>
<li class="lvl-7">默认网关：192.168.1.254</li>
</ol>
</li>
<li class="lvl-3">
<p>打开<code>tftpd64.exe</code>软件，选择设置好的网卡，breed 放在同一目录下，并重命名为<code>ZTE_img.bin</code></p>
</li>
<li class="lvl-3">
<p>路由器断电，按住 reset 键，插上电源，等待指示灯闪烁时松开 reset 键（也可以观察<code>tftpd64.exe</code>软件的提示）</p>
</li>
<li class="lvl-3">
<p>等待路由器重启，还原网卡设置</p>
</li>
<li class="lvl-3">
<p>打开浏览器，输入<code>192.168.1.1</code>，进入 breed 界面</p>
</li>
</ol>
<p>资源：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3NoYXJlL2luaXQ/c3VybD1UZHBpNFlwb3VpS0pOSjUtcTJpcGN3JnB3ZD16NzFk">tftpd64.exe<i class="fa fa-external-link-alt"></i></span></p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUxwNHkxRjdXdS8/c3BtX2lkX2Zyb209MzMzLjc4OC5yZWNvbW1lbmRfbW9yZV92aWRlby40JnZkX3NvdXJjZT1lNWFjZjhkNTI0M2MyMzU1NzBiYWY0YjYwNTBlZDYyZA==">38.8元的中兴E8820S免拆刷机教程 值得一冲_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span></p>
<p>需要注意的是，<strong>这个参考中关于 eeprom 的操作是错误的</strong>。</p>
<h2 id="3-EEPROM-备份与选择">3. EEPROM 备份与选择</h2>
<p>备份是一个好习惯，我们需要进入 breed 界面，然后备份 EEPROM 以及固件（编程器固件），选择原厂格式。</p>
<h3 id="EEPROM-选择">EEPROM 选择</h3>
<p>你可以选择备份原厂的 EEPROM，也可以使用别人的 EEPROM。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>原厂 EEPROM</p>
</li>
<li class="lvl-2">
<p>8820s_eeprom_b70gs_yh_nomac.bin</p>
</li>
<li class="lvl-2">
<p>8820s_eeprom_yuan-gai.bin</p>
</li>
</ul>
<p>资源</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMURYNDVPTWREeEVxQVJNV19QenY2UWcmcHdkPTZybW4=">8820s_eeprom_b70gs_yh_nomac.bin<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFuem91eC5jb20vaVVsa1JoZGh5NGY=">8820s_eeprom_yuan-gai.bin<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="EEPROM-修改">EEPROM 修改</h3>
<p>对于这台路由器，EEPROM 是十分重要的，影响了信号质量以及 5G 信号的稳定性。</p>
<p>下载 WinHex，打开 EEPROM，修改 MAC 地址（包括 2.4G/5G/Lan/Wan 的 MAC 地址）</p>
<blockquote>
<p>WinHex 默认是 Insert 模式，所以不用担心覆盖问题。</p>
</blockquote>
<p>其中 2.4G 和 Lan 和 Wan 的 MAC 地址也是一样的，5G 的 MAC 地址是 2.4G 的 MAC 地址 + 1（16进制加法）。</p>
<p>偏移量</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>2.4G MAC 地址：4</p>
</li>
<li class="lvl-2">
<p>5G MAC 地址：8004</p>
</li>
<li class="lvl-2">
<p>Lan MAC 地址：E000</p>
</li>
<li class="lvl-2">
<p>Wan MAC 地址：E006</p>
</li>
</ul>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04Mjc1NjA2LTEtMS5odG1s">路由器修改mac的方法-新手入门及其它(硬件)-恩山无线论坛<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04Mjc1NjA2LTEtMS5odG1s">路由器修改mac的方法<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="4-固件">4. 固件</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>官方固件：不推荐，功能太少。不过与现在不同，虽然没有内置插件，但不保证没有后门。</p>
</li>
<li class="lvl-2">
<p>OpenWrt 固件：这个很常见，并且有很多基于此改版的固件。</p>
<ul class="lvl-2">
<li class="lvl-4">Offical 固件</li>
<li class="lvl-4">Lean 固件</li>
<li class="lvl-4">immortalwrt 固件</li>
</ul>
</li>
<li class="lvl-2">
<p>Padavan 固件：中兴路由器上也有</p>
</li>
</ul>
<h3 id="汇总">汇总</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MjM0MjQ5LTEtMS5odG1s">中兴E8820S OpenWrt-v21.02.3 可随便装插件-OPENWRT专版-恩山无线论坛 - 手机版 - Powered by Discuz!<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04Mjg5NjYxLTEtMS5odG1sI2dvb2dsZV92aWduZXR0ZQ==">中兴 ZTE E8820S 折腾记录，附编译好的 OpenWrt 固件，也包含新3-OPENWRT专版-恩山无线论坛 - 手机版 - Powered by Discuz!<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MjcwNDEzLTEtMS5odG1s">中兴E8820S OpenWrt-v21.02.3 带USB驱动 可插随身wifi、手机通过USB共享网络-OPENWRT专版-恩山无线论坛<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MjkzMzE3LTEtMS5odG1s">中兴E8820S-R23.6.6-OPENWRT 闭源驱动-OPENWRT专版-恩山无线论坛<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL0ZPUlVNL3RocmVhZC00MDU0NzExLTEtMS5odG1s">21.2.20更新，重新配置中兴E8820S编译LEDE固件，汉化闭源驱动无线设置-OPENWRT专版-恩山无线论坛<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC01MjAzNzU0LTEtMS5odG1s">中兴E8820S路由器拆机及OpenWrt固件(含源代码)-OPENWRT专版-恩山无线论坛 - 手机版 - Powered by Discuz!<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<hr>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vc2l3aW5kL29wZW53cnQtZmlybXdhcmUtZm9yLW1lZGlhdGVrLW10NzYyMQ==">Openwrt firmware for mediatek mt7621<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kbC5vcGVud3J0LmFpL2Zpcm13YXJlL3JhbWlwcy1tdDc2MjEvenRlX2U4ODIwcy8=">OpenWrt Downloads<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9vcHQuY24ycXEuY29tL3BhZGF2YW4v">padavan<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>以上顺序不分先后，可以根据自己的需求选择。</p>
<h3 id="在线固件编译">在线固件编译</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cDovL29wZW53cnQuYWk=">openwrt.ai<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>打开这个网址，选择 8820s，可以定制固件，选择自己需要的插件，然后下载。注意非捐赠用户每日只能定制一个固件。</p>
<p>也可以到Github上下载源码，自己编译。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>fw.wrt.moe</p>
</li>
</ul>
<p>这个也是一个定制固件的网站，选择 8820s，可以定制固件。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9maXJtd2FyZS1zZWxlY3Rvci5pbW1vcnRhbHdydC5vcmcv">https://firmware-selector.immortalwrt.org/<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>immortalwrt，没什么好说的，直接选择 8820s，编译好的固件。</p>
<h3 id="刷入固件">刷入固件</h3>
<p>在刷入固件前，需要先刷入修改好的 EEPROM。并确定 MAC 地址已经修改。</p>
<p>然后通过 breed 界面刷入固件。</p>
<h2 id="恢复原厂固件">恢复原厂固件</h2>
<p>折腾这么久，总觉得不称心如意？累了？还是回归原厂吧。</p>
<p><strong>以下操作建议认真阅读参考后再进行。</strong></p>
<ol>
<li class="lvl-3">
<p>断电，拔掉 Wan 口的网线，按住 reset 键，插上电源，等待指示灯闪烁时松开 reset 键</p>
</li>
<li class="lvl-3">
<p>电脑打开 <code>192.168.1.1</code></p>
</li>
<li class="lvl-3">
<p>telnet 登录 <code>telnet 192.168.1.1</code></p>
</li>
<li class="lvl-3">
<p>HFS 文件服务器上传原厂固件</p>
</li>
<li class="lvl-3">
<p><code>wget http://192.168.1.2/full.bin</code> 这个地址和文件是根据你自己的情况来的记录下 Saving to address 后面的内存地址和 Length: 后面 0x 开头的数据大小读入备份文件的内存起始地址是 0x80001000，数据大小是 0x7f80000</p>
</li>
<li class="lvl-3">
<p>擦除 Flash：flash是breed的内部命令，用于NAND的读取写入擦除等操作执行命令<br>
flash erase 0x0  0x7f80000<br>
清除flash 从地址0x0   长度0x7f80000  127M，对应上面一步读入的备份文件长度<mark>这时候NAND flash 已经全部清空，千万别重启别断电！！！</mark></p>
</li>
<li class="lvl-3">
<p>写入数据：执行命令<br>
flash write 0x0 0x80001000  0x7f80000<br>
把内存起始地址0x80001000 长度为0x7f80000的数据从0x0开始写入闪存，</p>
</li>
</ol>
<p>显示 Succeeded  原厂编程器固件写入完成，重启就行了</p>
<p>以上操作是breed从内存中进行的，<strong>如果失败，路由器必砖</strong>，所以一定要小心，别出差错，真变砖了，相对简单的方法只有换spi闪存了</p>
<p><em><strong>最后，在 breed 界面恢复原厂的 BootLoader。</strong></em></p>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NzE5MTU5NDMx">E8820s无线路由器轻松刷回原厂固件<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC00MTEwMjA3LTEtMS5odG1s">中兴E8820S刷回原厂固件经验分享<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="OpenWrt-使用经验">OpenWrt 使用经验</h2>
<h3 id="OpenWrt-使用-IPv6-进行远程访问-LAN-下设备">OpenWrt 使用 IPv6 进行远程访问 LAN 下设备</h3>
<p>由于我有远程桌面的需求，然，受困于没有 IPv4 公网 IP，所以只能使用 IPv6 进行远程访问。</p>
<p>防火墙设置 区域</p>
<p>lan &gt; wan 入站接受，出站接受，转发拒绝<br>
wan &gt; reject 入站接受，出站接受，转发拒绝</p>
<p>通信规则添加一条</p>
<p>名称随意协议：TCP/UDP<br>
源区域：任意区域（转发）目标区域 LAN<br>
源端口：3389</p>
<p>其余默认即可</p>
<h3 id="OpenWrt-访问光猫">OpenWrt 访问光猫</h3>
<p>接口新建 modem</p>
<p>协议：静态设备：wan<br>
开机启动：勾选<br>
ipv4地址：192.168.1.254（你光猫的网段，地址随意，只要没有设备链接即可）<br>
prefix：24</p>
<p>强制链路：勾选使用网关跃点：100<br>
委托IPv6前缀：勾选</p>
<p>防火墙放在和 wan 一样的区域</p>
<p>其余默认即可</p>
<h3 id="软件包问题-24年12月10日更新">软件包问题 24年12月10日更新</h3>
<p>我使用了 <span class="exturl" data-url="aHR0cDovL09QRU5XUlQuQUk=">OPENWRT.AI<i class="fa fa-external-link-alt"></i></span> 的自助构建固件，然最近作者更新了主线，默认的 opkg 仓库直接炸了，导致无法安装插件</p>
<p>故此修改了 opkg 仓库地址，可以正常安装插件了。</p>
<p>我的固件应是最新主线 24.10.0-rc2 之前最后一个版本 23.05.0</p>
<p>内核版本 5.15.167</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/gz openwrt_core https://downloads.openwrt.org/releases/23.05.0/targets/ramips/mt7621</span><br><span class="line">src/gz openwrt_base https://downloads.openwrt.org/releases/23.05.0/packages/mipsel_24kc/base</span><br><span class="line">src/gz openwrt_luci https://downloads.openwrt.org/releases/23.05.0/packages/mipsel_24kc/luci</span><br><span class="line">src/gz openwrt_packages https://downloads.openwrt.org/releases/23.05.0/packages/mipsel_24kc/packages</span><br><span class="line">src/gz openwrt_routing https://downloads.openwrt.org/releases/23.05.0/packages/mipsel_24kc/routing</span><br><span class="line">src/gz openwrt_telephony https://downloads.openwrt.org/releases/23.05.0/packages/mipsel_24kc/telephony</span><br></pre></td></tr></table></figure>
<p>直接在软件包管理中添加源，然后更新软件包列表，就可以正常安装插件了。</p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>ROG-Strix-G17-2022-超频探索</title>
    <url>/2024/09/07/1/</url>
    <content><![CDATA[<h2 id="玩家国度-魔霸6p-超频探索">玩家国度-魔霸6p-超频探索</h2>
<p>之前就使用将内存简单调到了5000MT/s，但是并没有进行进一步的调整</p>
<p>这次遇到奇怪的问题，重置了BIOS之后，所以重新进行一次配置</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>工具 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RhdmlkUzk1L1Ntb2tlbGVzc19VTUFGL3RyZWUvbWFpbg==">UniversalAMDFormBrowser<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p>前置准备-关闭安全启动</p>
</li>
</ul>
<p><img src="./dissecureboot.jpg" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不开机了怎么办</p>
</li>
</ul>
<blockquote>
<p>正确解决方法应该是长按电源间关机，然后长按Ctrl+home+电源键，一直按不松手，直到所有指示灯全灭，然后松开所有按键，之后键盘灯会亮，然后键盘灯连闪三次就会开机了。</p>
</blockquote>
<h2 id="PBO">PBO</h2>
<p><img src="./pbo.jpg" alt></p>
<p>这个页面下有 Curve Optimizer，可以调整核心的电压，我调整到了 -10，其实可以更低，但是我没有测试</p>
<p>另外降压可以通过软件进行，比如 Ghelper，这样更安全</p>
<h2 id="DDR-Timing">DDR Timing</h2>
<p><img src="./ddrtime.jpg" alt></p>
<p>这个是适合双内存 5000MT/s 的设置</p>
<p>注意这使用的是 16进制，所以 38(10)=26(16)以此类推</p>
<p><img src="./zentimings.png" alt></p>
<p>此外，在另一个页面(infinity fabric frequency and dividers)，还有一个设置</p>
<p>用于调试 infinity fabric 频率，这个频率是与 FCLK 一致的</p>
<p>原本的 auto 默认是 1800 MHz，但是我调整到了 2000 MHz，这个是可以通过 tm5 进行测试的</p>
<p>有关内存，还可以关闭 power down mode，这个是在另一个页面(AMD CBS)的，可以减少延迟</p>
<p>但是因为我有时需要使用电池，所以并没有关闭</p>
<h2 id="电压">电压</h2>
<p>电压只有少数几个可以调整的选项</p>
<p>主要是 VDD_MEM VDD_IO VDD_DIMM</p>
<p>这几个有关内存的电压，我没有调整，因为我是三星的内存(4800MT/s@c40)，并没有超频潜力，我尝试过了，三星的极限是 5400MT/s，此时延迟颇高，且不可过 tm5，效能不如 5000MT/s@c38(此时仍然是1.1v电压)</p>
<p>对了，这个三星内存的编号还有说法</p>
<blockquote>
<p>DDR5 后缀2位：0L和0D 是代表PMIC（电源管理IC）不同，0L是三星自己S2FPC01，0D是IDT（瑞萨收购）P8911， 三星PMIC相对稳定，P8911超频性能会好，国际大厂都有在用，hynix ddr5 也用这颗P8911</p>
</blockquote>
<p>如果是海力士 a/m die，可以尝试调整电压，据说可以达到 6000MT/s@c30</p>
<h2 id="iGPU">iGPU</h2>
<p>这个在 PBO 里面，可以调整 iGPU 的频率，最高可以 boost 200MHz，另外在 AMD CBS -&gt; NBIO -&gt; GFX 里面，还有一个选项可以调整 iGPU 的显存，最高可以调整到 16GB</p>
<p>一些网友反应，很多 AMD 笔记本使用 EDGE 看视频会卡顿，这个是因为 iGPU 的显存不足（很多厂商设定是 AUTO，或者是512MB），可以尝试调整到 2GB 以上，或者在 AMD Radeon Software 里面调整 性能 -&gt; 调整 -&gt; 系统 -&gt; 内存优化器 -&gt; 游戏，但是很多机器并不会生效，所以还是在 BIOS 里面调整比较好</p>
<p>当然，也可能是超频把驱动超坏了，可以尝试重装驱动。</p>
<h2 id="USB4">USB4</h2>
<p>6800H 以上的处理器，都支持 USB4，但是很多厂商并没有开启，先安装芯片组驱动中的 <code>USB4 CM</code> 驱动，然后可以在 BIOS 里面开启，这个是在 AMD CBS -&gt; FCH -&gt; USB4</p>
<p>下面的选项全部改成 auto，然后保存重启，就可以使用 USB4 了。</p>
<p><img src="./usb4.png" alt></p>
<blockquote>
<p>AMD PBS 里面的 USB4 选项，其中有个 USB4 ACPI _EDP SUPPORT，这个选项描述应该在系统安装前或是 AMD USB4 CM 驱动，安装前保持关闭，安装后将会自动开启，但是似乎不起作用，无论是 <code>Disable</code> 还是 <code>Enable</code>，都没什么变化。</p>
</blockquote>
<p>据说是有 bug，部分设备导致卡死死机，但是仍然有厂商开启了（并且没有出现 BUG），比如联想和戴尔，华硕对22款设备只有少数几款推出了测试版固件，然而时至今日，仍然没有正式版固件，这个是很遗憾的，也反映了华硕对于用户的态度。</p>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC83ODIwMTU0MTAw">三星ddr5内存后缀参数的真正区别？<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1p5dDIwNDgvYXJ0aWNsZS9kZXRhaWxzLzEyNjEzODE3OA==">天选三超频实战<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC83ODYzNDI0MDYxP3NlZV9sej0xIzE0NDMyNDgwOTIyM2w=">AMD 移动平台修改 BIOS 隐藏选项实现内存超频等<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93aW5yYWlkLmxldmVsMXRlY2hzLmNvbS90L3Rvb2wtdW5pdmVyc2FsYW1kZm9ybWJyb3dzZXIvNDAzNTM=">TOOL UniversalAMDFormBrowser<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9wb3N0LnNtemRtLmNvbS94aWxpZS85NDM5NC8=">系列：龙之怒<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlZXJnZS9nLWhlbHBlcg==">Ghelper<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="踩坑">踩坑</h2>
<p>一些奇怪的问题可以看看 <a href="./How-to-fix-my-laptop.md">How-to-fix-my-laptop</a></p>
<p>莫名重置bios后，想要再次调整内存频率，发现无法调整，直接黑屏，无法开机，这个时候可以尝试长按电源键，然后长按Ctrl+home+电源键，一直按不松手，直到所有指示灯全灭，然后松开所有按键，之后键盘灯会亮，然后键盘灯连闪三次就会开机了。</p>
<p>但是想要恢复原先的设置，却无论如何都无法调整，直接不启动，可以发现，尽管你已经调整了设置，但并不生效</p>
<p>我推测应该是第一次设置时会写入完整的配置，但是之后的调整只会写入调整的部分，但 bios 逻辑中并没有对缺失的部分进行处理，导致无法启动</p>
<p>这个时候，该怎么办呢？</p>
<ol>
<li class="lvl-3">
<p>关闭 BitLocker，这个是导致无法调整的原因之一（因为安全原因，我一般都会开启 BitLocker，但是多次测试，发现 bitlocker 会影响 bios，可能是它会对boot进行校验的原因）</p>
</li>
<li class="lvl-3">
<p>清除你在 bios 里面设置的密码，以及留下的资产信息和联系方式，经过测试，这个是导致无法调整的原因之一（推测是因为这个信息会被写入bios，因为即便降级再升级 bios 这个信息仍然保留，可能与配置文件的二进制地址相冲突，因为可以发现，它对字数有严格要求，而我超频的方法并非是官方支持的，在我另一台Fujitsu的设备，这些信息是不做限制的）</p>
</li>
<li class="lvl-3">
<p>重置 ec 以及 bios 信息，即长按电源键，然后长按Ctrl+home+电源键，一直按不松手，直到所有指示灯全灭，然后松开所有按键，之后键盘灯会亮，然后键盘灯连闪三次就会开机了。</p>
</li>
<li class="lvl-3">
<p>降级 bios，目前该设备由华硕提供的bios有两个版本，一个是 325，一个是 327。先降级到 325，然后再升级到 327</p>
</li>
<li class="lvl-3">
<p>关闭快速启动，以及安全启动，然后保存重启</p>
</li>
<li class="lvl-3">
<p>重新进行超频设置</p>
<ul class="lvl-2">
<li class="lvl-6">优先进入 AMD Overclocking,设置PBO</li>
<li class="lvl-6">一次只调整一个参数，然后保存重启，如果无法启动，就长按电源键，然后长按Ctrl+home+电源键，一直按不松手，直到所有指示灯全灭，然后松开所有按键，之后键盘灯会亮，然后键盘灯连闪三次就会开机了。</li>
<li class="lvl-6">再调整内存频率</li>
<li class="lvl-6">然后是FCLK频率</li>
<li class="lvl-6">之后再调整 MCLK = UCLK</li>
<li class="lvl-6">最后才是 iGPU 缓存区大小</li>
</ul>
</li>
<li class="lvl-3">
<p>之后依次开启快速启动，安全启动</p>
</li>
</ol>
<p>此番设置，我成功将内存频率调整到了 5000MT/s@c40，上文提到超到c38，这次又不稳定了，三星内存太拉跨了，所以只能调整到c40，延迟也是很高的，但是效能还是比 4800MT/s@c40 要高，因为 infinity fabric 频率提高了，所以效能也提高了</p>
<p>对了，这电脑在暑期的时候，关机的时候换位置断开了 AC 电源，然后开机的时候，电源指示灯无论如何只能亮红灯了（即使充满了电），直到今日也是没有什么头绪。</p>
<p>对这个问题做过的尝试：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>重置 CMOS</p>
</li>
<li class="lvl-2">
<p>降级 bios</p>
</li>
<li class="lvl-2">
<p>升级 bios</p>
</li>
<li class="lvl-2">
<p>卸载 Asus System Control Interface V3 以及 Armoury Crate</p>
</li>
<li class="lvl-2">
<p>重装奥创以及 MyAsus</p>
</li>
</ul>
<p>对于重装系统，我并没有尝试，因为对于核心驱动我都删除干净再重装，在 Bios 里也无法改变，所以我认为这个问题或许是硬件问题，或许涉及更底层的东西</p>
<p>如果有人知道解决方案，请告诉我，邮件联系，谢谢！</p>
]]></content>
  </entry>
  <entry>
    <title>让 Github Page 使用 eu.org 域名</title>
    <url>/2024/02/16/1/</url>
    <content><![CDATA[<h2 id="让-Github-Page-使用-eu-org-域名">让 Github Page 使用 <span class="exturl" data-url="aHR0cDovL2V1Lm9yZw==">eu.org<i class="fa fa-external-link-alt"></i></span> 域名</h2>
<p>目前，由于受到 DNS 污染以及 SNI 阻断，大陆地区的用户访问 Github Page 会遇到很多问题。</p>
<p>这让我不得不寻找一种替代方案，让我能够让我的网站能够被大陆地区的用户访问。</p>
<h2 id="注册-eu-org-域名">注册 <span class="exturl" data-url="aHR0cDovL2V1Lm9yZw==">eu.org<i class="fa fa-external-link-alt"></i></span> 域名</h2>
<p>访问 <span class="exturl" data-url="aHR0cHM6Ly9ldS5vcmc=">eu.org<i class="fa fa-external-link-alt"></i></span> 注册一个域名，这网上教程很多，这里不再赘述。</p>
<p>注意的是大陆地区的用户可能要花费很长时间才能收到注册成功的邮件。根据网上网友的反馈，大约是 2个月到1年不等。</p>
<p>我的是 3 个月左右收到的邮件。</p>
<h2 id="配置-DNS">配置 DNS</h2>
<p>在 <span class="exturl" data-url="aHR0cDovL2V1Lm9yZw==">eu.org<i class="fa fa-external-link-alt"></i></span> 网站上，找到你注册的域名，然后配置 DNS。</p>
<h3 id="HOSTRY">HOSTRY</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdHJ5LmNvbS8=">HOSTRY<i class="fa fa-external-link-alt"></i></span> 是一个免费的 DNS 服务商，注册一个账号，然后添加域名。</p>
<p>但是，这只是用于初步测试的</p>
<p>在 <span class="exturl" data-url="aHR0cDovL2V1Lm9yZw==">eu.org<i class="fa fa-external-link-alt"></i></span> 网站上，找到你注册的域名，然后配置 DNS。</p>
<h3 id="Github-Page">Github Page</h3>
<p>在你的 Github Page 仓库中，找到 <code>Settings</code> -&gt; <code>Pages</code> -&gt; <code>Custom domain</code>，然后输入你的域名。</p>
<p><mark>这个域名需要有前缀 <code>www</code>，例如 <code>www.example.eu.org</code>。</mark></p>
<h3 id="CLOUDFLARE">CLOUDFLARE</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20v">Cloudflare<i class="fa fa-external-link-alt"></i></span> 是一个免费的 DNS 服务商，注册一个账号，然后添加域名。</p>
<p>这个的作用是，你的域名需要有一个 DNS 服务器，这个服务器会解析你的域名，然后指向你的 Github Page。</p>
<p>在这里，你需要添加 A 记录、AAAA 记录、CNAME 记录。</p>
<h4 id="1-添加-A-记录">1. 添加 A 记录</h4>
<p>在 Cloudflare 上，添加 A 记录，指向 Github Page 的 IP 地址。</p>
<h4 id="2-添加-AAAA-记录">2. 添加 AAAA 记录</h4>
<p>在 Cloudflare 上，添加 AAAA 记录，指向 Github Page 的 IP 地址。</p>
<h4 id="3-添加-CNAME-记录">3. 添加 CNAME 记录</h4>
<p>在 Cloudflare 上，添加 CNAME 记录，指向你的 Github Page。</p>
<h3 id="eg">eg</h3>
<p><img src="./clouldflare-record.png" alt></p>
<blockquote>
<p>这些 ipv4 和 ipv6 地址是 Github Page 的地址，你可以在 Github Page 的文档中找到。</p>
</blockquote>
<h3 id="等待">等待</h3>
<p>等待一段时间，然后访问你的域名，如果能访问你的 Github Page，那么就成功了。</p>
<h2 id="安全性">安全性</h2>
<p>这里需要注意的是，你的域名需要使用 HTTPS，这样才能保证你的网站的安全性。</p>
<p>所以我们需要在 Cloudflare 上配置一些东西。</p>
<h3 id="DNS">DNS</h3>
<p>这里，我们让 Cloudflare 代理我们的域名，这样我们的域名就能使用 HTTPS。</p>
<h3 id="SSL-TLS">SSL/TLS</h3>
<p>在 Cloudflare 上，找到 <code>SSL/TLS</code>，然后配置 <code>Full</code>。</p>
<p>边缘证书需要配置 <code>始终使用 HTTPS</code>、<code>随机加密</code>、<code>LTS 1.3</code>、<code>自动 HTTPS 重写</code>。</p>
<p>源服务器证书需要配置 <code>经过身份验证的源服务器拉取</code>。</p>
<h2 id="问题">问题</h2>
<p>我在这里遇到了一个问题，就是 Github Page 无法强制使用 HTTPS。</p>
<p>这个问题我还没有解决，如果有人知道，希望能够告诉我。</p>
<p><img src="./githubpage-settings.png" alt></p>
<p>此外，出于某些原因，例如 CORS 策略问题，我不得不将 Cloudflare 的安全性设置为 <code>低</code>，并且关闭<code>浏览器完整性检查</code>。</p>
<h3 id="24年3月25日更新">24年3月25日更新</h3>
<p>需要把 Cloudflare DNS 的代理模式设置为 DNS only，这样 Github Page 才能强制使用 HTTPS。</p>
<p>但是其实无所谓了，使用 Cloudflare 的代理模式，也能够使用 HTTPS。</p>
<p>因为是基于 Github Page 的，所以也没办法在服务器上安装证书，Cloudflare 也只能使用 完全 SSL/TLS。</p>
<h3 id="24年5月9日更新">24年5月9日更新</h3>
<p>大约在4月中旬的时候，我发现我的域名无法访问了，然后利用网路上的gfw检测工具，发现我的域名被墙了。</p>
<p>然后神奇的是，这个好像只是地区性的，有的地区可以访问，有的地区无法访问。但是并没有被污染。</p>
<p>并在在5月初的时候，我发现我的域名可以访问了。</p>
<p>这个防火墙，把我气笑了。</p>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYi5wcm8vZGIvNTE0MDQy">免费注册申请永久的eu.org顶级域名创建属于自己的域名,再也不用给博客域名续费了!<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vemgvcGFnZXMvY29uZmlndXJpbmctYS1jdXN0b20tZG9tYWluLWZvci15b3VyLWdpdGh1Yi1wYWdlcy1zaXRlL21hbmFnaW5nLWEtY3VzdG9tLWRvbWFpbi1mb3IteW91ci1naXRodWItcGFnZXMtc2l0ZQ==">管理 GitHub Pages 站点的自定义域<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="24年12月9日更新">24年12月9日更新</h2>
<h3 id="Cloudflare访问速率限制">Cloudflare访问速率限制</h3>
<p>进入域名，找到 防火墙 &gt; WAF &gt; 访问速率限制，然后配置。</p>
<p><img src="./rate-limit.png" alt></p>
<h3 id="CloudFlare-解决-CORS-跨域问题">CloudFlare 解决 CORS 跨域问题</h3>
<p>规则 &gt; 转换规则 &gt; 修改相应头</p>
<p><img src="./responseheader.png" alt></p>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjE3bGFpLnNpdGUvcG9zdHMvNTMxMWI2MTkvI2Nsb3VkZmxhcmUtUGFnZXMtJUU5JTgzJUE4JUU3JUJEJUIy">基于Hexo的matery主题搭建博客增强部署篇4<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>烽火光猫 HG261GS 开启 telnet·破解超密</title>
    <url>/2025/01/24/1/</url>
    <content><![CDATA[<h2 id="前提">前提</h2>
<ul class="lvl-0">
<li class="lvl-2">江西电信</li>
<li class="lvl-2">软件版本 G50D1.12MC000</li>
</ul>
<h2 id="获取超密">获取超密</h2>
<p>打开 <span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguMS4xL2NnaS1iaW4vYmFzZWluZm9TZXQuY2dp">http://192.168.1.1/cgi-bin/baseinfoSet.cgi<i class="fa fa-external-link-alt"></i></span></p>
<p>得到一个 json<br>
其中 <code>TELECOMACCOUNT</code> 和 <code>TELECOMPASSWORD</code> 就是超密</p>
<h2 id="开启-TELNET">开启 TELNET</h2>
<p>打开控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arp -a 192.168.1.1</span><br></pre></td></tr></table></figure>
<p>得到一个物理地址</p>
<p>打开</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">http://192.168.1.1/cgi-bin/telnetenable.cgi?telnetenable=1&amp;key=得到的物理地址去掉-并且大写</span><br></pre></td></tr></table></figure>
<p>提示 telnet 已开启</p>
<p>控制台登录 telent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet root@192.168.1.1</span><br></pre></td></tr></table></figure>
<p>密码 <code>hg2x0</code></p>
<h2 id="常用命令">常用命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/rom/fhshell/misc_shell/stdaction factory precfg_in <span class="comment"># 进入工厂模式</span></span><br><span class="line"><span class="built_in">cat</span> /flash/cfg/agentconf/factory.conf <span class="comment"># 查看配置</span></span><br><span class="line"><span class="built_in">cat</span> /flash/cfg/agentconf/param.xml <span class="comment"># 查看参数</span></span><br><span class="line">/rom/fhshell/misc_shell/cfg_bak_restore.sh factory_reset remote_reset factory <span class="comment"># 退出工厂模式</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="详细参数">详细参数</h2>
<table>
<thead>
<tr>
<th>部件</th>
<th>型号</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>SD5115 H</td>
<td>NO DATASHEET，推测 armv7l 1core@647MHZ</td>
</tr>
<tr>
<td>STORAGE</td>
<td>SAMSUNG K9F1G08U0D-SCB0</td>
<td>1-Gbit(128M x 8bit)，工作电压：3.3V</td>
</tr>
<tr>
<td>MEMORY</td>
<td>SAMSUNG K4B4G1646D-BCH9</td>
<td>4-Gbit(256M x 16) DDR3-1333(9-9-9)，工作电压：1.5V</td>
</tr>
<tr>
<td>GPON</td>
<td>NOG22-D8C-ST</td>
<td>Mentech 铭普光磁，EPON版本的是千兆的光收发</td>
</tr>
<tr>
<td>TELCOM INTERFACE IC</td>
<td>LE89156PQC</td>
<td>Microchip Technology，工作电压：3.3V</td>
</tr>
<tr>
<td>OS</td>
<td>Linux</td>
<td>2.6.34.10_sd5115h_v100f</td>
</tr>
</tbody>
</table>
<p>两个网口都是百兆的。</p>
<summary>点击查看具体信息</summary>
<details>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~ # uname -a</span><br><span class="line">Linux (none) 2.6.34.10_sd5115h_v100f #1 Thu Dec 22 17:08:19 CST 2016 armv7l unknown</span><br><span class="line">~ # cat /proc/meminfo</span><br><span class="line">MemTotal:         111372 kB</span><br><span class="line">MemFree:           30340 kB</span><br><span class="line">Buffers:               0 kB</span><br><span class="line">Cached:            33372 kB</span><br><span class="line">SwapCached:            0 kB</span><br><span class="line">Active:            32632 kB</span><br><span class="line">Inactive:          26628 kB</span><br><span class="line">Active(anon):      29308 kB</span><br><span class="line">Inactive(anon):     4624 kB</span><br><span class="line">Active(file):       3324 kB</span><br><span class="line">Inactive(file):    22004 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">HighTotal:             0 kB</span><br><span class="line">HighFree:              0 kB</span><br><span class="line">LowTotal:         111372 kB</span><br><span class="line">LowFree:           30340 kB</span><br><span class="line">SwapTotal:             0 kB</span><br><span class="line">SwapFree:              0 kB</span><br><span class="line">Dirty:                 0 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:         25912 kB</span><br><span class="line">Mapped:             3360 kB</span><br><span class="line">Shmem:              8044 kB</span><br><span class="line">Slab:              13340 kB</span><br><span class="line">SReclaimable:       1128 kB</span><br><span class="line">SUnreclaim:        12212 kB</span><br><span class="line">KernelStack:         800 kB</span><br><span class="line">PageTables:          636 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:       55684 kB</span><br><span class="line">Committed_AS:     360000 kB</span><br><span class="line">VmallocTotal:     139264 kB</span><br><span class="line">VmallocUsed:       20548 kB</span><br><span class="line">VmallocChunk:     109556 kB</span><br><span class="line">~ # cat /proc/cpuinfo</span><br><span class="line">Processor       : ARMv7 Processor rev 0 (v7l)</span><br><span class="line">BogoMIPS        : 1297.61</span><br><span class="line">Features        : swp half thumb fastmult edsp</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x3</span><br><span class="line">CPU part        : 0xc09</span><br><span class="line">CPU revision    : 0</span><br><span class="line"></span><br><span class="line">Hardware        : hsan</span><br><span class="line">Revision        : 0000</span><br><span class="line">Serial          : 0000000000000000</span><br><span class="line">~ # cat /proc/stat</span><br><span class="line">cpu  3787 4761 7879 437002 0 2 226 0 0 0</span><br><span class="line">cpu0 3787 4761 7879 437002 0 2 226 0 0 0</span><br><span class="line">intr 486593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 2257 0 453762 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30570 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">ctxt 173469</span><br><span class="line">btime 1289820569</span><br><span class="line">processes 23510</span><br><span class="line">procs_running 1</span><br><span class="line">procs_blocked 0</span><br><span class="line">softirq 579308 0 453657 4463 30793 0 0 1016 0 0 89379</span><br><span class="line">~ # df -h</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">rootfs                   16.0M      8.1M      7.9M  51% /</span><br><span class="line">/dev/root                16.0M      8.1M      7.9M  51% /</span><br><span class="line">/dev/mtdblock2           20.0M     12.2M      7.8M  61% /rom</span><br><span class="line">/dev/mtdblock8           10.0M    888.0k      9.1M   9% /flash</span><br><span class="line">/dev/mtdblock9            4.0M    396.0k      3.6M  10% /usr/local/ct</span><br><span class="line">/dev/mtdblock10          14.0M      3.0M     11.0M  21% /usr/local/fh</span><br><span class="line">/dev/mtdblock7            2.0M    572.0k      1.4M  28% /data</span><br><span class="line">tmpfs                    54.4M     16.0k     54.4M   0% /tmp</span><br><span class="line">tmpfs                    54.4M      8.4M     45.9M  16% /var</span><br><span class="line">tmpfs                    54.4M         0     54.4M   0% /mnt</span><br><span class="line">~ # cat /etc/fstab</span><br><span class="line"># /etc/fstab: static file system information.</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount pt&gt;     &lt;type&gt;   &lt;options&gt;         &lt;dump&gt; &lt;pass&gt;</span><br><span class="line">proc            /proc          proc     defaults          0      0</span><br><span class="line">devpts          /dev/pts       devpts   defaults,gid=5,mode=620   0      0</span><br><span class="line">tmpfs           /tmp           tmpfs    defaults          0      0</span><br><span class="line">sysfs           /sys           sysfs    defaults          0      0</span><br><span class="line">tmpfs           /var           tmpfs    defaults          0      0</span><br><span class="line">tmpfs           /mnt           tmpfs    defaults          0      0      ~ #</span><br><span class="line">~ # cat /proc/mtd</span><br><span class="line">dev:    size   erasesize  name</span><br><span class="line">mtd0: 00200000 00020000 &quot;boot&quot;</span><br><span class="line">mtd1: 00400000 00020000 &quot;KernelA&quot;</span><br><span class="line">mtd2: 01400000 00020000 &quot;AppA&quot;</span><br><span class="line">mtd3: 01000000 00020000 &quot;RootfsA&quot;</span><br><span class="line">mtd4: 00400000 00020000 &quot;KernelB&quot;</span><br><span class="line">mtd5: 01400000 00020000 &quot;AppB&quot;</span><br><span class="line">mtd6: 01000000 00020000 &quot;RootfsB&quot;</span><br><span class="line">mtd7: 00200000 00020000 &quot;ConfigurationA&quot;</span><br><span class="line">mtd8: 00a00000 00020000 &quot;ConfigurationB&quot;</span><br><span class="line">mtd9: 00400000 00020000 &quot;UserLocalCT&quot;</span><br><span class="line">mtd10: 00e00000 00020000 &quot;Userdata&quot;</span><br><span class="line">/ # tftp -p -l mtd0 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd1 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd2 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd3 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd4 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd5 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd6 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd7 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd8 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd9 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd10 192.168.1.2</span><br></pre></td></tr></table></figure>
</details>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vSEdORVQvcC8xNzk5MjUyOQ==">移动烽火HG光猫超密破解<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC00MTQ0MDgwLTEtMS5odG1s">【烽火】 烽火光猫开telnet及改sn教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0amxqeS9hcnRpY2xlL2RldGFpbHMvOTgyNDc3OTg=">烽火HG261GS——获取超级管理员密码<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MzY5NzQ3LTEtMS5odG1s">【烽火】 烽火HG2861-A/HG6861-A修改运营商界面、SN、MAC、PON对称模式等信息，可以开SSH<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTML Day1</title>
    <url>/2023/03/02/1/</url>
    <content><![CDATA[<h2 id="H5的基本原理">H5的基本原理</h2>
<p>H5 App 前端开发，是基于 HTML5、CSS3、JavaScript、jQuery、Ajax、JSON、XML 等技术，主要由3部分组成：结构（Structure）、表现（Presentation）、行为（Behavior）。大多数H5应用与CSS相集成，Javascript负责；浏览器的交互行为。HTML5+CSS3+JavaScript相辅相成，紧密合作。</p>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>HTML 就像是骨架</p>
</li>
<li class="lvl-2">
<p>CSS 就像是血肉</p>
</li>
<li class="lvl-2">
<p>JavaScript 就像是灵魂</p>
</li>
</ul>
</blockquote>
<h2 id="H5的优势">H5的优势</h2>
<p>H5的优势主要体现在以下几个方面：</p>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>H5的跨平台性</p>
</li>
<li class="lvl-2">
<p>H5的开发效率</p>
</li>
<li class="lvl-2">
<p>H5的开发成本</p>
</li>
<li class="lvl-2">
<p>H5的开发周期</p>
</li>
<li class="lvl-2">
<p>H5的开发技术</p>
</li>
</ul>
</blockquote>
<h2 id="H5的结构元素">H5的结构元素</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>header 定义文档或者节的页眉</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>section 定义文档中的主体部分</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>nav 定义导航链接的部分</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>...<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>aside 定义页面的侧边栏</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>...<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>article 定义页面的主要内容</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>...<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>footer 定义文档或者节的页脚</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="H5的元素类型">H5的元素类型</h2>
<h3 id="节元素标签">节元素标签</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>body &gt; 文档的主体</p>
</li>
<li class="lvl-2">
<p>article&gt; 文档中的独立内容</p>
</li>
<li class="lvl-2">
<p>h1~h6 &gt; 各级标题</p>
</li>
<li class="lvl-2">
<p>nav &gt; 导航</p>
</li>
<li class="lvl-2">
<p>aside &gt; 侧边栏</p>
</li>
<li class="lvl-2">
<p>section &gt; 文档中的章节</p>
</li>
<li class="lvl-2">
<p>header &gt; 页眉</p>
</li>
<li class="lvl-2">
<p>footer &gt; 页脚</p>
</li>
<li class="lvl-2">
<p>hgroup &gt; 标题组</p>
</li>
<li class="lvl-2">
<p>address &gt; 地址</p>
</li>
</ul>
<h3 id="文本元素标签">文本元素标签</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>a &gt; 即使普通文本也是超链接</p>
</li>
<li class="lvl-2">
<p>em &gt; 强调</p>
</li>
<li class="lvl-2">
<p>strong &gt; 重要</p>
</li>
<li class="lvl-2">
<p>p &gt; 段落</p>
</li>
<li class="lvl-2">
<p>b &gt; 粗体</p>
</li>
<li class="lvl-2">
<p>i &gt; 斜体</p>
</li>
<li class="lvl-2">
<p>code &gt; 代码</p>
</li>
<li class="lvl-2">
<p>q &gt; 引用</p>
</li>
<li class="lvl-2">
<p>cite &gt; 引用</p>
</li>
<li class="lvl-2">
<p>u &gt; 下划线</p>
</li>
<li class="lvl-2">
<p>abbr &gt; 缩写</p>
</li>
<li class="lvl-2">
<p>dfn &gt; 定义</p>
</li>
<li class="lvl-2">
<p>var &gt; 变量</p>
</li>
<li class="lvl-2">
<p>samp &gt; 样本</p>
</li>
<li class="lvl-2">
<p>kbd &gt; 键盘</p>
</li>
<li class="lvl-2">
<p>wbr &gt; 自动换行</p>
</li>
<li class="lvl-2">
<p>span &gt; 行内元素</p>
</li>
<li class="lvl-2">
<p>br &gt; 换行</p>
</li>
</ul>
<h3 id="分组元素标签">分组元素标签</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>div &gt; 块级元素</p>
</li>
<li class="lvl-2">
<p>p &gt; 段落</p>
</li>
<li class="lvl-2">
<p>dl &gt; 定义列表</p>
</li>
<li class="lvl-2">
<p>dt &gt; 定义列表中的项目</p>
</li>
<li class="lvl-2">
<p>dd &gt; 定义列表中的项目</p>
</li>
<li class="lvl-2">
<p>ol &gt; 有序列表</p>
</li>
<li class="lvl-2">
<p>ul &gt; 无序列表</p>
</li>
<li class="lvl-2">
<p>li &gt; 列表项</p>
</li>
<li class="lvl-2">
<p>hr &gt; 水平线</p>
</li>
</ul>
<h3 id="嵌入元素标签">嵌入元素标签</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>img &gt; 图片</p>
</li>
<li class="lvl-2">
<p>iframe &gt; 内联框架</p>
</li>
<li class="lvl-2">
<p>video &gt; 视频</p>
</li>
<li class="lvl-2">
<p>audio &gt; 音频</p>
</li>
<li class="lvl-2">
<p>canvas &gt; 画布</p>
</li>
</ul>
<h2 id="写一个基本的HTML5页面">写一个基本的HTML5页面</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">&lt;/head&gt;</span></span><br><span class="line"><span class="language-css">&lt;<span class="selector-tag">body</span>&gt;</span></span><br><span class="line"><span class="language-css">    &lt;<span class="selector-tag">h1</span>&gt;这是一个<span class="selector-tag">H5</span>页面&lt;/<span class="selector-tag">h1</span>&gt;</span></span><br><span class="line"><span class="language-css">&lt;/<span class="selector-tag">body</span>&gt;</span></span><br><span class="line"><span class="language-css">&lt;/<span class="selector-tag">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>B站视频教程:</p>
<iframe class="video-frame" src="//player.bilibili.com/player.html?aid=55631961&cid=97256834&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
<p>参考资料:<br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL2h0bWxfZWxlbWVudHMuYXNw">W3Schools<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v">MDN<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9odG1sL2h0bWw1LWludHJvLmh0bWw=">菜鸟教程<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML Day2</title>
    <url>/2023/03/03/1/</url>
    <content><![CDATA[<p><a name="top">顶部锚点</a><br><br>
<a href="#down">下去</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML基本结构">HTML基本结构</h2>
<blockquote>
<p>2023年3月5日，最近闲得慌，继续学习HTML，记录一下。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        网页内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="网页基本信息">网页基本信息</h2>
<h3 id="注释">注释</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!----&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="网页类型">网页类型</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">### 网页编码</span><br><span class="line">```html</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mate描述性标签，一般用于网页的描述性信息，用作SEO。</p>
<h3 id="网页关键字">网页关键字</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网页关键字&quot;</span>&gt;</span>\</span><br></pre></td></tr></table></figure>
<h3 id="网页描述">网页描述</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网页描述&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="网页作者">网页作者</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网页作者&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="网页图标">网页图标</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;网页图标路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="网页基本标签">网页基本标签</h2>
<h3 id="标题">标题</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>h1-h6分别表示标题1-标题6，h1表示最大的标题，h6表示最小的标题。</p>
<h3 id="段落">段落</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个段落</p>
</blockquote>
<h3 id="换行">换行</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个段落<br>这是一个换行</p>
</blockquote>
<h3 id="水平线">水平线</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个段落</p>
<hr>
<p>这是一个段落</p>
</blockquote>
<h3 id="字体样式">字体样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<b>粗体</b>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<strong>粗体</strong>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<i>斜体</i>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<em>斜体</em>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<u>下划线</u>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<s>删除线</s>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<del>删除线</del>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<ins>下划线</ins>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<sub>下标</sub>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p>这是一个<sup>上标</sup>段落</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>小字体<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注释和特殊符号">注释和特殊符号</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span> 空格</span><br><span class="line"><span class="symbol">&amp;lt;</span> 小于号</span><br><span class="line"><span class="symbol">&amp;gt;</span> 大于号</span><br><span class="line"><span class="symbol">&amp;amp;</span> &amp;号</span><br><span class="line"><span class="symbol">&amp;copy;</span> 版权</span><br><span class="line"><span class="symbol">&amp;reg;</span> 注册商标</span><br><span class="line"><span class="symbol">&amp;trade;</span> 商标</span><br><span class="line"><span class="symbol">&amp;yen;</span> 日元</span><br><span class="line"><span class="symbol">&amp;euro;</span> 欧元</span><br><span class="line"><span class="symbol">&amp;pound;</span> 英镑</span><br><span class="line"><span class="symbol">&amp;cent;</span> 分</span><br><span class="line"><span class="symbol">&amp;sect;</span> 小节</span><br><span class="line"><span class="symbol">&amp;times;</span> 乘号</span><br><span class="line"><span class="symbol">&amp;divide;</span> 除号</span><br><span class="line">&amp;frac12; 1/2</span><br><span class="line">&amp;frac14; 1/4</span><br><span class="line">&amp;frac34; 3/4</span><br><span class="line">&amp;frac13; 1/3</span><br><span class="line">&amp;frac23; 2/3</span><br><span class="line">&amp;frac15; 1/5</span><br><span class="line">&amp;frac25; 2/5</span><br><span class="line">&amp;frac35; 3/5</span><br><span class="line">&amp;frac45; 4/5</span><br><span class="line">&amp;frac16; 1/6</span><br><span class="line">&amp;frac56; 5/6</span><br><span class="line">&amp;frac18; 1/8</span><br><span class="line">&amp;frac38; 3/8</span><br><span class="line">&amp;frac58; 5/8</span><br><span class="line">&amp;frac78; 7/8</span><br></pre></td></tr></table></figure>
<h2 id="图像标签">图像标签</h2>
<blockquote>
<p>常见的图像格式有：jpg、png、gif、bmp、svg等。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片描述&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片标题&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>src属性表示图片的路径，alt属性表示图片的描述，title属性表示图片的标题。其中，src属性是必须的。<br>
src建议使用相对路径，而不是绝对路径。…/表示上一级目录，./表示当前目录。</p>
<p>e.g.:</p>
<blockquote>
<img src="https://www.baidu.com/img/bd_logo1.png" alt="百度logo" title="百度logo">
</blockquote>
<h2 id="超链接标签">超链接标签</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;链接打开方式&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29t">百度<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>也可以是图片链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/bd_logo1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;百度logo&quot;</span> <span class="attr">title</span>=<span class="string">&quot;百度logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p><a href="https://www.baidu.com" target="_blank"><img src="https://www.baidu.com/img/bd_logo1.png" alt="百度logo" title="百度logo"></a></p>
</blockquote>
<p>target属性表示链接打开方式，有以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>_blank：在新窗口打开链接</p>
</li>
<li class="lvl-2">
<p>_self：在当前窗口打开链接</p>
</li>
<li class="lvl-2">
<p>_parent：在父窗口打开链接</p>
</li>
<li class="lvl-2">
<p>_top：在顶级窗口打开链接</p>
</li>
<li class="lvl-2">
<p>framename：在指定的框架中打开链接</p>
</li>
</ul>
<p><a name="down">下去锚点</a></p>
<h3 id="锚点">锚点</h3>
<p>锚点是指在网页中的某个位置，可以通过锚点链接到网页中的某个位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点名称&quot;</span>&gt;</span>锚点文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p><a href="#top">回到顶部</a></p>
</blockquote>
<p>不过请注意，name属性已经被废弃，不建议使用。现在使用id属性来代替name属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;锚点名称&quot;</span>&gt;</span>锚点文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="页面间跳转">页面间跳转</h3>
<p>页面间跳转是指在网页中的某个位置，可以通过链接跳转到另一个网页中的某个位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址#锚点名称&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tI2Rvd24=">百度<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="功能链接">功能链接</h3>
<p>功能链接是指在网页中的某个位置，可以通过链接执行某个功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:函数名()&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p><span class="exturl" data-url="amF2YXNjcmlwdDphbGVydCgnaGVsbG8gd29ybGQnKQ==">弹出提示框<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>邮件链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:邮箱地址&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p><span class="exturl" data-url="bWFpbHRvOnRlc3RAbWFpbC5jb20=">发送邮件给test@mail.com<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>电话链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:电话号码&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g.:</p>
<blockquote>
<p><span class="exturl" data-url="dGVsOjEyMzQ1Njc4OQ==">拨打电话123456789<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-Day4</title>
    <url>/2023/03/07/1/</url>
    <content><![CDATA[<h2 id="页面结构分析">页面结构分析</h2>
<table>
<thead>
<tr>
<th style="text-align:center">元素名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">header</td>
<td style="text-align:left">标题头部区域的内容(用于页面或页面中的一部分)</td>
</tr>
<tr>
<td style="text-align:center">nav</td>
<td style="text-align:left">导航类辅助内容</td>
</tr>
<tr>
<td style="text-align:center">footer</td>
<td style="text-align:left">标记脚部区域的内容(用于页面或页面中的一部分)</td>
</tr>
<tr>
<td style="text-align:center">section</td>
<td style="text-align:left">web页面中的一个独立区域</td>
</tr>
<tr>
<td style="text-align:center">article</td>
<td style="text-align:left">独立的文章内容</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td style="text-align:left">与页面内容相关的辅助内容或应用(常用于侧边栏)</td>
</tr>
</tbody>
</table>
<p>e.g.:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面结构分析<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>文章内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>侧边栏标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>侧边栏内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>脚部内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="iframe内联框架">iframe内联框架</h2>
<p>使用方法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;a url&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">src</td>
<td style="text-align:left">指定iframe的URL</td>
</tr>
<tr>
<td style="text-align:center">width</td>
<td style="text-align:left">指定iframe的宽度</td>
</tr>
<tr>
<td style="text-align:center">height</td>
<td style="text-align:left">指定iframe的高度</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:left">指定iframe的名称</td>
</tr>
<tr>
<td style="text-align:center">frameborder</td>
<td style="text-align:left">指定iframe的边框</td>
</tr>
<tr>
<td style="text-align:center">scrolling</td>
<td style="text-align:left">指定iframe的滚动条</td>
</tr>
<tr>
<td style="text-align:center">marginwidth</td>
<td style="text-align:left">指定iframe的左右边距</td>
</tr>
<tr>
<td style="text-align:center">marginheight</td>
<td style="text-align:left">指定iframe的上下边距</td>
</tr>
<tr>
<td style="text-align:center">align</td>
<td style="text-align:left">指定iframe的对齐方式</td>
</tr>
<tr>
<td style="text-align:center">longdesc</td>
<td style="text-align:left">指定iframe的长描述</td>
</tr>
<tr>
<td style="text-align:center">sandbox</td>
<td style="text-align:left">指定iframe的沙箱</td>
</tr>
<tr>
<td style="text-align:center">seamless</td>
<td style="text-align:left">指定iframe的无缝</td>
</tr>
<tr>
<td style="text-align:center">srcdoc</td>
<td style="text-align:left">指定iframe的源文档</td>
</tr>
<tr>
<td style="text-align:center">allow</td>
<td style="text-align:left">指定iframe的允许</td>
</tr>
<tr>
<td style="text-align:center">allowfullscreen</td>
<td style="text-align:left">指定iframe的允许全屏</td>
</tr>
<tr>
<td style="text-align:center">allowpaymentrequest</td>
<td style="text-align:left">指定iframe的允许支付请求</td>
</tr>
<tr>
<td style="text-align:center">referrerpolicy</td>
<td style="text-align:left">指定iframe的引用策略</td>
</tr>
</tbody>
</table>
<p>e.g.:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Web - <span class="exturl" data-url="aHR0cDovL3l1emhpaTA3MTguZ2l0aHViLmlv">yuzhii0718.github.io<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<blockquote>
<iframe src="https://yuzhii0718.github.io" frameborder="0" width="100%" height="500px"></iframe>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://yuzhii0718.github.io&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<ul class="lvl-0">
<li class="lvl-2">
<p>Music - Plastic Love</p>
</li>
</ul>
<blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=408328190&auto=0&height=66"></iframe>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=408328190&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<ul class="lvl-0">
<li class="lvl-2">
<p>Video - Bad Apple!</p>
</li>
</ul>
<blockquote>
<iframe class="video-frame" src="//player.bilibili.com/player.html?aid=466474167&cid=505002580&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">&quot;video-frame&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=466474167&amp;cid=505002580&amp;autoplay=0&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="初识表单post和get提交">初识表单post和get提交</h2>
<h3 id="表单的基本结构">表单的基本结构</h3>
<p>e.g.:</p>
<form action="/404" method="post/get">
    <input type="text" name="username" placeholder="请输入用户名">
    <input type="password" name="password" placeholder="请输入密码">
    <input type="submit" value="提交">
</form>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post/get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">action</td>
<td style="text-align:left">指定表单提交的URL</td>
</tr>
<tr>
<td style="text-align:center">method</td>
<td style="text-align:left">指定表单提交的方式</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:left">指定表单的名称</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:left">指定表单提交的目标</td>
</tr>
</tbody>
</table>
<p>其中<code>action</code>和<code>method</code>是必须的</p>
<h3 id="表单的提交方式">表单的提交方式</h3>
<blockquote>
<p>method=“post/get”</p>
<ul class="lvl-1">
<li class="lvl-2">get - 通过URL传递参数,参数会显示在地址栏中,不安全</li>
<li class="lvl-2">post - 通过表单传递参数,参数不会显示在地址栏中,安全</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML Day3</title>
    <url>/2023/03/04/1/</url>
    <content><![CDATA[<p>继续学习HTML</p>
<h2 id="块级元素和行内元素">块级元素和行内元素</h2>
<h3 id="块级元素">块级元素</h3>
<blockquote>
<p>块级元素：独占一行，可以设置宽高，可以容纳行内元素和块级元素</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;address&gt;</code></td>
<td style="text-align:left">定义地址</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;center&gt;</code></td>
<td style="text-align:left">定义居中的文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;div&gt;</code></td>
<td style="text-align:left">定义文档中的分区或节</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;dl&gt;</code></td>
<td style="text-align:left">定义定义列表</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;form&gt;</code></td>
<td style="text-align:left">定义供用户输入的HTML表单</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;h1&gt;</code></td>
<td style="text-align:left">定义标题</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;hr&gt;</code></td>
<td style="text-align:left">定义水平线</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;li&gt;</code></td>
<td style="text-align:left">定义列表项目</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;menu&gt;</code></td>
<td style="text-align:left">定义菜单列表</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;ol&gt;</code></td>
<td style="text-align:left">定义有序列表</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;p&gt;</code></td>
<td style="text-align:left">定义段落</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;pre&gt;</code></td>
<td style="text-align:left">定义预格式化的文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;table&gt;</code></td>
<td style="text-align:left">定义表格</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;ul&gt;</code></td>
<td style="text-align:left">定义无序列表</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;tr&gt;</code></td>
<td style="text-align:left">定义表格行</td>
</tr>
</tbody>
</table>
<h3 id="行内元素">行内元素</h3>
<blockquote>
<p>行内元素：不独占一行，不可以设置宽高，只能容纳文本或者其他行内元素</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;a&gt;</code></td>
<td style="text-align:left">定义超链接</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;b&gt;</code></td>
<td style="text-align:left">定义粗体文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;big&gt;</code></td>
<td style="text-align:left">定义大号文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;br&gt;</code></td>
<td style="text-align:left">定义换行</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;dfn&gt;</code></td>
<td style="text-align:left">定义定义项目</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;em&gt;</code></td>
<td style="text-align:left">定义强调文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;i&gt;</code></td>
<td style="text-align:left">定义斜体文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;img&gt;</code></td>
<td style="text-align:left">定义图像</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;input&gt;</code></td>
<td style="text-align:left">定义输入控件</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;label&gt;</code></td>
<td style="text-align:left">定义标注</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;q&gt;</code></td>
<td style="text-align:left">定义短的引用文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;select&gt;</code></td>
<td style="text-align:left">定义下拉列表</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;span&gt;</code></td>
<td style="text-align:left">定义行内元素</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;strong&gt;</code></td>
<td style="text-align:left">定义重要文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;textarea&gt;</code></td>
<td style="text-align:left">定义多行文本输入控件</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;u&gt;</code></td>
<td style="text-align:left">定义下划线文本</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;var&gt;</code></td>
<td style="text-align:left">定义变量</td>
</tr>
</tbody>
</table>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84MDBlNmJiMjY1OTA=">参考:https://www.jianshu.com/p/800e6bb26590<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="列表">列表</h2>
<h3 id="无序列表">无序列表</h3>
<p>e.g.:</p>
<ul>
    <li>列表项a</li>
    <li>列表项b</li>
    <li>列表项c</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="有序列表">有序列表</h3>
<p>e.g.:</p>
<ol>
    <li>列表项a</li>
    <li>列表项b</li>
    <li>列表项c</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="定义列表">定义列表</h3>
<p>e.g.:</p>
<dl>
    <dt>列表项a</dt>
    <dd>列表项1</dd>
    <dt>列表项b</dt>
    <dd>列表项2</dd>
    <dt>列表项c</dt>
    <dd>列表项3</dd>
</dl>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>列表项a<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>列表项b<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>列表项c<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="表格">表格</h2>
<h3 id="表格的基本结构">表格的基本结构</h3>
<p>e.g.:</p>
<table>
    <tr>
        <td>1</td>
        <td>2</td>
        <td>3</td>
    </tr>
    <tr>
        <td>4</td>
        <td>5</td>
        <td>6</td>
    </tr>
    <tr>
        <td>7</td>
        <td>8</td>
        <td>9</td>
    </tr>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格的属性">表格的属性</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>border</code></td>
<td style="text-align:left">设置表格的边框</td>
</tr>
<tr>
<td style="text-align:center"><code>cellpadding</code></td>
<td style="text-align:left">设置单元格内边距</td>
</tr>
<tr>
<td style="text-align:center"><code>cellspacing</code></td>
<td style="text-align:left">设置单元格间距</td>
</tr>
<tr>
<td style="text-align:center"><code>width</code></td>
<td style="text-align:left">设置表格的宽度</td>
</tr>
<tr>
<td style="text-align:center"><code>height</code></td>
<td style="text-align:left">设置表格的高度</td>
</tr>
<tr>
<td style="text-align:center"><code>bgcolor</code></td>
<td style="text-align:left">设置表格的背景颜色</td>
</tr>
<tr>
<td style="text-align:center"><code>align</code></td>
<td style="text-align:left">设置表格的对齐方式</td>
</tr>
<tr>
<td style="text-align:center"><code>valign</code></td>
<td style="text-align:left">设置表格的垂直对齐方式</td>
</tr>
<tr>
<td style="text-align:center"><code>bordercolor</code></td>
<td style="text-align:left">设置表格的边框颜色</td>
</tr>
<tr>
<td style="text-align:center"><code>bordercolordark</code></td>
<td style="text-align:left">设置表格的边框暗色</td>
</tr>
<tr>
<td style="text-align:center"><code>bordercolorlight</code></td>
<td style="text-align:left">设置表格的边框亮色</td>
</tr>
</tbody>
</table>
<p>e.g.:</p>
<table border="1" cellpadding="10" cellspacing="0" width="200" height="200" bgcolor="red" align="center" valign="middle" bordercolor="blue" bordercolordark="green" bordercolorlight="yellow">
    <tr>
        <td>1</td>
        <td>2</td>
        <td>3</td>
    </tr>
    <tr>
        <td>4</td>
        <td>5</td>
        <td>6</td>
    </tr>
    <tr>
        <td>7</td>
        <td>8</td>
        <td>9</td>
    </tr>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;red&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">bordercolor</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">bordercolordark</span>=<span class="string">&quot;green&quot;</span> <span class="attr">bordercolorlight</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="媒体元素">媒体元素</h2>
<h3 id="视频">视频</h3>
<p>e.g.:</p>
<blockquote>
<p>plasticlove.mp4</p>
</blockquote>
<p><video src="./video/Plastic Love Official Music Video_v240P.mp4" controls="controls" width="200" height="200"></video><br>
<video controls name="media"><br>
<source src="./video/Plastic Love Official Music Video_v240P.mp4" type="video/mp4"><br>
</video></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./video/Plastic Love Official Music Video_v240P.mp4&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">name</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./video/Plastic Love Official Music Video_v240P.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>video.mp4</p>
</blockquote>
<p><video src="video.mp4" controls="controls" width="200" height="200"></video></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="音频">音频</h3>
<p>e.g.:</p>
<blockquote>
<p>plasticlove.mp3</p>
</blockquote>
<p><audio src="./audio/plasticlove.mp3" controls="controls"></audio><br>
<audio controls name="media"></audio></p>
 <source src="./audio/plasticlove.mp3" type="audio/mp3">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./audio/plasticlove.mp3&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">name</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./audio/plasticlove.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>audio.mp3</p>
</blockquote>
<p><audio src="audio.mp3" controls="controls"></audio></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：音频和视频的属性基本一致，这里就不一一列举了。<br>
controls：是否显示控制条<br>
autoplay：是否自动播放<br>
muted：是否静音</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-Day5</title>
    <url>/2023/03/08/1/</url>
    <content><![CDATA[<h2 id="文本框和单选框">文本框和单选框</h2>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:left">指定元素类型。text，password，radio，checkbox，file，submit，reset，button，image，hidden，默认为text</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:left">文本框的名称</td>
</tr>
<tr>
<td style="text-align:center">value</td>
<td style="text-align:left">文本框的默认值。type为radio和checkbox时，value为选中时的值</td>
</tr>
<tr>
<td style="text-align:center">size</td>
<td style="text-align:left">文本框的宽度，当type为password或text，size指定的是字符的个数。</td>
</tr>
<tr>
<td style="text-align:center">maxlength</td>
<td style="text-align:left">文本框的最大长度</td>
</tr>
<tr>
<td style="text-align:center">checked</td>
<td style="text-align:left">单选框默认选中</td>
</tr>
</tbody>
</table>
<p>e.g.:</p>
<form action="/404" method="get">
<p>用户注册</p>
<input type="text" name="username" value="请输入用户名" size="20" maxlength="10">
<br>
<input type="password" name="password" value="请输入密码" size="20" maxlength="10">
<br>
<input type="radio" name="sex" value="男">男
<input type="radio" name="sex" value="女">女
<input type="radio" name="sex" value="保密" checked>保密
<br>
<input type="submit" value="提交">
<input type="reset" value="重置">
</form>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保密&quot;</span> <span class="attr">checked</span>&gt;</span>保密</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="按钮和多选框">按钮和多选框</h2>
<p>e.g.:</p>
<p>爱好
<input type="checkbox" name="hobby" value="篮球">篮球
<input type="checkbox" name="hobby" value="足球">足球
<input type="checkbox" name="hobby" value="乒乓球">乒乓球
<input type="checkbox" name="hobby" value="羽毛球">羽毛球
</p>
<p>
<input type="button" value="按钮">
<input type="submit" value="提交">
<input type="reset" value="重置">
</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span>&gt;</span>乒乓球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span>&gt;</span>羽毛球</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按钮也是一种特殊的输入框，它的type属性值为button，submit，reset，image。当type为button时，按钮的功能是执行一个JavaScript函数，当type为submit时，按钮的功能是提交表单，当type为reset时，按钮的功能是重置表单，当type为image时，按钮的功能是提交表单，但是按钮的样式是一个图片。比如：</p>
<form action="/404" method="get">
<input type="button" value="按钮" onclick="alert('hello , wellcome to my site .')">
<input type="submit" value="提交">
<input type="reset" value="重置">
<input type="image" src="/images/favicon.ico" value="siteico">
</form>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/404&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello , wellcome to my site .&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/favicon.ico&quot;</span> <span class="attr">value</span>=<span class="string">&quot;siteico&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="下拉列表框">下拉列表框</h2>
<p>下拉列表框是一种特殊的输入框，它的type属性值为select，它的功能是从一组选项中选择一个选项。</p>
<p>e.g.:</p>
<form action="/404" method="get">
<p>请选择你喜欢的水果</p>
<select name="fruit">
<option value="apple">苹果</option>
<option value="banana">香蕉</option>
<option value="orange">橘子</option>
<option value="watermelon">西瓜</option>
</select>
<input type="submit" value="提交">
</form>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/404&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择你喜欢的水果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;watermelon&quot;</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="文本域和文件域">文本域和文件域</h2>
<p>文本域是一种特殊的输入框，它的type属性值为textarea，它的功能是输入多行文本。</p>
<h3 id="文本域">文本域</h3>
<p>e.g.:</p>
<form action="/404" method="get">
<p>请输入你的个人简介</p>
<textarea name="introduce" cols="30" rows="10"></textarea>
<br>
<input type="submit" value="提交">
</form>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/404&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入你的个人简介<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;introduce&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="文件域">文件域</h3>
<p>e.g.:</p>
<form action="/404" method="get">
<p>请选择你要上传的文件</p>
<input type="file" name="file">
<br>
<input type="submit" value="提交">
</form>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/404&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择你要上传的文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-Day6</title>
    <url>/2023/03/09/1/</url>
    <content><![CDATA[<h2 id="搜索框滑块和简单验证">搜索框滑块和简单验证</h2>
<h3 id="搜索框">搜索框</h3>
<p>e.g.:</p>
<div class="search">
    <input type="text" placeholder="请输入搜索内容">
    <span></span>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入搜索内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="简单验证">简单验证</h3>
<h4 id="邮件验证">邮件验证</h4>
<p>e.g.:</p>
<div class="email">
    <input type="text" placeholder="请输入邮箱">
    <span></span>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="URL验证">URL验证</h4>
<p>e.g.:</p>
<div class="url">
    <input type="text" placeholder="请输入网址">
    <span></span>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入网址&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="电话验证">电话验证</h4>
<p>e.g.:</p>
<div class="tel">
    <input type="text" placeholder="请输入电话">
    <span></span>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入电话&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="密码验证">密码验证</h4>
<p>e.g.:</p>
<div class="password">
    <input type="text" placeholder="请输入密码">
    <span></span>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入搜索内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在type中输入text，可以输入文字，输入password，可以输入密码，输入email，可以输入邮箱，输入url，可以输入网址，输入tel，可以输入电话，输入number，可以输入数字，输入date，可以输入日期，输入time，可以输入时间，输入month，可以输入月份，输入week，可以输入星期，输入datetime-local，可以输入日期和时间。此外，还可以添加max，min，maxlength，minlength，step，pattern，required，readonly，disabled等属性。</p>
<h3 id="滑块">滑块</h3>
<p>e.g.:</p>
<div class="slider">
    <input type="range" min="0" max="100" value="50">
    <span></span>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="表单应用">表单应用</h2>
<h3 id="隐藏域">隐藏域</h3>
<p>e.g.:</p>
<div class="hidden">
    <input type="hidden" value="hidden-text">
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hidden-text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="只读属性的应用">只读属性的应用</h3>
<p>e.g.:</p>
<div class="readonly">
    <input type="text" value="readonly-text" readonly>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;readonly&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;readonly-text&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="禁用属性的应用">禁用属性的应用</h3>
<p>e.g.:</p>
<div class="disabled">
    <input type="text" value="disabled-text" disabled>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;disabled-text&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="增强鼠标可用性">增强鼠标可用性</h3>
<blockquote>
<p>为了提高用户体验，我们可以通过一些小技巧来增强鼠标可用性</p>
</blockquote>
<p>e.g.:</p>
<p><label for="username">用户名</label><input type="text" id="username" placeholder="请输入用户名"><br>
<label for="password">密码</label><input type="password" id="password" placeholder="请输入密码"><br>
<button>登录</button></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="表单初级验证">表单初级验证</h2>
<blockquote>
<p>表单验证是指在用户提交表单时，对表单中的数据进行验证，以确保用户输入的数据符合要求。表单验证是一种客户端验证，也就是说，验证的工作是在用户的浏览器上完成的，而不是在服务器上完成的。表单验证的目的是为了提高用户体验，减少用户提交无效数据的次数，从而提高用户的满意度。常用的表单验证有：必填项验证、长度验证、格式验证、范围验证、自定义验证等。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>placeholder属性：用于为输入域提供提示信息，当输入域为空时，提示信息会显示在输入域中。</p>
</li>
<li class="lvl-2">
<p>required属性：用于指定输入域为必填项，如果用户没有输入任何内容，就提交表单，浏览器会提示用户输入内容。</p>
</li>
<li class="lvl-2">
<p>pattern属性：用于指定输入域的内容必须符合某种格式，如果用户输入的内容不符合指定的格式，浏览器会提示用户输入内容不符合要求。</p>
</li>
<li class="lvl-2">
<p>min属性：用于指定输入域的内容必须大于或等于某个值，如果用户输入的内容小于指定的值，浏览器会提示用户输入内容不符合要求。</p>
</li>
<li class="lvl-2">
<p>max属性：用于指定输入域的内容必须小于或等于某个值，如果用户输入的内容大于指定的值，浏览器会提示用户输入内容不符合要求。</p>
</li>
<li class="lvl-2">
<p>minlength属性：用于指定输入域的内容必须大于或等于某个长度，如果用户输入的内容小于指定的长度，浏览器会提示用户输入内容不符合要求。</p>
</li>
<li class="lvl-2">
<p>maxlength属性：用于指定输入域的内容必须小于或等于某个长度，如果用户输入的内容大于指定的长度，浏览器会提示用户输入内容不符合要求。</p>
</li>
</ul>
<p>常用列出的前三个属性，后三个属性可以自行查阅。</p>
<h3 id="placeholder属性">placeholder属性</h3>
<blockquote>
<p>placeholder属性用于为输入域提供提示信息，当输入域为空时，提示信息会显示在输入域中。</p>
</blockquote>
<p>e.g.:</p>
<div class="placeholder">
    <input type="text" placeholder="请输入用户名">
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="required属性">required属性</h3>
<blockquote>
<p>required属性用于指定输入域为必填项，如果用户没有输入任何内容，就提交表单，浏览器会提示用户输入内容。</p>
</blockquote>
<p>e.g.:</p>
<div class="required">
    <input type="text" placeholder="请输入用户名" required>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="pattern属性">pattern属性</h3>
<blockquote>
<p>pattern属性用于指定输入域的内容必须符合某种格式，如果用户输入的内容不符合指定的格式，浏览器会提示用户输入内容不符合要求。</p>
</blockquote>
<p>e.g.:</p>
<div class="pattern">
    <input type="text" placeholder="请输入用户名" pattern="[a-zA-Z0-9]{6,12}">
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-zA-Z0-9]&#123;6,12&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表单的自动完成">表单的自动完成</h3>
<blockquote>
<p>表单的自动完成是指，当用户在表单中输入内容时，浏览器会自动提示用户可能输入的内容。表单的自动完成是一种客户端的自动完成，也就是说，自动完成的工作是在用户的浏览器上完成的，而不是在服务器上完成的。表单的自动完成的目的是为了提高用户体验，减少用户输入的次数，从而提高用户的满意度。</p>
</blockquote>
<p>e.g.:</p>
<div class="autocomplete">
    <input type="text" placeholder="请输入用户名" autocomplete="on">
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;autocomplete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表单的高级验证">表单的高级验证</h3>
<blockquote>
<p>除了常用的表单验证外，还有一些高级的表单验证，比如：自定义验证、表单联动等。但是，这些高级的表单验证都需要借助JavaScript来实现，因此，我们需要先学习JavaScript。目前，我们暂时不学习这些高级的表单验证，等我们学习了JavaScript之后，再来学习这些高级的表单验证。</p>
</blockquote>
<h3 id="总结-2">总结</h3>
<form action="/404" method="get">
<p>表单验证</p>
    <label for="username">用户名</label>
    <input type="text" id="username" placeholder="请输入用户名" required pattern="[a-zA-Z0-9]{6,12}">
    <br>
    <label for="password">密码</label>
    <input type="password" id="password" placeholder="请输入密码" required pattern="[a-zA-Z0-9]{6,12}">
    <br>
    <label for="email">邮箱</label>
    <input type="email" id="email" placeholder="请输入邮箱" required autocomplete="on">
    <br>
    <label for="tel">电话</label>
    <input type="tel" id="tel" placeholder="请输入电话" required>
    <br>
    <input type="submit" value="提交">
    <input type="reset" value="重置">
</form>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/404&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>表单验证<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">required</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-zA-Z0-9]&#123;6,12&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">required</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-zA-Z0-9]&#123;6,12&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span> <span class="attr">required</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入电话&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>附：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvdG9vbHMvcmVnZXguaHRt">脚本之家-常用正则表达式<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="HTML学习总结">HTML学习总结</h2>
<blockquote>
<p>至此，html的学习告一段落，接下来，我们将学习css，css是用来美化html的，css的学习是html的延续，因此，我们将在html的基础上继续学习css。</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>免费获取 Cyberpunk-2077 DLC</title>
    <url>/2023/10/09/1/</url>
    <content><![CDATA[<h2 id="为什么要写这篇文章">为什么要写这篇文章</h2>
<p>因为我不想花钱买 DLC，所以我就写了这篇文章。</p>
<p>至于为什么不想花钱买 DLC，这就有的说了。</p>
<blockquote>
<p>发牢骚</p>
</blockquote>
<p>这款游戏是我中学时期就开始关注的游戏，那时候学业繁重，没有时间，但我仍然关注着这款游戏。</p>
<p>游戏发售后，我购买了游戏，但游戏的质量让我很失望，并且开发商对游戏的态度也让我很失望。</p>
<p>它原先的承诺很多都没有兑现，前期对游戏的宣传很多，让人觉得这款游戏会是一款非常好的游戏，但是实际上并不是这样。</p>
<p>直至今日的 2.01 版本，游戏的质量提高了很多，但仍不是我想要的那款游戏。</p>
<p>我认为这家公司对不起预购/首发玩家，所以我不想花钱买 DLC。</p>
<h2 id="免费获取-Cyberpunk-2077-DLC">免费获取 Cyberpunk-2077 DLC</h2>
<ol>
<li class="lvl-3">
<p>确保你的游戏是 2.01 版本</p>
<p>我在 Steam 上购买的游戏，所以需要先“把游戏切换到 GOG 版本”。当然，如果你是 GOG 版本，省略第 3 步。</p>
</li>
<li class="lvl-3">
<p>下载 ⟪往日之影⟫ DLC</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>通过磁力链接 <span class="exturl" data-url="bWFnbmV0Oj94dD11cm46YnRpaDpiZjg2ZDM1NTkxYzIxNjdhZWM2MzY3NTI5YWU0YjRmYmFiMjBiZGZhJmRuPUN5YmVycHVuay4yMDc3LkdPRy1JbnNhbmVSYW1aZXMmdHI9aHR0cCUzYSUyZiUyZmJ0Mi50LXJ1Lm9yZyUyZmFubiUzZm1hZ25ldCZ0cj11ZHAlM2ElMmYlMmZ0cmFja2VyLm9wZW50cmFja3Iub3JnJTNhMTMzNyUyZmFubm91bmNlJnRyPWh0dHBzJTNhJTJmJTJmdHJhY2tlcjEuNTIwLmpwJTNhNDQzJTJmYW5ub3VuY2UmdHI9aHR0cCUzYSUyZiUyZnRyYWNrZXIub3BlbnRyYWNrci5vcmclM2ExMzM3JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmb3BlbnRyYWNrZXIuaTJwLnJvY2tzJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZm9wZW4uZGVtb25paS5jb20lM2ExMzM3JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlci5vcGVuYml0dG9ycmVudC5jb20lM2E2OTY5JTJmYW5ub3VuY2UmdHI9aHR0cCUzYSUyZiUyZnRyYWNrZXIub3BlbmJpdHRvcnJlbnQuY29tJTNhODAlMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZvcGVuLnN0ZWFsdGguc2klM2E4MCUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZmV4b2R1cy5kZXN5bmMuY29tJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIudG9ycmVudC5ldS5vcmclM2E0NTElMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZleHBsb2RpZS5vcmclM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlcjEuYnQubW9hY2suY28ua3IlM2E4MCUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIudGlueS12cHMuY29tJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXItdWRwLmdiaXR0LmluZm8lM2E4MCUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnJldHJhY2tlcjAxLW1zay12aXJ0LmNvcmJpbmEubmV0JTNhODAlMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZwNHAuYXJlbmFiZy5jb20lM2ExMzM3JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmbW92aWVzLnpzdy5jYSUzYTY5NjklMmZhbm5vdW5jZSZ0cj1odHRwcyUzYSUyZiUyZnRyYWNrZXIudGFtZXJzdW5pb24ub3JnJTNhNDQzJTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ0cmFja2VyLmdiaXR0LmluZm8lM2E0NDMlMmZhbm5vdW5jZSZ0cj1odHRwcyUzYSUyZiUyZnRyLmJ1cm5hYnloaWdoc3Rhci5jb20lM2E0NDMlMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdHJhY2tlcjEuYnQubW9hY2suY28ua3IlM2E4MCUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZ0cmFja2VyLmdiaXR0LmluZm8lM2E4MCUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnVwbG9hZHMuZ2FtZWNvYXN0Lm5ldCUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZ0cmFja2VyLnRoZW9rcy5uZXQlM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlci5tb2VraW5nLm1lJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIuZHVtcC5jbCUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZwcml2YXRlLmFub25zZWVkLmNvbSUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZtb29uYnVycm93LmNsdWIlM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmaHR6My5ub2hvLnN0JTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZmFjeHguZGUlM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmYWFyc2VuLm1lJTNhNjk2OSUyZmFubm91bmNlJnRyPWh0dHBzJTNhJTJmJTJmdHJhY2tlci5sb2xpZ2lybC5jbiUzYTQ0MyUyZmFubm91bmNlJnRyPWh0dHBzJTNhJTJmJTJmdHJhY2tlci5pbWdvaW5ndG8uaWN1JTNhNDQzJTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlcjIuZGxlci5vcmclM2E4MCUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZvcGVuLmFjZ254dHJhY2tlci5jb20lM2E4MCUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnlhaG9yLm9mLmJ5JTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZndlcHpvbmUubmV0JTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnYyLmlwZXJzb24ueHl6JTNhNjk2OSUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZ0cmFja2VyMi5kbGVyLm9yZyUzYTgwJTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlcjEubXlwb3JuLmNsdWIlM2E5MzM3JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlci50aGVyYXJiZy5jb20lM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlci5xdS5heCUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZ0cmFja2VyLnB1YmxpY3RyYWNrZXIueHl6JTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIubmV0bWFwLnRvcCUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZ0cmFja2VyLmxlZWNoLmllJTNhMTMzNyUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIuZmlsZW1haWwuY29tJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIuZmFydGVkLm5ldCUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZ0cmFja2VyLmN1Ym9uZWdyby5sb2wlM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlci5jY3Aub3ZoJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIuNC5iYWJpY28ubmFtZS50ciUzYTMxMzElMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZ0cmFja2VyLjB4N2MwLmNvbSUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZ0aG91dmVuaW4uY2xvdWQlM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdGFtYXMzLnluaC5mciUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZzYW5pbmNvZGUuY29tJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnJ5amVyLmNvbSUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZydW4ucHVibGljdHJhY2tlci54eXolM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmcnVuLTIucHVibGljdHJhY2tlci54eXolM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmcHVibGljLnRyYWNrZXIudnJhcGhpbS5jb20lM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmb3BlbnRyYWNrZXIuaW8lM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmb3Blbi51LXAucHclM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmb3Blbi5kc3R1ZC5pbyUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZvaC5mdXV1dXVjay5jb20lM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmbmV3LWxpbmUubmV0JTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZm1haWwuc2Vnc28ubmV0JTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZmxsb3JpYS5mciUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZpc2sucmljaGFyZHN3LmNsdWIlM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmZnJlZS5wdWJsaWN0cmFja2VyLnh5eiUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZmZS5kZWFsY2x1Yi5kZSUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZlcGlkZXIubWUlM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmY2Fyci5jb2RlcyUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZidDIuYXJjaGl2ZS5vcmclM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmYnQxLmFyY2hpdmUub3JnJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZmJ0Lmt0cmFja2Vycy5jb20lM2E2NjY2JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmNi5wb2NrZXRuZXQuYXBwJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZjFjLnByZW1pZXJ6YWwucnUlM2E2OTY5JTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ3d3cucGVja3NlcnZlcnMuY29tJTNhOTQ0MyUyZmFubm91bmNlJnRyPWh0dHBzJTNhJTJmJTJmdHJhY2tlci5yZW5mZWkubmV0JTNhNDQzJTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ0cmFja2VyLm5ldG1hcC50b3AlM2E4NDQzJTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ0cmFja2VyLmxpbGl0aHJhd3Mub3JnJTNhNDQzJTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ0cmFja2VyLmNsb3VkaXQudG9wJTNhNDQzJTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ0MS5obG9saS5vcmclM2E0NDMlMmZhbm5vdW5jZSZ0cj1odHRwcyUzYSUyZiUyZjEzMzcuYWJjdmcuaW5mbyUzYTQ0MyUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZ3d3cucGVja3NlcnZlcnMuY29tJTNhOTAwMCUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZ3ZXB6b25lLm5ldCUzYTY5NjklMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdHJhY2tlci5za3l0cy5uZXQlM2E2OTY5JTJmYW5ub3VuY2UmdHI9aHR0cCUzYSUyZiUyZnRyYWNrZXIucmVuZmVpLm5ldCUzYTgwODAlMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdHJhY2tlci5xdS5heCUzYTY5NjklMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdHJhY2tlci5uZXRtYXAudG9wJTNhNjk2OSUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZ0cmFja2VyLm15d2FpZnUuYmVzdCUzYTY5NjklMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdHJhY2tlci5pcHY2dHJhY2tlci5vcmclM2E4MCUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZ0cmFja2VyLmZpbGVzLmZtJTNhNjk2OSUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmZ0cmFja2VyLmVka2ouY2x1YiUzYTY5NjklMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdHJhY2tlci5idDRnLmNvbSUzYTIwOTUlMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmb3Blbi50cmFja2VyLmluayUzYTY5NjklMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmaW5jaW5lLnJ1JTNhNjk2OSUyZmFubm91bmNlJnRyPWh0dHAlM2ElMmYlMmYxMzM3LmFiY3ZnLmluZm8lM2E4MCUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRyYWNrZXIudC1yYi5vcmclM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlci5zcnYwMC5jb20lM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmdHJhY2tlci5kbGVyLm9yZyUzYTY5NjklMmZhbm5vdW5jZSZ0cj11ZHAlM2ElMmYlMmZ0cmFja2VyLmFydGl4bGludXgub3JnJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZnRvcnJlbnRzLmFydGl4bGludXgub3JnJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZm1haWwuYXJ0aXhsaW51eC5vcmclM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmZmgyLmNtcC1nYW1pbmcuY29tJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZmNvbmNlbi5vcmclM2E2OTY5JTJmYW5ub3VuY2UmdHI9dWRwJTNhJTJmJTJmYm95c2JpdHRlLmJlJTNhNjk2OSUyZmFubm91bmNlJnRyPXVkcCUzYSUyZiUyZmFlZ2lyLnNleHklM2E2OTY5JTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ0cmFja2VyLmlwZnNzY2FuLmlvJTNhNDQzJTJmYW5ub3VuY2UmdHI9aHR0cHMlM2ElMmYlMmZ0ci5yZWFkeTQuaWN1JTNhNDQzJTJmYW5ub3VuY2UmdHI9aHR0cCUzYSUyZiUyZnRyYWNrZXIxLml0em14LmNvbSUzYTgwODAlMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdHJhY2tlci5kbGVyLm9yZyUzYTY5NjklMmZhbm5vdW5jZSZ0cj1odHRwJTNhJTJmJTJmdC5hY2cucmlwJTNhNjY5OSUyZmFubm91bmNl">magnet<i class="fa fa-external-link-alt"></i></span> 下载。</p>
</li>
<li class="lvl-6">
<p>下载时选择 <code>DLC</code> 的部分下载，大小约为 35.95GiB</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p>修改注册表，让 DLC 生效安装程序认为你已经购买了游戏/或是认为你的游戏是 GOG 版本</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>创建 <code>Cyberpunk 2077 GOG Register.bat</code> 文件</p>
</li>
<li class="lvl-6">
<p>把 <code>Cyberpunk 2077 GOG Register.bat</code> 文件放到游戏根目录内运行(请以管理员身份运行，有时甚至需要关闭安全软件)</p>
</li>
<li class="lvl-6">
<p>选择 <code>1. 添加</code></p>
</li>
<li class="lvl-6">
<p>选择 <code>3. 退出</code></p>
</li>
</ul>
<blockquote>
<p><code>Cyberpunk 2077 GOG Register.bat</code> 文件内容如下</p>
</blockquote>
 <details>
 <summary style="background-color: #000000; background-image: linear-gradient(60deg, #000000 25%, #ff0004 100%); color: aqua; font-family: cursive; width: 50%; font-style: italic; border: 1px solid red; margin: 5%;"><span style="text-decoration: none;color: yellow;text-shadow: 1px 1px blue;">点击查看</span></summary>
 <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">color</span> E0</span><br><span class="line"><span class="built_in">title</span> Cyberpunk <span class="number">2077</span> GOG V2.<span class="number">0</span> 版本注册表</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM Set vars</span></span><br><span class="line"><span class="built_in">set</span> GAMEPATH=%~dp0</span><br><span class="line"><span class="built_in">set</span> GAMEPATH=<span class="variable">%GAMEPATH:~0,-1%</span></span><br><span class="line"><span class="built_in">set</span> PACKPATH=<span class="variable">%GAMEPATH:~0,-15%</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM Check administrator privileges</span></span><br><span class="line"><span class="built_in">net</span> session &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="variable">%errorlevel%</span>==<span class="number">0</span> <span class="keyword">goto</span> ERRORADM</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM Check exe</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXIST</span> &quot;<span class="variable">%GAMEPATH%</span>\bin\x64\Cyberpunk2077.exe&quot; <span class="keyword">goto</span> ERROREXE</span><br><span class="line"></span><br><span class="line">:<span class="built_in">START</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> ※ Cyberpunk <span class="number">2077</span> GOG V2.<span class="number">0</span> 版本注册表</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 目录: <span class="variable">%GAMEPATH%</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 请按下对应数字按键继续操作。</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> <span class="number">1</span>. 添加</span><br><span class="line"><span class="built_in">echo</span> <span class="number">2</span>. 删除</span><br><span class="line"><span class="built_in">echo</span> <span class="number">3</span>. 退出</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">choice /c <span class="number">123</span> /n /m &quot;选择: &quot;</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">3</span> <span class="keyword">EXIT</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">2</span> <span class="keyword">goto</span> <span class="built_in">DEL</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">1</span> <span class="keyword">goto</span> ADD</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">START</span></span><br><span class="line"></span><br><span class="line">:ADD</span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com&quot; /v &quot;DefaultPackPath&quot; /d &quot;<span class="variable">%PACKPATH%</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com&quot; /v &quot;DesktopIcon&quot; /d &quot;ON&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;buildId&quot; /d &quot;<span class="number">53968439607309789</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;<span class="built_in">ver</span>&quot; /d &quot;Build_3233390Change_4173226&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;lang_code&quot; /d &quot;zh-Hans&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;osbit&quot; /d &quot;<span class="number">64</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;installer_language&quot; /d &quot;chinese&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;gameName&quot; /d &quot;Cyberpunk <span class="number">2077</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;gameID&quot; /d &quot;<span class="number">1423049311</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;productID&quot; /d &quot;<span class="number">1423049311</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;language&quot; /d &quot;chinese (simplified)&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;<span class="built_in">path</span>&quot; /d &quot;<span class="variable">%GAMEPATH%</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;startMenu&quot; /d &quot;Cyberpunk <span class="number">2077</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;uninstallCommand&quot; /d &quot;<span class="variable">%GAMEPATH%</span>\unins000.exe&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;workingDir&quot; /d &quot;<span class="variable">%GAMEPATH%</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;exe&quot; /d &quot;<span class="variable">%GAMEPATH%</span>\bin\x64\Cyberpunk2077.exe&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;exeFile&quot; /d &quot;Cyberpunk2077.exe&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;launchParam&quot; /d &quot;&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;launchCommand&quot; /d &quot;<span class="variable">%GAMEPATH%</span>\bin\x64\Cyberpunk2077.exe&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;startMenuLink&quot; /d &quot;C:\ProgramData\Microsoft\Windows\<span class="built_in">Start</span> Menu\Programs\Cyberpunk <span class="number">2077</span> [GOG.com]\Cyberpunk <span class="number">2077</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;dependsOn&quot; /d &quot;&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;supportLink&quot; /d &quot;&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;INSTALLDATE&quot; /d &quot;<span class="number">2023</span>-<span class="number">10</span>-<span class="number">10</span> <span class="number">08</span>:<span class="number">58</span>:<span class="number">20</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /v &quot;DLC&quot; /d &quot;&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">1</span> <span class="keyword">goto</span> ERROR</span><br><span class="line"><span class="built_in">echo</span> 添加成功。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">:<span class="built_in">DEL</span></span><br><span class="line"><span class="variable">%SYSTEMROOT%</span>\System32\reg.exe delete &quot;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\GOG.com\Games\<span class="number">1423049311</span>&quot; /f&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">1</span> <span class="keyword">goto</span> ERROR</span><br><span class="line"><span class="built_in">echo</span> 删除成功。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">:ERROR</span><br><span class="line"><span class="built_in">echo</span> 操作失败。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">START</span></span><br><span class="line"></span><br><span class="line">:ERRORADM</span><br><span class="line"><span class="built_in">echo</span> 请使用管理员模式运行。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">:ERROREXE</span><br><span class="line"><span class="built_in">echo</span> 请将注册表放至游戏目录内运行。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
 </details>
</li>
<li class="lvl-3">
<p>安装 DLC</p>
<ul class="lvl-2">
<li class="lvl-6">选择有 <code>phantom_liberty</code>字样的可执行文件打开、点击安装。</li>
</ul>
<p>安装时有个很迷惑的 banner， 显示下载中，其实那个 banner 是一张图片而已，不用理会。</p>
</li>
<li class="lvl-3">
<p>开始游戏</p>
<p>直接启动 <code>%GAMEPATH%\bin\x64\Cyberpunk2077.exe</code> 即可。(%GAMEPATH% 为游戏根目录)</p>
</li>
</ol>
<p><img src="./Thanks.png" alt></p>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ydXRyYWNrZXIub3JnL2ZvcnVtL3ZpZXd0b3BpYy5waHA/dD01OTgxOTcw">Cyberpunk 2077 GOG V2.0 – rutracker.org<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="23-10-19-更新">23-10-19 更新</h2>
<p>哈哈😅最近玩嗨了，进一周没更新博客了。斯安威斯坦+刀剑真是太有意思了。😺</p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的 Github Emoji Code</title>
    <url>/2023/05/18/1/</url>
    <content><![CDATA[<h2 id="Github-Emoji-Code">Github Emoji Code</h2>
<table>
<thead>
<tr><th align="left">😐<code>:neutral_face:</code></th><th align="left">😄<code>:smile:</code></th><th align="left">😆<code>:laughing:</code></th></tr>
</thead>
<tbody>
<tr><td align="left">😊<code>:blush:</code></td><td align="left">😃<code>:smiley:</code></td><td align="left">☺️<code>:relaxed:</code></td></tr>
<tr><td align="left">😏<code>:smirk:</code></td><td align="left">😍<code>:heart_eyes:</code></td><td align="left">😘<code>:kissing_heart:</code></td></tr>
<tr><td align="left">😚<code>:kissing_closed_eyes:</code></td><td align="left">😳<code>:flushed:</code></td><td align="left">😌<code>:relieved:</code></td></tr>
<tr><td align="left">😆<code>:satisfied:</code></td><td align="left">😁<code>:grin:</code></td><td align="left">😉<code>:wink:</code></td></tr>
<tr><td align="left">😜<code>:stuck_out_tongue_winking_eye:</code></td><td align="left">😝<code>:stuck_out_tongue_closed_eyes:</code></td><td align="left">😀<code>:grinning:</code></td></tr>
<tr><td align="left">😗<code>:kissing:</code></td><td align="left">😙<code>:kissing_smiling_eyes:</code></td><td align="left">😛<code>:stuck_out_tongue:</code></td></tr>
<tr><td align="left">😴<code>:sleeping:</code></td><td align="left">😟<code>:worried:</code></td><td align="left">😦<code>:frowning:</code></td></tr>
<tr><td align="left">😧<code>:anguished:</code></td><td align="left">😮<code>:open_mouth:</code></td><td align="left">😬<code>:grimacing:</code></td></tr>
<tr><td align="left">😕<code>:confused:</code></td><td align="left">😯<code>:hushed:</code></td><td align="left">😑<code>:expressionless:</code></td></tr>
<tr><td align="left">😒<code>:unamused:</code></td><td align="left">😅<code>:sweat_smile:</code></td><td align="left">😓<code>:sweat:</code></td></tr>
<tr><td align="left">😥<code>:disappointed_relieved:</code></td><td align="left">😩<code>:weary:</code></td><td align="left">😔<code>:pensive:</code></td></tr>
<tr><td align="left">😞<code>:disappointed:</code></td><td align="left">😖<code>:confounded:</code></td><td align="left">😨<code>:fearful:</code></td></tr>
<tr><td align="left">😰<code>:cold_sweat:</code></td><td align="left">😣<code>:persevere:</code></td><td align="left">😢<code>:cry:</code></td></tr>
<tr><td align="left">😭<code>:sob:</code></td><td align="left">😂<code>:joy:</code></td><td align="left">😲<code>:astonished:</code></td></tr>
<tr><td align="left">😱<code>:scream:</code></td><td align="left">💭<code>:thought_balloon:</code></td><td align="left">😫<code>:tired_face:</code></td></tr>
<tr><td align="left">😠<code>:angry:</code></td><td align="left">😡<code>:rage:</code></td><td align="left">😤<code>:triumph:</code></td></tr>
<tr><td align="left">😪<code>:sleepy:</code></td><td align="left">😋<code>:yum:</code></td><td align="left">😷<code>:mask:</code></td></tr>
<tr><td align="left">😎<code>:sunglasses:</code></td><td align="left">😵<code>:dizzy_face:</code></td><td align="left">👿<code>:imp:</code></td></tr>
<tr><td align="left">😈<code>:smiling_imp:</code></td><td align="left">💬<code>:speech_balloon:</code></td><td align="left">😶<code>:no_mouth:</code></td></tr>
<tr><td align="left">😇<code>:innocent:</code></td><td align="left">👽<code>:alien:</code></td><td align="left">💛<code>:yellow_heart:</code></td></tr>
<tr><td align="left">💙<code>:blue_heart:</code></td><td align="left">💜<code>:purple_heart:</code></td><td align="left">❤️<code>:heart:</code></td></tr>
<tr><td align="left">💚<code>:green_heart:</code></td><td align="left">💔<code>:broken_heart:</code></td><td align="left">💓<code>:heartbeat:</code></td></tr>
<tr><td align="left">💗<code>:heartpulse:</code></td><td align="left">💕<code>:two_hearts:</code></td><td align="left">💞<code>:revolving_hearts:</code></td></tr>
<tr><td align="left">💘<code>:cupid:</code></td><td align="left">💖<code>:sparkling_heart:</code></td><td align="left">✨<code>:sparkles:</code></td></tr>
<tr><td align="left">⭐️<code>:star:</code></td><td align="left">🌟<code>:star2:</code></td><td align="left">💫<code>:dizzy:</code></td></tr>
<tr><td align="left">💥<code>:boom:</code></td><td align="left">💥<code>:collision:</code></td><td align="left">💢<code>:anger:</code></td></tr>
<tr><td align="left">❗️<code>:exclamation:</code></td><td align="left">❓<code>:question:</code></td><td align="left">❕<code>:grey_exclamation:</code></td></tr>
<tr><td align="left">❔<code>:grey_question:</code></td><td align="left">💤<code>:zzz:</code></td><td align="left">💨<code>:dash:</code></td></tr>
<tr><td align="left">💦<code>:sweat_drops:</code></td><td align="left">🎶<code>:notes:</code></td><td align="left">🎵<code>:musical_note:</code></td></tr>
<tr><td align="left">🔥<code>:fire:</code></td><td align="left">💩<code>:hankey:</code></td><td align="left">💩<code>:poop:</code></td></tr>
<tr><td align="left">💩<code>:shit:</code></td><td align="left">👍<code>:+1:</code></td><td align="left">👍<code>:thumbsup:</code></td></tr>
<tr><td align="left">👎<code>:-1:</code></td><td align="left">👎<code>:thumbsdown:</code></td><td align="left">👌<code>:ok_hand:</code></td></tr>
<tr><td align="left">👊<code>:punch:</code></td><td align="left">👊<code>:facepunch:</code></td><td align="left">✊<code>:fist:</code></td></tr>
<tr><td align="left">✌️<code>:v:</code></td><td align="left">👋<code>:wave:</code></td><td align="left">✋<code>:hand:</code></td></tr>
<tr><td align="left">✋<code>:raised_hand:</code></td><td align="left">👐<code>:open_hands:</code></td><td align="left">☝️<code>:point_up:</code></td></tr>
<tr><td align="left">👇<code>:point_down:</code></td><td align="left">👈<code>:point_left:</code></td><td align="left">👉<code>:point_right:</code></td></tr>
<tr><td align="left">🙌<code>:raised_hands:</code></td><td align="left">🙏<code>:pray:</code></td><td align="left">👆<code>:point_up_2:</code></td></tr>
<tr><td align="left">👏<code>:clap:</code></td><td align="left">💪<code>:muscle:</code></td><td align="left">🤘<code>:metal:</code></td></tr>
<tr><td align="left">🖕<code>:fu:</code></td><td align="left">🚶<code>:walking:</code></td><td align="left">🏃<code>:runner:</code></td></tr>
<tr><td align="left">🏃<code>:running:</code></td><td align="left">👫<code>:couple:</code></td><td align="left">👪<code>:family:</code></td></tr>
<tr><td align="left">👬<code>:two_men_holding_hands:</code></td><td align="left">👭<code>:two_women_holding_hands:</code></td><td align="left">💃<code>:dancer:</code></td></tr>
<tr><td align="left">👯<code>:dancers:</code></td><td align="left">🙆<code>:ok_woman:</code></td><td align="left">🙅<code>:no_good:</code></td></tr>
<tr><td align="left">💁<code>:information_desk_person:</code></td><td align="left">🙋<code>:raising_hand:</code></td><td align="left">👰<code>:bride_with_veil:</code></td></tr>
<tr><td align="left">🙎<code>:person_with_pouting_face:</code></td><td align="left">🙍<code>:person_frowning:</code></td><td align="left">🙇<code>:bow:</code></td></tr>
<tr><td align="left">💏<code>:couplekiss:</code></td><td align="left">💑<code>:couple_with_heart:</code></td><td align="left">💆<code>:massage:</code></td></tr>
<tr><td align="left">💇<code>:haircut:</code></td><td align="left">💅<code>:nail_care:</code></td><td align="left">👦<code>:boy:</code></td></tr>
<tr><td align="left">👧<code>:girl:</code></td><td align="left">👩<code>:woman:</code></td><td align="left">👨<code>:man:</code></td></tr>
<tr><td align="left">👶<code>:baby:</code></td><td align="left">👵<code>:older_woman:</code></td><td align="left">👴<code>:older_man:</code></td></tr>
<tr><td align="left">👱<code>:person_with_blond_hair:</code></td><td align="left">👲<code>:man_with_gua_pi_mao:</code></td><td align="left">👳<code>:man_with_turban:</code></td></tr>
<tr><td align="left">👷<code>:construction_worker:</code></td><td align="left">👮<code>:cop:</code></td><td align="left">👼<code>:angel:</code></td></tr>
<tr><td align="left">👸<code>:princess:</code></td><td align="left">😺<code>:smiley_cat:</code></td><td align="left">😸<code>:smile_cat:</code></td></tr>
<tr><td align="left">😻<code>:heart_eyes_cat:</code></td><td align="left">😽<code>:kissing_cat:</code></td><td align="left">😼<code>:smirk_cat:</code></td></tr>
<tr><td align="left">🙀<code>:scream_cat:</code></td><td align="left">😿<code>:crying_cat_face:</code></td><td align="left">😹<code>:joy_cat:</code></td></tr>
<tr><td align="left">😾<code>:pouting_cat:</code></td><td align="left">👹<code>:japanese_ogre:</code></td><td align="left">👺<code>:japanese_goblin:</code></td></tr>
<tr><td align="left">🙈<code>:see_no_evil:</code></td><td align="left">🙉<code>:hear_no_evil:</code></td><td align="left">🙊<code>:speak_no_evil:</code></td></tr>
<tr><td align="left">💂<code>:guardsman:</code></td><td align="left">💀<code>:skull:</code></td><td align="left">🐾<code>:feet:</code></td></tr>
<tr><td align="left">👄<code>:lips:</code></td><td align="left">💋<code>:kiss:</code></td><td align="left">💧<code>:droplet:</code></td></tr>
<tr><td align="left">👂<code>:ear:</code></td><td align="left">👀<code>:eyes:</code></td><td align="left">👃<code>:nose:</code></td></tr>
<tr><td align="left">👅<code>:tongue:</code></td><td align="left">💌<code>:love_letter:</code></td><td align="left">👤<code>:bust_in_silhouette:</code></td></tr>
<tr><td align="left">👥<code>:busts_in_silhouette:</code></td><td align="left"> </td><td align="left"> </td></tr>
</tbody>
</table>
<table>
<thead>
<tr><th align="left">☀️<code>:sunny:</code></th><th align="left">☔️<code>:umbrella:</code></th><th align="left">☁️<code>:cloud:</code></th></tr>
</thead>
<tbody>
<tr><td align="left">❄️<code>:snowflake:</code></td><td align="left">⛄️<code>:snowman:</code></td><td align="left">⚡️<code>:zap:</code></td></tr>
<tr><td align="left">🌀<code>:cyclone:</code></td><td align="left">🌁<code>:foggy:</code></td><td align="left">🌊<code>:ocean:</code></td></tr>
<tr><td align="left">🐱<code>:cat:</code></td><td align="left">🐶<code>:dog:</code></td><td align="left">🐭<code>:mouse:</code></td></tr>
<tr><td align="left">🐹<code>:hamster:</code></td><td align="left">🐰<code>:rabbit:</code></td><td align="left">🐺<code>:wolf:</code></td></tr>
<tr><td align="left">🐸<code>:frog:</code></td><td align="left">🐯<code>:tiger:</code></td><td align="left">🐨<code>:koala:</code></td></tr>
<tr><td align="left">🐻<code>:bear:</code></td><td align="left">🐷<code>:pig:</code></td><td align="left">🐽<code>:pig_nose:</code></td></tr>
<tr><td align="left">🐮<code>:cow:</code></td><td align="left">🐗<code>:boar:</code></td><td align="left">🐵<code>:monkey_face:</code></td></tr>
<tr><td align="left">🐒<code>:monkey:</code></td><td align="left">🐴<code>:horse:</code></td><td align="left">🐎<code>:racehorse:</code></td></tr>
<tr><td align="left">🐫<code>:camel:</code></td><td align="left">🐑<code>:sheep:</code></td><td align="left">🐘<code>:elephant:</code></td></tr>
<tr><td align="left">🐼<code>:panda_face:</code></td><td align="left">🐍<code>:snake:</code></td><td align="left">🐦<code>:bird:</code></td></tr>
<tr><td align="left">🐤<code>:baby_chick:</code></td><td align="left">🐥<code>:hatched_chick:</code></td><td align="left">🐣<code>:hatching_chick:</code></td></tr>
<tr><td align="left">🐔<code>:chicken:</code></td><td align="left">🐧<code>:penguin:</code></td><td align="left">🐢<code>:turtle:</code></td></tr>
<tr><td align="left">🐛<code>:bug:</code></td><td align="left">🐝<code>:honeybee:</code></td><td align="left">🐜<code>:ant:</code></td></tr>
<tr><td align="left">🐞<code>:beetle:</code></td><td align="left">🐌<code>:snail:</code></td><td align="left">🐙<code>:octopus:</code></td></tr>
<tr><td align="left">🐠<code>:tropical_fish:</code></td><td align="left">🐟<code>:fish:</code></td><td align="left">🐳<code>:whale:</code></td></tr>
<tr><td align="left">🐋<code>:whale2:</code></td><td align="left">🐬<code>:dolphin:</code></td><td align="left">🐄<code>:cow2:</code></td></tr>
<tr><td align="left">🐏<code>:ram:</code></td><td align="left">🐀<code>:rat:</code></td><td align="left">🐃<code>:water_buffalo:</code></td></tr>
<tr><td align="left">🐅<code>:tiger2:</code></td><td align="left">🐇<code>:rabbit2:</code></td><td align="left">🐉<code>:dragon:</code></td></tr>
<tr><td align="left">🐐<code>:goat:</code></td><td align="left">🐓<code>:rooster:</code></td><td align="left">🐕<code>:dog2:</code></td></tr>
<tr><td align="left">🐖<code>:pig2:</code></td><td align="left">🐁<code>:mouse2:</code></td><td align="left">🐂<code>:ox:</code></td></tr>
<tr><td align="left">🐲<code>:dragon_face:</code></td><td align="left">🐡<code>:blowfish:</code></td><td align="left">🐊<code>:crocodile:</code></td></tr>
<tr><td align="left">🐪<code>:dromedary_camel:</code></td><td align="left">🐆<code>:leopard:</code></td><td align="left">🐈<code>:cat2:</code></td></tr>
<tr><td align="left">🐩<code>:poodle:</code></td><td align="left">🐾<code>:paw_prints:</code></td><td align="left">💐<code>:bouquet:</code></td></tr>
<tr><td align="left">🌸<code>:cherry_blossom:</code></td><td align="left">🌷<code>:tulip:</code></td><td align="left">🍀<code>:four_leaf_clover:</code></td></tr>
<tr><td align="left">🌹<code>:rose:</code></td><td align="left">🌻<code>:sunflower:</code></td><td align="left">🌺<code>:hibiscus:</code></td></tr>
<tr><td align="left">🍁<code>:maple_leaf:</code></td><td align="left">🍃<code>:leaves:</code></td><td align="left">🍂<code>:fallen_leaf:</code></td></tr>
<tr><td align="left">🌿<code>:herb:</code></td><td align="left">🍄<code>:mushroom:</code></td><td align="left">🌵<code>:cactus:</code></td></tr>
<tr><td align="left">🌴<code>:palm_tree:</code></td><td align="left">🌲<code>:evergreen_tree:</code></td><td align="left">🌳<code>:deciduous_tree:</code></td></tr>
<tr><td align="left">🌰<code>:chestnut:</code></td><td align="left">🌱<code>:seedling:</code></td><td align="left">🌼<code>:blossom:</code></td></tr>
<tr><td align="left">🌾<code>:ear_of_rice:</code></td><td align="left">🐚<code>:shell:</code></td><td align="left">🌐<code>:globe_with_meridians:</code></td></tr>
<tr><td align="left">🌞<code>:sun_with_face:</code></td><td align="left">🌝<code>:full_moon_with_face:</code></td><td align="left">🌚<code>:new_moon_with_face:</code></td></tr>
<tr><td align="left">🌑<code>:new_moon:</code></td><td align="left">🌒<code>:waxing_crescent_moon:</code></td><td align="left">🌓<code>:first_quarter_moon:</code></td></tr>
<tr><td align="left">🌔<code>:waxing_gibbous_moon:</code></td><td align="left">🌕<code>:full_moon:</code></td><td align="left">🌖<code>:waning_gibbous_moon:</code></td></tr>
<tr><td align="left">🌗<code>:last_quarter_moon:</code></td><td align="left">🌘<code>:waning_crescent_moon:</code></td><td align="left">🌜<code>:last_quarter_moon_with_face:</code></td></tr>
<tr><td align="left">🌛<code>:first_quarter_moon_with_face:</code></td><td align="left">🌔<code>:moon:</code></td><td align="left">🌍<code>:earth_africa:</code></td></tr>
<tr><td align="left">🌎<code>:earth_americas:</code></td><td align="left">🌏<code>:earth_asia:</code></td><td align="left">🌋<code>:volcano:</code></td></tr>
<tr><td align="left">🌌<code>:milky_way:</code></td><td align="left">⛅️<code>:partly_sunny:</code></td><td align="left"> </td></tr>
</tbody>
</table>
<table>
<thead>
<tr><th align="left">🎍<code>:bamboo:</code></th><th align="left">💝<code>:gift_heart:</code></th><th align="left">🎎<code>:dolls:</code></th></tr>
</thead>
<tbody>
<tr><td align="left">🎒<code>:school_satchel:</code></td><td align="left">🎓<code>:mortar_board:</code></td><td align="left">🎏<code>:flags:</code></td></tr>
<tr><td align="left">🎆<code>:fireworks:</code></td><td align="left">🎇<code>:sparkler:</code></td><td align="left">🎐<code>:wind_chime:</code></td></tr>
<tr><td align="left">🎑<code>:rice_scene:</code></td><td align="left">🎃<code>:jack_o_lantern:</code></td><td align="left">👻<code>:ghost:</code></td></tr>
<tr><td align="left">🎅<code>:santa:</code></td><td align="left">🎄<code>:christmas_tree:</code></td><td align="left">🎁<code>:gift:</code></td></tr>
<tr><td align="left">🔔<code>:bell:</code></td><td align="left">🔕<code>:no_bell:</code></td><td align="left">🎋<code>:tanabata_tree:</code></td></tr>
<tr><td align="left">🎉<code>:tada:</code></td><td align="left">🎊<code>:confetti_ball:</code></td><td align="left">🎈<code>:balloon:</code></td></tr>
<tr><td align="left">🔮<code>:crystal_ball:</code></td><td align="left">💿<code>:cd:</code></td><td align="left">📀<code>:dvd:</code></td></tr>
<tr><td align="left">💾<code>:floppy_disk:</code></td><td align="left">📷<code>:camera:</code></td><td align="left">📹<code>:video_camera:</code></td></tr>
<tr><td align="left">🎥<code>:movie_camera:</code></td><td align="left">💻<code>:computer:</code></td><td align="left">📺<code>:tv:</code></td></tr>
<tr><td align="left">📱<code>:iphone:</code></td><td align="left">☎️<code>:phone:</code></td><td align="left">☎️<code>:telephone:</code></td></tr>
<tr><td align="left">📞<code>:telephone_receiver:</code></td><td align="left">📟<code>:pager:</code></td><td align="left">📠<code>:fax:</code></td></tr>
<tr><td align="left">💽<code>:minidisc:</code></td><td align="left">📼<code>:vhs:</code></td><td align="left">🔉<code>:sound:</code></td></tr>
<tr><td align="left">🔈<code>:speaker:</code></td><td align="left">🔇<code>:mute:</code></td><td align="left">📢<code>:loudspeaker:</code></td></tr>
<tr><td align="left">📣<code>:mega:</code></td><td align="left">⌛️<code>:hourglass:</code></td><td align="left">⏳<code>:hourglass_flowing_sand:</code></td></tr>
<tr><td align="left">⏰<code>:alarm_clock:</code></td><td align="left">⌚️<code>:watch:</code></td><td align="left">📻<code>:radio:</code></td></tr>
<tr><td align="left">📡<code>:satellite:</code></td><td align="left">➿<code>:loop:</code></td><td align="left">🔍<code>:mag:</code></td></tr>
<tr><td align="left">🔎<code>:mag_right:</code></td><td align="left">🔓<code>:unlock:</code></td><td align="left">🔒<code>:lock:</code></td></tr>
<tr><td align="left">🔏<code>:lock_with_ink_pen:</code></td><td align="left">🔐<code>:closed_lock_with_key:</code></td><td align="left">🔑<code>:key:</code></td></tr>
<tr><td align="left">💡<code>:bulb:</code></td><td align="left">🔦<code>:flashlight:</code></td><td align="left">🔆<code>:high_brightness:</code></td></tr>
<tr><td align="left">🔅<code>:low_brightness:</code></td><td align="left">🔌<code>:electric_plug:</code></td><td align="left">🔋<code>:battery:</code></td></tr>
<tr><td align="left">📲<code>:calling:</code></td><td align="left">✉️<code>:email:</code></td><td align="left">📫<code>:mailbox:</code></td></tr>
<tr><td align="left">📮<code>:postbox:</code></td><td align="left">🛀<code>:bath:</code></td><td align="left">🛁<code>:bathtub:</code></td></tr>
<tr><td align="left">🚿<code>:shower:</code></td><td align="left">🚽<code>:toilet:</code></td><td align="left">🔧<code>:wrench:</code></td></tr>
<tr><td align="left">🔩<code>:nut_and_bolt:</code></td><td align="left">🔨<code>:hammer:</code></td><td align="left">💺<code>:seat:</code></td></tr>
<tr><td align="left">💰<code>:moneybag:</code></td><td align="left">💴<code>:yen:</code></td><td align="left">💵<code>:dollar:</code></td></tr>
<tr><td align="left">💷<code>:pound:</code></td><td align="left">💶<code>:euro:</code></td><td align="left">💳<code>:credit_card:</code></td></tr>
<tr><td align="left">💸<code>:money_with_wings:</code></td><td align="left">📧<code>:e-mail:</code></td><td align="left">📥<code>:inbox_tray:</code></td></tr>
<tr><td align="left">📤<code>:outbox_tray:</code></td><td align="left">✉️<code>:envelope:</code></td><td align="left">📨<code>:incoming_envelope:</code></td></tr>
<tr><td align="left">📯<code>:postal_horn:</code></td><td align="left">📪<code>:mailbox_closed:</code></td><td align="left">📬<code>:mailbox_with_mail:</code></td></tr>
<tr><td align="left">📭<code>:mailbox_with_no_mail:</code></td><td align="left">🚪<code>:door:</code></td><td align="left">🚬<code>:smoking:</code></td></tr>
<tr><td align="left">💣<code>:bomb:</code></td><td align="left">🔫<code>:gun:</code></td><td align="left">🔪<code>:hocho:</code></td></tr>
<tr><td align="left">💊<code>:pill:</code></td><td align="left">💉<code>:syringe:</code></td><td align="left">📄<code>:page_facing_up:</code></td></tr>
<tr><td align="left">📃<code>:page_with_curl:</code></td><td align="left">📑<code>:bookmark_tabs:</code></td><td align="left">📊<code>:bar_chart:</code></td></tr>
<tr><td align="left">📈<code>:chart_with_upwards_trend:</code></td><td align="left">📉<code>:chart_with_downwards_trend:</code></td><td align="left">📜<code>:scroll:</code></td></tr>
<tr><td align="left">📋<code>:clipboard:</code></td><td align="left">📆<code>:calendar:</code></td><td align="left">📅<code>:date:</code></td></tr>
<tr><td align="left">📇<code>:card_index:</code></td><td align="left">📁<code>:file_folder:</code></td><td align="left">📂<code>:open_file_folder:</code></td></tr>
<tr><td align="left">✂️<code>:scissors:</code></td><td align="left">📌<code>:pushpin:</code></td><td align="left">📎<code>:paperclip:</code></td></tr>
<tr><td align="left">✒️<code>:black_nib:</code></td><td align="left">✏️<code>:pencil2:</code></td><td align="left">📏<code>:straight_ruler:</code></td></tr>
<tr><td align="left">📐<code>:triangular_ruler:</code></td><td align="left">📕<code>:closed_book:</code></td><td align="left">📗<code>:green_book:</code></td></tr>
<tr><td align="left">📘<code>:blue_book:</code></td><td align="left">📙<code>:orange_book:</code></td><td align="left">📓<code>:notebook:</code></td></tr>
<tr><td align="left">📔<code>:notebook_with_decorative_cover:</code></td><td align="left">📒<code>:ledger:</code></td><td align="left">📚<code>:books:</code></td></tr>
<tr><td align="left">🔖<code>:bookmark:</code></td><td align="left">📛<code>:name_badge:</code></td><td align="left">🔬<code>:microscope:</code></td></tr>
<tr><td align="left">🔭<code>:telescope:</code></td><td align="left">📰<code>:newspaper:</code></td><td align="left">🏈<code>:football:</code></td></tr>
<tr><td align="left">🏀<code>:basketball:</code></td><td align="left">⚽️<code>:soccer:</code></td><td align="left">⚾️<code>:baseball:</code></td></tr>
<tr><td align="left">🎾<code>:tennis:</code></td><td align="left">🎱<code>:8ball:</code></td><td align="left">🏉<code>:rugby_football:</code></td></tr>
<tr><td align="left">🎳<code>:bowling:</code></td><td align="left">⛳️<code>:golf:</code></td><td align="left">🚵<code>:mountain_bicyclist:</code></td></tr>
<tr><td align="left">🚴<code>:bicyclist:</code></td><td align="left">🏇<code>:horse_racing:</code></td><td align="left">🏂<code>:snowboarder:</code></td></tr>
<tr><td align="left">🏊<code>:swimmer:</code></td><td align="left">🏄<code>:surfer:</code></td><td align="left">🎿<code>:ski:</code></td></tr>
<tr><td align="left">♠️<code>:spades:</code></td><td align="left">♥️<code>:hearts:</code></td><td align="left">♣️<code>:clubs:</code></td></tr>
<tr><td align="left">♦️<code>:diamonds:</code></td><td align="left">💎<code>:gem:</code></td><td align="left">💍<code>:ring:</code></td></tr>
<tr><td align="left">🏆<code>:trophy:</code></td><td align="left">🎼<code>:musical_score:</code></td><td align="left">🎹<code>:musical_keyboard:</code></td></tr>
<tr><td align="left">🎻<code>:violin:</code></td><td align="left">👾<code>:space_invader:</code></td><td align="left">🎮<code>:video_game:</code></td></tr>
<tr><td align="left">🃏<code>:black_joker:</code></td><td align="left">🎴<code>:flower_playing_cards:</code></td><td align="left">🎲<code>:game_die:</code></td></tr>
<tr><td align="left">🎯<code>:dart:</code></td><td align="left">🀄️<code>:mahjong:</code></td><td align="left">🎬<code>:clapper:</code></td></tr>
<tr><td align="left">📝<code>:memo:</code></td><td align="left">📝<code>:pencil:</code></td><td align="left">📖<code>:book:</code></td></tr>
<tr><td align="left">🎨<code>:art:</code></td><td align="left">🎤<code>:microphone:</code></td><td align="left">🎧<code>:headphones:</code></td></tr>
<tr><td align="left">🎺<code>:trumpet:</code></td><td align="left">🎷<code>:saxophone:</code></td><td align="left">🎸<code>:guitar:</code></td></tr>
<tr><td align="left">👞<code>:shoe:</code></td><td align="left">👡<code>:sandal:</code></td><td align="left">👠<code>:high_heel:</code></td></tr>
<tr><td align="left">💄<code>:lipstick:</code></td><td align="left">👢<code>:boot:</code></td><td align="left">👕<code>:shirt:</code></td></tr>
<tr><td align="left">👕<code>:tshirt:</code></td><td align="left">👔<code>:necktie:</code></td><td align="left">👚<code>:womans_clothes:</code></td></tr>
<tr><td align="left">👗<code>:dress:</code></td><td align="left">🎽<code>:running_shirt_with_sash:</code></td><td align="left">👖<code>:jeans:</code></td></tr>
<tr><td align="left">👘<code>:kimono:</code></td><td align="left">👙<code>:bikini:</code></td><td align="left">🎀<code>:ribbon:</code></td></tr>
<tr><td align="left">🎩<code>:tophat:</code></td><td align="left">👑<code>:crown:</code></td><td align="left">👒<code>:womans_hat:</code></td></tr>
<tr><td align="left">👞<code>:mans_shoe:</code></td><td align="left">🌂<code>:closed_umbrella:</code></td><td align="left">💼<code>:briefcase:</code></td></tr>
<tr><td align="left">👜<code>:handbag:</code></td><td align="left">👝<code>:pouch:</code></td><td align="left">👛<code>:purse:</code></td></tr>
<tr><td align="left">👓<code>:eyeglasses:</code></td><td align="left">🎣<code>:fishing_pole_and_fish:</code></td><td align="left">☕️<code>:coffee:</code></td></tr>
<tr><td align="left">🍵<code>:tea:</code></td><td align="left">🍶<code>:sake:</code></td><td align="left">🍼<code>:baby_bottle:</code></td></tr>
<tr><td align="left">🍺<code>:beer:</code></td><td align="left">🍻<code>:beers:</code></td><td align="left">🍸<code>:cocktail:</code></td></tr>
<tr><td align="left">🍹<code>:tropical_drink:</code></td><td align="left">🍷<code>:wine_glass:</code></td><td align="left">🍴<code>:fork_and_knife:</code></td></tr>
<tr><td align="left">🍕<code>:pizza:</code></td><td align="left">🍔<code>:hamburger:</code></td><td align="left">🍟<code>:fries:</code></td></tr>
<tr><td align="left">🍗<code>:poultry_leg:</code></td><td align="left">🍖<code>:meat_on_bone:</code></td><td align="left">🍝<code>:spaghetti:</code></td></tr>
<tr><td align="left">🍛<code>:curry:</code></td><td align="left">🍤<code>:fried_shrimp:</code></td><td align="left">🍱<code>:bento:</code></td></tr>
<tr><td align="left">🍣<code>:sushi:</code></td><td align="left">🍥<code>:fish_cake:</code></td><td align="left">🍙<code>:rice_ball:</code></td></tr>
<tr><td align="left">🍘<code>:rice_cracker:</code></td><td align="left">🍚<code>:rice:</code></td><td align="left">🍜<code>:ramen:</code></td></tr>
<tr><td align="left">🍲<code>:stew:</code></td><td align="left">🍢<code>:oden:</code></td><td align="left">🍡<code>:dango:</code></td></tr>
<tr><td align="left">🥚<code>:egg:</code></td><td align="left">🍞<code>:bread:</code></td><td align="left">🍩<code>:doughnut:</code></td></tr>
<tr><td align="left">🍮<code>:custard:</code></td><td align="left">🍦<code>:icecream:</code></td><td align="left">🍨<code>:ice_cream:</code></td></tr>
<tr><td align="left">🍧<code>:shaved_ice:</code></td><td align="left">🎂<code>:birthday:</code></td><td align="left">🍰<code>:cake:</code></td></tr>
<tr><td align="left">🍪<code>:cookie:</code></td><td align="left">🍫<code>:chocolate_bar:</code></td><td align="left">🍬<code>:candy:</code></td></tr>
<tr><td align="left">🍭<code>:lollipop:</code></td><td align="left">🍯<code>:honey_pot:</code></td><td align="left">🍎<code>:apple:</code></td></tr>
<tr><td align="left">🍏<code>:green_apple:</code></td><td align="left">🍊<code>:tangerine:</code></td><td align="left">🍋<code>:lemon:</code></td></tr>
<tr><td align="left">🍒<code>:cherries:</code></td><td align="left">🍇<code>:grapes:</code></td><td align="left">🍉<code>:watermelon:</code></td></tr>
<tr><td align="left">🍓<code>:strawberry:</code></td><td align="left">🍑<code>:peach:</code></td><td align="left">🍈<code>:melon:</code></td></tr>
<tr><td align="left">🍌<code>:banana:</code></td><td align="left">🍐<code>:pear:</code></td><td align="left">🍍<code>:pineapple:</code></td></tr>
<tr><td align="left">🍠<code>:sweet_potato:</code></td><td align="left">🍆<code>:eggplant:</code></td><td align="left">🍅<code>:tomato:</code></td></tr>
<tr><td align="left">🌽<code>:corn:</code></td><td align="left"> </td><td align="left"> </td></tr>
</tbody>
</table>
<table>
<thead>
<tr><th align="left">🏠<code>:house:</code></th><th align="left">🏡<code>:house_with_garden:</code></th><th align="left">🏫<code>:school:</code></th></tr>
</thead>
<tbody>
<tr><td align="left">🏢<code>:office:</code></td><td align="left">🏣<code>:post_office:</code></td><td align="left">🏥<code>:hospital:</code></td></tr>
<tr><td align="left">🏦<code>:bank:</code></td><td align="left">🏪<code>:convenience_store:</code></td><td align="left">🏩<code>:love_hotel:</code></td></tr>
<tr><td align="left">🏨<code>:hotel:</code></td><td align="left">💒<code>:wedding:</code></td><td align="left">⛪️<code>:church:</code></td></tr>
<tr><td align="left">🏬<code>:department_store:</code></td><td align="left">🏤<code>:european_post_office:</code></td><td align="left">🌇<code>:city_sunrise:</code></td></tr>
<tr><td align="left">🌆<code>:city_sunset:</code></td><td align="left">🏯<code>:japanese_castle:</code></td><td align="left">🏰<code>:european_castle:</code></td></tr>
<tr><td align="left">⛺️<code>:tent:</code></td><td align="left">🏭<code>:factory:</code></td><td align="left">🗼<code>:tokyo_tower:</code></td></tr>
<tr><td align="left">🗾<code>:japan:</code></td><td align="left">🗻<code>:mount_fuji:</code></td><td align="left">🌄<code>:sunrise_over_mountains:</code></td></tr>
<tr><td align="left">🌅<code>:sunrise:</code></td><td align="left">🌠<code>:stars:</code></td><td align="left">🗽<code>:statue_of_liberty:</code></td></tr>
<tr><td align="left">🌉<code>:bridge_at_night:</code></td><td align="left">🎠<code>:carousel_horse:</code></td><td align="left">🌈<code>:rainbow:</code></td></tr>
<tr><td align="left">🎡<code>:ferris_wheel:</code></td><td align="left">⛲️<code>:fountain:</code></td><td align="left">🎢<code>:roller_coaster:</code></td></tr>
<tr><td align="left">🚢<code>:ship:</code></td><td align="left">🚤<code>:speedboat:</code></td><td align="left">⛵️<code>:boat:</code></td></tr>
<tr><td align="left">⛵️<code>:sailboat:</code></td><td align="left">🚣<code>:rowboat:</code></td><td align="left">⚓️<code>:anchor:</code></td></tr>
<tr><td align="left">🚀<code>:rocket:</code></td><td align="left">✈️<code>:airplane:</code></td><td align="left">🚁<code>:helicopter:</code></td></tr>
<tr><td align="left">🚂<code>:steam_locomotive:</code></td><td align="left">🚊<code>:tram:</code></td><td align="left">🚞<code>:mountain_railway:</code></td></tr>
<tr><td align="left">🚲<code>:bike:</code></td><td align="left">🚡<code>:aerial_tramway:</code></td><td align="left">🚟<code>:suspension_railway:</code></td></tr>
<tr><td align="left">🚠<code>:mountain_cableway:</code></td><td align="left">🚜<code>:tractor:</code></td><td align="left">🚙<code>:blue_car:</code></td></tr>
<tr><td align="left">🚘<code>:oncoming_automobile:</code></td><td align="left">🚗<code>:car:</code></td><td align="left">🚗<code>:red_car:</code></td></tr>
<tr><td align="left">🚕<code>:taxi:</code></td><td align="left">🚖<code>:oncoming_taxi:</code></td><td align="left">🚛<code>:articulated_lorry:</code></td></tr>
<tr><td align="left">🚌<code>:bus:</code></td><td align="left">🚍<code>:oncoming_bus:</code></td><td align="left">🚨<code>:rotating_light:</code></td></tr>
<tr><td align="left">🚓<code>:police_car:</code></td><td align="left">🚔<code>:oncoming_police_car:</code></td><td align="left">🚒<code>:fire_engine:</code></td></tr>
<tr><td align="left">🚑<code>:ambulance:</code></td><td align="left">🚐<code>:minibus:</code></td><td align="left">🚚<code>:truck:</code></td></tr>
<tr><td align="left">🚋<code>:train:</code></td><td align="left">🚉<code>:station:</code></td><td align="left">🚆<code>:train2:</code></td></tr>
<tr><td align="left">🚅<code>:bullettrain_front:</code></td><td align="left">🚄<code>:bullettrain_side:</code></td><td align="left">🚈<code>:light_rail:</code></td></tr>
<tr><td align="left">🚝<code>:monorail:</code></td><td align="left">🚃<code>:railway_car:</code></td><td align="left">🚎<code>:trolleybus:</code></td></tr>
<tr><td align="left">🎫<code>:ticket:</code></td><td align="left">⛽️<code>:fuelpump:</code></td><td align="left">🚦<code>:vertical_traffic_light:</code></td></tr>
<tr><td align="left">🚥<code>:traffic_light:</code></td><td align="left">⚠️<code>:warning:</code></td><td align="left">🚧<code>:construction:</code></td></tr>
<tr><td align="left">🔰<code>:beginner:</code></td><td align="left">🏧<code>:atm:</code></td><td align="left">🎰<code>:slot_machine:</code></td></tr>
<tr><td align="left">🚏<code>:busstop:</code></td><td align="left">💈<code>:barber:</code></td><td align="left">♨️<code>:hotsprings:</code></td></tr>
<tr><td align="left">🏁<code>:checkered_flag:</code></td><td align="left">🎌<code>:crossed_flags:</code></td><td align="left">🏮<code>:izakaya_lantern:</code></td></tr>
<tr><td align="left">🗿<code>:moyai:</code></td><td align="left">🎪<code>:circus_tent:</code></td><td align="left">🎭<code>:performing_arts:</code></td></tr>
<tr><td align="left">📍<code>:round_pushpin:</code></td><td align="left">🚩<code>:triangular_flag_on_post:</code></td><td align="left"> </td></tr>
</tbody>
</table>
<table>
<thead>
<tr><th align="left">1️⃣<code>:one:</code></th><th align="left">2️⃣<code>:two:</code></th><th align="left">3️⃣<code>:three:</code></th></tr>
</thead>
<tbody>
<tr><td align="left">4️⃣<code>:four:</code></td><td align="left">5️⃣<code>:five:</code></td><td align="left">6️⃣<code>:six:</code></td></tr>
<tr><td align="left">7️⃣<code>:seven:</code></td><td align="left">8️⃣<code>:eight:</code></td><td align="left">9️⃣<code>:nine:</code></td></tr>
<tr><td align="left">🔟<code>:keycap_ten:</code></td><td align="left">🔢<code>:1234:</code></td><td align="left">0️⃣<code>:zero:</code></td></tr>
<tr><td align="left">#️⃣<code>:hash:</code></td><td align="left">🔣<code>:symbols:</code></td><td align="left">◀️<code>:arrow_backward:</code></td></tr>
<tr><td align="left">⬇️<code>:arrow_down:</code></td><td align="left">▶️<code>:arrow_forward:</code></td><td align="left">⬅️<code>:arrow_left:</code></td></tr>
<tr><td align="left">🔠<code>:capital_abcd:</code></td><td align="left">🔡<code>:abcd:</code></td><td align="left">🔤<code>:abc:</code></td></tr>
<tr><td align="left">↙️<code>:arrow_lower_left:</code></td><td align="left">↘️<code>:arrow_lower_right:</code></td><td align="left">➡️<code>:arrow_right:</code></td></tr>
<tr><td align="left">⬆️<code>:arrow_up:</code></td><td align="left">↖️<code>:arrow_upper_left:</code></td><td align="left">↗️<code>:arrow_upper_right:</code></td></tr>
<tr><td align="left">⏬<code>:arrow_double_down:</code></td><td align="left">⏫<code>:arrow_double_up:</code></td><td align="left">🔽<code>:arrow_down_small:</code></td></tr>
<tr><td align="left">⤵️<code>:arrow_heading_down:</code></td><td align="left">⤴️<code>:arrow_heading_up:</code></td><td align="left">↩️<code>:leftwards_arrow_with_hook:</code></td></tr>
<tr><td align="left">↪️<code>:arrow_right_hook:</code></td><td align="left">↔️<code>:left_right_arrow:</code></td><td align="left">↕️<code>:arrow_up_down:</code></td></tr>
<tr><td align="left">🔼<code>:arrow_up_small:</code></td><td align="left">🔃<code>:arrows_clockwise:</code></td><td align="left">🔄<code>:arrows_counterclockwise:</code></td></tr>
<tr><td align="left">⏪<code>:rewind:</code></td><td align="left">⏩<code>:fast_forward:</code></td><td align="left">ℹ️<code>:information_source:</code></td></tr>
<tr><td align="left">🆗<code>:ok:</code></td><td align="left">🔀<code>:twisted_rightwards_arrows:</code></td><td align="left">🔁<code>:repeat:</code></td></tr>
<tr><td align="left">🔂<code>:repeat_one:</code></td><td align="left">🆕<code>:new:</code></td><td align="left">🔝<code>:top:</code></td></tr>
<tr><td align="left">🆙<code>:up:</code></td><td align="left">🆒<code>:cool:</code></td><td align="left">🆓<code>:free:</code></td></tr>
<tr><td align="left">🆖<code>:ng:</code></td><td align="left">🎦<code>:cinema:</code></td><td align="left">🈁<code>:koko:</code></td></tr>
<tr><td align="left">📶<code>:signal_strength:</code></td><td align="left"> </td><td align="left"> </td></tr>
<tr><td align="left">🈂️<code>:sa:</code></td><td align="left">🚻<code>:restroom:</code></td><td align="left">🚹<code>:mens:</code></td></tr>
<tr><td align="left">🚺<code>:womens:</code></td><td align="left">🚼<code>:baby_symbol:</code></td><td align="left">🚭<code>:no_smoking:</code></td></tr>
<tr><td align="left">🅿️<code>:parking:</code></td><td align="left">♿️<code>:wheelchair:</code></td><td align="left">🚇<code>:metro:</code></td></tr>
<tr><td align="left">🛄<code>:baggage_claim:</code></td><td align="left">🉑<code>:accept:</code></td><td align="left">🚾<code>:wc:</code></td></tr>
<tr><td align="left">🚰<code>:potable_water:</code></td><td align="left">🚮<code>:put_litter_in_its_place:</code></td><td align="left">㊙️<code>:secret:</code></td></tr>
<tr><td align="left">㊗️<code>:congratulations:</code></td><td align="left">Ⓜ️<code>:m:</code></td><td align="left">🛂<code>:passport_control:</code></td></tr>
<tr><td align="left">🛅<code>:left_luggage:</code></td><td align="left">🛃<code>:customs:</code></td><td align="left">🉐<code>:ideograph_advantage:</code></td></tr>
<tr><td align="left">🆑<code>:cl:</code></td><td align="left">🆘<code>:sos:</code></td><td align="left">🆔<code>:id:</code></td></tr>
<tr><td align="left">🚫<code>:no_entry_sign:</code></td><td align="left">🔞<code>:underage:</code></td><td align="left">📵<code>:no_mobile_phones:</code></td></tr>
<tr><td align="left">🚯<code>:do_not_litter:</code></td><td align="left">🚱<code>:non-potable_water:</code></td><td align="left">🚳<code>:no_bicycles:</code></td></tr>
<tr><td align="left">🚷<code>:no_pedestrians:</code></td><td align="left">🚸<code>:children_crossing:</code></td><td align="left">⛔️<code>:no_entry:</code></td></tr>
<tr><td align="left">✳️<code>:eight_spoked_asterisk:</code></td><td align="left">✴️<code>:eight_pointed_black_star:</code></td><td align="left">💟<code>:heart_decoration:</code></td></tr>
<tr><td align="left">🆚<code>:vs:</code></td><td align="left">📳<code>:vibration_mode:</code></td><td align="left">📴<code>:mobile_phone_off:</code></td></tr>
<tr><td align="left">💹<code>:chart:</code></td><td align="left">💱<code>:currency_exchange:</code></td><td align="left">♈️<code>:aries:</code></td></tr>
<tr><td align="left">♉️<code>:taurus:</code></td><td align="left">♊️<code>:gemini:</code></td><td align="left">♋️<code>:cancer:</code></td></tr>
<tr><td align="left">♌️<code>:leo:</code></td><td align="left">♍️<code>:virgo:</code></td><td align="left">♎️<code>:libra:</code></td></tr>
<tr><td align="left">♏️<code>:scorpius:</code></td><td align="left">♐️<code>:sagittarius:</code></td><td align="left">♑️<code>:capricorn:</code></td></tr>
<tr><td align="left">♒️<code>:aquarius:</code></td><td align="left">♓️<code>:pisces:</code></td><td align="left">⛎<code>:ophiuchus:</code></td></tr>
<tr><td align="left">🔯<code>:six_pointed_star:</code></td><td align="left">❎<code>:negative_squared_cross_mark:</code></td><td align="left">🅰️<code>:a:</code></td></tr>
<tr><td align="left">🅱️<code>:b:</code></td><td align="left">🆎<code>:ab:</code></td><td align="left">🅾️<code>:o2:</code></td></tr>
<tr><td align="left">💠<code>:diamond_shape_with_a_dot_inside:</code></td><td align="left">♻️<code>:recycle:</code></td><td align="left">🔚<code>:end:</code></td></tr>
<tr><td align="left">🔛<code>:on:</code></td><td align="left">🔜<code>:soon:</code></td><td align="left">🕐<code>:clock1:</code></td></tr>
<tr><td align="left">🕜<code>:clock130:</code></td><td align="left">🕙<code>:clock10:</code></td><td align="left">🕥<code>:clock1030:</code></td></tr>
<tr><td align="left">🕚<code>:clock11:</code></td><td align="left">🕦<code>:clock1130:</code></td><td align="left">🕛<code>:clock12:</code></td></tr>
<tr><td align="left">🕧<code>:clock1230:</code></td><td align="left">🕑<code>:clock2:</code></td><td align="left">🕝<code>:clock230:</code></td></tr>
<tr><td align="left">🕒<code>:clock3:</code></td><td align="left">🕞<code>:clock330:</code></td><td align="left">🕓<code>:clock4:</code></td></tr>
<tr><td align="left">🕟<code>:clock430:</code></td><td align="left">🕔<code>:clock5:</code></td><td align="left">🕠<code>:clock530:</code></td></tr>
<tr><td align="left">🕕<code>:clock6:</code></td><td align="left">🕡<code>:clock630:</code></td><td align="left">🕖<code>:clock7:</code></td></tr>
<tr><td align="left">🕢<code>:clock730:</code></td><td align="left">🕗<code>:clock8:</code></td><td align="left">🕣<code>:clock830:</code></td></tr>
<tr><td align="left">🕘<code>:clock9:</code></td><td align="left">🕤<code>:clock930:</code></td><td align="left">💲<code>:heavy_dollar_sign:</code></td></tr>
<tr><td align="left">©️<code>:copyright:</code></td><td align="left">®️<code>:registered:</code></td><td align="left">™️<code>:tm:</code></td></tr>
<tr><td align="left">❌<code>:x:</code></td><td align="left">❗️<code>:heavy_exclamation_mark:</code></td><td align="left">‼️<code>:bangbang:</code></td></tr>
<tr><td align="left">⁉️<code>:interrobang:</code></td><td align="left">⭕️<code>:o:</code></td><td align="left">✖️<code>:heavy_multiplication_x:</code></td></tr>
<tr><td align="left">➕<code>:heavy_plus_sign:</code></td><td align="left">➖<code>:heavy_minus_sign:</code></td><td align="left">➗<code>:heavy_division_sign:</code></td></tr>
<tr><td align="left">💮<code>:white_flower:</code></td><td align="left">💯<code>:100:</code></td><td align="left">✔️<code>:heavy_check_mark:</code></td></tr>
<tr><td align="left">☑️<code>:ballot_box_with_check:</code></td><td align="left">🔘<code>:radio_button:</code></td><td align="left">🔗<code>:link:</code></td></tr>
<tr><td align="left">➰<code>:curly_loop:</code></td><td align="left">〰️<code>:wavy_dash:</code></td><td align="left">〽️<code>:part_alternation_mark:</code></td></tr>
<tr><td align="left">🔱<code>:trident:</code></td><td align="left">🔻<code>:small_red_triangle_down:</code></td><td align="left">🔺<code>:small_red_triangle:</code></td></tr>
<tr><td align="left">✅<code>:white_check_mark:</code></td><td align="left">🔲<code>:black_square_button:</code></td><td align="left">🔳<code>:white_square_button:</code></td></tr>
<tr><td align="left">⚫️<code>:black_circle:</code></td><td align="left">⚪️<code>:white_circle:</code></td><td align="left">🔴<code>:red_circle:</code></td></tr>
<tr><td align="left">🔵<code>:large_blue_circle:</code></td><td align="left">🔷<code>:large_blue_diamond:</code></td><td align="left">🔶<code>:large_orange_diamond:</code></td></tr>
<tr><td align="left">🔹<code>:small_blue_diamond:</code></td><td align="left">🔸<code>:small_orange_diamond:</code></td><td align="left"> </td></tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样修理我的电脑？</title>
    <url>/2023/09/07/1/</url>
    <content><![CDATA[<h2 id="我的电脑">我的电脑</h2>
<p>我的电脑是一台 ASUS ROG Strix G17 2022(G713RM)，配置如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>CPU：AMD Ryzen 9 6900HX @3.3GHz</p>
</li>
<li class="lvl-2">
<p>GPU：NVIDIA GeForce RTX 3060 Laptop GPU</p>
</li>
<li class="lvl-2">
<p>RAM：32GB Samsung DDR5 BDie 5200MHz</p>
</li>
<li class="lvl-2">
<p>SSD：1TB Micron 3400 PCIe4.0 NVMe SSD</p>
</li>
<li class="lvl-2">
<p>WiFi：Mediatek RZ616 MT7922 802.11ax WiFi 6E</p>
</li>
</ul>
<h2 id="问题">问题</h2>
<p>它最近出现了一些问题，比如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>特定界面、程序卡顿</p>
</li>
<li class="lvl-2">
<p>无法使用快速启动</p>
</li>
<li class="lvl-2">
<p>S0i3 无法正常工作</p>
</li>
<li class="lvl-2">
<p>掉网卡，掉 WLan</p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<h2 id="探索过程">探索过程</h2>
<p>起初我以为是系统的问题，于是我重装了系统，但是问题依旧存在，于是我开始怀疑是硬件的问题，于是我开始了一系列的测试。</p>
<ol>
<li class="lvl-3">
<p>首先我测试了内存。我使用了 MemTest86 进行了内存测试，测试了 4 次，没有发现任何问题。随后，因为如今(2023.Q3)的笔记本 DDR5 内存普遍都是低频的，并且 DDR5 时代的 BDie 并没有延续往日辉煌，我尝试将内存频率降低到 4800MHz，但是问题依旧存在。</p>
</li>
<li class="lvl-3">
<p>随后我测试了 CPU。我使用了 Prime95 进行了 CPU 压力测试，测试了 2 次，没有发现任何问题，后来我觉得可能是 CPU 的功耗与性能的问题，于是我尝试将 CPU 的功耗限制调高，将 CPU 的 PBO 调高，但是问题依旧存在。</p>
</li>
<li class="lvl-3">
<p>随后我测试了 SSD。其 S.M.A.R.T. 数据显示一切正常，但是我还是使用了 CrystalDiskMark 进行了 SSD 测试，测试了 2 次，没有发现任何问题。</p>
</li>
<li class="lvl-3">
<p>随后我测试了 WiFi。其掉网卡的问题是偶发的，因为使用了最新的 WiFi 6E 技术，温度过高才导致了掉网卡，一般重启或者重置 UEFI 即可，所以我使用了 iperf3 进行了 WiFi 测试，测试了 2 次，没有发现任何问题。</p>
</li>
<li class="lvl-3">
<p>随后我测试了 GPU。我使用了 FurMark 进行了 GPU 压力测试，测试了 2 次，没有发现任何问题。因为 R9 6900HX 是一颗 8 核 16 线程的 CPU，并且带有 Radeon RX680M 显卡，所以我尝试超频，以及调高功耗限制，增加可调用的 4G 内存作为显存，但是问题依旧存在。</p>
</li>
<li class="lvl-3">
<p>以及其他一些测试，比如：重装系统、重置 UEFI、更新驱动、更新 BIOS、更新 Windows、更新程序…但是问题依旧存在。</p>
</li>
</ol>
<p>之后，我开始怀疑是 Windows 11 的问题，于是我尝试了 Windows 10，但是问题依旧存在。</p>
<ol>
<li class="lvl-3">
<p>我将 Micron 3400 更换为了 YMTC ZhiTai PC005 PCIe3.0 NVMe SSD.</p>
</li>
<li class="lvl-3">
<p>安装了 Windows 10 21H2 Enterprise LTSC.</p>
</li>
<li class="lvl-3">
<p>安装了 Windows 11 22H2 Pro.</p>
</li>
</ol>
<p>但是问题依旧存在。遂，我开始怀疑是 UEFI 的问题，于是我尝试了：</p>
<p>禁用 USB4 support，AMD-CBS-CBP，DRAM-Power-Downm，尝试降级 UEFI，尝试升级 UEFI，但是问题依旧存在。</p>
<p>因为旧的 S3 传统待机存在安全隐患，随着 Windows 11 的发布，全新的待机模式 S0i3 也被引入，所以我怀疑是 S0i3 的问题，于是我尝试了：</p>
<ol>
<li class="lvl-3">
<p>UEFI 中关闭 S0i3，打开 S3，这样理论上就可以解决问题，但是实际会导致电脑无法正常待机，只能强制关机。</p>
</li>
<li class="lvl-3">
<p>利用 OpenCore 修改引导参数，禁用 S0i3，打开 S3，这样理论上就可以解决问题，确实解决了问题，但是会导致电脑无法正常睡眠，只能休眠，这样会导致电池耗电量过大，而且休眠后无法使用快速启动，只能使用冷启动。只能说<strong>这是一个折中的方案</strong>。</p>
</li>
</ol>
<p>参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vdG9yQm90dGxlL1MzLVNsZWVwLW9uLVJvZy1YMTMtRzE0LTE1LTIwMjEtMjAyMi11c2luZy1PcGVuQ29yZQ==">S3-Sleep-on-Rog-X13-G14-15-2021-2022-using-OpenCore<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="新发现">新发现</h2>
<p>在我尝试了上述的所有方法后，我决定使用 Linux 进行测试，于是我尝试了：</p>
<ol>
<li class="lvl-3">
<p>Ubuntu 22.04 LTS</p>
</li>
<li class="lvl-3">
<p>Deepin 23 Beta</p>
</li>
</ol>
<p>这两个系统中，所有问题都不存在，这让我感到非常奇怪，于是我开始怀疑是 Windows 的问题</p>
<p>通过对种种迹象的分析，我有了灵感与思路，那就是：Linux 系统使用的 NVidia 驱动与 Windows 系统使用的 NVidia 驱动不同，Linux 系统使用的是开源的 Nouveau 驱动，而 Windows 系统使用的是闭源的 NVidia 驱动。并且，<strong>AMD Linux 驱动与 Linux 内核集成</strong>，其性能与稳定性都非常好，而 Windows 系统使用的是 AMD 官方的驱动，其稳定性不如 Linux。Nouveau 驱动只能提供基本的显卡功能，而 NVidia 驱动可以提供更多的显卡功能，比如：CUDA、DLSS、RTX、TensorFlow、etc.，所以我怀疑是 Windows 的显卡驱动的问题。</p>
<p>我获取了原厂驱动(2022的最初始版本)，所有问题都解决了。</p>
<p>Driver List:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>AMD_Chipset_DriverOnly_ROG_AMD_J_V1.2.0.119Sub1_29512</p>
</li>
<li class="lvl-2">
<p>AMD_Graphic_DriverOnly_ROG_AMD_J_V30.0.14018.19001_28641</p>
</li>
<li class="lvl-2">
<p>ASUSSystemControlInterfacev3_ASUS_Z_V3.1.17.0_15273</p>
</li>
<li class="lvl-2">
<p>Audio_DriverOnly_Dolby_ROG_Realtek_J_V6.0.9427.1_30931</p>
</li>
<li class="lvl-2">
<p>Bluetooth_ROG_MediaTek_J_V1.932.2.294Sub1_33411</p>
</li>
<li class="lvl-2">
<p>DolbyAtmosdriverforROG_V3.30307.371.1_14380_1</p>
</li>
<li class="lvl-2">
<p>Graphic_DCH_ROG_NVIDIA_J_V30.0.15.1278_28613</p>
</li>
<li class="lvl-2">
<p>LAN_ROG_Realtek_J_V1125.008.0515.2022_28702_1</p>
</li>
<li class="lvl-2">
<p>PrecisionTouchPad_ROG_ASUS_J_V16.0.0.13Sub1_28581_1</p>
</li>
<li class="lvl-2">
<p>WirelessLan_ROG_MediaTek_J_V3.03.02.0771Sub1_33414</p>
</li>
</ul>
<h2 id="插曲">插曲</h2>
<p>我曾经短暂解决了问题，但是又出现了新的问题，我安装使用了 Micron 提供的最新 NVMe 驱动，而不是原厂驱动，这后来也是给我灵感的来源。</p>
<p>我修改了电源计划，因为近几年的华硕笔记本都安装 ARMOURY CRATE 作为电源管理软件，所以我将其卸载，使用 <code>平衡</code> 作为使用的电源计划，关闭硬盘的休眠(因为硬盘休眠也可能因为固件的原因导致无法启动)，利用命令行工具 <code>powercfg</code> 关闭混合休眠…但是问题依旧存在。</p>
<p>后来，我发现了一个非常奇怪的现象，那就是：<strong>利用命令行工具 <code>SFC</code>工具 <code>SFC /Scannow</code> 扫描系统，问题就解决了</strong>，<code>DISM</code> 命令 <code>DISM /Online /Cleanup-image /Restorehealth</code> 修复系统映像。但是，这个问题只是暂时解决了，因为这个问题会在下一次重启再次出现，或者开启特定的程序后导致系统崩溃。</p>
<h2 id="总结">总结</h2>
<p>之所以会出现这些问题，是因为 Windows 11 的显卡驱动的问题，而不是硬件的问题，所以我将这些问题总结为：<strong>Windows 11 的显卡驱动的问题</strong>。</p>
<p>之所以之前利用 命令 可以短暂解决问题，是因为这些命令会重置 Windows 11 的显卡驱动，或者将显卡驱动的某个组件替换，但是这些命令只是暂时解决了问题，因为 Windows 11 会在下一次重启或者开启特定的程序后再次加载显卡驱动，所以问题又出现了。</p>
<p>所以，确认使用 Windows 11 的用户，应该<strong>尽量使用原厂驱动(DCH Driver)，而不是 Windows Update 提供的驱动</strong>。</p>
<p>并且，即使是 OEM 提供的最新驱动，也不一定是最好的，所以，如果你的电脑出现了一些奇怪的问题，你可以<strong>尝试使用原厂驱动，或者是旧版本的驱动</strong>。</p>
<p>至于网卡，我只能说，Laptop Platform MediaTek 之 WiFi6E 还未成熟之前，它的发热量太大，远离它，我已经下单 Intel AX210 802.11ax WiFi 6E。</p>
<p>参考</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLXR3L3dpbmRvd3MtaGFyZHdhcmUvZGVzaWduL2RldmljZS1leHBlcmllbmNlcy9tb2Rlcm4tc3RhbmRieS12cy1zMw==">新式待命與 S3<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vdG9yQm90dGxlL1MzLVNsZWVwLW9uLVJvZy1YMTMtRzE0LTE1LTIwMjEtMjAyMi11c2luZy1PcGVuQ29yZQ==">S3-Sleep-on-Rog-X13-G14-15-2021-2022-using-OpenCore<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlZXJnZS9nLWhlbHBlci9ibG9iL21haW4vZG9jcy9SRUFETUUuemgtQ04ubWQ=">G-Helper (GHelper)<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pby0xOS9Vbml2ZXJzYWxBTURGb3JtQnJvd3Nlci1WZW50b3k=">UniversalAMDFormBrowser<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="2023-09-10-更新">2023.09.10 更新</h2>
<h3 id="后续">后续</h3>
<p>我已经更换了 Intel AX210 802.11ax WiFi 6E 网卡，之前的问题又复现了，晕。。。所以，我按照之前的流程，一套下来，先用 AMD 提供的显卡驱动卸载工具卸载显卡驱动，DDU 卸载NVidia驱动，然后重装所有原厂驱动，重置 EFI，重做 UEFI 引导，问题解决了。</p>
<p>因为我的路由器是 WiFi5 标准的，所以两张网卡连接 5GHz 信号的速度都是 866 MHz，但是实测 MediaTek 网卡的速度要比 Intel 网卡的速度快(实测 mt7922 能跑 500 Mbps 左右，而 ax210 却只有 300 Mbps)，而且 MediaTek 网卡的信号强度要比 Intel 网卡的信号强度强(mt7922 能稳定 866 Mbps 接收，而 ax210 经常只有 790 Mbps 接收)，但是换都换了，就不想再换了，所以就这样吧。🙄</p>
<blockquote>
<p>题外话</p>
</blockquote>
<p>话说学校的网也挺快的，上传速度竟然也是 1000 Mbps。😙</p>
<p>(这是用 2.5Gbps 网卡 6 类网线测试的)</p>
<p><img src="./speedtest.png" alt></p>
<h3 id="补充">补充</h3>
<p>有时候系统睡眠异常也可能是系统对设备的电源管理异常，你可以尝试打开设备管理器，找到<code>通用串行总线控制器</code>-<code>USB 根集线器</code>-<code>电源管理</code>，取消勾选<code>允许计算机关闭此设备以节约电源</code>，然后重启电脑。</p>
<p>也可能是系统的引导出错，可以尝试重建引导，或者是重置 UEFI。</p>
<p>即使这些都做过了，电脑仍然是异常的，也可能是因为一些系统策略的错误配置，你可以尝试使用<code>组策略编辑器</code>或者<code>注册表编辑器</code>进行修改。我曾经出现过系统无法关机的情况，即一直在关机界面显示转圈圈</p>
<ol>
<li class="lvl-3">
<p>我使用 <code>regedit</code> 打开注册表编辑器</p>
</li>
<li class="lvl-3">
<p><code>HKEY_USERS\.DEFAULT\Control Panel\Desktop</code>，按回车键。</p>
</li>
<li class="lvl-3">
<p>右键点击<code>Desktop</code>，点击新建字符串值。</p>
</li>
<li class="lvl-3">
<p>将其命名为<code>AutoEndTasks</code>,并双击打开。</p>
</li>
<li class="lvl-3">
<p>数值数据改为<code>1</code>，点击确定。</p>
</li>
</ol>
<p>网上说的关闭快速启动的方法，我觉得不太靠谱，因为我关闭了快速启动，但是问题依旧存在。这样做其实是在解决问题的后果，而不是解决问题的原因。是治标不治本，是饮鸩止渴的做法。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9iYnMucGNiZXRhLmNvbS92aWV3dGhyZWFkLTE5NzMzMDEtMS0xLmh0bWw=">[求助] 选择关机后，win11卡住，一直“正在关机”转圈圈<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="2024-01-28-更新">2024.01.28 更新</h2>
<p>一切看起来都很正常，但是我发现了一个问题，那就是：<strong>当我的电脑睡眠一段时间后，会无缘无故被唤醒</strong></p>
<p>我打开日志查看器，发现了一些有趣的东西：</p>
<p>那就是电脑报告了一个驱动程序的损坏，而这个驱动是 AX210 的驱动，我尝试了重装驱动，结果变得更坏</p>
<p>电脑无法正常睡眠，只能休眠，而且休眠后无法使用快速启动，只能使用冷启动。也就是说，我又回到了之前的状态。</p>
<p>我尝试使用命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">SFC /Scannow</span><br><span class="line">DISM /Online /Cleanup-image /Restorehealth</span><br></pre></td></tr></table></figure>
<p>然而，这个命令并没有解决问题</p>
<p>于是我去查找资料，相关信息报告无法在睡眠与快速启动可能是由于 EFI 引导的问题，而且与 MSR 分区有关</p>
<p>于是我尝试了重建引导</p>
<p>华硕默认给出的 ESP 名为 SYSTEM，而且分区大小为 270 MB，于是我将原先的 ESP 分区删除，新建一个 300 MB 的 ESP 分区</p>
<p>并且，我将 MSR 分区的大小默认是 16 MB，于是我将 MSR 分区的大小调整为 256 MB</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 删除原先的 MSR 分区</span><br><span class="line">diskpart</span><br><span class="line">list disk</span><br><span class="line">select disk <span class="number">0</span></span><br><span class="line">list partition</span><br><span class="line">select partition <span class="number">1</span></span><br><span class="line">delete partition override</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"># 新建 MSR 分区</span><br><span class="line">diskpart</span><br><span class="line">list disk</span><br><span class="line">select disk <span class="number">0</span></span><br><span class="line">create partition msr size=<span class="number">256</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：电脑是 GPT 分区表，删除操作可以在 DiskGenius 中进行，新建操作可以在 DiskGenius 中进行，但是新建 MSR 分区的大小只能在命令行中进行，因为 DiskGenius 中无法设置 MSR 分区的大小。</p>
</blockquote>
<p>然后，我重建了引导，但是问题依旧存在</p>
<p>之后，我想到很可能与驱动程序相关</p>
<p>于是我尝试了重装驱动，但是问题依旧存在。</p>
<p>然后，在使用 DDU 卸载驱动程序后，我发现了一个有趣的现象，那就是：<strong>使用DDU卸载驱动的设备，系统不会对其进行自动安装驱动</strong></p>
<p>于是我想到，Windows 系统很可能保存了驱动程序的备份，并且在设备出现问题时，即使手动管理驱动，系统仍然受到了错误的驱动程序的影响</p>
<p>于是，我改变思路，重启到了 PE 系统，使用 DISM++ 工具</p>
<p>打开系统映像，找到驱动程序，删除了所有有关的驱动程序(比如：Intel、NVIDIA、Realtek、MediaTek、AMD、ASUS、etc.)</p>
<p>然后，我重启到了 Windows 系统，发现问题解决了，系统可以正常睡眠，而且可以使用快速启动。</p>
<p>于是，我开始重装驱动程序。都是使用原厂驱动，而不是 Windows Update 提供的驱动。</p>
<p>没有出现问题，一切正常。</p>
<p>唯一出现的问题就是：**出现了一个其他设备，硬件 ID 为 ACPI\VEN_ASUS&amp;DEV_9001</p>
<p>这是一个 ACPI 设备，华硕提供的驱动程序是 ASUS System Control Interface v3，但是这个驱动程序并不包含这个设备的驱动程序</p>
<p>于是，我比对华硕在硬盘中恢复分区内保留的镜像文件，发现了这个设备的驱动程序，其实就是 Armoury Crate Control Interface</p>
<p>因为我使用开源工具 GHelper 对设备进行管理，并没有安装 Armoury Crate，所以没有安装这个驱动程序也就不奇怪了，于是我提取镜像中的这个驱动程序，安装了这个驱动程序，问题解决了。</p>
<h3 id="新的结论">新的结论</h3>
<p>导致电脑无法正常睡眠以及快速启动失效的原因有着多种因素</p>
<ol>
<li class="lvl-3">
<p>EFI 引导的问题</p>
</li>
<li class="lvl-3">
<p>MSR 分区的问题</p>
</li>
<li class="lvl-3">
<p>驱动程序的问题</p>
</li>
<li class="lvl-3">
<p>其他未知的问题</p>
</li>
</ol>
<h3 id="新的建议">新的建议</h3>
<ol start="0">
<li class="lvl-3">
<p><strong>优先</strong>尝试使用命令行工具 <code>SFC</code> 与 <code>DISM</code> 修复系统</p>
</li>
<li class="lvl-3">
<p>使用微软官方的 Windows 11 镜像，而不是 OEM 提供的 Windows 11 镜像</p>
</li>
<li class="lvl-3">
<p>删除 OEM 内建的 EFI 引导以及 MSR 分区，重新建立 EFI 引导以及分区，不小于 300 MB</p>
</li>
<li class="lvl-3">
<p>在 PE 系统中，使用 DISM++ 工具，删除所有可能导致问题驱动程序</p>
</li>
<li class="lvl-3">
<p>重装驱动程序，优先使用原厂驱动，而不是 Windows Update 提供的驱动</p>
</li>
<li class="lvl-3">
<p>如果你使用了 GHelper，但是没有安装 Armoury Crate，那么你需要手动安装 Armoury Crate Control Interface 驱动程序</p>
</li>
</ol>
<h3 id="新的发现">新的发现</h3>
<p>我发现了一个有趣的现象，对于本机，那就是：<strong>系统可能存在问题时，开机动画的旋转圆圈是一体的连续的，而系统不存在问题时，开机动画的旋转圆圈是由多个小圆圈组成的</strong></p>
<p>当然，如果系统不存在问题，那么开机动画的旋转圆圈也可能是一体的连续的，但是，如果系统存在问题，那么开机动画的旋转圆圈一定是一体的连续的。</p>
<p>我推测这与系统的引导有关，以及 AMD 核芯显卡与 NVdia 独立显卡的 MUX 技术兼容性有关，但是我并没有找到相关的资料。</p>
<p>24年2月11日更新</p>
<p>我发现这个问题只存在于 Win11 23H2 之前的系统</p>
<h2 id="2024-05-8-更新">2024.05.8 更新</h2>
<p>到目前，使用最新版本的 Windows 11 23H2(OS内部版本22631.3147)，一切正常，基本没有出现任何问题。</p>
<p>可以放心的使用了。</p>
<p>但是需要注意显卡驱动的问题，华硕提供的AMD显卡驱动并不是最新的(华硕在今年的3月25日发布的，但这个其实是AMD在23年11月30日发布的)，但是也提供了一个相对稳定的版本，所以，如果你的电脑出现了一些奇怪的问题，你可以尝试使用华硕提供的驱动程序（我个人是不推荐使用AMD官网上下的，因为我每次使用，总是会出问题）。</p>
<p>nVdia 的显卡驱动可以使用英伟达提供的，但是英伟达在近期的驱动总是会出现一些问题，所以，如果你的电脑出现了一些奇怪的问题，你可以尝试使用旧版本的驱动程序。</p>
<h2 id="2024-10-17-更新">2024.10.17 更新</h2>
<p>每当重新启动过后，想要打开 Win11 的控制中心，然而每次都会卡一下，非常难受，于是，我发现这个故障是由 ai noise cancelling asus utility 这个玩意儿导致的，打开设备管理器，卸载时同样卸载驱动后，问题解决了。</p>
<p>这个东西是华硕的 AI 噪音消除工具，但是我并没有使用（因为使用Ghelper作为管理工具，无法调用），所以卸载了也不会有什么影响。</p>
<h2 id="2024-11-11-更新">2024.11.11 更新</h2>
<p>经过约半年的使用，一切正常，没有出现任何问题，可以放心的使用了。</p>
<p>基本可以确定这是一个 Windows 11 与驱动程序共同导致的问题，而不是硬件的问题。</p>
<p>至此，我可以下一个结论，建议使用 MSDN 提供的 Windows 11 镜像，而不是 OEM 提供的 Windows 11 镜像，使用最新的驱动程序，Windows Update 提供的驱动程序也是一样可以使用的，但是注意版本问题（Window Update 可以识别你的机型，然后自动安装厂家提供的驱动，但不一定是最新的）</p>
<hr>
<p>有网友发现，该机型似乎存在一个通病，需要换CPU解决，即开机到LOGO界面就无法启动了，但如果能够进入系统又可以正常使用</p>
<p>疑似 CPU 虚焊/体质下降导致的问题</p>
<p>根据 AMD 机器以往的案例，据我推测，大概是电压的原因，因为这个型号的ROG没有打黑胶，并且散热做得很好，基本排除虚焊的可能</p>
<p>以前小米的 4800H 机器也是过保一段时间可能出现这种情况（也是个别案例），是AMD给的电压太低了，当时新机可能可以正常使用，但是用久了体质下降，电压不够了，就会出现这种问题</p>
<p>解决方法就是利用 ru 工具修改 BIOS 电压(技术上实现可能有难度)，或者干 CPU 换新的</p>
<p>你也可以向厂商反馈，期待厂商发布测试 BIOS 修复这个问题，但对于过保机器且不是大规模爆发的问题，几乎可不能期待</p>
<h2 id="2025-01-01-更新">2025.01.01 更新</h2>
<p>经过一年的使用，一切正常，大部分问题得到解决，可以放心的使用了。</p>
<p>保持驱动程序最新，和前文一样，不再赘述。</p>
<p>之前的问题，大部分是 Windows 11 本身的问题，而不是硬件的问题，所以，如果你的电脑出现了一些奇怪的问题，你可以尝试使用 MSDN 提供的 Windows 11 镜像，而不是 OEM 提供的 Windows 11 镜像，并且，该机型在 23H2 之前的系统会出现一些问题，所以，建议使用最新的 Windows 11 23H2 系统。（24H2 暂时没有使用，故不讨论）</p>
<p>有关显卡驱动也可以使用 <span class="exturl" data-url="aHR0cHM6Ly9jYXRhbG9nLnVwZGF0ZS5taWNyb3NvZnQuY29tL2hvbWUuYXNweA==">Microsoft®Update Catalog<i class="fa fa-external-link-alt"></i></span> 进行搜索，这是微软官方提供的驱动程序下载站，可以搜索到最新的驱动程序，但是需要注意，这里的驱动程序是 Vendor 提供的 DCH 驱动，不是 OEM 提供的驱动程序，但是显卡驱动可以使用，因为 OEM 提供的驱动版本已经过时，对部分游戏不友好。</p>
<p>前文提到的控制中心仪表盘卡顿问题（只有每次开机后第一次使用时卡顿），一部分原因是由于华硕的 AI 噪音消除工具导致的，还有一部分是 AMD 的显卡驱动导致的（单独只用 AMD 核显或者单独只用 NVDIA 独显都不会导致卡顿，测试环境是新装系统不联网只安装其中一种驱动，但是一旦两种驱动都安装，就能出发该卡顿问题），但是华硕迟迟没有发布新的驱动程序（截至当前，最新的版本仍然是24年3月发布的），而 AMD 提供的驱动程序对本机兼容性不友好，暂时没有解决方案，只能等待厂商发布新的驱动程序。</p>
<h2 id="2025-02-23-更新">2025.02.23 更新</h2>
<p>更新了24H2系统，结果出现了新的问题</p>
<ol>
<li class="lvl-3">
<p>资源管理器侧边栏快速访问的 Linux 分区无法正常显示，但是可以正常访问解决方法是开关虚拟机相关功能，然后运行 WSL Setting</p>
</li>
<li class="lvl-3">
<p>启动 UAC 时，反应迟钝，但是可以正常使用起初我以为是 Windows Update 后，系统存在损坏，但运行了 SFC 以及 DISM  命令后仍然如此。然后我觉得可能是 Windows Defender 的问题，所以关闭了 Windows Defender，安装了卡巴斯基杀毒软件，问题依旧存在。也可能是驱动程序的问题，因为我注意到只使用核显的时候并没有该现象，独显直连的时候也不会产生，只有核显与独显共存时存在该问题；于是我进入安全模式，使用 DDU 清理英伟达驱动，AMD官方的 AMDCLEAN 驱动清理工具清理 AMD 驱动，然后重装了最新的驱动程序（Windows Update 提供的），问题依旧存在，于是我重复之前清理的步骤，安装了 OEM 提供的驱动程序，并手动更新了英伟达的最新 Studio 驱动，问题解决。</p>
</li>
</ol>
<p>关于 UAC POPUP 慢的问题，我注意到一个现象，当 AMD GPU 是 GPU 0 的时候，就可以复现这个问题（当 igpu + gpu 时，only igpu/direct gpu除外），当 NVDIA GPU 是 GPU 0 时，就不存在该问题，这个问题可能是由于 Windows 调度失误导致的。</p>
<p>2月24日</p>
<p>破案了，是英伟达驱动的问题，老驱动并没有这个问题，新的驱动才有，在英伟达控制面板里3D设置-&gt;首选图形处理器-&gt;自动选择改成高性能 NV 处理器</p>
<p>2月25日</p>
<p>旧病复发也，突然惊觉，一直是英伟达驱动更新的勤快，但是有没有可能，AMD 的也有问题，一看，AMD 的驱动上次更新还是23年末，好家伙，这24H2系统是24年末的，可能 AMD 的驱动不兼容了也是可能的，于是我更新了 AMD 的驱动，问题解决。</p>
<table>
<thead>
<tr>
<th>Vender</th>
<th>Version</th>
<th>File</th>
<th>Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>AMD</td>
<td>30.0.12033.1030</td>
<td>whql-amd-software-adrenalin-edition-24.12.1-win10-win11-dec-rdna.exe</td>
<td>2024/11/27</td>
</tr>
<tr>
<td>NVIDIA</td>
<td>30.0.15.6636</td>
<td>566.36-notebook-win10-win11-64bit-international-nsd-dch-whql.exe</td>
<td>2024/12/3</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：皆是安装了 OEM 提供的驱动后升级安装</p>
</blockquote>
<p>华硕的笔记本驱动更新的很不勤快，而且兼容性很差，当时买了的时候，原装的OEM系统存在恶性BUG（无法正常睡眠，经常性黑屏死机），只能重装MSDN原版系统才能解决直到从21H2到23H2大概1年多时间，多次UEFI更新，驱动更新，才算稳定正常使用了而且，很多驱动在官网上无法下载到，而Microsoft Update Catalog上推送的驱动又可以查询到是ASUS推送的，但官网却没有下载。以及一些系统设备的驱动，华硕完全没有提供，必须下载奥创，然而奥创的灾难表现以及Bug，常常安装不上这些驱动，在设备管理器中显示未知的设备，让人不得不选择放弃，转而去从oem系统镜像中提取驱动。难以想象这是ASUS的ROG系列产品，测试完全交给消费者，软件非常不稳定，驱动更新不及时，维护不及时，售后服务也不及时，这是一个非常不负责任的行为。</p>
<h2 id="3月21日更新">3月21日更新</h2>
<p>windows update 给我更新了 24h2 03 积累更新，结果旧病复发。</p>
<p>这次使用了 DDU 卸载了英伟达驱动，AMD clean 实用程序卸载了 AMD 驱动。</p>
<p>使用<code>SFC /Scannow</code>扫描系统，<code>DISM /Online /Cleanup-image /Restorehealth</code>修复系统映像。</p>
<p>然后重装了 OEM 提供的驱动，更新了AMD的驱动（官网提供的25.3.1）版本，同时更新了芯片组驱动（OEM 提供的仍然是22年的，该芯片组驱动已经是24年的了），英伟达的驱动更新到565.90，问题解决。</p>
<p>奇怪的是此时 amd igpu 是 gpu 0，nvdia dgpu 是 gpu 1。</p>
<p>3月22日</p>
<p>这个芯片组驱动（7.02.13.148）存在问题，将导致S0睡眠相关问题，长时间睡眠后，有概率导致唤醒黑屏（无显示，有背光），但此时计算机并没有死机，对用户操作是可处理的，重复睡眠唤醒多次可以解决，但这并不是我想要的，故退回 OEM Chipset 驱动。</p>
<p>以及唤醒后锁屏页面色彩显示错误，发白等问题。</p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK17 新特性 Preview 1</title>
    <url>/2023/06/11/1/</url>
    <content><![CDATA[<p>2023年，越来越多的开发者和企业将会迁移到 JDK 17，我们学习 Java 也应该跟上时代的步伐。随着 JDK 17 的发布，Java 语言和 JVM 将迎来一些新的特性，本文将介绍 JDK 17 的新特性。</p>
<h2 id="switch-增强">switch 增强</h2>
<p>JDk 17 为 switch 增加了一些新的特性，包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>switch 表达式</p>
</li>
<li class="lvl-2">
<p>switch 语句中的 yield 语句</p>
</li>
<li class="lvl-2">
<p>switch 语句中的模式匹配</p>
</li>
</ul>
<h3 id="switch-表达式">switch 表达式</h3>
<p>Before JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;num is 1&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;num is 2&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;num is not 1 or 2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;num is 1&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;num is 2&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;num is not 1 or 2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，原先的 switch 语句中，每个 case 都需要加上 break 语句，否则会出现穿透现象。而在 JDK 17 中，switch 语句中的 case 可以直接使用 -&gt; 来代替，这样就不需要加上 break 语句了。</p>
<h3 id="switch-语句中的-yield-语句">switch 语句中的 yield 语句</h3>
<p>Before JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;徐庶&quot;</span>;</span><br><span class="line">String country; </span><br><span class="line"><span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;诸葛亮&quot;</span>:</span><br><span class="line">        country = <span class="string">&quot;蜀国&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;司马懿&quot;</span>:</span><br><span class="line">        country = <span class="string">&quot;魏国&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;徐庶&quot;</span>:</span><br><span class="line">        country = <span class="string">&quot;吴国&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        country = <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(name + <span class="string">&quot;是&quot;</span> + country + <span class="string">&quot;人&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>After JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;徐庶&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;诸葛亮&quot;</span>, <span class="string">&quot;庞统&quot;</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;蜀国&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;司马懿&quot;</span>, <span class="string">&quot;郭嘉&quot;</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;魏国&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;徐庶&quot;</span>, <span class="string">&quot;周瑜&quot;</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;吴国&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(name + <span class="string">&quot;是&quot;</span> + country + <span class="string">&quot;人&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>在 JDK 17 中，switch 语句中的 case 可以直接使用 yield 语句来代替 break 语句。而且 yield 语句可以返回一个值，这样就不需要定义一个变量来接收了。在原来的 switch 语句中，每个 case 都需要加上 break 语句，否则会出现穿透现象。而在 JDK 17 中，switch 语句中的 case 可以直接使用 yield 语句来代替，这样就不需要加上 break 语句了。</p>
<h3 id="switch-语句中的模式匹配">switch 语句中的模式匹配</h3>
<p>JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">getCountry</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">switch</span> (obj) &#123;</span><br><span class="line">        <span class="keyword">case</span> String s -&gt; &#123;</span><br><span class="line">            <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;诸葛亮&quot;</span>, <span class="string">&quot;庞统&quot;</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;蜀国&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;司马懿&quot;</span>, <span class="string">&quot;郭嘉&quot;</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;魏国&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;徐庶&quot;</span>, <span class="string">&quot;周瑜&quot;</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;吴国&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Integer i -&gt; &#123;</span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;蜀国&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;魏国&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;吴国&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是 JDK 17 中的新特性，可以在 switch 语句中使用模式匹配，这样就不需要使用 instanceof 来判断对象的类型了。</p>
<h2 id="拼接字符串增强">拼接字符串增强</h2>
<p>JDK 17 为 String 类增加了一个新的方法，用于拼接字符串。</p>
<p>Before JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">str = str + <span class="string">&quot; World&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>
<p>After JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">str = str.concat(<span class="string">&quot; World&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>
<p>使用 \ 来拼接字符串，使用 \s 来表示空格，使用 \n 来表示换行。</p>
<p>Before JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&lt;body&gt;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    &lt;h1&gt;Hello World&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&lt;/body&gt;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&lt;/html&gt;&quot;</span>;</span><br><span class="line">System.out.println(html);</span><br></pre></td></tr></table></figure>
<p>原先每一行都需要加上 \n 来表示换行，这样的代码可读性很差。</p>
<p>After JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;Hello World&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>;</span><br><span class="line">System.out.println(html);</span><br></pre></td></tr></table></figure>
<h2 id="instanceof-模式匹配">instanceof 模式匹配</h2>
<p>JDK 17 为 instanceof 增加了模式匹配的功能。</p>
<p>Before JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceofDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">            System.out.println(str.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceofDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String str) &#123;</span><br><span class="line">            System.out.println(str.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在原先的代码中，我们需要先判断 obj 是否是 String 类型，如果是，我们需要将 obj 强转为 String 类型，然后才能调用 String 类型的方法。在 JDK 17 中，我们可以直接在 if 语句中使用 instanceof，如果 obj 是 String 类型，我们可以直接使用 str 变量，而不需要强转。</p>
<h2 id="密封类">密封类</h2>
<p>JDK 17 为类增加了一个新的修饰符 sealed，用于修饰类，接口和枚举。对于称之为密封类，更多是为了限制子类的继承，防止子类变成父类。</p>
<p>Before JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SealedClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After JDK 17:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SealedClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">permits</span> Cat, Dog &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 JDK 17 中，我们使用 sealed 修饰 Animal 类，使用 permits 关键字来指定 Animal 类可以被哪些类继承，这里我们指定 Cat 和 Dog 类可以继承 Animal 类。在 Cat 和 Dog 类中，我们使用 final 修饰类，防止子类继续继承 Cat 和 Dog 类。除了final 修饰类，我们还可以使用 sealed 修饰类，这样的类只能被指定的类继承，不能被其他类继承。</p>
<p>这种方式有很多优点</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>限制子类的继承，防止子类变成父类</p>
</li>
<li class="lvl-2">
<p>限制子类的个数，防止子类过多</p>
</li>
<li class="lvl-2">
<p>限制子类的继承层级，防止继承层级过多</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK17 新特性 Preview 2</title>
    <url>/2023/06/14/1/</url>
    <content><![CDATA[<p>接着上一篇 Preview 1，本文将继续介绍 JDK17 的新特性。</p>
<h2 id="Record-类">Record 类</h2>
<p>“类似 lombok 的属性只读”。在 JDK 14 中，引入了 Record 类，可以用来创建只读的类，这样就不需要使用 lombok 来实现了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面的代码可以看出，Record 类的定义和普通类的定义很相似，只是在类名前面加上了 record 关键字。<br>
Record 类的属性默认是 final 的，且只有 getter 方法，没有 setter 方法，所以 Record 类的属性是只读的。</p>
<h2 id="优化空指针异常">优化空指针异常</h2>
<p>在 JDK 17 中，对空指针异常进行了优化，当出现空指针异常时，会打印出更加详细的信息，包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>空指针异常的位置</p>
</li>
<li class="lvl-2">
<p>空指针异常的原因</p>
</li>
<li class="lvl-2">
<p>空指针异常的堆栈信息</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NullPointerExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(str.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 JDK 17 中，运行上面的代码，会打印出如下信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException: Cannot invoke <span class="string">&quot;String.length()&quot;</span> because <span class="string">&quot;str&quot;</span> is <span class="literal">null</span></span><br><span class="line">    at com.example.demo.NullPointerExceptionDemo.main(NullPointerExceptionDemo.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>可以看出，JDK 17 对空指针异常进行了优化，打印出了更加详细的信息。</p>
<h2 id="ZGC垃圾回收器">ZGC垃圾回收器</h2>
<p>在 JDK 17 中，引入了 ZGC 垃圾回收器，ZGC 垃圾回收器是一种低延迟的垃圾回收器，可以在几毫秒内处理几个字节到几个TB的堆。<br>
ZGC 垃圾回收器的特点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>低延迟</p>
</li>
<li class="lvl-2">
<p>可以处理几个字节到几个TB的堆</p>
</li>
<li class="lvl-2">
<p>与应用程序线程并发执行</p>
</li>
<li class="lvl-2">
<p>不卡顿</p>
</li>
</ul>
<p>使用 ZGC 垃圾回收器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -XX:+UseZGC</span><br></pre></td></tr></table></figure>
<p>在 JVM 启动时，使用 -XX:+UseZGC 参数，就可以使用 ZGC 垃圾回收器。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记1</title>
    <url>/2023/05/13/1/</url>
    <content><![CDATA[<h2 id="什么是-Java">什么是 Java</h2>
<p>Java 是一种跨平台的编程语言，它可以在不同的操作系统上运行，只需要安装对应的 Java 虚拟机（JVM）即可。</p>
<h3 id="特性">特性</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>简单易学</p>
</li>
<li class="lvl-2">
<p>面向对象</p>
</li>
<li class="lvl-2">
<p>平台无关性</p>
</li>
<li class="lvl-2">
<p>可靠性</p>
</li>
<li class="lvl-2">
<p>安全性</p>
</li>
<li class="lvl-2">
<p>支持多线程</p>
</li>
<li class="lvl-2">
<p>支持网络编程</p>
</li>
<li class="lvl-2">
<p>编译与解释并存</p>
</li>
<li class="lvl-2">
<p>动态扩展</p>
</li>
<li class="lvl-2">
<p>健壮性</p>
</li>
<li class="lvl-2">
<p>开源</p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<h3 id="应用">应用</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>桌面应用程序</p>
</li>
<li class="lvl-2">
<p>Web 应用程序</p>
</li>
<li class="lvl-2">
<p>企业应用程序</p>
</li>
<li class="lvl-2">
<p>移动应用程序</p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<h2 id="关于-JDK">关于 JDK</h2>
<h3 id="JDK-与-JRE-的区别">JDK 与 JRE 的区别</h3>
<p>JDK 是 Java Development Kit 的缩写，它是提供给 Java 开发人员使用的，其中包含了 Java 的开发工具，也包括了 JRE。<br>
JRE 是 Java Runtime Environment 的缩写，它是运行 Java 程序所必须的环境的集合，包含 JVM 标准实现及 Java 核心类库。</p>
<h3 id="JDK-的版本">JDK 的版本</h3>
<p>建议选择LTS版本，LTS是Long Term Support的缩写，即长期支持版本，这种版本的JDK会提供长达几年的支持，而非LTS版本的JDK只会提供半年的支持。<br>
JDK也有不同的发行版本，Oracle JDK是Oracle公司发布的JDK，OpenJDK是开源社区发布的JDK，两者几乎没有区别，Oracle JDK包含了一些Oracle公司的授权代码，OpenJDK完全开源。</p>
<hr>
<p>我使用了Adoptium Eclipse Temurin 的 JDK，它是OpenJDK的一个发行版本，它的特点是免费、开源、高性能、多平台，它的开发者包括了IBM、Microsoft、Red Hat、SAP等公司，它的前身是AdoptOpenJDK。<span class="exturl" data-url="aHR0cHM6Ly9hZG9wdGl1bS5uZXQvemgtQ04vdGVtdXJpbi9yZWxlYXNlcy8=">下载 Adoptium Eclipse Temurin<i class="fa fa-external-link-alt"></i></span></p>
<p>参考： <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTk0NjU1NzQ2MzgxMjgzMzg4">我应该使用哪个版本的 JDK？<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Windows-环境变量">Windows 环境变量</h3>
<p>下载 Adoptium Eclipse Temurin 的 <code>.msi</code> 安装包，在安装时将 <code>Add to PATH</code> 选项勾选上，这样就会自动将 JDK 的安装目录添加到环境变量中。</p>
<h2 id="Hello-World">Hello World</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编译">编译</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure>
<h3 id="运行">运行</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure>
<h4 id="Java-运行机制">Java 运行机制</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>编译型语言：先将源代码编译成机器码，再运行机器码。</p>
</li>
<li class="lvl-2">
<p>解释型语言：运行时才翻译成机器码，每次运行都要翻译一次。</p>
</li>
</ul>
<p>Java 是一种混合型语言，它的源代码是编译成字节码，然后由 JVM 解释执行。</p>
<h3 id="集成开发环境-IDE">集成开发环境 (IDE)</h3>
<p>IDE 是 Integrated Development Environment 的缩写，它是一种软件，可以帮助开发人员提高开发效率，常见的 IDE 有 Eclipse、IntelliJ IDEA、NetBeans、Visual Studio 等。主流的 IDE 都支持 Java 开发，我使用的是 IntelliJ IDEA。因为普遍认为 IntelliJ IDEA 是最好的 Java IDE，而且它的社区版是免费的。恰好，我有 JetBrains 的许可证，可以使用 IntelliJ IDEA 的专业版。</p>
<h2 id="基本语法">基本语法</h2>
<h3 id="注释">注释</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br><span class="line"><span class="comment">/** 文档注释 */</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>文档注释是一种特殊的注释，它可以被 Javadoc 解析器解析，用于生成文档。文档注释可以用来注释类、方法、变量等，它可以被写在类、方法、变量的前面，也可以写在类、方法、变量的后面。例如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个文档注释</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有关 Javadoc 的内容，可以参考 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvdG9vbHMvd2luZG93cy9qYXZhZG9jLmh0bWw=">Javadoc 官方文档<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<h3 id="标识符">标识符</h3>
<p>标识符用来给类、变量、方法等命名，标识符由字母、数字、下划线、美元符号组成，不能以数字开头，不能是 Java 的关键字。</p>
<h3 id="数据类型">数据类型</h3>
<p>Java 是一种强类型语言，每个变量都必须声明其数据类型，Java 的数据类型分为两大类：基本数据类型和引用数据类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataType</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本数据类型</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 1 字节</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 2 字节</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 4 字节</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1L</span>; <span class="comment">// 8 字节</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.0f</span>; <span class="comment">// 4 字节</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>; <span class="comment">// 8 字节</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 2 字节</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// 1 字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引用数据类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Java 的基本数据类型都有对应的包装类，包装类是引用数据类型，它们的值可以为 null，而基本数据类型的值不能为 null。最好避免使用浮点数进行比较，因为浮点数的精度有限，可能会出现精度丢失的情况。</p>
</blockquote>
<h3 id="类型转换">类型转换</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeConversion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动类型转换</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> f;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制类型转换</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> (<span class="type">float</span>) d1;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> (<span class="type">long</span>) f1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> (<span class="type">int</span>) l1;</span><br><span class="line">        <span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> (<span class="type">short</span>) i1;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> (<span class="type">byte</span>) s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>自动类型转换是指从小范围到大范围的转换，例如：byte 转 short、short 转 int、int 转 long、long 转 float、float 转 double。</p>
</li>
<li class="lvl-2">
<p>强制类型转换是指从大范围到小范围的转换，例如：double 转 float、float 转 long、long 转 int、int 转 short、short 转 byte。</p>
</li>
<li class="lvl-2">
<p>强制类型转换可能会导致精度丢失，例如：double 转 float、float 转 long。</p>
</li>
<li class="lvl-2">
<p>强制类型转换可能会导致数据溢出，例如：long 转 int、int 转 short、short 转 byte。</p>
</li>
<li class="lvl-2">
<p>不能对布尔类型进行类型转换。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记10</title>
    <url>/2023/05/29/1/</url>
    <content><![CDATA[<h2 id="异常">异常</h2>
<h2 id="异常的概念">异常的概念</h2>
<p>异常是程序在执行过程中出现的错误，异常是程序运行时出现的错误，与语法错误不同，异常不会在编译时出现，而是在运行时出现。</p>
<p>异常的分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Error：错误，是程序无法处理的错误，表示运行应用程序中较严重问题，如系统崩溃、虚拟机错误、内存溢出等，这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</p>
</li>
<li class="lvl-2">
<p>Exception：异常，是程序本身可以处理的异常，表示程序运行过程中出现的问题，可以使用 try…catch…finally 语句进行处理。</p>
</li>
</ul>
<h2 id="异常的处理">异常的处理</h2>
<p>异常处理的方式有两种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 try…catch…finally 语句进行处理</p>
</li>
<li class="lvl-2">
<p>使用 throws 关键字声明异常，将异常抛给调用者进行处理</p>
</li>
</ul>
<h3 id="try…catch…finally-语句">try…catch…finally 语句</h3>
<p>try…catch…finally 语句用于捕获异常，try 语句块用于捕获异常，catch 语句块用于处理异常，finally 语句块用于释放资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinallyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除数不能为0&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally语句块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="throws-关键字">throws 关键字</h3>
<p>throws 关键字用于声明异常，将异常抛给调用者进行处理。</p>
<blockquote>
<p>throws 与 throw 的区别：throws 用于声明异常，throw 用于抛出异常。但是 throws 与 throw 的使用方式相似，都是后面跟异常类的对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrowsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ThrowsTest</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThrowsTest</span>();</span><br><span class="line">        tt.test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;抛出异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义异常">自定义异常</h2>
<p>自定义异常类需要继承 Exception 类或者 RuntimeException 类。</p>
<p>自定义异常步骤</p>
<ol>
<li class="lvl-3">
<p>创建一个自定义异常类，继承 Exception 类或者 RuntimeException 类</p>
</li>
<li class="lvl-3">
<p>在自定义异常类中提供两个构造器，一个无参构造器，一个带有 String 类型参数的构造器</p>
</li>
<li class="lvl-3">
<p>在自定义异常类中提供一个 serialVersionUID 静态常量</p>
</li>
<li class="lvl-3">
<p>在自定义异常类中重写 getMessage() 方法</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，MyException 类继承 Exception 类，提供了两个构造器，一个无参构造器，一个带有 String 类型参数的构造器，提供了一个 serialVersionUID 静态常量，重写了 getMessage() 方法。</p>
<h2 id="异常的处理总结">异常的处理总结</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>采用逻辑去合理规避异常，同时辅助 try…catch…finally 语句进行异常处理</p>
</li>
<li class="lvl-2">
<p>多重 catch 语句块，从小到大进行捕获，避免大范围的异常捕获，用catch(Exception)处理可能会遗漏异常</p>
</li>
<li class="lvl-2">
<p>对于不确定的代码，可以使用 try…catch…finally 语句进行异常处理</p>
</li>
<li class="lvl-2">
<p>尽量处理异常，不要直接printStackTrace()，可以使用日志框架进行日志记录</p>
</li>
<li class="lvl-2">
<p>finally 语句块中的代码一定会被执行，除非在 finally 语句块中使用了 System.exit(0) 退出程序</p>
</li>
</ul>
<h2 id="Java-基础-结束">Java 基础 结束</h2>
<p>终于学完了!接下来学些什么呢🤔</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记2</title>
    <url>/2023/05/14/1/</url>
    <content><![CDATA[<h2 id="基本语法">基本语法</h2>
<p>接上一篇文章，本文将继续介绍 Java 的基本语法。</p>
<h3 id="变量，常量与作用域">变量，常量与作用域</h3>
<h4 id="变量">变量</h4>
<p>变量是程序中最基本的存储单元，其值可以在程序运行过程中发生改变。Java 中的变量分为以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>局部变量</p>
</li>
<li class="lvl-2">
<p>类变量（静态变量）</p>
</li>
<li class="lvl-2">
<p>成员变量（非静态变量）</p>
</li>
</ul>
<hr>
<p>局部变量：在方法、构造方法或语句块中定义的变量称为局部变量。局部变量在方法、构造方法、语句块执行时创建，当它们执行完成后，变量将会被销毁。访问修饰符不能用于局部变量。</p>
<hr>
<p>类变量（静态变量）：在类中以 <code>static</code> 关键字声明，但必须在方法、构造方法和语句块之外。无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。静态变量除了被声明为常量外很少使用，因为它们的值在程序运行期间不能改变。</p>
<blockquote>
<p>除了基本类型，变量的默认值为 <code>null</code>。</p>
</blockquote>
<hr>
<p>成员变量（非静态变量）：在类中以 <code>public</code>、<code>protected</code> 或 <code>private</code> 来声明的变量称为成员变量。如果变量使用 <code>final</code> 关键字声明，那么它就是一个常量，常量在声明时必须被赋值，赋值后值不再改变。</p>
<h4 id="常量">常量</h4>
<p>常量在程序运行时不能被修改的量。在 Java 中使用 <code>final</code> 关键字来修饰常量，声明方式和变量类似，但是常量声明时必须被赋值，赋值后值不再改变。</p>
<blockquote>
<p>常量在声明时必须被赋值，赋值后值不再改变。<br>
<strong>常量名通常使用大写字母。</strong></p>
</blockquote>
<hr>
<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。static 关键字用来声明独立于对象的静态方法。<br>
final 关键字用来修饰类、方法和变量，final 修饰的类不能被继承，修饰的方法不能被重写，修饰的变量为常量，是不可修改的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 下面是声明常量的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BOXWIDTH</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TITLE</span> <span class="operator">=</span> <span class="string">&quot;Manager&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeValue</span><span class="params">()</span> &#123;</span><br><span class="line">        value = <span class="number">12</span>; <span class="comment">// 将输出一个错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="变量的命名规则">变量的命名规则</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>变量的命名可以包含字母、数字、下划线和美元符号，但变量名不能以数字开头。</p>
</li>
<li class="lvl-2">
<p>合法的变量名示例：<code>age</code>、<code>$salary</code>、<code>_value</code>、<code>__1_value</code>。</p>
</li>
<li class="lvl-2">
<p><strong>见名知意</strong>：变量，类名，方法名应该尽可能短，同时要能够体现变量的作用。</p>
</li>
<li class="lvl-2">
<p>大小写敏感：<code>age</code> 和 <code>Age</code> 是两个不同的变量。</p>
</li>
<li class="lvl-2">
<p><strong>驼峰命名法</strong>（局部变量和类成员变量）：<code>firstName</code>、<code>lastName</code>、<code>myAge</code>、<code>mySalary</code>。</p>
</li>
<li class="lvl-2">
<p>类名：首字母大写，如 <code>MyClass</code>。</p>
</li>
<li class="lvl-2">
<p>方法名：首字母小写，如 <code>myMethod()</code>。</p>
</li>
</ul>
<h3 id="逻辑运算符">逻辑运算符</h3>
<p>Java 语言支持逻辑运算符，以下假设变量 <code>A</code> 为 <code>true</code>，变量 <code>B</code> 为 <code>false</code>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">逻辑与运算符。如果两边的操作数都是 <code>true</code>，则条件为 <code>true</code>。</td>
<td style="text-align:center">(A &amp;&amp; B) 为 <code>false</code>。</td>
</tr>
<tr>
<td style="text-align:center">||</td>
<td style="text-align:center">逻辑或运算符。如果两边的操作数有一个 <code>true</code>，则条件为 <code>true</code>。</td>
<td style="text-align:center">(A || B) 为 <code>true</code>。</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code>。</td>
<td style="text-align:center">!(A &amp;&amp; B) 为 <code>true</code>。</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;a &amp;&amp; b = &quot;</span> + (a &amp;&amp; b));</span><br><span class="line">        System.out.println(<span class="string">&quot;a || b = &quot;</span> + (a || b));</span><br><span class="line">        System.out.println(<span class="string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 短路运算</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c &lt; <span class="number">4</span>) &amp;&amp; (c++ &lt; <span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;使用短路逻辑运算符的结果为 &quot;</span> + d);</span><br><span class="line">    System.out.println(<span class="string">&quot;c 的结果为 &quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，<code>c++ &lt; 10</code> 没有执行，因为第一个操作数为 <code>false</code>，所以整个表达式的值为 <code>false</code>，这种情况下，Java 编译器不会去执行第二个操作数。</p>
<h3 id="位运算符">位运算符</h3>
<p>Java 定义了位运算符，应用于整数类型（<code>byte</code>、<code>short</code>、<code>int</code> 和 <code>long</code>）的变量。位运算符作用在所有的位上，并且按位运算。假设 <code>A</code> 的值为 <code>60</code>，<code>B</code> 的值为 <code>13</code>，它们的二进制格式表示将如下：</p>
<blockquote>
<p>位运算符作用于位，并逐位执行操作。&amp;、| 和 ^ 的真值表如下所示：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">A|B = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">A^B = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~A = <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">如果相对应位都是 <code>1</code>，则结果为 <code>1</code>，否则为 <code>0</code>。</td>
<td style="text-align:center">(A &amp; B) 将得到 <code>12</code>，即为 <code>0000 1100</code></td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">如果相对应位都是 <code>0</code>，则结果为 <code>0</code>，否则为 <code>1</code>。</td>
<td style="text-align:center">(A | B) 将得到 <code>61</code>，即为 <code>0011 1101</code></td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">如果相对应位值相同，则结果为 <code>0</code>，否则为 <code>1</code>。</td>
<td style="text-align:center">(A ^ B) 将得到 <code>49</code>，即为 <code>0011 0001</code></td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">按位取反运算符翻转操作数的每一位，即 <code>0</code> 变成 <code>1</code>，<code>1</code> 变成 <code>0</code>。</td>
<td style="text-align:center">(~A ) 将得到 <code>-61</code>，即为 <code>1100 0011</code>，一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td style="text-align:center"><code>A &lt;&lt; 2</code> 将得到 <code>240</code>，即为 <code>1111 0000</code></td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td style="text-align:center"><code>A &gt;&gt; 2</code> 将得到 <code>15</code>，即为 <code>1111</code></td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;&gt;</td>
<td style="text-align:center">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td style="text-align:center"><code>A &gt;&gt;&gt; 2</code> 将得到 <code>15</code>，即为 <code>0000 1111</code></td>
</tr>
</tbody>
</table>
<p>左移运算符 <code>&lt;&lt;</code> 的结果是把操作数的所有位都左移指定的次数。左移 <code>n</code> 位就相当于乘以 <code>2</code> 的 <code>n</code> 次方。右移运算符 <code>&gt;&gt;</code> 是 <code>&lt;&lt;</code> 运算符的逆运算。右移 <code>n</code> 位就相当于除以 <code>2</code> 的 <code>n</code> 次方。位移运算符 <code>&gt;&gt;&gt;</code> 是 <code>&gt;&gt;</code> 运算符的逆运算，但它使用的是 <code>0</code> 来填充左侧空位。</p>
<h3 id="三元运算符">三元运算符</h3>
<p>三元运算符需要三个操作数，格式为：<code>变量 x = (表达式) ? 值1 : 值2;</code>。如果表达式的值为 <code>true</code>，则返回值1，否则返回值2。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;b 的值为 &quot;</span> + b);</span><br><span class="line">        <span class="comment">// 输出结果为 30</span></span><br><span class="line"></span><br><span class="line">        b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;b 的值为 &quot;</span> + b);</span><br><span class="line">        <span class="comment">// 输出结果为 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串三元运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为 <code>true</code>。</p>
<p>字符串连接运算符 <code>+</code> 和 <code>+=</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        System.out.println(a + b + c);</span><br><span class="line">        <span class="comment">// 输出结果为 60</span></span><br><span class="line">        System.out.println(a + b + <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出结果为 30Hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span> + a + b);</span><br><span class="line">        <span class="comment">// 输出结果为 Hello1020</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="包">包</h2>
<p>包（package）用于管理 Java 类，类似于文件夹，用于管理文件。包名与文件夹名相同，包名使用小写字母，文件夹名使用小写字母或下划线。包名的命名规范为：<code>com.companyname.project.module</code>。</p>
<p><code>包</code>区别于文件夹的地方在于包中可以包含子包，子包中可以包含更多的子包，但是文件夹中不能包含子文件夹。下面，定义一个包名为 <code>com.runoob.test</code> 的包，包中包含一个 <code>Test</code> 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pupAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        age = age + <span class="number">7</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗的年龄是: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.pupAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>导入包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用通配符导入</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure>
<h2 id="JavaDoc">JavaDoc</h2>
<p>JavaDoc 是一个 Java 文档生成工具，可以从源代码中的文档注释中抽取出有用的信息，并生成一个 HTML 文档。JavaDoc 生成的 HTML 文档包含了类、方法、字段等的描述，以及相关的注释。</p>
<p><strong>JavaDoc 标签</strong><br>
JavaDoc 标签是以 <code>@</code> 开头的，如 <code>@param</code>、<code>@return</code> 等。常见的 JavaDoc 标签如下所示：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@param</code>：说明方法的参数。</p>
</li>
<li class="lvl-2">
<p><code>@return</code>：说明方法的返回值。</p>
</li>
<li class="lvl-2">
<p><code>@exception</code>：说明方法可能抛出的异常。</p>
</li>
<li class="lvl-2">
<p><code>@version</code>：说明类的版本。</p>
</li>
<li class="lvl-2">
<p><code>@author</code>：作者</p>
</li>
<li class="lvl-2">
<p><code>@since</code>：从哪个版本开始有的。</p>
</li>
<li class="lvl-2">
<p><code>@see</code>：参考转向，也就是相关主题。</p>
</li>
<li class="lvl-2">
<p><code>@deprecated</code>：说明类、方法已经不建议使用。</p>
</li>
<li class="lvl-2">
<p><code>@serial</code>：说明一个序列化属性。</p>
</li>
<li class="lvl-2">
<p><code>@throws</code>：和 <code>@exception</code> 相同。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个类演示了文档注释</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 2021-05-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法演示了文档注释</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> IOException 如果输入输出有问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.io.OutputStream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmEtZG9jdW1lbnRhdGlvbi5odG1s">JavaDoc 标签参考手册<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy9hcGkv">JDK帮助文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>生成 JavaDoc 文档：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javadoc -d doc Test.java</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记3</title>
    <url>/2023/05/16/1/</url>
    <content><![CDATA[<h2 id="流程控制">流程控制</h2>
<p>太简单，故只记录部分内容</p>
<h3 id="Part-I">Part.I</h3>
<hr>
<p>增强for循环，是for循环的一种简化形式，专门用来遍历数组和集合的。其语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 数组或者集合对象)&#123;</span><br><span class="line">    使用变量即可，该变量就是元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g. 遍历数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>break和continue的区别</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>break: 跳出本层循环</p>
</li>
<li class="lvl-2">
<p>continue: 跳出本次循环，继续下次循环</p>
</li>
</ul>
<p>e.g. break</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当i == 3时，跳出循环</p>
<p>e.g. continue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当i == 3时，跳出本次循环，继续下次循环</p>
<hr>
<p>goto</p>
<p>Java中没有goto语句，但是有时候我们需要使用goto语句，比如跳出多层循环。这时候我们可以使用带标签的break语句来模拟goto语句。</p>
<p><strong>不建议使用，因为会造成程序的混乱。</strong></p>
<p>带标签的break语句格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">标签名: 语句;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        w:<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span> w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>标签名可以随便取，但是必须是合法的标识符。</p>
<hr>
<h3 id="Part-II">Part.II</h3>
<hr>
<p>打印等腰三角形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">5</span> - i; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= <span class="number">2</span> * i - <span class="number">1</span>; k++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">  *****</span><br><span class="line"> *******</span><br><span class="line">*********</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一行：5个空格，1个星号</p>
</li>
<li class="lvl-2">
<p>第二行：4个空格，3个星号<br>
…</p>
</li>
<li class="lvl-2">
<p>第五行：0个空格，9个星号</p>
</li>
</ul>
<p>在以上代码中，第一个for循环控制行数，第二个for循环控制空格数，第三个for循环控制星号数。</p>
<hr>
<p>debug调试</p>
<p>在程序运行过程中，如果出现了异常，那么程序会终止执行，这时候就需要使用debug调试程序。通常情况下，我们会在出现异常的那一行代码前面加一个断点，然后使用debug模式运行程序，这样程序就会在断点处停止，然后我们就可以使用F8键逐行执行程序，查看程序的执行过程。即</p>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记4</title>
    <url>/2023/05/18/2/</url>
    <content><![CDATA[<h2 id="Java-方法">Java 方法</h2>
<h3 id="什么是方法">什么是方法</h3>
<p>方法是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集。方法是一种功能的抽象，它们用来解决一类问题，而不是解决某个特定的问题。</p>
<h3 id="方法的定义格式">方法的定义格式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名<span class="number">1</span>, 参数类型 参数名<span class="number">2</span>, ...) &#123;</span><br><span class="line">    方法体语句;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>修饰符：public static</p>
</li>
<li class="lvl-2">
<p>返回值类型：方法最终产生的数据结果的数据类型</p>
</li>
<li class="lvl-2">
<p>方法名：符合命名规则即可</p>
</li>
<li class="lvl-2">
<p>参数类型：产生数据结果需要的未知数据，可以有多个，也可以没有</p>
</li>
<li class="lvl-2">
<p>参数名：参数变量名，符合命名规则即可</p>
</li>
<li class="lvl-2">
<p>方法体语句：完成功能的代码</p>
</li>
<li class="lvl-2">
<p>return：结束方法，将返回值带给调用者</p>
</li>
<li class="lvl-2">
<p>返回值：将方法执行后的结果带给调用者</p>
</li>
</ul>
<p>e.g. 定义一个方法，用于打印两个数中的较大数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法的调用格式">方法的调用格式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名(参数);</span><br></pre></td></tr></table></figure>
<p>e.g. 调用getMax方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> getMax(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法的注意事项">方法的注意事项</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>方法应该定义在类中，但不能在方法中再定义方法</p>
</li>
<li class="lvl-2">
<p>方法定义的前后顺序无所谓</p>
</li>
<li class="lvl-2">
<p>方法定义之后不会执行，如果希望执行，一定要调用：单独调用、赋值调用、打印调用</p>
</li>
</ul>
<h3 id="方法的重载">方法的重载</h3>
<p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过方法重载，可以让功能更加强大，但是，调用起来更加简单。</p>
<p>方法重载规则</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>方法名必须相同</p>
</li>
<li class="lvl-2">
<p>参数列表必须不同</p>
<ul class="lvl-2">
<li class="lvl-4">个数不同</li>
<li class="lvl-4">类型不同</li>
<li class="lvl-4">顺序不同</li>
</ul>
</li>
<li class="lvl-2">
<p>方法的返回值类型可以相同也可以不同</p>
</li>
<li class="lvl-2">
<p>仅仅返回值类型不同，不足以成为方法的重载</p>
</li>
</ul>
<h3 id="命令行传参">命令行传参</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLineDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(args.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序可以接收命令行传递的参数，但是需要在命令行中执行，不能在IDEA中执行。</p>
<h3 id="方法的递归调用">方法的递归调用</h3>
<p>方法自己调用自己，被称为方法的递归调用。</p>
<p>递归调用虽然有点疯狂，但是递归调用解决问题非常的简洁。</p>
<p>递归调用的使用前提：当调用方法的时候，方法的主体不变，每次调用方法的参数不同，可以使用递归调用。</p>
<p>递归调用的使用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) &#123;</span><br><span class="line">    <span class="keyword">if</span>(递归结束的条件) &#123;</span><br><span class="line">        结束递归</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        继续递归</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归有可能导致栈内存溢出，必须防止递归的次数过多。因此，递归有两个限定条件：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>递归的次数不能太多</p>
</li>
<li class="lvl-2">
<p>递归的目的要明确</p>
</li>
</ul>
<p>在递归的结构中，有两个部分：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>递归头：递归的结束条件，不再调用方法，返回的是一个固定值</p>
</li>
<li class="lvl-2">
<p>递归体：方法继续调用，计算更复杂的结果，每次调用方法的参数不同</p>
</li>
</ul>
<p>e.g. 递归求阶乘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getFactorial(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFactorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n * getFactorial(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，递归的次数是 <code>5</code> 次，递归的目的是求阶乘，递归的头是 <code>n == 1</code> ，递归的体是 <code>n * getFactorial(n - 1)</code> 。</p>
<p>递归的弊端：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>递归效率低</p>
</li>
<li class="lvl-2">
<p>递归次数过多容易导致栈内存溢出</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记5</title>
    <url>/2023/05/22/2/</url>
    <content><![CDATA[<h2 id="数组">数组</h2>
<h3 id="声明数组-创建数组">声明数组&amp;创建数组</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明并创建一个int类型的数组</span></span><br><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr; <span class="comment">// 声明一个int类型的数组</span></span><br><span class="line"></span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">// 创建一个长度为3的int类型的数组</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line">arr.length;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数组的长度一旦确定，就不能修改。数组索引从 <code>0</code> 开始，到 <code>数组长度-1</code> 结束。</p>
</blockquote>
<h3 id="简单介绍Java内存">简单介绍Java内存</h3>
<p>Java内存划分为5个部分：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>栈内存：存储的都是局部变量，方法的运行一定要在栈中运行</p>
</li>
<li class="lvl-2">
<p>堆内存：存储的都是对象或者是数组，凡是 <code>new</code> 出来的东西，都在堆中</p>
</li>
<li class="lvl-2">
<p>方法区：存储的是.class相关信息，包含方法的信息</p>
</li>
<li class="lvl-2">
<p>本地方法区：与操作系统相关</p>
</li>
<li class="lvl-2">
<p>寄存器：与CPU相关</p>
</li>
</ul>
<p>Java内存</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>堆</p>
<ul class="lvl-2">
<li class="lvl-4">存储的都是对象或者是数组，凡是 <code>new</code> 出来的东西，都在堆中</li>
<li class="lvl-4">特点：每一个实体都有首地址值</li>
</ul>
</li>
<li class="lvl-2">
<p>栈</p>
<ul class="lvl-2">
<li class="lvl-4">存储的都是局部变量，方法的运行一定要在栈中运行</li>
<li class="lvl-4">特点：每一个方法运行的时候，都会给该方法分配一个独立的内存空间，该空间中存储了该方法的局部变量信息</li>
</ul>
</li>
<li class="lvl-2">
<p>方法区</p>
<ul class="lvl-2">
<li class="lvl-4">存储的是.class相关信息，包含方法的信息</li>
<li class="lvl-4">特点：所有的对象都存储在堆中，所有的对象共享一个.class文件</li>
</ul>
</li>
</ul>
<h3 id="数组的初始化">数组的初始化</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="数组的遍历">数组的遍历</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组的反转">数组的反转</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反转数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>, max = arr.length - <span class="number">1</span>; min &lt; max; min++, max--) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[min];</span><br><span class="line">    arr[min] = arr[max];</span><br><span class="line">    arr[max] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组的查表法">数组的查表法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查表法</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组拓展">数组拓展</h2>
<h3 id="java-util-Arrays">java.util.Arrays</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Arrays.toString()</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(arr);</span><br><span class="line">System.out.println(str); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Arrays.sort()</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Arrays.equals()</span></span><br><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Arrays.equals(arr1, arr2);</span><br><span class="line">System.out.println(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Arrays.fill()</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">Arrays.fill(arr, <span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">// [10, 10, 10]</span></span><br></pre></td></tr></table></figure>
<h3 id="冒泡排序">冒泡排序</h3>
<p>数组排序有很多种方式，其中冒泡排序是一种常用的排序方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>冒泡排序是一种效率很低的排序方式，因为它每次都要进行多次比较和交换，但是它的代码量少，容易理解。</p>
<p>冒泡排序的优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序的优化</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>优化后的冒泡排序，当一次排序中没有发生交换时，说明数组已经有序，就不需要再进行排序了。优化的原理是：如果一次排序中没有发生交换，说明数组已经有序，就不需要再进行排序了。其中，<code>flag</code> 用来记录是否发生了交换，如果没有发生交换，就将 <code>flag</code> 设置为 <code>false</code>，如果发生了交换，就将 <code>flag</code> 设置为 <code>true</code>。</p>
<h3 id="稀疏数组">稀疏数组</h3>
<p>稀疏数组是一种压缩数组的方式，当一个数组中大部分元素为同一个值时，可以使用稀疏数组来保存该数组。稀疏数组和数据结构中的 <code>Map</code> 有点类似，它的每一行都是一个 <code>Map</code>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>当一个数组中大部分元素为同一个值时，可以使用稀疏数组来保存该数组。</p>
</li>
<li class="lvl-2">
<p>稀疏数组的处理方法是：</p>
<ul class="lvl-2">
<li class="lvl-4">记录数组一共有几行几列，有多少个不同的值</li>
<li class="lvl-4">把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 稀疏数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;、</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出原始数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] row : arr) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> data : row) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将二维数组转换为稀疏数组</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[][] sparseArr = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = arr.length;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = arr[<span class="number">0</span>].length;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">            sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">            sparseArr[count][<span class="number">2</span>] = arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出稀疏数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] row : sparseArr) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> data : row) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将稀疏数组转换为二维数组</span></span><br><span class="line"><span class="type">int</span>[][] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">    arr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出转换后的二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] row : arr2) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> data : row) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于稀疏数组，第一行记录了原始数组的行数、列数和有效值的个数，后面的行记录了有效值的行、列和值。如下表所示：</p>
<table>
<thead>
<tr>
<th>row</th>
<th>col</th>
<th>val</th>
</tr>
</thead>
<tbody>
<tr>
<td>11</td>
<td>11</td>
<td>2</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>2</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记6</title>
    <url>/2023/05/23/1/</url>
    <content><![CDATA[<h2 id="面向对象·一-Object-Oriented-Part-I">面向对象·一 - Object Oriented Part I</h2>
<p>面向对象是一种思想，是一种设计思想，是一种编程思想。面向对象编程的<strong>本质</strong>是将复杂的事情简单化，将程序员从执行者转换为指挥者。<strong>以类的方式组织代码，以对象的方式组织数据</strong>。</p>
<h3 id="面向对象的三大特征">面向对象的三大特征</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>封装</p>
<blockquote>
<p>隐藏对象的属性和实现细节，仅对外提供公共访问方式。</p>
</blockquote>
</li>
<li class="lvl-2">
<p>继承</p>
<blockquote>
<p>使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。</p>
</blockquote>
</li>
<li class="lvl-2">
<p>多态</p>
<blockquote>
<p>同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。</p>
</blockquote>
</li>
</ul>
<h3 id="区别于面向过程">区别于面向过程</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。</p>
<ul class="lvl-2">
<li class="lvl-4">优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发，性能是最重要的因素。</li>
<li class="lvl-4">缺点：没有面向对象易维护、易复用、易扩展</li>
</ul>
</li>
<li class="lvl-2">
<p>面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p>
<ul class="lvl-2">
<li class="lvl-4">优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</li>
<li class="lvl-4">缺点：性能比面向过程低</li>
</ul>
</li>
</ul>
<h3 id="回顾方法">回顾方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符 返回值类型 方法名(参数类型 参数名) &#123;</span></span><br><span class="line"><span class="comment">        方法体</span></span><br><span class="line"><span class="comment">        return 返回值;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;你好，我是&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">Student.say();</span><br></pre></td></tr></table></figure>
<p>非静态方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个非静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.say();</span><br></pre></td></tr></table></figure>
<p>静态方法中不能直接访问非静态变量和非静态方法，但是非静态方法可以直接访问静态变量和静态方法。在main方法中，是静态的，所以只能调用静态方法。</p>
<hr>
<p><s>作为拓展</s></p>
<p>为什么要使用静态方法？</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>静态方法不依赖于对象，即使没有创建对象也可以调用</p>
</li>
<li class="lvl-2">
<p>静态方法只能访问静态成员变量和静态成员方法</p>
</li>
<li class="lvl-2">
<p>静态方法中不能使用this、super关键字</p>
</li>
<li class="lvl-2">
<p>静态方法中不能直接访问非静态成员，可以通过对象来访问非静态成员</p>
</li>
<li class="lvl-2">
<p>静态方法中不能使用非静态方法，可以通过对象来访问非静态方法</p>
</li>
</ul>
<p>什么时候使用静态方法？什么时候使用非静态方法？</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果方法内部没有访问非静态成员变量，那么该方法可以定义为静态方法</p>
</li>
<li class="lvl-2">
<p>如果方法内部访问了非静态成员变量，那么该方法必须定义为非静态方法</p>
</li>
</ul>
<hr>
<h3 id="类和对象的创建">类和对象的创建</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 类名 对象名 = new 类名();</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        person.sayHello(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造方法">构造方法</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>构造方法的作用</p>
<ul class="lvl-2">
<li class="lvl-4">创建对象</li>
<li class="lvl-4">初始化对象的属性</li>
</ul>
</li>
<li class="lvl-2">
<p>构造方法的格式</p>
<ul class="lvl-2">
<li class="lvl-4">修饰符 类名(参数列表) {}</li>
</ul>
</li>
<li class="lvl-2">
<p>构造方法注意事项</p>
<ul class="lvl-2">
<li class="lvl-4">如果没有定义构造方法，系统会默认给出无参构造方法</li>
<li class="lvl-4">如果定义了构造方法，系统不会再提供默认的无参构造方法</li>
<li class="lvl-4">构造方法也是可以重载的</li>
</ul>
</li>
<li class="lvl-2">
<p>构造方法的重载</p>
<ul class="lvl-2">
<li class="lvl-4">一个类中可以定义多个构造方法，多个构造方法之间构成重载关系</li>
<li class="lvl-4">构造方法重载的好处：方便创建对象的同时，初始化对象的属性</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;你好，我是&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>构造器</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>构造器是一种特殊的方法，用来初始化对象</p>
</li>
<li class="lvl-2">
<p>构造器的名称必须与类名相同</p>
</li>
<li class="lvl-2">
<p>构造器没有返回值，也不需要void</p>
</li>
<li class="lvl-2">
<p>如果没有定义构造器，系统会默认提供一个无参构造器</p>
</li>
<li class="lvl-2">
<p>构造器可以重载</p>
</li>
</ul>
<hr>
<p>引用类型</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>引用类型的变量非常类似于C/C++的指针，所有的引用类型默认值都是null</p>
</li>
<li class="lvl-2">
<p>一个引用变量可以用来引用任何与之兼容的类型</p>
</li>
<li class="lvl-2">
<p>例：父类的引用可以指向子类的对象，但是子类的引用不能指向父类的对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 类名 对象名 = new 类名();</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        person.sayHello(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        person1.sayHello(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>属性</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>属性是一个类的组成部分，是一个对象的状态信息</p>
</li>
<li class="lvl-2">
<p>属性也被称为成员变量</p>
</li>
<li class="lvl-2">
<p>属性的定义格式：数据类型 属性名 = 初始值;</p>
</li>
<li class="lvl-2">
<p>属性的访问格式：对象名.属性名</p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记7</title>
    <url>/2023/05/25/1/</url>
    <content><![CDATA[<h2 id="面向对象·二-Object-Oriented-Part-II">面向对象·二 - Object Oriented Part II</h2>
<h2 id="封装">封装</h2>
<p>封装是面向对象的特征之一，是对象和类概念的主要特性。</p>
<p>封装，是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>封装的目的：</p>
<ul class="lvl-2">
<li class="lvl-4">1.将变化隔离</li>
<li class="lvl-4">2.便于使用</li>
<li class="lvl-4">3.提高重用性</li>
<li class="lvl-4">4.提高安全性</li>
</ul>
</li>
<li class="lvl-2">
<p>封装的原则：</p>
<ul class="lvl-2">
<li class="lvl-4">将不需要对外提供的内容都隐藏起来。</li>
<li class="lvl-4">把属性都隐藏，提供公共方法对其访问。</li>
<li class="lvl-4">构造方法需要对其进行初始化操作。</li>
</ul>
</li>
<li class="lvl-2">
<p>封装的步骤：</p>
<ul class="lvl-2">
<li class="lvl-4">1.修改属性的可见性来限制对属性的访问，一般设为私有。</li>
<li class="lvl-4">2.对每个值属性提供对外的公共方法访问，也就是创建一对赋值和取值方法。</li>
<li class="lvl-4">3.在赋值方法中，加入属性值合法性的验证。</li>
</ul>
</li>
<li class="lvl-2">
<p>封装的实现：</p>
<ul class="lvl-2">
<li class="lvl-4">1.属性私有化</li>
<li class="lvl-4">2.提供对外的公共方法</li>
<li class="lvl-4">3.在方法中加入逻辑判断</li>
</ul>
</li>
<li class="lvl-2">
<p>封装的优点：</p>
<ul class="lvl-2">
<li class="lvl-4">1.<strong>提高了程序的安全性。</strong></li>
<li class="lvl-4">2.提高了代码的复用性。</li>
<li class="lvl-4">3.隐藏了实现细节。</li>
</ul>
</li>
</ul>
<p>以下是一个封装的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 属性私有</span></span><br><span class="line">    <span class="comment">// private 私有的 与 public 公开的 相对</span></span><br><span class="line">    <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 身份证号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; </span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">// 提供一些public 的 get set 方法</span></span><br><span class="line">    <span class="comment">// get 获得这个数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set 给这个数据设置值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get set 快捷键 alt + insert</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">120</span> || age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你给的年龄有问题&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo01.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        student.age = <span class="number">18</span>;</span><br><span class="line">        student.id = <span class="number">1</span>;</span><br><span class="line">        System.out.println(student.name); <span class="comment">// 输出张三</span></span><br><span class="line"></span><br><span class="line">        student.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(student.getName()); <span class="comment">// 输出李四</span></span><br><span class="line"></span><br><span class="line">        student.setAge(<span class="number">200</span>);</span><br><span class="line">        System.out.println(student.getAge()); <span class="comment">// 输出你给的年龄有问题 18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="继承">继承</h2>
<p>继承是面向对象的另一个特征，是指一个类可以派生出子类，而子类又可以派生出孙类，子类拥有父类非 private 的属性和方法。</p>
<p>继承的本质是<strong>代码的复用</strong>。<br>
java 中的继承是单继承，一个类只能有一个父类，但是可以多重继承，A 继承 B，B 继承 C，C 继承 D。</p>
<p>继承的特点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>子类拥有父类非 private 的属性和方法。</p>
</li>
<li class="lvl-2">
<p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</p>
</li>
<li class="lvl-2">
<p>子类可以用自己的方式实现父类的方法。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是人类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo02.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        person.age = <span class="number">18</span>;</span><br><span class="line">        person.say(); <span class="comment">// 输出我是人类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        student.age = <span class="number">20</span>;</span><br><span class="line">        student.say(); <span class="comment">// 输出我是人类</span></span><br><span class="line">        student.study(); <span class="comment">// 输出我在学习</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java 中所有的类都直接或者间接的继承自 Object 类，Object 类是类层次结构的根类，每个类都使用 Object 作为超类。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记8</title>
    <url>/2023/05/27/1/</url>
    <content><![CDATA[<h2 id="面向对象·三-Object-Oriented-Part-III">面向对象·三 - Object Oriented Part III</h2>
<h2 id="Super">Super</h2>
<p>super 关键字，可以用来访问父类内容，而 this 关键字，可以用来访问本类内容。用法也有三种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>1.在本类的成员方法中，访问本类的成员变量。</p>
</li>
<li class="lvl-2">
<p>2.在本类的成员方法中，访问本类的另一个成员方法。</p>
</li>
<li class="lvl-2">
<p>3.在本类的构造方法中，访问本类的另一个构造方法。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo01.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// super</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.say();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是人类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>super:</p>
<ol>
<li class="lvl-3">
<p>在子类的成员方法中，访问父类的成员变量。</p>
</li>
<li class="lvl-3">
<p>在子类的成员方法中，访问父类的另一个成员方法。</p>
</li>
<li class="lvl-3">
<p>和 this 一样，super 也不能出现在静态方法中。并且 super 和 this 不能同时出现在一个方法中。</p>
</li>
</ol>
<p>this: 本身就代表当前对象。所以谁调用，就代表谁。<br>
super: 代表父类对象。所以谁继承，就代表谁。</p>
<hr>
<h2 id="方法重写">方法重写</h2>
<p>方法重写：子类中出现了和父类一模一样的方法声明。方法重载：本类中出现的方法名一样，参数列表不同的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo01.A;</span><br><span class="line"><span class="keyword">import</span> com.oop.demo01.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// 重写父类的方法</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 注解：这个方法是重写父类的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>重写的注意事项：</p>
<ol>
<li class="lvl-3">
<p>必须保证父子类之间方法的名称相同，参数列表也相同。<br>
@Override：写在方法前面，用来检测是不是有效的正确覆盖重写。这个注解就算不写，只要满足要求，也是正确的方法重写。</p>
</li>
<li class="lvl-3">
<p>子类方法的返回值必须小于等于父类方法的返回值范围。小扩展提示：java.lang.Object 类是所有类的公共最高父类（祖宗类），java.lang.String 就是 Object 的子类。</p>
</li>
<li class="lvl-3">
<p>子类方法的权限必须大于等于父类方法的权限修饰符。小扩展提示：public &gt; protected &gt; (default) &gt; private<br>
备注：(default) 不是关键字 default，而是什么都不写，留空。</p>
</li>
<li class="lvl-3">
<p>子类方法的异常必须小于等于父类方法的异常范围。小扩展提示：异常的讲解，稍后学习。</p>
</li>
</ol>
<hr>
<p>为什么要重写？</p>
<ol>
<li class="lvl-3">
<p>当子类需要父类的功能，而功能主体子类有自己特有的内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容。</p>
</li>
<li class="lvl-3">
<p>定义的类的时候，子类的方法要和父类的方法名一样，但是有时候，子类虽然需要父类的功能，但是却不需要父类的方法。这个时候，就可以将父类的方法，覆盖重写。</p>
</li>
</ol>
<hr>
<h2 id="多态">多态</h2>
<p>多态：可以理解为事物存在的多种体现形态。在程序中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>父类引用指向子类对象。</p>
</li>
<li class="lvl-2">
<p>接口引用指向实现类对象。</p>
</li>
</ul>
<p>多态是方法的多态，属性没有多态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo01.Animal;</span><br><span class="line"><span class="keyword">import</span> com.oop.demo01.Cat;</span><br><span class="line"><span class="keyword">import</span> com.oop.demo01.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.shout();</span><br><span class="line">        animal = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        animal.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;叫了一声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵喵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪汪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：在以上代码中，Animal animal = new Cat(); 这句话，animal 是父类的引用，指向了子类的对象。这就是多态。</p>
<hr>
<p>多态的前提和体现：</p>
<ol>
<li class="lvl-3">
<p>有继承/实现关系。</p>
</li>
<li class="lvl-3">
<p>有方法重写。</p>
</li>
<li class="lvl-3">
<p>有父类引用指向子类对象。</p>
</li>
</ol>
<hr>
<p>多态的好处：</p>
<ol>
<li class="lvl-3">
<p>提高了代码的维护性（继承保证）</p>
</li>
<li class="lvl-3">
<p>提高了代码的扩展性（由多态保证）</p>
</li>
<li class="lvl-3">
<p>多态的出现，是程序设计的一个重要目标。</p>
</li>
</ol>
<hr>
<p>注意事项：</p>
<ol>
<li class="lvl-3">
<p>多态中，成员方法的访问规则是：看new 的是谁，就优先用谁，没有则向上找。</p>
</li>
<li class="lvl-3">
<p>多态中，成员变量的访问规则是：无论编译和运行，都看左边（引用型变量）。</p>
</li>
<li class="lvl-3">
<p>多态中，静态成员方法的访问规则是：无论编译和运行，都看左边。</p>
</li>
</ol>
<hr>
<p>不能重写的方法：</p>
<ol>
<li class="lvl-3">
<p>final 方法。</p>
</li>
<li class="lvl-3">
<p>静态方法。</p>
</li>
<li class="lvl-3">
<p>private 等子类中不可见方法。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记9</title>
    <url>/2023/05/28/1/</url>
    <content><![CDATA[<h2 id="面向对象·四-Object-Oriented-Part-IV">面向对象·四 - Object Oriented Part IV</h2>
<h2 id="instanceof-与-类型转换">instanceof 与 类型转换</h2>
<p>instanceof 运算符用于判断一个引用类型变量所引用的对象是否是一个类（或子类）的实例，即是否继承于该类（或子类）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceofTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串是否是Object类的实例：&quot;</span> + (hello <span class="keyword">instanceof</span> Object));</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串是否是String类的实例：&quot;</span> + (hello <span class="keyword">instanceof</span> String));</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串是否是Math类的实例：&quot;</span> + (hello <span class="keyword">instanceof</span> Math));</span><br><span class="line">        <span class="comment">// String实现了Comparable接口，所以返回true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;字符串是否是Comparable接口的实例：&quot;</span> + (hello <span class="keyword">instanceof</span> Comparable));</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        <span class="comment">// String类既不是Math类，也不是Math类的父类，所以下面代码编译错误</span></span><br><span class="line">        <span class="comment">// System.out.println(&quot;字符串是否是Math类的实例：&quot; + (a instanceof Math));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>简单来说，instanceof 的作用就是判断一个对象是否是一个类的实例，或者判断一个对象是否是该类及其子类的实例。instanceof 的判断原理是通过判断对象是否是该类的实例，或者判断对象是否是该类父类的实例，或者判断对象是否是该类父类的父类的实例，直到判断到该类的父类为止。</p>
<hr>
<p>在进行强制类型转换之前，先使用 instanceof 运算符进行判断，避免 ClassCastException 异常的发生。</p>
<p>在强制转换后，可能丢失精度，子类转换为父类不会丢失精度，父类转换为子类会丢失精度。</p>
<hr>
<h2 id="static-修饰符">static 修饰符</h2>
<p>static 修饰符用来修饰成员变量和成员方法，static 修饰的成员变量称为静态变量，static 修饰的成员方法称为静态方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个非静态的内部类，是一个空类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InClass</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 外部类的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 下面代码引发编译异常，因为静态成员（main方法）无法访问非静态成员（InClass类）</span></span><br><span class="line">        <span class="comment">// new InClass();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 外部类的实例方法可以访问内部类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 下面代码引发编译异常，因为静态成员（main方法）无法访问非静态成员（test2方法）</span></span><br><span class="line">        <span class="comment">// test2();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>静态的成员变量和成员方法都可以直接通过类名来访问，不需要创建类的实例，但是静态的成员方法只能访问静态的成员变量和静态的成员方法，不能访问非静态的成员变量和成员方法。</p>
<hr>
<p>多线程中，静态变量和静态方法是多个线程共享的，非静态变量和非静态方法是多个线程各自拥有的。</p>
<hr>
<p>静态代码块是在类加载时执行的，而且只执行一次，通常用来初始化静态变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名代码块</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态初始化块</span></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 静态初始化块</span></span><br><span class="line"><span class="comment">// 普通初始化块</span></span><br><span class="line"><span class="comment">// 构造方法</span></span><br></pre></td></tr></table></figure>
<p>生命周期：静态变量和静态方法在类加载时创建，类卸载时销毁，生命周期最长，实例变量和实例方法在类实例化时创建，类实例化时销毁，生命周期中等，局部变量和局部方法在方法调用时创建，方法调用结束时销毁，生命周期最短。</p>
<p>执行优先级：静态初始化块 &gt; 静态变量 &gt; 静态方法 &gt; 实例变量 &gt; 实例方法 &gt; 局部变量 &gt; 局部方法</p>
<hr>
<p>静态导入：使用 import static 语句可以导入一个类的静态变量和静态方法，导入后可以直接使用静态变量和静态方法，而不需要使用类名来访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.max;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticImportTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">        System.out.println(max(<span class="number">5</span>, <span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>final 修饰符：final 修饰的类不能被继承，final 修饰的方法不能被重写，final 修饰的变量不能被修改，final 修饰的引用不能指向其他对象，但是可以修改引用指向的对象的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalTest</span> &#123;</span><br><span class="line">    <span class="comment">// final修饰的实例变量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// final修饰的引用</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">// final修饰的方法</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// final修饰的引用不能指向其他对象，但是可以修改引用指向的对象的内容</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FinalTest</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FinalTest</span>();</span><br><span class="line">        System.out.println(ft.a); <span class="comment">// 6</span></span><br><span class="line">        System.out.println(Arrays.toString(ft.arr)); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">        ft.change();</span><br><span class="line">        System.out.println(Arrays.toString(ft.arr)); <span class="comment">// [9, 2, 3, 4, 5, 6]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="抽象类">抽象类</h2>
<p>抽象类是用 abstract 修饰的类，抽象类不能被实例化，抽象类中可以包含抽象方法和非抽象方法，抽象类的子类必须实现抽象类中的所有抽象方法，否则子类也必须是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractTest</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象类只有在被继承时才有意义，抽象类的子类必须实现抽象类中的所有抽象方法，否则子类也必须是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractTest2</span> <span class="keyword">extends</span> <span class="title class_">AbstractTest</span> &#123;</span><br><span class="line">    <span class="comment">// 必须实现抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractTest2</span> <span class="variable">at</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbstractTest2</span>();</span><br><span class="line">        at.test(); <span class="comment">// 抽象方法</span></span><br><span class="line">        at.test2(); <span class="comment">// 普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象类的本质是一个类，所以抽象类可以有构造方法，抽象类的构造方法在子类实例化时会被调用，抽象类的构造方法不能用 abstract 修饰，因为抽象类的构造方法不能被重写，抽象类的构造方法不能用 private 修饰，因为抽象类的构造方法必须被子类调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractTest</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象类的构造方法不能用 abstract 修饰，因为抽象类的构造方法不能被重写</span></span><br><span class="line">    <span class="comment">// public abstract AbstractTest() &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 抽象类的构造方法不能用 private 修饰，因为抽象类的构造方法必须被子类调用</span></span><br><span class="line">    <span class="comment">// private AbstractTest() &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 抽象类的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><code>接口</code> 与 <code>抽象类</code> 的区别：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象类是用 abstract 修饰的类，抽象类不能被实例化，抽象类中可以包含抽象方法和非抽象方法，抽象类的子类必须实现抽象类中的所有抽象方法，否则子类也必须是抽象类。</p>
</li>
<li class="lvl-2">
<p>接口是用 interface 修饰的类，接口不能被实例化，接口中只能包含抽象方法，接口的子类必须实现接口中的所有抽象方法，否则子类也必须是抽象类。</p>
</li>
</ul>
<hr>
<h2 id="接口">接口</h2>
<p>接口(interface)是用 interface 修饰的类，接口中只能包含抽象方法，接口的子类必须实现接口中的所有抽象方法，否则子类也必须是抽象类。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>普通类： 只有具体实现</p>
</li>
<li class="lvl-2">
<p>抽象类： 既有具体实现，又有部分抽象方法</p>
</li>
<li class="lvl-2">
<p>接口： 只有抽象方法</p>
</li>
</ul>
<blockquote>
<p><strong>接口就是规范</strong>，接口中的所有方法都是抽象方法，接口中的所有变量都是常量，接口中的所有方法都是 public 的，接口中的所有变量都是 public static final 的。</p>
<p><strong>接口的本质是契约</strong>，接口是一种特殊的抽象类，接口是一种特殊的类，接口是一种特殊的数据类型。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceTest</span> &#123;</span><br><span class="line">    <span class="comment">// 接口中的所有方法都是抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 接口中的所有变量都是常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 接口中的所有方法都是 public 的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 接口中的所有变量都是 public static final 的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用接口，可以变相实现多继承，一个类可以实现多个接口，一个接口可以继承多个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>, Serializable &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口的实现类必须实现接口中的所有抽象方法，否则实现类也必须是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTest2</span> <span class="keyword">implements</span> <span class="title class_">InterfaceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InterfaceTest2</span> <span class="variable">it</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceTest2</span>();</span><br><span class="line">        it.test(); <span class="comment">// 抽象方法</span></span><br><span class="line">        it.test2(); <span class="comment">// 抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="内部类"><s>内部类</s></h2>
<p><s>（选）</s>内部类是定义在另一个类中的类，内部类可以访问外部类的所有成员，外部类不能访问内部类的成员。</p>
<p>内部类的分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>成员内部类：定义在类中方法外的类，成员内部类可以访问外部类的所有成员，外部类不能访问内部类的成员。</p>
</li>
<li class="lvl-2">
<p>局部内部类：定义在方法中的类，局部内部类只能在方法中使用，局部内部类可以访问外部类的所有成员，外部类不能访问局部内部类的成员。</p>
</li>
<li class="lvl-2">
<p>匿名内部类：没有名字的内部类，匿名内部类只能在方法中使用，匿名内部类可以访问外部类的所有成员，外部类不能访问匿名内部类的成员。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 JavaScript 2</title>
    <url>/2023/03/28/1/</url>
    <content><![CDATA[<h2 id="严格检查模式">严格检查模式</h2>
<p>严格模式是 ECMAScript 5 引入的一个新的功能。严格模式是为 JavaScript 定义了一种不同的解析与执行模型。严格模式的目的有以下几个：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为;</p>
</li>
<li class="lvl-2">
<p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>
</li>
<li class="lvl-2">
<p>提高编译器效率，增加运行速度；</p>
</li>
<li class="lvl-2">
<p>为未来新版本的 JavaScript 做好铺垫。</p>
</li>
<li class="lvl-2">
<p>严格模式是通过在脚本或函数的头部添加 “use strict”; 来启用的。</p>
</li>
<li class="lvl-2">
<p>严格模式下，ECMAScript 3 中的一些不安全的操作将会抛出错误，比如：</p>
<ul class="lvl-2">
<li class="lvl-4">未声明的变量赋值将会抛出错误；</li>
<li class="lvl-4">不能使用 with 语句；</li>
<li class="lvl-4">不能对只读属性赋值；</li>
<li class="lvl-4">不能使用八进制字面量；</li>
<li class="lvl-4">不能删除不可删除的属性；</li>
<li class="lvl-4">不能删除变量 delete prop，只能删除属性 delete global[prop]；</li>
<li class="lvl-4">eval 不会在它的外层作用域引入变量；</li>
<li class="lvl-4">eval 和 arguments 不能被重新赋值；</li>
<li class="lvl-4">arguments 不会自动反映函数参数的变化；</li>
<li class="lvl-4">不能使用 arguments.callee；</li>
<li class="lvl-4">不能使用 arguments.caller；</li>
<li class="lvl-4">禁止 this 指向全局对象；</li>
<li class="lvl-4">不能使用 fn.caller 和 fn.arguments 获取函数调用的堆栈；</li>
<li class="lvl-4">增加了保留字（比如 protected、static 和 interface）。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">x = <span class="number">3.14</span>;   <span class="comment">// 这会产生一个错误</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
<h2 id="字符串类型详解">字符串类型详解</h2>
<h3 id="转义">转义</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">\<span class="string">&#x27;  单引号</span></span><br><span class="line"><span class="string">\&quot;  双引号</span></span><br><span class="line"><span class="string">\\  反斜杠</span></span><br><span class="line"><span class="string">\n  换行</span></span><br><span class="line"><span class="string">\r  回车</span></span><br><span class="line"><span class="string">\t  制表符</span></span><br><span class="line"><span class="string">\b  退格</span></span><br><span class="line"><span class="string">\f  换页</span></span><br></pre></td></tr></table></figure>
<h3 id="多行字符串">多行字符串</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;这是一个 \</span></span><br><span class="line"><span class="string">多行字符串&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="模板字符串">模板字符串</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
<h3 id="字符串长度">字符串长度</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(message.<span class="property">length</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>
<p>控制台中输入 <code>message.length</code> 也可以得到字符串的长度。也可以打印下标，console.log(message[0])。</p>
<p>在 JavaScript 中，字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。如果需要改变某个变量保存的字符串，那么只能销毁原来的字符串，然后重新保存一个新的字符串。</p>
<h3 id="大小写转换">大小写转换</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(message.<span class="title function_">toUpperCase</span>()); <span class="comment">// HELLO WORLD</span></span><br><span class="line"><span class="title function_">alert</span>(message.<span class="title function_">toLowerCase</span>()); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>
<h3 id="substring-、substr-、slice">substring()、substr()、slice()</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(message.<span class="title function_">substring</span>(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// llo</span></span><br><span class="line"><span class="title function_">alert</span>(message.<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// llo w</span></span><br><span class="line"><span class="title function_">alert</span>(message.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// llo</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>substring()：第一个参数指定字符串的开始位置，第二个参数指定字符串结束位置，但不包括该位置的字符。</p>
</li>
<li class="lvl-2">
<p>substr()：第一个参数指定字符串的开始位置，第二个参数指定要返回的字符个数。</p>
</li>
<li class="lvl-2">
<p>slice()：第一个参数指定字符串的开始位置，第二个参数指定字符串结束位置，但不包括该位置的字符。</p>
</li>
</ul>
<h2 id="数组类型详解">数组类型详解</h2>
<p>array可以存储任何类型的数据，包括基本类型和引用类型。数组的长度是动态的，可以随时添加和删除元素。数组的每一项都有自己的索引，索引从0开始。数组的索引是属性名的一种特殊形式，可以使用点表示法或方括号表示法来访问数组的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<h3 id="数组的length属性">数组的length属性</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="property">length</span> = <span class="number">0</span>; <span class="comment">// 清空数组</span></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">3</span>; <span class="comment">// 使数组只有三个元素</span></span><br></pre></td></tr></table></figure>
<p>注意：如果设置的值小于数组的长度，那么数组的末尾将被删除，如果设置的值大于数组的长度，那么数组的末尾将被添加空元素。</p>
<h3 id="下标索引">下标索引</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">indexof</span>(<span class="number">2</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="数组的方法">数组的方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(<span class="number">7</span>); <span class="comment">// 末尾添加元素</span></span><br><span class="line">arr.<span class="title function_">pop</span>(); <span class="comment">// 末尾删除元素</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>); <span class="comment">// 开头添加元素</span></span><br><span class="line">arr.<span class="title function_">shift</span>(); <span class="comment">// 开头删除元素</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从第二个位置开始，删除0个元素，插入3</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// 从第二个位置开始，删除1个元素</span></span><br><span class="line">arr.<span class="title function_">concat</span>([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]); <span class="comment">// 连接数组</span></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 截取数组</span></span><br><span class="line">arr.<span class="title function_">reverse</span>(); <span class="comment">// 反转数组</span></span><br><span class="line">arr.<span class="title function_">sort</span>(); <span class="comment">// 排序数组</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">// 将数组转换为字符串</span></span><br><span class="line">arr.<span class="title function_">indexof</span>(<span class="number">2</span>); <span class="comment">// 查找元素的位置 1</span></span><br></pre></td></tr></table></figure>
<h3 id="多维数组">多维数组</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]];</span><br></pre></td></tr></table></figure>
<h2 id="对象类型详解">对象类型详解</h2>
<p>对象是属性的无序集合，每个属性都由一个名字和一个值组成。对象的属性名可以是任意字符串，包括空字符串。属性值可以是任意的数据类型，包括基本类型和引用类型。对象的属性名是字符串，因此可以使用方括号表示法来访问对象的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="attr">job</span>: <span class="string">&quot;Software Engineer&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="对象赋值">对象赋值</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>使用一个不存在的属性名，不会报错，而是会创建一个新的属性。</p>
<h3 id="动态删除属性">动态删除属性</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>; <span class="comment">// 删除属性</span></span><br></pre></td></tr></table></figure>
<h3 id="动态添加属性">动态添加属性</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="in操作符">in操作符</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="hasOwnProperty-方法">hasOwnProperty()方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习使用Git</title>
    <url>/2023/02/28/1/</url>
    <content><![CDATA[<blockquote>
<p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>
Git是由Linux之父Linus Torvalds编写的一个开源的分布版本控制系统。<br>
Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>
Git是免费软件，遵循GPL协议。</p>
</blockquote>
<p>Git在开发过程中，可以有效、高速的处理从很小到非常大的项目版本管理。十分有用，因此，在学习计算机的过程中，学习Git是必不可少的。今日2023年2月28日，我开始学习Git，希望能够在一年之内熟练Git的使用。</p>
<p>参考以下网站，可以帮助你学习Git：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvODk2MDQzNDg4MDI5NjAw">廖雪峰的官方网站<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9hcGkuZ2l0ZWUuY29tL2FsbC1hYm91dC1naXQ=">来自gitee的教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="常用git命令">常用git命令</h2>
<h3 id="仓库">仓库</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加与删除">添加与删除</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git <span class="built_in">mv</span> [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h3 id="代码提交">代码提交</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h3 id="分支">分支</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h3 id="标签">标签</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
<h3 id="查看信息">查看信息</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
<h3 id="远程同步">远程同步</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>
<h3 id="撤销">撤销</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>
<p>以上常用命令来自阮一峰老师的博客文章<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzEyL2dpdC1jaGVhdC1zaGVldC5odG1s">常用 Git 命令清单<i class="fa fa-external-link-alt"></i></span>，感谢阮老师！</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 JavaScript 3</title>
    <url>/2023/04/03/1/</url>
    <content><![CDATA[<h2 id="流程控制">流程控制</h2>
<p>基本与Java相同.</p>
<h3 id="if语句">if语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch语句">switch语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="while语句">while语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do-while语句">do-while语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure>
<h3 id="for语句">for语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; final-expression) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-in语句">for-in语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-of语句">for-of语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> object) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="break语句">break语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<h3 id="continue语句">continue语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>
<h3 id="with语句">with语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">with</span> (expression) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="try-catch语句">try-catch语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="throw语句">throw语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> expression;</span><br></pre></td></tr></table></figure>
<h3 id="debugger语句">debugger语句</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">debugger</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Map-和-Set">Map 和 Set</h2>
<h3 id="Map">Map</h3>
<p>map是一种键值对的集合，任何值（对象或者原始值）都可以作为一个键或一个值,Map对象的键值对是有序的，键值对的插入顺序就是遍历Map对象时的顺序.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// 创建一个Map对象</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>); <span class="comment">// 设置键值对</span></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;key&#x27;</span>); <span class="comment">// 获取键对应的值</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;key&#x27;</span>); <span class="comment">// 判断是否存在某个键</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;key&#x27;</span>); <span class="comment">// 删除某个键</span></span><br><span class="line">map.<span class="title function_">clear</span>(); <span class="comment">// 清空Map对象</span></span><br><span class="line">map.<span class="property">size</span>; <span class="comment">// 获取Map对象的长度</span></span><br></pre></td></tr></table></figure>
<h3 id="Set">Set</h3>
<p>无序不重复的键值对集合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(); <span class="comment">// 创建一个Set对象</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&#x27;value&#x27;</span>); <span class="comment">// 添加一个值</span></span><br><span class="line">set.<span class="title function_">has</span>(<span class="string">&#x27;value&#x27;</span>); <span class="comment">// 判断是否存在某个值</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="string">&#x27;value&#x27;</span>); <span class="comment">// 删除某个值</span></span><br><span class="line">set.<span class="title function_">clear</span>(); <span class="comment">// 清空Set对象</span></span><br><span class="line">set.<span class="property">size</span>; <span class="comment">// 获取Set对象的长度</span></span><br></pre></td></tr></table></figure>
<h2 id="iterator">iterator</h2>
<p>iterator是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署iterator接口，就可以完成遍历操作,iterator的作用有三个：</p>
<ol>
<li class="lvl-3">
<p>为各种数据结构，提供一个统一的、简便的访问接口</p>
</li>
<li class="lvl-3">
<p>使得数据结构的成员能够按某种次序排列</p>
</li>
<li class="lvl-3">
<p>ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费</p>
</li>
</ol>
<h2 id="for-of-常用">for-of 常用</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-in">for-in</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> iterable) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="forEach">forEach</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">iterable.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="map">map</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newIterable = iterable.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="filter">filter</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newIterable = iterable.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="reduce">reduce</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = iterable.<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue, currentIndex, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> previousValue;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="some">some</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = iterable.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="every">every</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = iterable.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="find">find</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = iterable.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="findIndex">findIndex</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = iterable.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="entries">entries</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterator = iterable.<span class="title function_">entries</span>();</span><br></pre></td></tr></table></figure>
<h3 id="keys">keys</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterator = iterable.<span class="title function_">keys</span>();</span><br></pre></td></tr></table></figure>
<h3 id="values">values</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterator = iterable.<span class="title function_">values</span>();</span><br></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
<p>方法：一个对象的属性，属性值是一个函数。函数：一个函数，可以作为一个对象的属性，也可以作为一个对象的方法。</p>
<h3 id="函数声明">函数声明</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>函数声明-1</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">arg0, arg1, arg2</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.<br>
绝对值函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦执行到return语句，函数就执行完毕，并将结果返回。如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。</p>
<hr>
<ul class="lvl-0">
<li class="lvl-2">
<p>函数声明-2</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="keyword">function</span> (<span class="params">arg0, arg1, arg2</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>e.g.<br>
绝对值函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> abs = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>function(x){…}是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，因此通过变量abs就可以调用该函数。</p>
<blockquote>
<p>匿名函数有个很大的好处，就是可以直接在里面编写调用的代码。由于函数本身也是一个对象，通过变量名调用函数时，实际上是在调用函数对象的call()方法，因此我们可以用call()方法直接在匿名函数内部调用其他函数。</p>
</blockquote>
<hr>
<ul class="lvl-0">
<li class="lvl-2">
<p>调用函数</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">functionName</span>(arg0, arg1, arg2);</span><br></pre></td></tr></table></figure>
<p>JavaScript的函数调用非常灵活，即使传入了不正确的参数个数，也不会报错，只是多出的参数会被忽略，缺少的参数则被赋值为undefined.</p>
<h3 id="函数参数">函数参数</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>规避参数异常</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="comment">// 手动检查参数是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;Not a number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>arguments<br>
arguments变量只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments是一个类似数组的对象，所以我们可以用下标的方式来访问arguments的每个元素，但是arguments并不是一个Array，它没有Array的pop()、push()等方法。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> ? x : -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>rest参数<br>
ES6引入了rest参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> x = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> ? x : -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 JavaScript 4</title>
    <url>/2023/04/04/1/</url>
    <content><![CDATA[<h2 id="变量作用域">变量作用域</h2>
<p>变量作用是指变量的作用范围，变量的作用范围决定了变量的生命周期。变量的作用域分为全局作用域和局部作用域。全局作用域是指在整个程序中都可以访问的变量，局部作用域是指在函数内部可以访问的变量。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>全局作用域</p>
</li>
</ul>
<blockquote>
<p>全局作用域是指在整个程序中都可以访问的变量，全局作用域的变量可以在任何地方访问，但是不推荐这样做，因为全局作用域的变量会污染全局作用域，导致变量命名冲突。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>局部作用域局部作用域是指在函数内部可以访问的变量，局部作用域的变量只能在函数内部访问，函数外部无法访问。局部作用域的变量在函数执行完毕后会被销毁，因此局部作用域的变量不会污染全局作用域。</p>
</li>
</ul>
<h3 id="闭包">闭包</h3>
<p>闭包是指函数内部可以访问函数外部的变量，函数外部无法访问函数内部的变量。闭包的作用是可以让函数外部访问函数内部的变量，但是不推荐这样做，因为闭包会导致内存泄漏。</p>
<h3 id="规范">规范</h3>
<p>由于所有的全局变量都会绑定到 window 对象上，因此不推荐使用全局变量，如果一定要使用全局变量，那么必须使用 window 对象来访问全局变量，否则会导致全局变量污染全局作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唯一的全局变量</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">MYAPP</span> = &#123;&#125;;</span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line"><span class="variable constant_">MYAPP</span>.<span class="property">name</span> = <span class="string">&#x27;myapp&#x27;</span>;</span><br><span class="line"><span class="comment">// 定义全局函数</span></span><br><span class="line"><span class="variable constant_">MYAPP</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>把所有的全局变量都绑定到一个全局变量上，这样就不会污染全局作用域，也不会造成全局变量命名冲突。</p>
<h3 id="局部作用域">局部作用域</h3>
<p>局部作用域是指在函数内部可以访问的变量，局部作用域的变量只能在函数内部访问，函数外部无法访问。局部作用域的变量在函数执行完毕后会被销毁，因此局部作用域的变量不会污染全局作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，变量 a 是局部变量，只能在函数内部访问，函数外部无法访问，因此会报错。<br>
ES6 let 命令声明的变量只在代码块内有效，因此在代码块外部无法访问。</p>
<h3 id="常量-const">常量 const</h3>
<p>const 命令声明的变量是常量，一旦声明，常量的值就不能改变。在ES6之前，JavaScript使用大写变量表示常量。这种做法难以保证变量的值不会被改动，因此ES6引入了 const 命令，声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415</span>;</span><br><span class="line"><span class="variable constant_">PI</span> <span class="comment">// 3.1415</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3</span>; <span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，常量 PI 的值是 3.1415，一旦声明，就不能改变，否则会报错。<br>
const 声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">MAX</span>); <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAX</span> = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，常量 MAX 用 const 命令声明，所以在声明之前，都属于常量的“死区”，只要用到该常量就会报错。如果真的想将常量声明在块级作用域之外，可以用一个立即执行函数表达式（IIFE）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.<span class="property">prop</span> = <span class="number">123</span>;</span><br><span class="line">foo.<span class="property">prop</span> <span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 JavaScript 6</title>
    <url>/2023/04/06/1/</url>
    <content><![CDATA[<h2 id="操作DOM对象">操作DOM对象</h2>
<blockquote>
<p>DOM：Document Object Model，文档对象模型。DOM是一套规范，规定了操作DOM对象的API。浏览器提供了一套操作DOM对象的API，这套API被称为DOM API。DOM API的作用是操作DOM对象，从而实现动态修改网页的效果。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">IE浏览器的DOM API是基于ActiveX对象实现的，因此IE浏览器的DOM API是通过JavaScript脚本来操作ActiveX对象实现的。</li>
<li class="lvl-2">Firefox浏览器,Crome浏览器，Safari浏览器的DOM API是基于JavaScript对象实现的，因此这些浏览器的DOM API是通过JavaScript脚本来操作JavaScript对象实现的。</li>
</ul>
<blockquote>
<p>windows<br>
window 代表<code>浏览器窗口</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">innerHeight</span>; <span class="comment">// 浏览器窗口的内部高度</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerWidth</span>; <span class="comment">// 浏览器窗口的内部宽度</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerHeight</span>; <span class="comment">// 浏览器窗口的外部高度</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerWidth</span>; <span class="comment">// 浏览器窗口的外部宽度</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">screenX</span>; <span class="comment">// 浏览器窗口相对于屏幕左上角的水平偏移量</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">screenY</span>; <span class="comment">// 浏览器窗口相对于屏幕左上角的垂直偏移量</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;Hello, world!&#x27;</span>); <span class="comment">// 弹出警告框</span></span><br><span class="line"><span class="comment">// etc...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Navigator<br>
Navigator 代表浏览器的信息</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.<span class="property">appName</span>; <span class="comment">// 浏览器名称</span></span><br><span class="line">navigator.<span class="property">appVersion</span>; <span class="comment">// 浏览器版本</span></span><br><span class="line">navigator.<span class="property">language</span>; <span class="comment">// 浏览器设置的语言</span></span><br><span class="line">navigator.<span class="property">platform</span>; <span class="comment">// 系统平台</span></span><br><span class="line">navigator.<span class="property">userAgent</span>; <span class="comment">// 浏览器设定的User-Agent字符串</span></span><br></pre></td></tr></table></figure>
<p>大多数浏览器的userAgent都包含以下关键字：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>IE</code>：<code>Trident</code></p>
</li>
<li class="lvl-2">
<p><code>Firefox</code>：<code>Gecko</code></p>
</li>
<li class="lvl-2">
<p><code>Chrome</code>：<code>WebKit</code> //谷歌的浏览器内核是基于webkit的，是webkit的一个分支，叫做Blink。</p>
</li>
<li class="lvl-2">
<p><code>Safari</code>：<code>WebKit</code></p>
</li>
<li class="lvl-2">
<p><code>Opera</code>：<code>Presto</code></p>
</li>
</ul>
<blockquote>
<p>Screen<br>
Screen 代表屏幕的信息</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.<span class="property">width</span>; <span class="comment">// 屏幕宽度（以像素为单位）</span></span><br><span class="line">screen.<span class="property">height</span>; <span class="comment">// 屏幕高度（以像素为单位）</span></span><br><span class="line">screen.<span class="property">colorDepth</span>; <span class="comment">// 返回颜色位数，如8、16、24</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Location<br>
Location 代表当前页面的URL信息</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.<span class="property">href</span>; <span class="comment">// 返回当前页面的URL</span></span><br><span class="line">location.<span class="property">protocol</span>; <span class="comment">// 返回页面使用的协议</span></span><br><span class="line">location.<span class="property">host</span>; <span class="comment">// 返回服务器名称</span></span><br><span class="line">location.<span class="property">port</span>; <span class="comment">// 返回端口号</span></span><br><span class="line">location.<span class="property">pathname</span>; <span class="comment">// 返回URL的路径</span></span><br><span class="line">location.<span class="title function_">reload</span>(); <span class="comment">// 刷新当前页面</span></span><br><span class="line"><span class="comment">// etc...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>document<br>
document 代表当前页面以下都是dom的原生方法，之后尽量使用jquery的方法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">title</span>; <span class="comment">// 获取当前页面的标题</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;新的标题&#x27;</span>; <span class="comment">// 设置当前页面的标题</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">URL</span>; <span class="comment">// 获取当前页面的URL</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span>; <span class="comment">// 获取当前页面的域名</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">referrer</span>; <span class="comment">// 获取当前页面的来源页面的URL</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>; <span class="comment">// 获取当前页面的&lt;body&gt;节点</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span>; <span class="comment">// 获取当前页面的&lt;body&gt;节点的所有HTML代码</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;新的HTML代码&#x27;</span>; <span class="comment">// 设置当前页面的&lt;body&gt;节点的所有HTML代码</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>); <span class="comment">// 获取对应id的DOM对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;tag&#x27;</span>); <span class="comment">// 获取对应tag的DOM对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;class&#x27;</span>); <span class="comment">// 获取对应class的DOM对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// 获取对应name的DOM对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;css selector&#x27;</span>); <span class="comment">// 获取对应css selector的第一个DOM对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;css selector&#x27;</span>); <span class="comment">// 获取对应css selector的所有DOM对象</span></span><br></pre></td></tr></table></figure>
<p>关于Cookie<br>
httpOnly: true, // 是否只用于http请求中获取服务器端生成cookie，浏览器端保存cookie，下次请求时，浏览器会自动将cookie发送到服务器端。</p>
<h2 id="获得DOM节点">获得DOM节点</h2>
<p>要操作DOM对象，首先要获得DOM对象。获得DOM对象的方法有以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过id获得DOM对象</p>
</li>
<li class="lvl-2">
<p>通过标签名获得DOM对象</p>
</li>
<li class="lvl-2">
<p>通过class获得DOM对象</p>
</li>
<li class="lvl-2">
<p>通过name获得DOM对象</p>
</li>
<li class="lvl-2">
<p>通过css selector获得DOM对象</p>
</li>
</ul>
<blockquote>
<p>浏览器网页就是一个DOM树，DOM树的根节点是document，document的子节点是html，html的子节点是head和body，head和body的子节点是各种标签，标签的子节点是文本。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>更新:更新DOM节点</p>
</li>
<li class="lvl-2">
<p>删除:删除DOM节点</p>
</li>
<li class="lvl-2">
<p>插入:插入DOM节点</p>
</li>
<li class="lvl-2">
<p>历遍:得到所有子节点</p>
</li>
</ul>
<h2 id="更新DOM节点">更新DOM节点</h2>
<p>更新DOM节点的方法有很多种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>更新innerHTML</p>
</li>
<li class="lvl-2">
<p>更新innerText</p>
</li>
<li class="lvl-2">
<p>更新textContent</p>
</li>
<li class="lvl-2">
<p>更新value</p>
</li>
<li class="lvl-2">
<p>更新属性</p>
</li>
<li class="lvl-2">
<p>更新style</p>
</li>
<li class="lvl-2">
<p>更新class</p>
</li>
<li class="lvl-2">
<p>更新data-属性</p>
</li>
<li class="lvl-2">
<p>更新dataset属性<br>
etc…</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id.<span class="property">innerHTML</span> = <span class="string">&#x27;新的内容&#x27;</span>; <span class="comment">// 更新id的内容为&#x27;新的内容&#x27;</span></span><br><span class="line">id.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#ff0000&#x27;</span>; <span class="comment">// 将id的字体颜色设置为红色</span></span><br><span class="line">.<span class="property">className</span> = <span class="string">&#x27;new-class&#x27;</span>; <span class="comment">// 将class的值设为&#x27;new-class&#x27;</span></span><br><span class="line">id.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-name&#x27;</span>, <span class="string">&#x27;new-data-name&#x27;</span>); <span class="comment">// 将id的data-name属性设为&#x27;new-data-name&#x27;</span></span><br><span class="line">id.<span class="property">dataset</span>.<span class="property">name</span> = <span class="string">&#x27;new-data-name&#x27;</span>; <span class="comment">// 将id的data-name属性设为&#x27;new-data-name&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="删除DOM节点">删除DOM节点</h2>
<p>删除DOM节点得步骤：获取DOM节点，然后删除DOM节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">id.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(id);</span><br></pre></td></tr></table></figure>
<h2 id="插入DOM节点">插入DOM节点</h2>
<p>我们获得了DOM节点，如果这个dom节点是一个空的节点，那么使用innerHTML属性就可以直接插入内容。但是如果这个dom节点不是一个空的节点，那么就需要使用appendChild()方法来插入内容。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>appendChild()方法</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">id.<span class="property">innerHTML</span> = <span class="string">&#x27;新的内容&#x27;</span>; <span class="comment">// 直接插入内容</span></span><br><span class="line">id.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;新的内容&#x27;</span>)); <span class="comment">// 插入文本节点</span></span><br><span class="line">id.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)); <span class="comment">// 插入&lt;p&gt;节点</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过js创建节点</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>); <span class="comment">// 创建&lt;p&gt;节点</span></span><br><span class="line">p.<span class="property">innerHTML</span> = <span class="string">&#x27;新的内容&#x27;</span>; <span class="comment">// 设置&lt;p&gt;节点的内容</span></span><br><span class="line">id.<span class="title function_">appendChild</span>(p); <span class="comment">// 插入&lt;p&gt;节点</span></span><br></pre></td></tr></table></figure>
<p>标签选择器获取的节点是一个数组，所以要遍历数组，然后给每个节点添加事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; p.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    p[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点击了第&#x27;</span> + (i + <span class="number">1</span>) + <span class="string">&#x27;个&lt;p&gt;节点&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 JavaScript 5</title>
    <url>/2023/04/05/1/</url>
    <content><![CDATA[<h2 id="方法">方法</h2>
<p>方法是指对象的属性，属性的值是函数，因此方法是对象的函数属性。方法是对象的行为，对象的行为就是对象的方法。方法是对象的行为，对象的行为就是对象的方法。</p>
<h3 id="this">this</h3>
<p>this 是指函数运行时所在的环境对象，this 的值在函数运行时才能确定，因此 this 的值是动态的，而不是静态的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">getName</span>(); <span class="comment">// &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数 getName 的运行环境是 obj 对象，因此 this 的值是 obj 对象，因此函数 getName 的返回值是 ‘obj’。</p>
<h3 id="apply">apply</h3>
<p>apply 方法的作用是改变函数的运行环境，它的第一个参数是改变后的运行环境，第二个参数是一个数组，表示函数运行时的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">getName.<span class="title function_">apply</span>(obj); <span class="comment">// &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 中可以控制this的值，这是一种非常强大的功能，因为this的值可以动态改变，因此函数的行为也可以动态改变。这种特性使得JavaScript语言具有很强的灵活性，但是也使得JavaScript语言的编程难度大大增加，因为程序员必须非常清楚函数的运行环境，才能保证程序的正确运行。</p>
<h2 id="内部对象">内部对象</h2>
<blockquote>
<p>标准内部对象是指 ECMAScript 规范定义的对象，它们可以在 ECMAScript 程序的任何地方使用，不需要通过程序创建。标准内部对象的属性和方法可以在全局环境中直接使用，也可以在其他对象的环境中使用。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>typeof 123; // ‘number’</p>
</li>
<li class="lvl-2">
<p>typeof ‘abc’; // ‘string’</p>
</li>
<li class="lvl-2">
<p>typeof true; // ‘boolean’</p>
</li>
<li class="lvl-2">
<p>typeof undefined; // ‘undefined’</p>
</li>
<li class="lvl-2">
<p>typeof Math.abs; // ‘function’</p>
</li>
<li class="lvl-2">
<p>typeof null; // ‘object’</p>
</li>
<li class="lvl-2">
<p>typeof []; // ‘object’</p>
</li>
<li class="lvl-2">
<p>typeof {}; // ‘object’</p>
</li>
</ul>
<h3 id="Date-日期对象">Date 日期对象</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">getFullYear</span>(); <span class="comment">// 2013, 年份</span></span><br><span class="line">d.<span class="title function_">getMonth</span>(); <span class="comment">// 9, 月份，注意月份范围是0~11，表示十月</span></span><br><span class="line">d.<span class="title function_">getDate</span>(); <span class="comment">// 25, 表示25号</span></span><br><span class="line">d.<span class="title function_">getDay</span>(); <span class="comment">// 3, 表示星期三</span></span><br><span class="line">d.<span class="title function_">getHours</span>(); <span class="comment">// 20, 24小时制</span></span><br><span class="line">d.<span class="title function_">getMinutes</span>(); <span class="comment">// 44, 分钟</span></span><br><span class="line">d.<span class="title function_">getSeconds</span>(); <span class="comment">// 40, 秒</span></span><br><span class="line">d.<span class="title function_">getMilliseconds</span>(); <span class="comment">// 517, 毫秒数</span></span><br><span class="line">d.<span class="title function_">getTime</span>(); <span class="comment">// 1382647880517, 以number形式表示的时间戳</span></span><br></pre></td></tr></table></figure>
<p>时间戳是指1970年1月1日00:00:00（UTC）至今的毫秒数。时间戳可以精确表示时间，因此时间戳常用来做时间运算，比如，判断某个时间是否在当前时间之前。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>, <span class="number">9</span>, <span class="number">1</span>); <span class="comment">// 2013-10-01</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">33</span>); <span class="comment">// 2013-10-01 12:22:33</span></span><br><span class="line"><span class="keyword">var</span> d3 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1381000000000</span>); <span class="comment">// 2013-10-01T02:40:00.000Z</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON">JSON</h3>
<p>JSON 是一种数据格式，它的出现是为了解决 JavaScript 对象的字符串表示问题。JavaScript 对象的字符串表示有两种方式：一种是 JSON 格式，另一种是 JavaScript 语法表示法。JSON 格式的优点是简单，易于读写，但是缺点是不支持函数，因此只能用于数据交换，而不能用于创建 JavaScript 对象。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对象{}</p>
</li>
<li class="lvl-2">
<p>数组[]</p>
</li>
<li class="lvl-2">
<p>所有的键值对都用 key:value 表示</p>
</li>
</ul>
<p>以下是转换为JSON字符串和对象的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;skills&#x27;</span>: [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;married&#x27;</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> s = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json);</span><br><span class="line">s; <span class="comment">// &#x27;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:20,&quot;skills&quot;:[&quot;JavaScript&quot;,&quot;Java&quot;,&quot;Python&quot;],&quot;married&quot;:false&#125;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(s);</span><br><span class="line">o; <span class="comment">// Object &#123;name: &quot;小明&quot;, age: 20, skills: Array[3], married: false&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="JSON-和-JavaScript-对象的区别">JSON 和 JavaScript 对象的区别</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>JSON 只支持数组和对象作为根元素，不支持字符串、数值、布尔值等作为根元素。</p>
</li>
<li class="lvl-2">
<p>JSON 的键必须用双引号&quot;&quot;括起来。</p>
</li>
<li class="lvl-2">
<p>JSON 不支持函数，正则表达式等对象。</p>
</li>
<li class="lvl-2">
<p>JSON 不支持注释，JSON 格式的文件必须严格遵守 JSON 语法。</p>
</li>
</ul>
<h3 id="Ajax">Ajax</h3>
<p>Ajax 是 Asynchronous JavaScript and XML 的缩写，意思是异步的 JavaScript 和 XML。Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。Ajax 不是新的编程语言，而是一种使用现有标准的新方法。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>原生 js 写法 xhr 异步请求</p>
</li>
<li class="lvl-2">
<p>jQuery 封装好的方法 $(“#name”).ajax(“”)</p>
</li>
<li class="lvl-2">
<p>axios 请求</p>
</li>
</ul>
<h2 id="面向对象编程">面向对象编程</h2>
<p>什么是面向对象编程？面向对象编程是一种编程范式，它把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。<br>
JavaScript, Java, C++等语言都支持面向对象编程，但是支持的程度各不相同，JavaScript只是一种基于原型的面向对象编程语言，它的面向对象编程与传统的面向对象编程有很大区别。</p>
<h3 id="面向对象原型继承">面向对象原型继承</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>类：模板</p>
</li>
<li class="lvl-2">
<p>对象：实例在传统的面向对象编程语言中，类是对象的模板，而对象是类的实例。但是，JavaScript的面向对象编程并不是基于类的，而是基于原型的。JavaScript并没有提供对象继承的语法，而是通过原型复制来实现对象继承。</p>
</li>
</ul>
<blockquote>
<p>原型原型是指对象的原型对象，每个对象都会从原型继承属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">getName</span>(); <span class="comment">// &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure>
<p>obj对象的原型是Object.prototype，它是所有对象的原型，因此obj对象可以继承到Object.prototype的所有属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>原型链原型链是指对象的原型对象也是对象，因此它也有自己的原型对象，这样一层一层往上，就构成了原型链。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="面向对象class继承">面向对象class继承</h3>
<p>在ES6中，引入了class关键字，作为对象的模板，通过class关键字可以定义类。class关键字的继承与传统的面向对象语言有所不同，它是通过extends关键字实现的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line">xiaoming.<span class="title function_">getName</span>(); <span class="comment">// &#x27;小明&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>继承</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, grade</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myGrade</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am at grade &#x27;</span> + <span class="variable language_">this</span>.<span class="property">grade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">PrimaryStudent</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">xiaoming.<span class="title function_">myGrade</span>(); <span class="comment">// &#x27;I am at grade 2&#x27;</span></span><br></pre></td></tr></table></figure>
<p>本质class关键字定义的类其实就是一个函数，它的prototype属性指向类的原型对象，而原型对象的constructor属性指向这个类本身。</p>
<blockquote>
<p>静态方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">create</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="title class_">Student</span>.<span class="title function_">create</span>(<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line">xiaoming.<span class="title function_">getName</span>(); <span class="comment">// &#x27;小明&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>getter和setter</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;name is too short.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line">xiaoming.<span class="property">name</span>; <span class="comment">// &#x27;小明&#x27;</span></span><br><span class="line">xiaoming.<span class="property">name</span> = <span class="string">&#x27;x&#x27;</span>; <span class="comment">// Error: name is too short.</span></span><br></pre></td></tr></table></figure>
<h3 id="原型和对象原型的区别">原型和对象原型的区别</h3>
<ul class="lvl-0">
<li class="lvl-2">
<mark class="label ">原型</mark>是对象的原型对象，每个对象都会从原型继承属性。
</li>
<li class="lvl-2">
<p>对象原型是对象的原型对象，<mark class="label ">它也是对象</mark>，因此它也有自己的原型对象，这样一层一层往上，就构成了原型链。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 JavaScript 7</title>
    <url>/2023/04/09/1/</url>
    <content><![CDATA[<h2 id="操作表单（验证）">操作表单（验证）</h2>
<blockquote>
<p>表单验证是指在用户提交表单时，对表单中的数据进行检查，如果数据不符合要求，就提示用户修改，直到数据符合要求为止。表单验证是一种常见的客户端验证，也是一种常见的防止恶意攻击的手段。</p>
</blockquote>
<h3 id="表单是什么-form-DOM-树">表单是什么 form DOM 树</h3>
<ul class="lvl-0">
<li class="lvl-2">表单是一种特殊的DOM对象，它的类型是<code>HTMLFormElement</code>。</li>
<li class="lvl-2">表单的<code>name</code>属性是<code>form</code>，它的<code>tagName</code>属性是<code>FORM</code>。</li>
<li class="lvl-2">表单的<code>value</code>属性是<code>null</code>，它的<code>innerHTML</code>属性是<code>null</code>。</li>
<li class="lvl-2">表单的<code>type</code>属性是<code>form</code>，它的<code>nodeName</code>属性是<code>FORM</code>。</li>
<li class="lvl-2">表单的<code>id</code>属性是<code>null</code>，它的<code>outerHTML</code>属性是<code>&lt;form&gt;&lt;/form&gt;</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/404&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span> <span class="attr">id</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取表单对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input_username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 修改表单对象的value属性</span></span></span><br><span class="line"><span class="language-javascript">    input_username.<span class="property">value</span> = <span class="string">&#x27;user&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取性别</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> man_radio = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;man&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 判断性别函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> sex = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (man_radio.<span class="property">checked</span> = <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> man;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> woman;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="提交表单和加密表单">提交表单和加密表单</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>表单的<code>submit()</code>方法用于提交表单。</p>
</li>
<li class="lvl-2">
<p>表单的<code>reset()</code>方法用于重置表单。</p>
</li>
<li class="lvl-2">
<p>表单的<code>action</code>属性用于设置表单提交的URL。</p>
</li>
<li class="lvl-2">
<p>表单的<code>method</code>属性用于设置表单提交的方法，可以是<code>GET</code>或<code>POST</code>。</p>
</li>
<li class="lvl-2">
<p>表单的<code>target</code>属性用于设置表单提交的目标，可以是<code>_blank</code>、<code>_self</code>、<code>_parent</code>、<code>_top</code>或<code>framename</code>。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 导入md5加密库</span><br><span class="line"><span class="comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 该cdn具有投毒风险，请勿使用 --&gt;</span></span><br><span class="line">// 获取表单对象</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> submit = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 密码加密</span></span></span><br><span class="line"><span class="language-javascript">    password.<span class="property">value</span> = <span class="title function_">md5</span>(password.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="jQuery">jQuery</h2>
<blockquote>
<p>jQuery是一个JavaScript库，它的作用是简化JavaScript的操作，使得JavaScript的操作更加简单、快捷。</p>
<p>with jQuery you write less, do more</p>
</blockquote>
<h3 id="jQuery的基本使用">jQuery的基本使用</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>jQuery的基本使用是通过<code>$()</code>函数来实现的。</p>
</li>
<li class="lvl-2">
<p><code>$()</code>函数的参数可以是CSS选择器、DOM对象、HTML字符串、函数。</p>
</li>
<li class="lvl-2">
<p><code>$()</code>函数的返回值是一个<code>jQuery</code>对象，它是一个伪数组，可以通过<code>length</code>属性获取元素的个数，也可以通过<code>[index]</code>的方式获取指定位置的元素。</p>
</li>
<li class="lvl-2">
<p><code>$()</code>函数的返回值是一个<code>jQuery</code>对象，它是一个伪数组，可以通过<code>length</code>属性获取元素的个数，也可以通过<code>[index]</code>的方式获取指定位置的元素。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过CSS选择器获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $p = $(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过DOM对象获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $p = $($p[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过HTML字符串获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $p = $(<span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过函数获取元素</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $p = $(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="jQuery的选择器">jQuery的选择器</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>jQuery的选择器是通过<code>$()</code>函数的参数来实现的。</p>
</li>
<li class="lvl-2">
<p>jQuery的选择器可以是CSS选择器、DOM对象、HTML字符串、函数。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过CSS选择器获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $p = $(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过DOM对象获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $p = $($p[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过HTML字符串获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $p = $(<span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过函数获取元素</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $p = $(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="jQuery的事件">jQuery的事件</h3>
<p>鼠标事件；键盘事件；表单事件；文档/窗口事件.</p>
<h4 id="鼠标事件">鼠标事件</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标移入</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标移出</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">mouseleave</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;black&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标点击</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标双击</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标按下</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">mousedown</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标松开</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">mouseup</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标移动</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">mousemove</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="键盘事件">键盘事件</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 键盘事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 键盘按下</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">keydown</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 键盘松开</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">keyup</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 键盘按下并松开</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">keypress</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="表单事件">表单事件</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表单事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表单获得焦点</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表单失去焦点</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表单内容改变</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表单提交</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表单重置</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">reset</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文档-窗口事件">文档/窗口事件</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文档/窗口事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文档加载完成</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 窗口加载完成</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">window</span>).<span class="title function_">load</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 窗口大小改变</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">window</span>).<span class="title function_">resize</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 窗口滚动</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="jQuery的DOM操作">jQuery的DOM操作</h3>
<p>jQuery的DOM操作是通过<code>$()</code>函数的返回值来实现的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// jQuery的DOM操作</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> text = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的内容</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的HTML内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">html</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的HTML内容</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;span&gt;hello&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> attr = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的属性值</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> val = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的值</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的样式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> css = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的样式</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的宽度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> width = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">width</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的宽度</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">width</span>(<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的高度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> height = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">height</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的高度</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">height</span>(<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> offset = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">offset</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的位置</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">offset</span>(&#123;<span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素的滚动条位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> scrollTop = $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">scrollTop</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置元素的滚动条位置</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">scrollTop</span>(<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="javaScript-学习结束">javaScript 学习结束</h2>
<p>至此，javaScript的学习结束，前端的基本知识也就学习完毕了。<br>
ajax、vue、react、nodejs等等都是基于javaScript的，所以学习完javaScript，就可以学习这些框架了。但是，我打算先学习java，python。</p>
<p>参考资料：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuanF1ZXJ5MTIzLmNvbS8=">jQuery 中文文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9qcXVlcnkuY3Vpc2hpZmVuZy5jbi8=">jQuery API 中文文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么办--我们网络中的迫切问题</title>
    <url>/2024/02/28/1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="6ce20ad849ca09412f432250aac6b24d88b8e8a4e5b319b64c2dd259342a6d27">ddb374900dd8327b6a65f6a0f7fda0a35fc808da38827695ae709ce3a513ef711ed6d707b2c580d571a02b31057a29f160b168f4a1c0c03404c22d94dca09abbe00c05329923351704b52ce73222775e2363b1ceb3bc59287b8ed25bf0121f27054ac3e02f35eedf20daef5416a5269f878f621fc7f8c23949b6e02632b0b100ef81e821213f552f83d3284733e0d838efd293bc22e0a2a6ad1793d469c68f0a5426e69044c31ae6d741d17fbcaf44d382a4712adcff85d8ca08e0fbad903e773f70593dd3a9d8d58812b7e93b89e051ff8928b675b910e7bb78c9434604146f55782f18b3f1eb3c395214c742b22038358e5fed006891a62a4e7484aa172882ca2b8de936c7d18528264d3a9c65da16a2f90daac7cde89a72d3b2a67870cea6aba2fad7fc7cacace57662ae2f8d4180aa8b6e145ded310d1f9b073f1002f698ef4388fa74981e7d174e10a4a0622cfa19c4ea091511b7cd777624b883c85b0af460a1d0420b50c93aaa9475d1fc163f7f797484af14b66c3de94d6527af32a515b4e0071550f0075b26b17506c6de786711076bb6975df7687205e5531048fcd45081b90e92509394e17191caa3fb647ca149ac28131759fa89839e4a2460377dd097033420b3bdd956b72cb58767f2f465669ab942ac99880c15af8be2af2eb58b33bb2b7891e88415c263ab238e5b816add37c4dd8b08eca08784576b231177532448a4e9191f04847ed52396318086332478dfdeb26e423bef891f8c00d72267ca09683704cf0fe748b89a4754c64bcbb9b9e19b2a2e442a49d73b19caac99ac53fa5ca83e295c2021f2fcbd44bab23b1625f24b97ec50ee2d04b95130b7bbdacdcc785a755417e2163e02ba4eed6ff2f39a493c677bd87ced89796d59fc8e9a407cb568a69a09184065408e45f3877d8664afd658184f7cff0715abed9e278b815ac406daf92282461af9da06d2a86fd7879f1ab4f02b0ec80f849e2dbdfef30c8390f5ee11b524015bb475dc2dc1767419616b033db43a1e2af01e6d19b46d2d1a4b913ff644d7eb23843729d27e2826d01d35f92a5f57c2e8c681bf8e3b9bc5ec0a5cbe6ebb422de7758e607b17b04c3eaec14eb5d34d894999a13fec99bb32e566bdb1e4f76cab3aebe93746f9ad008908dc711147e9d21d5272717c01130bd96c4d3f0842406c8f23b9379739f2601c9f8799ad8fc924762bd63afb4217f25718a96de1a136200e9787a8d98410f58b09b089618d05ea7e08e4827e565a420f5f0e42eb7826ab0e4d8710c706f4564437331b783ee1d97ecb968d7a013eec9d0d1ec505fcc2447c4ebeda16df572e83b5d9916be679ef16ce1af3c485e00d54b5e0ef9e7fb3e265a3762efaa7ea991e84a9e9528edc8bf04d04e0435a50ad58ef2ca99d2efeecad29a00a33309bc1ba929317d5c65b547c961de4a4044bf26b7c877c5ae0bf517c944901646eb0638f11f5622b43fb42a53c1b0dfcc906392c31112b2d5500558dd85db1f85e664cc20a594fbac5b8efee07b1f9de831c2ac7d317e63c901c3ff4fb990a04c1b6f2f13394b6691f38abc319da59b83e2b119f8bfe5833fae982d859fe9d37465edf3c3f7e2ddd690a23b891482c7e1fab11b19bc0fdcf9d1665c6e92d87473ad558277375ec0731e4bb854a7b8c1068d0d0bca635fff39f4fe664a441083db39e780a947c42d1891c9860280493a3aef59ff5f7d1deeff4bd14c8afa2c7d3d7b7e8c181a7cfe20568fffa1c43f72d7309c344d62247c2769a7fb92d1a93d31e31bc56088e664271982c344a03bfab978ca42b9fb8c42c0345cfaa214d51af19982a768bbf700e81bcfc4d90b16d376dff69392695369acf45da484c4b56876c3cec486c7ed38cff9b1b9f3d1bf45796adff6ba47eed06c62590cf5b9f008fe4bd06b39b2a691ee43d0910cd6c2979dab4c002f9f46fafcbd600e65c9fdb2ebcc18399371d8d476d36f1552c0e52411dc5329ac359f5e42cbcfdf8dc4f13c9482430319991ba670de0baace2d1df268f0b1a4356a557d867e0fad00cac4723a8a121b791f1c65359e3fd00816ffab3748e68c8a960c23ea68ee42708e4b7a9f1972a1ac16075becc81f2c69e4ec6825ee7b9ec434866f22cfc6009fc178c8bb819ab8afacd6f0df6204807a1232badc035a87e5d2a45acec6525f6aa0f9cec75a24a6204b4f6758bdf1c6827e9143eae66231e4b225cff38f1f326f089437869081597a9cead2d1634ed8d4e4123b9d094fa7bcc89032a230f81de742f6efa49e5055c17406344ff92d619ecb4f4995d48327cc9dc381366d3747b4b40f4462b6d9a68ba8a9ef5e3925a48379df9f7f701b953e841cdf3e9539311560c2e335b03fed9c7713b296d69e1397f56c53545cb3b22083ef0e963cd299fb62afd2311fda185e9d1b95a1e8cf5839c0a777a93707e6f006293edcf4a221e8c2d95c3d2263d26bafc1398bcb8e0ac0d925f9c304cd9ac925cb751b44d49c0a973c98b353e01c895510f3a3a1e8ed655b7436da946bd8ed67cd6802d305df6da3aa0c71265856fa55f31f4239fa035266c924a157a1e84f0c04c04f97853b1c772b676c09a7fc9f729d03f8e1aea5ff2fddf5426ad679f1d934b3427d13a61e0220683c55ceb8cf666666362b8d4c2c197dd282224fe3580ffa10a69bd08baaa39187e7cb4bf28a67f9d63f4f17976c92e1cbf262ccbb59c25b69f84b2ef1870ecfd9a32d9392d2ba2b966cb2e0fcf4c5035dcbf592d2e02a714921c517037ddb95752793c272e1dbb986fad9534950a9c371b3d38ac62e49ef802c86c7f5c00584f8dce1ac1d345f89bce96f3722b3466864995e321322826ff7d3e0c80ecfdafedf236b527bd0d7ca7cea893d7e1e2bdfa56d461f49ee81337cbb3638b58b2915b336c3f5d18a1242745d08b9a6ad7c74d6743959ac34f3484c0c58711f100676036849b1afc047ee3e7501a99816f49159198975dfd9638ef76ea553879bf38719fb76da16b0905a2d9c3d2157a120d8e0fb5c5ecdd164da666ea1347b0513d2f9fa84e2e30082ae2e40cbba9eeab2333965c4aa041390674ba68ff8ac535641419cb6fccf31d6168ff6cd50932324ec3ea33441c117319079cfe8ac1c98cf82171e1258e678ca19cb41b40c36324c560fe800223c600c4ab711b20f509ee4622e373d19dea95b622d6e991cb0650031675fab289e075ab412958207efab492e9dae03b59a23670f75d9b56675dbdeed6721be9e993d86ba38b6ee3a1ba9d2ae8d011917f8f055a4eb1702f46bac3f3b3659935f1014e42c5f201bfd869887b59e6945e46fd58f1bd9a505036621c99adac37c9daeb863be3733ce6e3cbcfa249eb9443270ce3c2e7b1af74b753374c0d93db14d00d2c59a63e94bad2b75bf92a18eda6c958a76f9534ca616de53d10700d29a060422e118ca7d3c21dab53f56a1c94d9b89f927119b6d30832716b6b3c945ace43bffe756df78cf9be4ca8a6fa2efeec742076d4983e6f9eed6a47f8cb82e9f3d565e0248e607be3ebd15909261ae901259f6218baac912fd5e5ea22001275b76dadaa28a33e14796b79bcf066a85989c9ae91830bff7c7b043422f7e0217bed033a6139a03138e3db6ad229a5c30f0a3abb8162c6c94b6abb668363735af817b99eaf6dd8d2a198fd25367c62565518f77a973ee2e50ff54fd033abba74529b58ae2d1d204b1fcabb521247e47cd0c0f92c0aa2ca9762e69b168329475e7ad1e393821d0d1be95a1b515e9eb8f8593d3029fa8ed30dca040bd93d10ab1934c5c240e543e4c94602b99dbf06f7afb86bc038746ba4dd2fe2965089bc5c2ecd7e11c0a271e34a0542f14aedc6882b4431a419f85bcea5eddd8e3962cafc100aba40b16048f97f17bc7df055268ec412a926001560523e091596c921d6e4039149381fa746380a3f33e6a53c96555ba332bca1cb88e5610c9be6a62f96c3d3cba6952ab96fb13a018208d67b3230ebf946cfc8ed5bec17971377607aa26c000cc377e2a48eb1780b8f0118b149fd502cd70df3f068d32d13979330d05ae9063dbaefcf2d1a73074015df8794b3cd8295b40996b4b7e90a417265edccdd554609098eab36a517b76c5ecd655dc141a4a641b8897ab2754cf94a316e57c822fc2c9376ca4875121b6e1752b1d13134815cb1bf83340041968a2f128712463515ef7c6cf54491f57b5f9b065b7e10651b0930a06b3b83c9cd6818a15dbb61e3b469175336917b9cb87b93fa9c562ddb8bad60a34d62c1d4b81cb88d8630e08fafdfecf861d48ca3f7f85a4059299164557556d5c14c89bf34f2c047da7bddf0a6b36ec32e61a33133355444fe075b6f1939ec0b452f68c97ec77899bb16d749de0334222c379b6287bc2a9f6b4f22ca9f5c8c7142263ff642ee619bca1eaa47e4b1fbc88d9535cee9416311710ac7aae166237d9e728a7a441ceb13c61985086350506a5eb54c23fe5b4e1a0e720b7088cd4c4584a419096abb0318e01ede1f07cdaba1c87605ed303096ca4ae18338539bfea84e4c2fd77911758693cb3224f5abe90dafd8ec4e36cae5eac574ac9e5f84ccf0b2056eb644da94d284ec7dfb2547906ec54288e0820de7ec3e6447d031dd75af80c488f49fe6e9b698547bcdf8a5037868e3c7fa6fbed13a8de94e4a7394c6939cec6e904d2187327758267e6e4bf01a029409a6e79442c1bb66d5d3d9b058d5cc212b15650ed5668762ec46010419872115cc1cabc3f0e58a5f7eb9828a509c3246c52d8ae0d0fa72989a6b2d289d06d66d0dab247aa46991c2e22fba08cfc28ab0128f1290a34718689402b084e184f42bd42e6f372ab862b4bdbbc7ebca670eba32f19ec6ce9d31b3e1a70451982bb1c1d82f75de427398630bad3ed5911c1f85592edf03771fd6b0aa23e621aa4a645ab864f323de9469a7ba647899e374bc82f88bcd94ac8b0f12e36e2e4369c4b9d5b4972692a9d9172990da676c66789b79a4cb05c6fc252b960f76350a7ffc014d639f68c16a28589f7db4b1519882b2fe6a45af962c28995bc14eb1581516da141787879f9a7e076ce845797efdbb389698c0d1dc733e4d4516e2eceab0e8837a7210d26c7410d7c92214306d9cea38ed5d9c5b72ab07130c87a9fec32c961cccc13df4a499fdb5e321fa52b56650e12ff2fe88b180bee88b32432b35b064e4fabec8868bbacd253fc852afeb105522bec7284a4683a159bf11f85c339954ff02b0035984072f3600f91afc1512ab363e4423d35894fa4e3bcae96caadc24e40fb7b76dffbad4ed113c19dab57b51a491c07ee218314a3d53f91c7f7914fe5d51deeb9005b33c90aa44999fc443627fd598afe588a49173780b1e549b4c2ed681c14055a83bd38e081d6061131febdcbd570c43101abd24cb6a9ad1f4f4cdedcd560c82db7562e279690e8080e14bc6bb687a6fbea36ebefe01fd6ec5f386ead2dd74c169d25933d4fb7c53885affa266a44dfd6286af439e41a64f64492fba4f71258498ee0562f995585dcd57afdd6c0937d36861f16a8944923da0bbcf04f01f25d0ac4cd09af4ce24e47d9889d8e125e821d59cdab26f77ece18e0253cbdd00b0011f044529ff1a60ef16af9c467300d2e87cc6592a9d8306fddf2336505322b3deffb5c1bf50c7969bce61f85647ea7c82989ce25533cb082bf925403196cf3aa34f02e3d2c3dca4876e2f18ff09630e8b3c7c481e7234b6c7e196c1ad99481b67f361becef89aef617d22ba441870206bcc99fd6f443cf205576ad6e1a1b1f061ced2fd9689142e6fb6c6d8e70526d5e6b79b33a76925ded51c351a5e867653d843884e150aeb5c284e10d5abeaaef9cf4e32ad04fc95b1b6ddc5f0ab6234007a6a6cf971b3fe97bd03c318971730c8cd15a358a032944dfde9fffe8788fec35b9b4cfe144d7411b3065f0cdefe620c1ea06c60f3505bbf4f5d55d55ee4de6dbfce51619ffedb1afddf46fd8640c33d9f8c3631e792f04ba0ef65dbd1c2c01cdf859fe18be1d51ead159d065f9d2e1de73ab73f31c85c1173a3380449b133a1494d24d32ab5fc317afa07092202fccabf16dfb289e5c6f4de4cbd04e59d545141c7f8bec73f40a3e67ae838de27d533f3cec94868111d24b6fa5298049cf3b627658eebbb7fae24cf1b72166c37d06b2055b419550b90e6282fff6f321fc35c01ac429b830620d43fbb85ecc50b2855eff9c76f6a1e3c8e403e5f3f55dda87321573ec4e2617bdea86936fcf26ccf8296b1d82181fc3ed74e85a3f15466f0fb8331604cf4de0b8d7b8f57df98b0c2dcdac9d64ea170207e6e3733dbbc34a3cf22cb5d12aea952a4bd8cbf2bc686aa23a7eaeedd59aa927faa51940922211d401acfcc1fcc55743a0f231684b20452f1a28a21cb4372450286650499953e288a1f2fbb4eef19fbb39d31ca206649a27f86d6f1fedbd30de4f14ee7ee3c22aa1da3658c03af8f6c8c30046c6908d3940890b548ae46a847800430f53aed8974a064ac34c28f57b78fd5d43ba4adde36c73f28a99cdfdb2ac9d6b7b41c4475506e7e012e3b58fd76c56c047b3d0f037b4b35e1b2aebf0dfb60b1fc96dd49fc5727bda0b57a649168ed350592049a6f8ad21d78c2e9c94f3b7ffda38a4e6b5c342968e1efc18989a2a184bf15451ef9e6683db0b5ee057182533b69d9531b7ac63bfe1559cceefb59af0736a3b78257153b9f5c369ba0cfa6b18cdc6f92691d0fee4e4204018fe6895553e1ac1e815c2c3f554cda6fcba35964a4fd9bf738a0d27930e49108d31461fb145ac97b7a344379f60febeb567e2a5bf7c7b8ab81247e6008974155393bee880d7631b3e11983870ea1803eff7aa12b673d89ee507296bb2afff3f339ffe443c235a45b10db438067b7491645bd15366ad41f2d0063a2b8c289e5149bf0afe618459bfe3a0e065ce8e6bfd50afc71fc00a65299a0117dee17b2247b9c0916b026778f03df6f67392dca1ad57737ff9393c3939998151a02e78eb793ab1cfc85825e9640c3742fa1a8adf00f648ae09739790f72be2ec673554a78ba169fceaeb234d254c7716a9720e05f6b00178bb5851a7b43d3f953af38d404e7f25d50206b2db3c900a4b6f7de757b296a3ba23d5f262d41cf50080d6e25961e7bd44afc0935da3264d6fde06f7f6fdc0838b281e6ca5f011a6e38680c02003fbb1509ffc5cfbc7cd7a6be01ea0bdbca66a71b50121e7b2ec52bd5d769482299dd4b687a0c72924ef673236926c8c610a5042abe77e25c2731b42476475cd246ef21402619ac54e6253879d91a9418fc781f1704a53ff45f2df55d677393904ff0536c4af2a0f89ebceeec98ba70c684663d54fd4dad937bb6dcd597ef90c0908daa63c39f5cbb2272d7db97ce7c440a2b8ccca95a7d9831b3f84dff9ebb7d246f15da758a58f2bf605fbb5000a83871c2e4ae160fc8c03e56ea03ae4427c7e4771f3483ccf71cd21b30b27c4e501cd534deb92e4ada9bb217192bc3d6dcd53e2c52630b7e3a39ea458fb6b007a39e37e04f0f25be65107dce5e7d8b43266ab226ae5b70624ffc48d89b1802f3c2d29dca8a4eeef39e0c6e6cb2da145895d27d9cc7cd405fccae43d433e52622a632c7cd310ff332c8b37101dfe335ce7e0b0f968127d4ab692c9685f4324b40599e70c8be4e528cfb0eb9f2b0780fea74bb20b60d725e0730b12f4273fecb13a2748a6ff14d50070f9fe2f2e014b0cbe1589560265a285bd58fa93768a2ec261d82029566b225c64723f4d77aa6104d9170083caf224ac937026c2c91096feef3679028e87a875f97e66f34415cc014244f2de1a3a18ab203a8cdc7afdfa728741c4b4455f7c83bd24457701d67932a8bf3839e5e5916222ef5b87a15d83ba6b5a1f4c9dd7cc82bf1d573bdb92cf2eecdcea5f2d97504f1e4642c0ddf8b410bf212e654a0399a598d2ad932c3b21ff03ca7c668aa9f77915d7bffb2039da00d9e2f48456b03e7d29b0511ba4107849700fd702292e6399a00d166c51864cc7ba9561b58eb5d34828c531ce3ef925ee5944a826133a1ea49671c61d78bf800bd11ec5c5b5b6e0e020b95ac99a16b8ecfe792c0cd208384d926fa20c76ed3ace2eea70279ad578ee1c0afe4ab5f8712eff59487ab5aaec3ffed2f16721d63299226fe168fee85f0d894e6fe38a441fc10f52a1b98ba747fb29281b2f8347b9f1f7affe72798e5cf7818766b32087b99840756f8a5155e3bff7191abd08a9ca1781de332778494e9d5b8cb4b4b4a8bc38a8debad9130131d95e755a4bbf878b945a07eff25eb57ea5f840f7bb75e2337f377f5647dda86dc47e6dbdd7e6a13cef634796876f468d01455fcff98b93a55a6f03448749d59222f5946360835ffdf6391d502e0ded71393e7d3472445829150c0f055eb1eaab39245fec434bfecbeb647c64a2743e355fb6604189c7cce3c325df05223df85d24a9a33749581f0245efbc47a852e969bcd093419b7ae8150f0a2fd05fb3d0a72de0637b9ba4ea3610e3d3fd6e561f8d3b2f00147fcfeef94b2567f5da86222962eb963a1795c7d1b37671956456fca83e5448ef07916d3c67cee51e4d5fa78ad73b4e2772576e5afa7629d69160495bb905da67a91a6086413f09df5ed4595fb52d240f55e393f1abc1a3a4b69b921c2ac8e4220a2c50d7e521bc8a0fd6220404643aabb64687aa0798a3e6aa55ba89afabbf07dbdaf5f5fb85e9e846cded26f49c668cd901c5430a0c0e3948ce37ef54ccfc98094cdc91888050ee9a2c7d600aacb834ad8027fb35c16939861f9fcf7a6f094cdf93c3857a27026f1f66a1cac52f3d430453bdc335630f4334e57dd68df6486a1619561efd4eac9a6f76f98ea8087b70993c75d6155618ca8800be6255add9787d786bb42dc19f278f1a705e074d7731f59bb2a0bd93a96f5e93dff12c84544b0054626b120adee28870b13143ec68707656221df525ba2e265fa3bc78477182f73dec54c5574ecf5d9900dbb25e33985426f0acc05fde87a697c55154edc89506dcb12a4728673c6f17bba9e291c0f59301d535a77c5809bc0c7f0b7afce2a41798e939d2f99e559a0017e1dd366dd9080e514f2cb5574f348a5f1fe64406f2e02bb3bebfc6066daf4eae63f8e057fcab64c508bef25849732947f29f8d1c4a4dade74dd0c915cd6856b2df7da59a00697ab90d19f2ba439e5a0bcdac1f328cb8e2a5a0c096b2204806b8438d4803f4ec78bc0767d3a4fd2d093a02753afd862384c106b23d15e709d04139aed52b0e05fe8c90a061d89bbaadb58bfea06a3bb9086006a382ecdf71fcf479f0a9a9e3d39a679b16796532fd4c9601bc45ce58ea580326559da025a0d5b9cc4c053e7064c52ababdf2273406040001a67aa83de87a16373fe21ef257cce46630966e56cb924a40ebba31e1ceaf575373ef80fed6717873315c0d460ae4348ef191501fac1240f489cdbd20dc06f2a5121991d2dfd7ae132babc219bf5ab0200b1163a398a68082e1e98d923a1c18d78352a4b4b54fd2acb673b35f14b1039896d8e3612b6225551be9fd6996f647b83ee56fd58e3377624ad8bf2dd15b71ff3e2c2dc3d97f99d96ab81babed2b8ebbf68e60205ec9b68d2fe916c4ddc41ed9cfc376e383c9c25e427d1e824f4e8f7df9552464cbcaaa7a6c53af23a044d5b317155b3f2c8105392be07f5f412b92ebe80bb0bbef2565fc5906c8e9e5e9a4c7c4dd53c1a6bb1565fe2688764275be06974457bc422d78668e0ddd7cad95173f68fcde36bfbe5afc88dc9cd0a64edb1ffb444ae21606e7051757c0f278b4f40b0c989fcf6aa730953c798cf96cbf8fec15287023cfc46a3a37446e7bc72e5132a5b3e2b14f8d2267eb9d9156629e2c39510ddfcbd05edb87b9cde4817380f1aaf5129801da21471f2ea13ee841a176abf181b8236dcebd3b0b67f1918164cc5fc4845f460a8a2b777856962ee12ff2d42d2d8195ed5608bfb5c9eed2a65af6b975785f5adc615ae1d177b441a013f6c1e90ba134ecd62e605f39532f9dcc9d12a399f9d558127d2a4bff34f3d4f6d24f7a867141917cc95fd43fd6de2ff02c70693047d2213c41e7c88d39890d5e1ee5c44e8ed909d19001eff698cf9f8746b15096076c7cc1403d77156b116b8803e7360ea4f257710c8967b6e791ca026849305a853f7bb398f0b149811cee1bffd22afeb638c08834d0abce728262be81fed3b0b6936eb6539011d9d89135b5d76df8759062d8a5d7d98f0211cbca62820b848c55b5991882a71dcdc58accd6f12cc533b834745afbf51e4aefa4705935ce92675d844d5685071fb8b7fef64ddc557e90cf9d3aa9d316fe42d830913187e37708069497cee802d572acb5718b04266d9ff8d7e77ba068f1d73a1a0a79fb858c5ac9e42062494cdee35e2b8e22c0906b6c3e16d3e3e91a139fe41c0ca3881c7240ee65572ce14c417f5bc69292b7b6f87b722f1ee0b1a91cfd97340b04f1b6724b8f3112589ed822f42058de2f92c7ab2e80b201eea28552ed0a18530bd8f136037c684a61af366cd1c355db692c8d538b066a812c8847b2838e0a45959ac190e327aeb94dd86f5757415710d59824d553bfcc6a6fb4f3a618af4ab7650b827993fb9224c4dc7840f26e316dd95c4bcaa4dda85a6920d5f734af82b68eecac02956ec1c9b1cdff0b0d20c24a941a1e40bba21e342e72c67594c9a2da3e801db98bdb0ddcbe0eebcb65bce84a612ec730bc8987e51ed52dec1dae6294ae3812dbb32a5ceab805e73c0b5e73f24459933c61540d18613400777b654e4dace76d78ef2d066ea03db3f87a7d25b7c6df08c47997b8e4d781bbe0a4bf44827c508ce95b1a24b149fa3b933f3d6060c7c5d9c5bfc1f24065475a13fbd0f96a3d31293844ebbbf74a8b3b009978d614ae2c8c159150a2afa2af728c49f12f21b4136482f82eba1c92b958ac7c3c7232d812eda00084ba509a1a1c65f9c542d561be71499e5ca33e9555bcf16024c1043e346b4feb158e5eeb0f760088dcfaef1078c7041b16bcc14714ae22ee3cfcd3bdbb2ab38c70abd4cb5da613816fb65bd6e181f89626a406007ed02d2cc5100fc435461ebaa5a274a8d671025fca8a130e80b6540c01296bd1707b38a1570b8f98bd4bc4ed0af60a80ec97b14e5bb1d4d77897af0c1609b2a2170dfdb3760b872478f20a99bd9d1f4df693439bfd67195161091d3c4b371ba2a80d56d11e855a97724b6db07ad6ef605a98e7f58022212ca121db8760e65481c3ec2437f9548bae938e43e36e266099d7de1f70b9ec51a8d12f5a73866ba80952841e43e990c6a0b4126e11029591307b795ad685f5e14a95863c99e36a375f684517012403262af4dea8b964ab56294c0084724069ba151d0f9d2dd92d04fecc62006ad13e49ad16a91d02ad9810087c134287cf04427b7debedcdc2612a6cff62a2cfd2e713a51343c5a9049012eb4c5b748945b62bcf2ddda2a6427a378a75d4454e27746c83d17dbf35d22236805443ac276346b1c439ff973d1ae59a75ca05b68553b4f3619eab540594ec1ba7c2986ea537fe831da60845e875b1ca2153d2a95938ca9e4bbea4803e14a5583cb8d4da72b83f8331725f3aacc4d48e0ef07fd17a2685417e0273d55de7de26c359d3f8c3cec73a0ae4ea85dc72ee164f473e57286962f2181341f5d6dc1181176edc8e88991f5dda3e30de0fa2a5119846ba3206874741dcdcae4bf45079684fb523e544f3ac2f25bc34f1babf7d843c99c3c83513caeb57ee6b9148b606cb8035ac291c54388df4abfd1564343897ab2264fad881ced9c75b71c2703c1ad197b8bf3236ba4ea9ee23930efb99dcf4d299f5af8d0907c8f9a1765ede7d8cdc0b0676454a78ec56cd2c1d54dced3e41ab53006755f0c24118f9c2536c7cbbb8eac52d363d3a5896bb25caff02d0c3ed91ec579d7242c8ffa97e69b00f0b96e94b0f383d3cf70c17f92b59795d16300a0773c1e58200113d289aa62ae0c35ec7c7791581e275b2e4f80bf8dac1f7021a146d12d490a07006a6c3dcbbe27832903ce955d04c21c5a11aa6c65ac4368ac88190e1301617f00c1645565d498d263f0716b6e52ac758cbd16134235a333d4ecaf43520b1507b9b0243a3cee082a0901b9290bd8d0920b294729e63ba785e2fc8ea162b552d8bb3884ff5e79612cee7bf88c6ea22aaccff11d0b7f8ff44b1cc019421061e46b284a46fcb47447165a9b6ef47df649ac0b55de85780c0ef856dea5704fbabfd78a61bf34e2156e899716dc59967fed1b7220fe1229228b8d26a44bca752fa40443435527d7ccf00c7b9e377644e757d1e2c6276af79df6332826f1e8785acbed40744a5cb8c77d4106619e83e20d4c94ea35c40a386204bf98a4a55450346496b1ed92d9d9a9dfdcc97eee744bf1d9a6961ac5311c833f00a36b7c8b3f9563cd30b67342464d2c09156f4c62f64a9be45a160e1b5250e7a73f359d3e3601044170a4062231e236854d50ac48ee70f7c2e7a1f279d20bd11fec6c00a36cd92544c5c100105e6ea96e0a6c37324dfccd777cfb12c3def4608cc55ff0e3815aed628175791097a18f6fcb311f724f412c8017111263ac054496650a7f32231bcc9c4443a8d34a1ea665611b7dd55a4eeb8e428c642618131c296bb87aa0b0ec7133ab4278b00e4a68c4db57906693f1dbbee7864c15f7583b44ef82525d22ffdf98a4da1dab67d402ecc37e17df57dc40379258dfb14d11e069a8b162134ca318355079b56dfd02f3695badc7d02afde37be4ecbf81d7105df24e4bdf84d418973a61f95e790d585d7f4ac128f6cf719ea847945b02a0630fbf40d22225dd76f1054193ec726c7d7ab47a1984cadfeb17b9559970f92f74c19d4e4476069f2721782e4e6dd4524ccf89f1fae9671feed1770e90d02f209b9a4e1f53f553965d90dabed37670bb5b2f0dfdada86abceee10c62073627a83f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入访问密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Let&#39;s Go 1</title>
    <url>/2023/08/04/2/</url>
    <content><![CDATA[<h2 id="Go">Go</h2>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/06/go128.png" alt></p>
<h3 id="Go语言简介">Go语言简介</h3>
<p>Go是谷歌2009发布的第二款开源编程语言。Go语言学习曲线平缓，非常容易上手，而且它能够在不降低开发效率的情况下保证代码运行速度。Go语言是一门编译型语言，它结合了解释型语言的游刃有余，动态类型语言的开发效率，以及静态类型语言的安全性。</p>
<p>Go语言的主要特性有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>自动垃圾回收</p>
</li>
<li class="lvl-2">
<p>更丰富的内置类型</p>
</li>
<li class="lvl-2">
<p>函数多返回值</p>
</li>
<li class="lvl-2">
<p>错误处理</p>
</li>
<li class="lvl-2">
<p>匿名函数和闭包</p>
</li>
<li class="lvl-2">
<p>类型和接口</p>
</li>
<li class="lvl-2">
<p>并发编程</p>
</li>
<li class="lvl-2">
<p>反射</p>
</li>
<li class="lvl-2">
<p>语言交互性</p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<h3 id="Go-的常用库">Go 的常用库</h3>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vcGtnZG9j">Go语言标准库<i class="fa fa-external-link-alt"></i></span></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9uZXQvaHR0cC8=">net/http<i class="fa fa-external-link-alt"></i></span>：提供了HTTP客户端和服务端的实现</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9odG1sL3RlbXBsYXRlLw==">html/template<i class="fa fa-external-link-alt"></i></span>：提供了数据驱动的模板，用于生成可防止代码注入的安全的HTML内容</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy90ZXh0L3RlbXBsYXRlLw==">text/template<i class="fa fa-external-link-alt"></i></span>：提供了数据驱动的模板，用于生成可防止代码注入的安全的文本内容</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9yZWdleHAv">regexp<i class="fa fa-external-link-alt"></i></span>：提供了正则表达式的实现</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9kYXRhYmFzZS9zcWwv">database/sql<i class="fa fa-external-link-alt"></i></span>：提供了通用的接口，用于操作SQL数据库</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy90ZXN0aW5nLw==">testing<i class="fa fa-external-link-alt"></i></span>：提供了对Go包的自动化测试的支持</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9nby90eXBlcy8=">go/types<i class="fa fa-external-link-alt"></i></span>：提供了对Go包的类型安全的类型检查</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9nby9hc3Qv">go/ast<i class="fa fa-external-link-alt"></i></span>：提供了对Go包的抽象语法树的操作</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9nby9wYXJzZXIv">go/parser<i class="fa fa-external-link-alt"></i></span>：提供了对Go源代码的解析</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9nby90b2tlbi8=">go/token<i class="fa fa-external-link-alt"></i></span>：提供了对Go源代码的词法分析</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9nby9kb2Mv">go/doc<i class="fa fa-external-link-alt"></i></span>：提供了对Go源代码的文档提取</p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<h3 id="Go-能做什么">Go 能做什么</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>网络编程</p>
</li>
<li class="lvl-2">
<p>并发编程</p>
</li>
<li class="lvl-2">
<p>分布式系统</p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<h3 id="Go-的安装">Go 的安装</h3>
<p>我使用的是 Windows 操作系统，所以这里只介绍 Windows 下的安装方法。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL2RsLw==">官方下载地址<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL2RsLw==">https://golang.org/dl/<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuL2RsLw==">国内下载地址<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuL2RsLw==">https://golang.google.cn/dl/<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vZGw=">Go 中文网下载地址<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vZGw=">https://studygolang.com/dl<i class="fa fa-external-link-alt"></i></span></p>
<p>下载完成后，双击安装包，一路 Next 即可。</p>
<p>安装完成后，打开命令行，输入 <code>go version</code>，如果能够看到类似 <code>go version go1.xx.xx windows/amd64</code> 的输出，说明安装成功。</p>
<h3 id="Go-的环境变量">Go 的环境变量</h3>
<p>Go 的环境变量有三个：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>GOROOT：Go 的安装目录</p>
</li>
<li class="lvl-2">
<p>GOPATH：Go 的工作目录</p>
</li>
<li class="lvl-2">
<p>GOBIN：Go 的可执行文件目录</p>
</li>
</ul>
<h4 id="GOROOT">GOROOT</h4>
<p>GOROOT 是 Go 的安装目录，安装完成后，GOROOT 会自动添加到环境变量中，如果没有添加，可以手动添加。</p>
<h4 id="GOPATH">GOPATH</h4>
<p>GOPATH 是 Go 的工作目录，Go 的工作目录可以有多个，但是一般只设置一个。</p>
<p>GOPATH 的目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>bin：存放可执行文件</p>
</li>
<li class="lvl-2">
<p>pkg：存放编译后的包文件</p>
</li>
<li class="lvl-2">
<p>src：存放源代码</p>
</li>
</ul>
<h4 id="GOBIN">GOBIN</h4>
<p>GOBIN 是 Go 的可执行文件目录，一般情况下，GOBIN 的值为 <code>$GOPATH/bin</code>。</p>
<h4 id="设置环境变量">设置环境变量</h4>
<p>在 Windows 系统中，可以通过以下方式设置环境变量：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>右键点击“我的电脑”，选择“属性”，在弹出的窗口中选择“高级系统设置”，在弹出的窗口中选择“环境变量”，在弹出的窗口中选择“新建”，在弹出的窗口中输入变量名和变量值，点击“确定”即可。</p>
</li>
<li class="lvl-2">
<p>在命令行中输入 <code>set GOPATH=xxx</code>，xxx 为 GOPATH 的值。</p>
</li>
</ul>
<h3 id="开发工具">开发工具</h3>
<blockquote>
<p>IDE</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9nby8=">GoLand<i class="fa fa-external-link-alt"></i></span>：GoLand 是 JetBrains 推出的一款 Go 语言 IDE，功能强大，但是收费。</p>
</li>
</ul>
<blockquote>
<p>Go Playground</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9wbGF5LmdvbGFuZy5vcmcv">The Go Playground<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nb3BsYXkudG9vbHMv">Better Go Playground<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<blockquote>
<p>Editor</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">Visual Studio Code<i class="fa fa-external-link-alt"></i></span>：VS Code 是微软推出的一款轻量级的代码编辑器，功能强大，支持插件扩展，支持 Go 语言开发。</p>
</li>
</ul>
<p>初学者推荐使用 Go Playground，熟悉了 Go 语言的语法后，推荐使用 VS Code/GoLand。</p>
<h2 id="Hello-World">Hello World</h2>
<p>创建一个名为 <code>hello.go</code> 的文件，输入以下内容：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在命令行中输入 <code>go run hello.go</code>，如果能够看到 <code>Hello, World!</code> 的输出，说明安装成功。</p>
<h2 id="基本语法">基本语法</h2>
<h3 id="注释">注释</h3>
<p>Go 语言支持单行注释和多行注释。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="标识符">标识符</h3>
<p>Go 语言中的标识符用来命名变量、类型等程序实体。标识符由字母、数字、下划线组成，但是第一个字符不能是数字。Go 语言中的标识符严格区分大小写。</p>
<h3 id="关键字">关键字</h3>
<p>Go 语言中有 25 个关键字：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">break</span>        default      func         interface    <span class="keyword">select</span></span><br><span class="line"><span class="keyword">case</span>         defer        go           map          struct</span><br><span class="line">chan         <span class="keyword">else</span>         goto         package      switch</span><br><span class="line">const        fallthrough  <span class="keyword">if</span>           range        <span class="built_in">type</span></span><br><span class="line"><span class="built_in">continue</span>     <span class="keyword">for</span>          import       <span class="built_in">return</span>       var</span><br></pre></td></tr></table></figure>
<h3 id="变量">变量</h3>
<p>Go 语言中的变量声明格式为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">bool</span></span><br></pre></td></tr></table></figure>
<p>Go 语言中的变量声明格式为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = 值</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>Go 语言中的变量声明格式为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名<span class="number">1</span>, 变量名<span class="number">2</span>, 变量名<span class="number">3</span> = 值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c = <span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>Go 语言中的变量声明格式为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">变量名 := 值</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="string">&quot;hello&quot;</span></span><br><span class="line">c := <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>上面的例子中，Go 语言会根据变量的值自动推断变量的类型。</p>
<h4 id="命名规范">命名规范</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>变量名由字母、数字、下划线组成，但是第一个字符不能是数字。</p>
</li>
<li class="lvl-2">
<p>变量名严格区分大小写。</p>
</li>
<li class="lvl-2">
<p>变量名不能包含空格。</p>
</li>
<li class="lvl-2">
<p>变量名不能以数字开头。</p>
</li>
<li class="lvl-2">
<p>变量名不能使用 Go 语言的关键字。</p>
</li>
<li class="lvl-2">
<p>变量名不能使用 Go 语言的内置函数名。</p>
</li>
</ul>
<blockquote>
<p>驼峰命名法</p>
</blockquote>
<p>示范：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> myAge <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> myHeight <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isOk <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> hasError <span class="type">bool</span></span><br></pre></td></tr></table></figure>
<h4 id="其他操作">其他操作</h4>
<blockquote>
<p>打印内存地址</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;a)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>交换变量的值</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure>
<blockquote>
<p>空白标识符</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, b = b, a</span><br></pre></td></tr></table></figure>
<blockquote>
<p>多重赋值</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>变量的作用域</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">    fmt.Println(a, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全局变量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>匿名变量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a, _ := test()</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常量">常量</h3>
<p>Go 语言中的常量声明格式为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 常量名 = 值</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="常量-iota">常量 iota</h4>
<p>Go 语言中的常量 iota 是一个自增的枚举值，从 0 开始。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>iota 的使用</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="数据类型">数据类型</h3>
<p>Go 语言中的数据类型有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>布尔型：bool</p>
</li>
<li class="lvl-2">
<p>数字类型：int、int8、int16、int32、int64、uint、uint8、uint16、uint32、uint64、uintptr、float32、float64、complex64、complex128、byte、rune</p>
</li>
<li class="lvl-2">
<p>字符串：string</p>
</li>
<li class="lvl-2">
<p>派生类型：指针、数组、结构体、Channel、函数、切片、接口、Map</p>
</li>
</ul>
<h4 id="数据类型的转换">数据类型的转换</h4>
<p>Go 语言中的数据类型转换格式为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">变量名 := 数据类型(表达式)</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">float64</span>(a)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 JavaScript</title>
    <url>/2023/03/27/1/</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码。JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。<br>
JavaScript 是世界上最流行的脚本语言之一。<br>
JavaScript 是一种基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持 I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。<br></p>
<h3 id="JavaScript-与-ECMAScript">JavaScript 与 ECMAScript</h3>
<p>JavaScript 是 ECMAScript 的实现。ECMAScript 是由 ECMA（欧洲计算机制造商协会）通过 ECMA-262 标准来定义的一种脚本语言的规范。ECMAScript 的目的是为了使得 JavaScript 在不同的宿主环境中，表现出一致的行为。<br></p>
<h2 id="快速入门">快速入门</h2>
<h2 id="Hello-World">Hello World</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;Hello World!&quot;</span>);&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>以上是内部标签引入和外部标签引入的方式，还有一种是内联事件的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;点我&quot;</span> onclick=<span class="string">&quot;alert(&#x27;Hello World!&#x27;)&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<input type="button" value="点我" onclick="alert('Hello World!')">
<h3 id="JavaScript-语法">JavaScript 语法</h3>
<p>JavaScript 语法是由 ECMAScript、Web API 和 HTML DOM 组成的。<br></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>定义变量</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">var</span> z = x + y;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>定义函数</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p1 * p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>定义字符串</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carName1 = <span class="string">&quot;Volvo XC60&quot;</span>;   <span class="comment">// 使用双引号</span></span><br><span class="line"><span class="keyword">var</span> carName2 = <span class="string">&#x27;Volvo XC60&#x27;</span>;   <span class="comment">// 使用单引号</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>条件语句</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (time &lt; <span class="number">20</span>) &#123;</span><br><span class="line">  greeting = <span class="string">&quot;Good day&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  greeting = <span class="string">&quot;Good evening&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浏览器代码审查">浏览器代码审查</h3>
<p>在浏览器中，可以使用 F12 快捷键打开开发者工具，然后选择 Console 选项卡，就可以看到 JavaScript 的输出结果了。<br>注意善用开发者工具，可以帮助我们快速定位问题。<br></p>
<h3 id="数据类型">数据类型</h3>
<p>数值、字符串、图形、音频、视频等都可以被存储在变量中。<br>
js 不区分整数和浮点数，所有数字都是浮点数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>字符串</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123.1</span></span><br><span class="line"><span class="number">1.23e5</span></span><br><span class="line">-<span class="number">99</span></span><br><span class="line"><span class="title class_">NaN</span></span><br><span class="line"><span class="title class_">Infinity</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>字符串</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;John Doe&quot;</span></span><br><span class="line"><span class="string">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>布尔值</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>逻辑值</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>比较运算符</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=</span><br><span class="line">== <span class="comment">// 等于 类型不一样会转换类型</span></span><br><span class="line">=== <span class="comment">// 全等于 类型一样才相等</span></span><br><span class="line">!= <span class="comment">// 不等于</span></span><br><span class="line">!== <span class="comment">// 不全等于</span></span><br><span class="line">&gt; <span class="comment">// 大于</span></span><br><span class="line">&lt; <span class="comment">// 小于</span></span><br><span class="line">&gt;= <span class="comment">// 大于等于</span></span><br><span class="line">&lt;= <span class="comment">// 小于等于</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：== 和 === 的区别是，== 会进行类型转换，而 === 不会进行类型转换。<br>
NaN 不等于任何值，包括 NaN 本身。只能用 isNaN() 来判断一个值是否为 NaN。尽量避免使用浮点数进行计算，因为浮点数计算会产生误差。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>null 和 undefined</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span> <span class="comment">// 用于表示一个空对象指针</span></span><br><span class="line"><span class="literal">undefined</span> <span class="comment">// 用于表示一个未定义的值</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>数组</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：数组的索引是从 0 开始的。<br>
javascript 数组可以存储不同类型的数据。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>对象</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：对象的属性名是大小写敏感的。对象使用花括号 {} 来定义，属性名和属性值用冒号 : 分隔，多个属性之间用逗号 , 分隔。字典是一种特殊的对象，字典的属性名是字符串类型。数组使用方括号 [] 来定义，数组的元素之间用逗号 , 分隔。</p>
</blockquote>
<h4 id="注意">注意</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>严格区分大小写</p>
</li>
<li class="lvl-2">
<p>语句以分号结尾</p>
</li>
<li class="lvl-2">
<p>语句块以花括号 {} 包裹</p>
</li>
<li class="lvl-2">
<p>语句块中的第一条语句不要以分号开头</p>
</li>
<li class="lvl-2">
<p>语句块中的最后一条语句不要以分号结尾</p>
</li>
<li class="lvl-2">
<p>定义变量名称时，使用有意义的名称，不要使用 a、b、c 等无意义的名称，不能使用关键字和保留字作为变量名称，不能以数字开头，不能包含空格和特殊字符（如：!、@、#、$、%、^、&amp;、*、(、)、+、=、{、}、[、]、|、\、:、;、&quot;、'、&lt;、&gt;、?、/、`、~ 等）。</p>
</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcy9qcy10dXRvcmlhbC5odG1s">JavaScript 教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<iframe class="video-frame" src="//player.bilibili.com/player.html?aid=82042680&cid=140371738&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Let&#39;s Go 3</title>
    <url>/2023/08/07/1/</url>
    <content><![CDATA[<h2 id="Go-函数">Go 函数</h2>
<p>函数是基本的代码块，用于执行一个任务。</p>
<p>Go 函数定义格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span></span> [return_types] &#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数定义解析">函数定义解析</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>func：函数由 func 开始声明</p>
</li>
<li class="lvl-2">
<p>function_name：函数名称，函数名和参数列表一起构成了函数签名。</p>
</li>
<li class="lvl-2">
<p>parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。</p>
</li>
<li class="lvl-2">
<p>return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，则 return_types 不是必须的。</p>
</li>
<li class="lvl-2">
<p>函数体：函数定义的代码集合。</p>
</li>
</ul>
<h3 id="函数调用">函数调用</h3>
<p>定义函数只是指定了函数的形式，需要调用该函数才能执行指定的代码块。</p>
<p>函数调用就是执行函数定义的代码块。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span></span><br><span class="line">   <span class="keyword">var</span> ret <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用函数并返回最大值 */</span></span><br><span class="line">   ret = max(a, b)</span><br><span class="line"></span><br><span class="line">   fmt.Printf( <span class="string">&quot;最大值是 : %d\n&quot;</span>, ret )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数返回两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   <span class="comment">/* 声明局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      result = num1</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = num2</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数返回多个值">函数返回多个值</h3>
<p>Go 函数支持返回多个返回值，函数定义时可以定义返回值的类型和个数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a, b := swap(<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line">   fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数作为值、类型">函数作为值、类型</h3>
<p>在 Go 语言中，函数也是一种变量，我们可以通过 type 来定义它，它的类型就是所有拥有相同的参数，相同的返回值的一种类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cb <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> c cb</span><br><span class="line">   c = <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> x * x</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(c(<span class="number">10</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="形参、实参、可变参数与传值、传引用">形参、实参、可变参数与传值、传引用</h3>
<p>形参：形式参数，定义函数时，用于接收外部传入的数据。</p>
<p>实参：实际参数，调用函数时，传递给形参的数据。</p>
<p>可变参数：可变参数是指函数的参数数量不固定，可变参数需要放在形参最后。</p>
<p>传值：传值是指在调用函数时，将实际参数的值复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p>
<p>传引用：传引用是指在调用函数时，将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 b 的值 : %d\n&quot;</span>, b )</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 通过调用函数来交换值 */</span></span><br><span class="line">   swap(a, b)</span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 b 的值 : %d\n&quot;</span>, b )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义相互交换值的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   temp = x <span class="comment">/* 保存 x 的值 */</span></span><br><span class="line">   x = y    <span class="comment">/* 将 y 值赋给 x */</span></span><br><span class="line">   y = temp <span class="comment">/* 将 temp 值赋给 y*/</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：在上面的程序中，我们定义了一个 swap() 函数，用于交换传入的两个整型参数的值。</p>
<p>在 main() 函数中，我们声明了两个局部变量 a 和 b，并赋值为 100 和 200。</p>
<p>在调用 swap() 函数时，我们传递 a 和 b 的值作为参数，但实际上 swap() 函数接收到的是 a 和 b 的副本，swap() 函数交换的是这两个副本的值，并没有改变 a 和 b 的值。</p>
<h2 id="Go-函数方法">Go 函数方法</h2>
<p>Go 语言中同时有函数和方法。</p>
<p>一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。</p>
<p>所有给定类型的方法属于该类型的方法集。</p>
<p>语法格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(variable_name variable_data_type)</span></span> function_name() [return_type]&#123;</span><br><span class="line">   <span class="comment">/* 函数体*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>variable_name：变量名，实例中的接受者。</p>
</li>
<li class="lvl-2">
<p>variable_data_type：变量类型，实例中的接受者类型。</p>
</li>
<li class="lvl-2">
<p>function_name：函数名，实例中的函数名。</p>
</li>
<li class="lvl-2">
<p>return_type：返回类型，实例中的返回类型。</p>
</li>
</ul>
<h3 id="函数方法实例">函数方法实例</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">   radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> c1 Circle</span><br><span class="line">   c1.radius = <span class="number">10.00</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;圆的面积 = &quot;</span>, c1.getArea())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该 method 属于 Circle 类型对象中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> getArea() <span class="type">float64</span> &#123;</span><br><span class="line">   <span class="comment">//c.radius 即为 Circle 类型对象中的属性</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">3.14</span> * c.radius * c.radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Go-递归函数">Go 递归函数</h2>
<p>Go 语言支持递归，即在函数定义中调用自己。</p>
<p>但是在使用递归时，程序员需要注意定义一个退出条件，否则递归将陷入无限循环中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Factorial</span><span class="params">(n <span class="type">uint64</span>)</span></span>(result <span class="type">uint64</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      result = n * Factorial(n<span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> i <span class="type">int</span> = <span class="number">15</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;%d 的阶乘是 %d\n&quot;</span>, i, Factorial(<span class="type">uint64</span>(i)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="defer-语句">defer 语句</h3>
<p>Go 语言中的 defer 语句会将其后面跟随的语句进行延迟处理。</p>
<p>在 defer 归属的函数即将返回时，将延迟处理的语句按 defer 定义的逆序进行执行，也就是说，先被 defer 的语句最后被执行，最后被 defer 的语句，最先被执行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="闭包">闭包</h2>
<p>闭包是匿名函数，可在动态编程中使用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSequence</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   i:=<span class="number">0</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">      i+=<span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> i  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">/* nextNumber 为一个函数，函数 i 为 0 */</span></span><br><span class="line">   nextNumber := getSequence()  </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用 nextNumber 函数，i 变量自增 1 并返回 */</span></span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建新的函数 nextNumber1，并查看结果 */</span></span><br><span class="line">   nextNumber1 := getSequence()  </span><br><span class="line">   fmt.Println(nextNumber1())</span><br><span class="line">   fmt.Println(nextNumber1())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匿名函数推导式">匿名函数推导式</h3>
<p>匿名函数是指不需要定义函数名的一种函数实现方式。</p>
<p>匿名函数由一个不带函数名的函数声明和函数体组成。</p>
<p>匿名函数的优越性在于可以直接使用函数内的变量，不必申明。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 声明函数变量 */</span></span><br><span class="line">   getSquareRoot := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> math.Sqrt(x)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用函数 */</span></span><br><span class="line">   fmt.Println(getSquareRoot(<span class="number">9</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数式编程">函数式编程</h2>
<p>函数式编程是一种编程范式，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。</p>
<p>函数式编程语言最重要的基础是λ演算（lambda calculus），而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p>
<p>函数式编程的主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 声明函数变量 */</span></span><br><span class="line">   getSquareRoot := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> math.Sqrt(x)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用函数 */</span></span><br><span class="line">   fmt.Println(getSquareRoot(<span class="number">9</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Let&#39;s Go 2</title>
    <url>/2023/08/06/1/</url>
    <content><![CDATA[<h2 id="Go-运算符">Go 运算符</h2>
<h3 id="算术运算符">算术运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">相加</td>
<td style="text-align:center">A + B 输出结果 30</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">相减</td>
<td style="text-align:center">A - B 输出结果 -10</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">相乘</td>
<td style="text-align:center">A * B 输出结果 200</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">相除</td>
<td style="text-align:center">B / A 输出结果 2</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">求余</td>
<td style="text-align:center">B % A 输出结果 0</td>
</tr>
<tr>
<td style="text-align:center">++</td>
<td style="text-align:center">自增</td>
<td style="text-align:center">A++ 输出结果 11</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">自减</td>
<td style="text-align:center">A-- 输出结果 9</td>
</tr>
</tbody>
</table>
<h3 id="关系运算符">关系运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">检查两个操作数的值是否相等，如果相等则条件为真。</td>
<td style="text-align:center">(A == B) 为假。</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">检查两个操作数的值是否相等，如果不相等则条件为真。</td>
<td style="text-align:center">(A != B) 为真。</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td>
<td style="text-align:center">(A &gt; B) 为假。</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td>
<td style="text-align:center">(A &lt; B) 为真。</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td>
<td style="text-align:center">(A &gt;= B) 为假。</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td>
<td style="text-align:center">(A &lt;= B) 为真。</td>
</tr>
</tbody>
</table>
<h3 id="逻辑运算符">逻辑运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">如果两个操作数都非零，则条件为真。</td>
<td style="text-align:center">(A &amp;&amp; B) 为假。</td>
</tr>
<tr>
<td style="text-align:center">||</td>
<td style="text-align:center">如果两个操作数中有任意一个非零，则条件为真。</td>
<td style="text-align:center">(A || B) 为真。</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">用来反转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td>
<td style="text-align:center">!(A &amp;&amp; B) 为真。</td>
</tr>
</tbody>
</table>
<h3 id="位运算符">位运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。</td>
<td style="text-align:center">(A &amp; B) 输出结果 12，二进制解释： 0000 1100</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。</td>
<td style="text-align:center">(A | B) 输出结果 61，二进制解释： 0011 1101</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。</td>
<td style="text-align:center">(A ^ B) 输出结果 49，二进制解释： 0011 0001</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">二进制左移运算符。左操作数的值向左移动右操作数指定的位数。</td>
<td style="text-align:center">A &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">二进制右移运算符。左操作数的值向右移动右操作数指定的位数。</td>
<td style="text-align:center">A &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody>
</table>
<h3 id="赋值运算符">赋值运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">简单的赋值运算符，将一个表达式的值赋给一个左值</td>
<td style="text-align:center">C = A + B 将 A + B 的值赋给 C</td>
</tr>
<tr>
<td style="text-align:center">+=</td>
<td style="text-align:center">相加后再赋值</td>
<td style="text-align:center">C += A 相当于 C = C + A</td>
</tr>
<tr>
<td style="text-align:center">-=</td>
<td style="text-align:center">相减后再赋值</td>
<td style="text-align:center">C -= A 相当于 C = C - A</td>
</tr>
<tr>
<td style="text-align:center">*=</td>
<td style="text-align:center">相乘后再赋值</td>
<td style="text-align:center">C *= A 相当于 C = C * A</td>
</tr>
<tr>
<td style="text-align:center">/=</td>
<td style="text-align:center">相除后再赋值</td>
<td style="text-align:center">C /= A 相当于 C = C / A</td>
</tr>
<tr>
<td style="text-align:center">%=</td>
<td style="text-align:center">求余后再赋值</td>
<td style="text-align:center">C %= A 相当于 C = C % A</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;=</td>
<td style="text-align:center">左移后赋值</td>
<td style="text-align:center">C &lt;&lt;= 2 相当于 C = C &lt;&lt; 2</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;=</td>
<td style="text-align:center">右移后赋值</td>
<td style="text-align:center">C &gt;&gt;= 2 相当于 C = C &gt;&gt; 2</td>
</tr>
<tr>
<td style="text-align:center">&amp;=</td>
<td style="text-align:center">按位与后赋值</td>
<td style="text-align:center">C &amp;= 2 相当于 C = C &amp; 2</td>
</tr>
<tr>
<td style="text-align:center">^=</td>
<td style="text-align:center">按位异或后赋值</td>
<td style="text-align:center">C ^= 2 相当于 C = C ^ 2</td>
</tr>
<tr>
<td style="text-align:center">|=</td>
<td style="text-align:center">按位或后赋值</td>
<td style="text-align:center">C |= 2 相当于 C = C | 2</td>
</tr>
</tbody>
</table>
<h3 id="其他运算符">其他运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">返回变量存储地址</td>
<td style="text-align:center">&amp;a; 将给出变量的实际地址。</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">指针变量。</td>
<td style="text-align:center">*a; 是一个指针变量</td>
</tr>
</tbody>
</table>
<h3 id="📚-运算符案例">📚 运算符案例</h3>
<blockquote>
<p>算术运算符</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">21</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第一行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line">    c = a - b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第二行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line">    c = a * b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第三行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line">    c = a / b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第四行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line">    c = a % b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第五行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line">    a++</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第六行 - a 的值为 %d\n&quot;</span>, a)</span><br><span class="line">    a = <span class="number">21</span> <span class="comment">// 为了方便测试，a 这里重新赋值为 21</span></span><br><span class="line">    a--</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第七行 - a 的值为 %d\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关系运算符</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">21</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第一行 - a 等于 b\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第一行 - a 不等于 b\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第二行 - a 小于 b\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第二行 - a 不小于 b\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第三行 - a 大于 b\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第三行 - a 不大于 b\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Lets change value of a and b */</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第四行 - a 小于等于 b\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b &gt;= a) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第五行 - b 大于等于 a\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (a &amp;&amp; b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第一行 - 条件为 true\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a || b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第二行 - 条件为 true\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 修改 a 和 b 的值 */</span></span><br><span class="line">    a = <span class="literal">false</span></span><br><span class="line">    b = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (a &amp;&amp; b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第三行 - 条件为 true\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第三行 - 条件为 false\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(a &amp;&amp; b)) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第四行 - 条件为 true\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>位运算符</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">uint</span> = <span class="number">60</span> <span class="comment">/* 60 = 0011 1100 */</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">uint</span> = <span class="number">13</span> <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">uint</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    c = a &amp; b <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第一行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c = a | b <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第二行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c = a ^ b <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第三行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c = a &lt;&lt; <span class="number">2</span> <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第四行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c = a &gt;&gt; <span class="number">2</span> <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第五行 - c 的值为 %d\n&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>赋值运算符</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">21</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    c = a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 1 行 - =  运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c += a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 2 行 - += 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c -= a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 3 行 - -= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c *= a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 4 行 - *= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c /= a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 5 行 - /= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    c &lt;&lt;= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 6行  - &lt;&lt;= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c &gt;&gt;= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 7 行 - &gt;&gt;= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c &amp;= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 8 行 - &amp;= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c ^= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 9 行 - ^= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    c |= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 10 行 - |= 运算符实例，c 值为 = %d\n&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其他运算符</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int32</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">float32</span></span><br><span class="line">    <span class="keyword">var</span> ptr *<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 运算符实例 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 1 行 - a 变量类型为 = %T\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 2 行 - b 变量类型为 = %T\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;第 3 行 - c 变量类型为 = %T\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  &amp; 和 * 运算符实例 */</span></span><br><span class="line">    ptr = &amp;a <span class="comment">/* &#x27;ptr&#x27; 包含了 &#x27;a&#x27; 变量的地址 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a 的值为  %d\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;*ptr 为 %d\n&quot;</span>, *ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拓展">拓展</h2>
<h3 id="获取键盘输入">获取键盘输入</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;请输入一个整数：&quot;</span>)</span><br><span class="line">    fmt.Scan(&amp;a)</span><br><span class="line">    fmt.Println(<span class="string">&quot;你输入的整数是：&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编码规范">编码规范</h3>
<p>Go 语言中的变量名、函数名、常量名、包名、语句关键字等所有命名，都统一使用英文小写字母，多个单词之间用下划线分隔。</p>
<h2 id="Go-条件语句">Go 条件语句</h2>
<h3 id="if-语句">if 语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 小于 20\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a 的值为 : %d\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="if…else-语句">if…else 语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 小于 20\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 不小于 20\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a 的值为 : %d\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="if-嵌套语句">if 嵌套语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">100</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">200</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;a 的值为 100 ， b 的值为 200\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a 值为 : %d\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b 值为 : %d\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch-语句">switch 语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> grade <span class="type">string</span> = <span class="string">&quot;B&quot;</span></span><br><span class="line">    <span class="keyword">var</span> marks <span class="type">int</span> = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> marks &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">        grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">        grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>:</span><br><span class="line">        grade = <span class="string">&quot;C&quot;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        grade = <span class="string">&quot;D&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>, grade == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;良好\n&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;及格\n&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;不及格\n&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;差\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;你的等级是 %s\n&quot;</span>, grade)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fallthrough-语句">fallthrough 语句</h3>
<p>fallthrough 语句可以执行满足条件的 case 的下一个 case，是为了兼容 C 语言中的 case 设计的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> grade <span class="type">string</span> = <span class="string">&quot;B&quot;</span></span><br><span class="line">    <span class="keyword">var</span> marks <span class="type">int</span> = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> marks &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">        grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">        grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>:</span><br><span class="line">        grade = <span class="string">&quot;C&quot;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        grade = <span class="string">&quot;D&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;良好!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;及格!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;不及格!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;差!\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;你的等级是 %s\n&quot;</span>, grade)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="select-语句">select 语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c1, c2, c3 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> i1, i2 <span class="type">int</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> i1 = &lt;-c1:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;received &quot;</span>, i1, <span class="string">&quot; from c1\n&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> c2 &lt;- i2:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;sent &quot;</span>, i2, <span class="string">&quot; to c2\n&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> i3, ok := (&lt;-c3): <span class="comment">// same as: i3, ok := &lt;-c3</span></span><br><span class="line">        <span class="keyword">if</span> ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;received &quot;</span>, i3, <span class="string">&quot; from c3\n&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;c3 is closed\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;no communication\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Go-循环语句">Go 循环语句</h2>
<h3 id="for-循环">for 循环</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">15</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    numbers := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* for 循环 */</span></span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">0</span>; a &lt; <span class="number">10</span>; a++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 的值为: %d\n&quot;</span>, a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a &lt; b &#123;</span><br><span class="line">        a++</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 的值为: %d\n&quot;</span>, a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, x := <span class="keyword">range</span> numbers &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;第 %d 位 x 的值 = %d\n&quot;</span>, i, x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="break-语句">break 语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* for 循环 */</span></span><br><span class="line">    <span class="keyword">for</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 的值为 : %d\n&quot;</span>, a)</span><br><span class="line">        a++</span><br><span class="line">        <span class="keyword">if</span> a &gt; <span class="number">15</span> &#123;</span><br><span class="line">            <span class="comment">/* 使用 break 语句跳出循环 */</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="continue-语句">continue 语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* for 循环 */</span></span><br><span class="line">    <span class="keyword">for</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">15</span> &#123;</span><br><span class="line">            <span class="comment">/* 跳过此次循环 */</span></span><br><span class="line">            a = a + <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 的值为 : %d\n&quot;</span>, a)</span><br><span class="line">        a++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="goto-语句">goto 语句</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 循环 */</span></span><br><span class="line">    LOOP: <span class="keyword">for</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">15</span> &#123;</span><br><span class="line">            <span class="comment">/* 跳过迭代 */</span></span><br><span class="line">            a = a + <span class="number">1</span></span><br><span class="line">            <span class="keyword">goto</span> LOOP</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a 的值为 : %d\n&quot;</span>, a)</span><br><span class="line">        a++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="历遍-string">历遍 string</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="type">string</span> = <span class="string">&quot;Go is a beautiful language!&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;The length of str is: %d\n&quot;</span>, <span class="built_in">len</span>(str))</span><br><span class="line">    <span class="keyword">for</span> pos, char := <span class="keyword">range</span> str &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Character on position %d is: %c \n&quot;</span>, pos, char)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">    str2 := <span class="string">&quot;Japanese: 日本語&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;The length of str2 is: %d\n&quot;</span>, <span class="built_in">len</span>(str2))</span><br><span class="line">    <span class="keyword">for</span> pos, char := <span class="keyword">range</span> str2 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;character %c starts at byte position %d\n&quot;</span>, char, pos)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">    fmt.Println(<span class="string">&quot;index int(rune) rune    char bytes&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> index, <span class="type">rune</span> := <span class="keyword">range</span> str2 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%-2d    %d    %U &#x27;%c&#x27; % X\n&quot;</span>, index, <span class="type">rune</span>, <span class="type">rune</span>, <span class="type">rune</span>, []<span class="type">byte</span>(<span class="type">string</span>(<span class="type">rune</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="📚-循环语句案例">📚 循环语句案例</h3>
<blockquote>
<p>打印九九乘法表</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= i; j++ &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%d * %d = %d\t&quot;</span>, j, i, i*j)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><s>实测运行后报毒(雾)😒</s></p>
<blockquote>
<p>打印 55 方阵</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++ &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux user group manage</title>
    <url>/2023/03/31/1/</url>
    <content><![CDATA[<h2 id="What’s-user-and-group">What’s user and group</h2>
<ul class="lvl-0">
<li class="lvl-2">user: a person who use the computer</li>
<li class="lvl-2">group: a set of users</li>
<li class="lvl-2">user and group are used to control the access to the system</li>
</ul>
<blockquote>
<p>root is the super user, it can do anything.</p>
</blockquote>
<h2 id="User-and-group-file">User and group file</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>/etc/passwd: user info</p>
</li>
<li class="lvl-2">
<p>/etc/shadow: user password</p>
</li>
<li class="lvl-2">
<p>/etc/group: group info</p>
</li>
<li class="lvl-2">
<p>/etc/gshadow: group password</p>
</li>
<li class="lvl-2">
<p>/etc/login.defs: user default setting</p>
</li>
<li class="lvl-2">
<p>/etc/default/useradd: useradd default setting</p>
</li>
<li class="lvl-2">
<p>/etc/default/groupadd: groupadd default setting</p>
</li>
<li class="lvl-2">
<p>/etc/skel: user default home dir</p>
</li>
<li class="lvl-2">
<p>/etc/profile: user default env</p>
</li>
<li class="lvl-2">
<p>/etc/bashrc: user default bash env</p>
</li>
<li class="lvl-2">
<p>/etc/security/limits.conf: user default resource limit</p>
</li>
<li class="lvl-2">
<p>/etc/pam.d: user login pam config</p>
</li>
<li class="lvl-2">
<p>/etc/nsswitch.conf: user login nss config</p>
</li>
<li class="lvl-2">
<p>/etc/sudoers: user sudo config</p>
</li>
<li class="lvl-2">
<p>/etc/sudoers.d: user sudo config</p>
</li>
<li class="lvl-2">
<p>/etc/ssh/sshd_config: user ssh config</p>
</li>
<li class="lvl-2">
<p>/etc/ssh/ssh_config: user ssh config</p>
</li>
</ul>
<h2 id="User-and-group-command">User and group command</h2>
<h3 id="User-Manage">User Manage</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd <span class="comment"># add user</span></span><br><span class="line">userdel <span class="comment"># delete user</span></span><br><span class="line">usermod <span class="comment"># modify user</span></span><br><span class="line">passwd <span class="comment"># change user password</span></span><br><span class="line">chage <span class="comment"># change user password expire time</span></span><br></pre></td></tr></table></figure>
<h3 id="system-config-user-Tools">system-config-user Tools</h3>
<p>The system-config-user tools is a GUI tools to manage user and group<br>
Install:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install system-config-user</span><br></pre></td></tr></table></figure>
<h2 id="Account-Manage">Account Manage</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vipw <span class="comment"># edit /etc/passwd</span></span><br><span class="line">vigr <span class="comment"># edit /etc/group</span></span><br><span class="line">pwck <span class="comment"># check /etc/passwd</span></span><br><span class="line">grpck <span class="comment"># check /etc/group</span></span><br><span class="line"><span class="built_in">id</span> <span class="comment"># show user info</span></span><br><span class="line">finger <span class="comment"># show user info</span></span><br><span class="line">chfn <span class="comment"># change user info</span></span><br><span class="line">chsh <span class="comment"># change user shell</span></span><br><span class="line"><span class="built_in">whoami</span> <span class="comment"># show current user</span></span><br><span class="line">newgrp <span class="comment"># change current group</span></span><br></pre></td></tr></table></figure>
<h2 id="Example">Example</h2>
<table>
<thead>
<tr>
<th>Account</th>
<th>Full Name</th>
<th>Group</th>
<th>Accessable</th>
<th>Password</th>
</tr>
</thead>
<tbody>
<tr>
<td>myuser1</td>
<td>1st user</td>
<td>mygroup1</td>
<td>Y</td>
<td>Password</td>
</tr>
<tr>
<td>myuser2</td>
<td>2nd user</td>
<td>mygroup1</td>
<td>Y</td>
<td>Password</td>
</tr>
<tr>
<td>myuser3</td>
<td>3rd user</td>
<td>-</td>
<td>N</td>
<td>Password</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mygroup1</span><br><span class="line">useradd -g mygroup1 -c <span class="string">&quot;1st user&quot;</span> myuser1</span><br><span class="line">useradd -g mygroup1 -c <span class="string">&quot;2nd user&quot;</span> myuser2</span><br><span class="line">useradd -c <span class="string">&quot;3rd user&quot;</span> -s /sbin/nologin myuser3</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Password&quot;</span> | passwd --stdin myuser1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Password&quot;</span> | passwd --stdin myuser2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Password&quot;</span> | passwd --stdin myuser3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 1</title>
    <url>/2023/05/29/2/</url>
    <content><![CDATA[<h1>学习 MySQL 1</h1>
<p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System，关系数据库管理系统)应用软件之一。</p>
<p>为什么要学习 MySQL？因为 MySQL 是最流行的关系型数据库管理系统之一，而且 MySQL 是开源的，可以免费使用。</p>
<h2 id="什么是数据库">什么是数据库</h2>
<p>数据库 DB(Database) 是按照数据结构来组织、存储和管理数据的仓库，每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据。作用：数据库是存储数据的仓库，可以对数据进行增删改查。</p>
<h2 id="数据库的分类">数据库的分类</h2>
<p>数据库的分类有很多种，常见的数据库分类有以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>按照数据模型来分类</p>
<ul class="lvl-2">
<li class="lvl-6">关系型数据库：MySQL、Oracle、SQL Server、DB2、Access</li>
<li class="lvl-6">非关系型数据库：MongoDB、Redis、MemcacheDB</li>
</ul>
<blockquote>
<p>关系型数据库和非关系型数据库的区别：关系型数据库是使用表来存储数据，非关系型数据库是使用集合来存储数据。</p>
</blockquote>
</li>
<li class="lvl-2">
<p>按照数据库的部署方式来分类</p>
<ul class="lvl-2">
<li class="lvl-6">本地数据库：MySQL、Oracle、SQL Server、DB2、Access</li>
<li class="lvl-6">分布式数据库：MongoDB、Redis、MemcacheDB</li>
</ul>
<blockquote>
<p>本地数据库和分布式数据库的区别：本地数据库是部署在本地的，分布式数据库是部署在服务器上的。</p>
</blockquote>
</li>
<li class="lvl-2">
<p>按照数据库的功能来分类</p>
<ul class="lvl-2">
<li class="lvl-6">OLTP(On-Line Transaction Processing，联机事务处理)：MySQL、Oracle、SQL Server、DB2、Access</li>
<li class="lvl-6">OLAP(On-Line Analytical Processing，联机分析处理)：MongoDB、Redis、MemcacheDB</li>
</ul>
<blockquote>
<p>OLTP 和 OLAP 的区别：OLTP 是联机事务处理，主要用于日常的增删改查，OLAP 是联机分析处理，主要用于数据分析。</p>
</blockquote>
</li>
</ul>
<p><mark>DMBS(Database Management System，数据库管理系统)</mark>：数据库管理系统是位于用户与操作系统之间的一层数据管理软件，它是一个大型的复杂的软件系统，它的主要功能是对数据库进行管理和维护，它还可以为用户提供一个统一的、抽象的数据视图，屏蔽了底层数据库的复杂性，使用户可以方便地使用数据库中的数据。</p>
<h2 id="MySQL-的安装">MySQL 的安装</h2>
<p>MySQL Community Server 是 MySQL 的开源社区版，可以免费使用，MySQL Community Server 的下载地址为：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcw==">https://dev.mysql.com/downloads<i class="fa fa-external-link-alt"></i></span></p>
<p>SQLyog 是 MySQL 的图形化管理工具，可以免费使用，SQLyog 的下载地址为：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnlvZy9zcWx5b2ctY29tbXVuaXR5">https://github.com/webyog/sqlyog-community<i class="fa fa-external-link-alt"></i></span></p>
<p>MySQL 8 安装教程： <span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvYS5jbi9hLzk2MC5odG1s">https://www.icoa.cn/a/960.html<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="SQLyog-安装教程：一直下一步即可">SQLyog 安装教程：一直下一步即可</h2>
<p>安装过程中出现奇怪问题一般是没有取得管理员权限，解决方法：右键以管理员身份运行。</p>
<h2 id="SQLyog-的使用">SQLyog 的使用</h2>
<p>SQLyog 是 MySQL 的图形化管理工具，可以通过 SQLyog 来管理 MySQL 数据库。<br>
<img src="./SQLyog.png" alt></p>
<p>都有GUI了难道还要 <s>教？</s> 用命令行？当然不是，但是命令行也是必须要学的，因为有些时候只能用命令行，比如服务器上没有图形化界面，只能通过命令行来管理数据库。</p>
<p>注意，我现在使用的版本是 SQLyog-13.2.0-0.x64Community，配置的 <code>基字符集</code> 为 <code>utf8mb4</code>，数据库排序规则为 <code>utf8mb4_general_ci</code>，如果你的版本不一样，那么可能会出现一些问题，比如插入中文乱码，这时候你可以尝试修改配置，或者卸载重装。</p>
<h2 id="基本命令行操作">基本命令行操作</h2>
<h3 id="命令行的打开和关闭">命令行的打开和关闭</h3>
<p>启动 MySQL 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
<p>关闭 MySQL 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>
<p>登录 MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>退出 MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>修改密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;new password&#x27;</span>;</span><br><span class="line"># MySQL <span class="number">8.0</span> 以上版本已经停止使用<span class="keyword">update</span>修改密码</span><br></pre></td></tr></table></figure>
<p>刷新权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h3 id="命令行的基本操作">命令行的基本操作</h3>
<p><mark>在MySQL中，每条命令必须以<strong>分号</strong>结尾，否则会报错</mark></p>
<hr>
<p>注释</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"># 单行注释</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>
<p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名;</span><br></pre></td></tr></table></figure>
<p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure>
<p>使用数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure>
<p>查看数据库中的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>
<p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<p>查看表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure>
<p>查看表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>, ...) <span class="keyword">values</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<p>修改数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>, 列名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>, ... <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>
<p>删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>
<hr>
<p>名词解释<br>
DDL(Data Definition Language，数据定义语言)：用来定义数据库对象：数据库、表、列等，关键字：create、drop、alter 等。<br>
DML(Data Manipulation Language，数据操作语言)：用来对数据库中表的数据进行增删改，关键字：insert、update、delete 等。<br>
DQL(Data Query Language，数据查询语言)：用来查询数据库中表的记录(数据)，关键字：select、from、where 等。<br>
DCL(Data Control Language，数据控制语言)：用来定义数据库的访问权限和安全级别，及创建用户，关键字：grant、revoke 等。</p>
<p>CRUD(Create、Retrieve、Update、Delete，增删改查)：CRUD 是对数据库操作的基本要求，也就是对数据的增删改查。</p>
<hr>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 10</title>
    <url>/2023/07/09/1/</url>
    <content><![CDATA[<h2 id="JDBC">JDBC</h2>
<p>JDBC 是 Java Database Connectivity 的缩写，它是 Java 语言操作数据库的统一接口，它定义了一套操作所有关系型数据库的规则，程序员使用 JDBC 接口，可以连接不同的数据库，执行 SQL 语句，获取执行结果。</p>
<h2 id="数据库驱动">数据库驱动</h2>
<p>JDBC 驱动是一个 Java 类，它实现了 JDBC 接口，不同的数据库需要不同的驱动。例如，MySQL 驱动就是一个 com.mysql.jdbc.Driver 类，它实现了 JDBC 接口，程序通过 JDBC 接口操作 MySQL 数据库时，实际上是调用 MySQL 驱动的代码。</p>
<p>驱动 Driver，驱动程序，通常意义上的驱动程序是指硬件驱动程序，它是一段程序代码，用来控制硬件设备的工作。在 Java 中，驱动程序是指实现了 java.sql.Driver 接口的类，它可以连接到某个具体的数据库。</p>
<h2 id="第一个-JDBC-程序">第一个 JDBC 程序</h2>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MzgzOTc1L2FydGljbGUvZGV0YWlscy8xMDkxNzk4ODY=">Java连接MySQL8.0以上版本数据库方式<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMjU0NDg5L2FydGljbGUvZGV0YWlscy8xMDU5MTMyMzE=">JAVA【基础】jdbc 连接 MYSQL 8.0+ 从安装到使用——搭建开发环境<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<ol start="0">
<li class="lvl-3">
<p>前提：创建数据库</p>
</li>
</ol>
<details>
<summary>点击展开代码</summary>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jdbcstudy <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br><span class="line"></span><br><span class="line">USE jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birthday` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;12345601@mail.com&#x27;</span>, <span class="string">&#x27;1990-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;12345602@mail.com&#x27;</span>, <span class="string">&#x27;1990-01-02&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;12345603@mail.com&#x27;</span>, <span class="string">&#x27;1990-01-03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>
</details>
<blockquote>
<p>注意：如果使用的是 MySQL 8.0 以上版本，需要修改数据库连接 URL，添加 useSSL=false 和 serverTimezone=UTC 参数，例如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useSSL=false&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>我使用了 MySQL 8.0.33 版本，所以需要修改数据库连接 URL。所以以下的步骤都适用于 MySQL 8.0 以上版本。</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>使用 IDEA 创建一个普通的 Java 项目</p>
</li>
<li class="lvl-3">
<p>导入 MySQL 驱动包通常情况下，我们会把驱动包放到项目的 lib 目录下，然后在 IDEA 中添加依赖，这样就可以在代码中使用 MySQL 驱动了。MySQL 驱动包可以在 MySQL 官网下载，也可以在 IDEA 中直接下载。<br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9jb25uZWN0b3Ivai8=">Connector/J<i class="fa fa-external-link-alt"></i></span>，选择 Platform Independent 下载，下载完成后，解压，然后把 mysql-connector-java-x.x.x-bin.jar 放到项目的 lib 目录下，然后在 IDEA 中添加为库。可以看到，成功后，库的图标变成了蓝色的，并且可以看到库的源码。</p>
</li>
</ol>
<blockquote>
<p>注意：如果是 Maven 项目，可以直接在 pom.xml 中添加依赖，不需要手动下载驱动包。</p>
</blockquote>
<ol start="3">
<li class="lvl-3">
<p>测试代码新建 src 目录，然后在 src 目录下创建包，注意将 src 目录标记为源码目录，创建包 com.jdbcstudy，然后创建类 JDBCStudy，编写代码：</p>
</li>
</ol>
<details>
<summary>点击展开代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;<span class="comment">//导包</span></span><br><span class="line"><span class="comment">//新建一个测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCStudy</span> &#123;</span><br><span class="line"></span><br><span class="line">    String databaseName=<span class="string">&quot;jdbcstudy&quot;</span>;<span class="comment">//数据库名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;<span class="comment">//使用管理员账号启动</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;<span class="comment">//数据库密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/&quot;</span>+databaseName+<span class="string">&quot;?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JDBCStudy</span> <span class="variable">myJDBC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDBCStudy</span>();</span><br><span class="line">        myJDBC.connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//启动JDBC驱动</span></span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">            <span class="comment">//链接数据库</span></span><br><span class="line">            connection = DriverManager.getConnection(URL, user, pwd);</span><br><span class="line">            <span class="comment">//查询数据</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//mysql语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM jdbcstudy.user;&quot;</span>;</span><br><span class="line">            <span class="comment">//查询数据</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(query);</span><br><span class="line">            <span class="comment">//展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                <span class="comment">// 输出数据</span></span><br><span class="line">                System.out.println(<span class="string">&quot;id: &quot;</span> + id);</span><br><span class="line">                System.out.println(<span class="string">&quot;password: &quot;</span> + password);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            resultSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            connection.close();</span><br><span class="line">            <span class="comment">//下面是异常处理</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(connection!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>总结：</p>
<ol>
<li class="lvl-3">
<p>加载驱动：<code>Class.forName(DRIVER);</code></p>
</li>
<li class="lvl-3">
<p>连接数据库：<code>DriverManager.getConnection(URL, user, pwd);</code></p>
</li>
<li class="lvl-3">
<p>创建 Statement 对象：<code>connection.createStatement();</code></p>
</li>
<li class="lvl-3">
<p>执行 SQL 语句：<code>statement.executeQuery(query);</code></p>
</li>
<li class="lvl-3">
<p>处理结果集：<code>resultSet.next()</code>，<code>resultSet.getInt(&quot;id&quot;)</code>，<code>resultSet.getString(&quot;password&quot;)</code>。</p>
</li>
<li class="lvl-3">
<p>关闭连接：<code>resultSet.close();statement.close();connection.close();</code></p>
</li>
</ol>
<h2 id="JDBC-对象解释">JDBC 对象解释</h2>
<p>每个对象使用的方法都有很多，这里只是列出了一些常用的方法，更多的方法可以查看官方文档。</p>
<h3 id="DriverManager">DriverManager</h3>
<p>DriverManager 是驱动管理类，它负责管理 JDBC 驱动，开发者不需要直接和 JDBC 驱动打交道，而是通过 DriverManager 间接和 JDBC 驱动打交道。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="URL">URL</h3>
<p>JDBC URL 是一个字符串，它包含了连接数据库的信息，格式如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">jdbc:subprotocol:subname</span><br></pre></td></tr></table></figure>
<p>其中，subprotocol 是数据库的类型，subname 是数据库的地址。例如，MySQL 的 URL 格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Connection">Connection</h3>
<p>Connection 表示一个数据库连接，它是一个接口，定义了所有数据库连接的公共方法。程序通过 Connection 接口访问数据库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure>
<h3 id="Statement">Statement</h3>
<p>Statement 表示一个 SQL 语句的对象，它用于执行一个 SQL 语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br></pre></td></tr></table></figure>
<h4 id="PreparedStatement">PreparedStatement</h4>
<p>PreparedStatement 表示一个预编译的 SQL 语句的对象，它可以执行动态 SQL 语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(query);</span><br></pre></td></tr></table></figure>
<h4 id="CallableStatement">CallableStatement</h4>
<p>CallableStatement 表示一个可以调用数据库存储过程的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CallableStatement</span> <span class="variable">callableStatement</span> <span class="operator">=</span> connection.prepareCall(query);</span><br></pre></td></tr></table></figure>
<h3 id="ResultSet">ResultSet</h3>
<p>ResultSet 表示一个结果集，它封装了从数据库查询到的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(query);</span><br></pre></td></tr></table></figure>
<h3 id="SQLException">SQLException</h3>
<p>SQLException 是一个异常类，它是在访问数据库时发生错误时抛出的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关闭资源">关闭资源</h2>
<p>在使用完数据库资源后，需要关闭资源，以释放资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 11</title>
    <url>/2023/07/12/1/</url>
    <content><![CDATA[<h2 id="Statement-详解">Statement 详解</h2>
<p>Statement 用于执行静态 SQL 语句，并返回它所生成结果的对象。Statement 接口提供了三种执行 SQL 语句的方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>executeQuery：执行查询数据库的 SQL 语句，返回一个 ResultSet 对象。</p>
</li>
<li class="lvl-2">
<p>executeUpdate：用于执行 INSERT、UPDATE 或 DELETE 语句以及 SQL DDL（数据定义语言）语句，如 CREATE TABLE 和 DROP TABLE 等。</p>
</li>
<li class="lvl-2">
<p>execute：用于执行返回多个结果集、多个更新计数或二者组合的语句。</p>
</li>
</ul>
<p>CRUD(增删改查)操作中，只有查询操作使用 executeQuery 方法，其他操作使用 executeUpdate 方法。</p>
<h2 id="CRUD-操作">CRUD 操作</h2>
<h3 id="增-insert">增 insert</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO jdbcstudy.user (id, password) VALUES (1, &#x27;123456&#x27;);&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> statement.executeUpdate(insert);</span><br><span class="line">System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br></pre></td></tr></table></figure>
<h3 id="删-delete">删 delete</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM jdbcstudy.user WHERE id = 1;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> statement.executeUpdate(delete);</span><br><span class="line">System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br></pre></td></tr></table></figure>
<h3 id="改-update">改 update</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">update</span> <span class="operator">=</span> <span class="string">&quot;UPDATE jdbcstudy.user SET password = &#x27;654321&#x27; WHERE id = 1;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> statement.executeUpdate(update);</span><br><span class="line">System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br></pre></td></tr></table></figure>
<h3 id="查-select">查 select</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM jdbcstudy.user;&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(query);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;id: &quot;</span> + id);</span><br><span class="line">    System.out.println(<span class="string">&quot;password: &quot;</span> + password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
</blockquote>
<p>这里使用 executeQuery 方法执行查询操作，使用 executeUpdate 方法执行增删改操作。采用 while 循环，因为查询结果可能有多条数据。在使用 Statement 执行 SQL 语句时，需要注意 SQL 注入问题。</p>
<h3 id="代码实现">代码实现</h3>
<p><code>db.properties</code> 文件是数据库配置文件，用于存放数据库的配置信息，例如数据库的 URL、用户名、密码等。在项目中，我们需要使用这些配置信息，所以需要读取这个文件。这里使用 Properties 类来读取配置文件。</p>
<blockquote>
<p>编写 <code>db.properties</code> 文件</p>
</blockquote>
<p>该文件用于存放数据库的配置信息，内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/jdbcstudy?useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">user=root</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编写 <code>DBUtil.java</code> 文件</p>
</blockquote>
<p>该文件用于读取 <code>db.properties</code> 文件中的数据库配置信息，并加载数据库驱动，作为数据库连接的工具类。内容如下：</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="comment">// 一定要在静态代码块中加载数据库驱动</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取 db.properties 文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> DBUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            <span class="comment">// 读取数据库连接信息</span></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="comment">// 加载数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p>实际上，<code>DBUtil.java</code> 文件中的代码可以使用配置文件来代替，这样就可以实现代码的解耦。当前，我们只需要修改 <code>db.properties</code> 文件，就可以实现数据库的切换。</p>
<blockquote>
<p>编写 <code>InsertTest.java</code> 文件</p>
</blockquote>
<p>该文件用于测试插入操作。内容如下：</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jdbcstudy.util.DBUtil;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取数据库连接</span></span><br><span class="line">            connection = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 获取 Statement 对象</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 定义插入 SQL 语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO jdbcstudy.user (id, password) VALUES (1, &#x27;123456&#x27;);&quot;</span>;</span><br><span class="line">            <span class="comment">// 执行插入操作</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> statement.executeUpdate(insert);</span><br><span class="line">            System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭数据库连接</span></span><br><span class="line">            DBUtil.close(connection, statement, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<blockquote>
<p>编写 <code>SelectTest.java</code> 文件</p>
</blockquote>
<p>该文件用于测试查询操作。内容如下：</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jdbcstudy.util.DBUtil;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取数据库连接</span></span><br><span class="line">            connection = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 获取 Statement 对象</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 定义查询 SQL 语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM jdbcstudy.user;&quot;</span>;</span><br><span class="line">            <span class="comment">// 执行查询操作</span></span><br><span class="line">            resultSet = statement.executeQuery(query);</span><br><span class="line">            <span class="comment">// 展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                <span class="comment">// 输出数据</span></span><br><span class="line">                System.out.println(<span class="string">&quot;id: &quot;</span> + id);</span><br><span class="line">                System.out.println(<span class="string">&quot;password: &quot;</span> + password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭数据库连接</span></span><br><span class="line">            DBUtil.close(connection, statement, resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="SQL-注入">SQL 注入</h2>
<p>SQL 注入是指通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。SQL 注入攻击是目前网络上最普遍的一种攻击方式，它可以轻易的将 Web 站点变成可控制的黑客站点。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhZHlfa2lsbGVyOS9hcnRpY2xlL2RldGFpbHMvMTA3MzAwMDc5">SQL 注入攻击原理及防御<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="SQL-注入演示">SQL 注入演示</h3>
<blockquote>
<p>创建 <code>user</code> 表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>插入数据</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编写 <code>LoginTest.java</code> 文件</p>
</blockquote>
<p>该文件用于测试登录操作。内容如下：</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jdbcstudy.util.DBUtil;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取数据库连接</span></span><br><span class="line">            connection = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 获取 Statement 对象</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 定义查询 SQL 语句</span></span><br><span class="line">            <span class="comment">// 该 SQL 语句存在 SQL 注入问题</span></span><br><span class="line">            <span class="comment">// 因为用户输入的信息是不可信的</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM jdbcstudy.user WHERE username = &#x27;&quot;</span> + username + <span class="string">&quot;&#x27; AND password = &#x27;&quot;</span> + password + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            <span class="comment">// 执行查询操作</span></span><br><span class="line">            resultSet = statement.executeQuery(query);</span><br><span class="line">            <span class="comment">// 判断是否查询到了数据</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭数据库连接</span></span><br><span class="line">            DBUtil.close(connection, statement, resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p>在上面的代码中，我们使用了 <code>Statement</code> 对象的 <code>executeQuery</code> 方法执行查询操作，但是这里存在 SQL 注入问题，因为用户输入的信息是不可信的。</p>
<p>这里 SQL 语句的拼接是通过字符串拼接实现的，如果用户输入的信息中包含 SQL 语句的关键字，那么就会导致 SQL 注入问题。</p>
<blockquote>
<p>测试 SQL 注入</p>
</blockquote>
<p>输入用户名：<code>admin</code>，密码：<code>123456</code>，登录成功。</p>
<p>参考 SQL 语句：<code>SELECT * FROM jdbcstudy.user WHERE username = 'admin' AND password = '123456';</code>可以发现，这里 SQL 注入简单来说就是将用户输入的信息拼接到 SQL 语句中，导致 SQL 语句的含义发生了变化，以此来达到欺骗服务器执行恶意的 SQL 命令。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 12</title>
    <url>/2023/07/13/1/</url>
    <content><![CDATA[<h2 id="PreparedStatement">PreparedStatement</h2>
<p>PreparedStatement 是 Statement 的子接口，它是预编译的，可以防止 SQL 注入，效率更高。🤗</p>
<h2 id="CRUD-操作">CRUD 操作</h2>
<h3 id="增-insert">增 insert</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO jdbcstudy.user (id, password) VALUES (?, ?);&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(insert);</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ol>
<li class="lvl-3">使用 PreparedStatement 时，SQL 语句中的参数使用 ? 占位符代替。</li>
<li class="lvl-3">使用 PreparedStatement 时，SQL 语句中的参数下标从 1 开始，而不是从 0 开始。</li>
</ol>
</blockquote>
<h3 id="删-delete">删 delete</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM jdbcstudy.user WHERE id = ?;&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(delete);</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h3 id="改-update">改 update</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">update</span> <span class="operator">=</span> <span class="string">&quot;UPDATE jdbcstudy.user SET password = ? WHERE id = ?;&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(update);</span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;654321&quot;</span>);</span><br><span class="line">preparedStatement.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h3 id="查-select">查 select</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM jdbcstudy.user WHERE id = ?;&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(query);</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;id: &quot;</span> + id);</span><br><span class="line">    System.out.println(<span class="string">&quot;password: &quot;</span> + password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代码示例">代码示例</h2>
<p><code>import com.jdbcstudy.util.DBUtil;</code> 用于导入 DBUtil 类，DBUtil 类用于创建数据库连接和关闭数据库连接。这个类是上一个文章中的代码，这里不再赘述。😉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> com.jdbcstudy.util.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQL12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建数据库连接</span></span><br><span class="line">            connection = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 增</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO jdbcstudy.user (id, password) VALUES (?, ?);&quot;</span>;</span><br><span class="line">            <span class="comment">// 创建 PreparedStatement 对象</span></span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(insert);</span><br><span class="line">            <span class="comment">// 设置参数</span></span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行 SQL 语句</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">            <span class="comment">// 输出结果</span></span><br><span class="line">            System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(connection, statement, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同理，删、改、查操作也是一样的，只需要修改 SQL 语句和设置参数即可。</p>
<p>PreparedStatement 防止 SQL 注入的原理是：SQL 语句和参数分开，参数使用 ? 占位符代替，参数和 SQL 语句分开，所以无法注入。</p>
<h2 id="IDEA-连接-MySQL">IDEA 连接 MySQL</h2>
<p>图形界面操作数据库更加方便，所以我们可以使用 IDEA 连接 MySQL。</p>
<details>
<summary>请君点击一看</summary>
<p><s>图形界面还用教程吗？😈</s></p>
</details>
<h2 id="JDBC-事务">JDBC 事务</h2>
<p>事务是数据库操作的最小单位，它是一个不可分割的工作单位，事务中的操作要么全部成功，要么全部失败。相关笔记请看 <a href="/2023/06/30/1">MySQL 事务</a>.</p>
<blockquote>
<p>ACID<br>
ACID 是事务的四个特性，分别是</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>原子性（Atomicity）: 事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</p>
</li>
<li class="lvl-2">
<p>一致性（Consistency）: 一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分失败部分成功。</p>
</li>
<li class="lvl-2">
<p><strong>隔离性</strong>（Isolation）: 通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。</p>
</li>
<li class="lvl-2">
<p>持久性（Durability）: 一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响。</p>
</li>
</ul>
<p>有关隔离性，存在以下问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>脏读：一个事务读取到另一个事务未提交的数据。</p>
</li>
<li class="lvl-2">
<p>不可重复读：一个事务读取到另一个事务已提交的 update 数据，导致前后读取的数据不一致。</p>
</li>
<li class="lvl-2">
<p>幻读：一个事务读取到另一个事务已提交的 insert 数据，导致前后读取的数据不一致。</p>
</li>
</ul>
<h3 id="e-g">e.g</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> com.jdbcstudy.util.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQL13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建数据库连接</span></span><br><span class="line">            connection = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 关闭自动提交，开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 创建 Statement 对象</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 增</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">insert1</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO jdbcstudy.user (id, password) VALUES (3, &#x27;123456&#x27;);&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">insert2</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO jdbcstudy.user (id, password) VALUES (4, &#x27;123456&#x27;);&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> statement.executeUpdate(insert1);</span><br><span class="line">            <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> statement.executeUpdate(insert2);</span><br><span class="line">            System.out.println(<span class="string">&quot;result: &quot;</span> + result1 + <span class="string">&quot; &quot;</span> + result2);</span><br><span class="line">            <span class="comment">// 删</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM jdbcstudy.user WHERE id = 3;&quot;</span>;</span><br><span class="line">            result = statement.executeUpdate(delete);</span><br><span class="line">            System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(connection, statement, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>步骤</p>
<ol>
<li class="lvl-3">关闭自动提交，开启事务。 <code>connection.setAutoCommit(false);</code></li>
<li class="lvl-3">执行 SQL 语句。</li>
<li class="lvl-3">提交事务。 <code>connection.commit();</code></li>
<li class="lvl-3">如果出现异常，回滚事务。 <code>connection.rollback();</code></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 2</title>
    <url>/2023/05/30/1/</url>
    <content><![CDATA[<h2 id="列的数据类型">列的数据类型</h2>
<blockquote>
<p>数值</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">名称</th>
<th style="text-align:center">大小</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">微整型</td>
<td style="text-align:center">1 字节</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">小整型</td>
<td style="text-align:center">2 字节</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMINT</td>
<td style="text-align:center">中整型</td>
<td style="text-align:center">3 字节</td>
</tr>
<tr>
<td style="text-align:center"><mark>INT</mark></td>
<td style="text-align:center"><strong>整型</strong></td>
<td style="text-align:center">4 字节</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">大整型</td>
<td style="text-align:center">8 字节</td>
</tr>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">单精度浮点型</td>
<td style="text-align:center">4 字节</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">双精度浮点型</td>
<td style="text-align:center">8 字节</td>
</tr>
<tr>
<td style="text-align:center">DECIMAL</td>
<td style="text-align:center">小数</td>
<td style="text-align:center">依赖于参数</td>
</tr>
</tbody>
</table>
<blockquote>
<p>字符串</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">名称</th>
<th style="text-align:center">大小</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CHAR</td>
<td style="text-align:center">定长字符串</td>
<td style="text-align:center">0-255 字节</td>
</tr>
<tr>
<td style="text-align:center"><mark>VARCHAR</mark></td>
<td style="text-align:center"><strong>变长字符串</strong></td>
<td style="text-align:center">0-65535 字节</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center">微型文本</td>
<td style="text-align:center">0-255 字节</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center">文本</td>
<td style="text-align:center">0-65535 字节</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center">中型文本</td>
<td style="text-align:center">0-16777215 字节</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center">长文本</td>
<td style="text-align:center">0-4294967295 字节</td>
</tr>
</tbody>
</table>
<blockquote>
<p>日期和时间</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">名称</th>
<th style="text-align:center">大小</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">日期</td>
<td style="text-align:center">3 字节</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">时间</td>
<td style="text-align:center">3 字节</td>
</tr>
<tr>
<td style="text-align:center"><mark>DATETIME</mark></td>
<td style="text-align:center"><strong>日期和时间</strong></td>
<td style="text-align:center">8 字节</td>
</tr>
<tr>
<td style="text-align:center"><mark>TIMESTAMP</mark></td>
<td style="text-align:center"><strong>时间戳</strong></td>
<td style="text-align:center">4 字节</td>
</tr>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">年份</td>
<td style="text-align:center">1 字节</td>
</tr>
</tbody>
</table>
<p>时间格式：<code>YYYY-MM-DD HH:MM:SS</code>时间戳格式：<code>YYYYMMDDHHMMSS</code></p>
<p>时间戳是一个特殊的时间格式，它是一个整数，可以用来表示一个时间，时间戳的范围是 <code>1970-01-01 00:00:01</code> 到 <code>2038-01-19 03:14:07</code>，超出这个范围就会出现问题。</p>
<blockquote>
<p>null 和 not null<br>
null 表示空值，not null 表示非空值，null 和 not null 是列的属性，可以用来限制列的值是否可以为空。</p>
</blockquote>
<p>不要把 null 和 0 混淆，null 表示空值，0 表示数字 0。<br>
<strong>不要用NULL进行运算</strong></p>
<h2 id="数据库的字段属性">数据库的字段属性</h2>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AUTO_INCREMENT</td>
<td style="text-align:center">自动增长</td>
<td style="text-align:center">用于自动增长列的值</td>
</tr>
<tr>
<td style="text-align:center">DEFAULT</td>
<td style="text-align:center">默认值</td>
<td style="text-align:center">用于设置列的默认值</td>
</tr>
<tr>
<td style="text-align:center">PRIMARY KEY</td>
<td style="text-align:center">主键</td>
<td style="text-align:center">用于设置主键</td>
</tr>
<tr>
<td style="text-align:center">NOT NULL</td>
<td style="text-align:center">非空</td>
<td style="text-align:center">用于设置列的值是否可以为空</td>
</tr>
<tr>
<td style="text-align:center">UNIQUE</td>
<td style="text-align:center">唯一</td>
<td style="text-align:center">用于设置列的值是否唯一</td>
</tr>
<tr>
<td style="text-align:center">COMMENT</td>
<td style="text-align:center">注释</td>
<td style="text-align:center">用于设置列的注释</td>
</tr>
<tr>
<td style="text-align:center">CHARACTER SET</td>
<td style="text-align:center">字符集</td>
<td style="text-align:center">用于设置列的字符集</td>
</tr>
<tr>
<td style="text-align:center">COLLATE</td>
<td style="text-align:center">校对规则</td>
<td style="text-align:center">用于设置列的校对规则</td>
</tr>
<tr>
<td style="text-align:center">UNSIGNED</td>
<td style="text-align:center">无符号</td>
<td style="text-align:center">用于设置列的值是否可以为负数</td>
</tr>
<tr>
<td style="text-align:center">ZEROFILL</td>
<td style="text-align:center">零填充</td>
<td style="text-align:center">用于设置列的值是否用 0 填充</td>
</tr>
</tbody>
</table>
<p>每一个表<strong>必须</strong>要有以下几个字段：<br>
<code>id</code> 主键<br>
<code>version</code> 乐观锁<br>
<code>is_deleted</code> 软删除<br>
<code>gmt_create</code> 创建时间<br>
<code>gmt_modified</code> 修改时间</p>
<h2 id="创建数据库表">创建数据库表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">    `id` <span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `username` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    `password` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    `gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    `is_deleted` TINYINT(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;是否删除&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>注意，使用英文(半角)的逗号 <code>,</code> 来分隔字段，使用英文(半角)的分号 <code>;</code> 来结束语句，使用英文(半角)的单引号 <code>'</code> 来表示字符串，使用英文(半角)的反引号 <code>`</code> 来表示字段名，使用英文(半角)的双引号 <code>&quot;</code> 来表示表名，使用英文的括号 <code>()</code> 。</p>
<p><mark>最后一个句子的末尾没有逗号 <code>,</code></mark></p>
<p>建库表的通用语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `表名` (</span><br><span class="line">    `字段名` 字段类型(字段长度) 字段属性,</span><br><span class="line">    `字段名` 字段类型(字段长度) 字段属性,</span><br><span class="line">    `字段名` 字段类型(字段长度) 字段属性,</span><br><span class="line">    ...</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;表注释&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>在格式上，把PRIMARY KEY和UNIQUE放在字段类型后面，把NOT NULL和DEFAULT放在字段类型后面，把COMMENT放在字段属性后面。</p>
<p>注意，PRIMARY KEY 和 UNIQUE 不能同时使用，因为主键和唯一键都是用来唯一标识一条记录的，如果同时使用，那么就会出现冲突。</p>
<h2 id="引擎-Engine">引擎(Engine)</h2>
<p>引擎是数据库的核心，它决定了数据库的性能、事务、锁、崩溃后的安全恢复等，MySQL 支持多种引擎，常用的引擎有 InnoDB 和 MyISAM。</p>
<table>
<thead>
<tr>
<th style="text-align:center">引擎</th>
<th style="text-align:center">事务</th>
<th style="text-align:center">外键</th>
<th style="text-align:center">锁</th>
<th style="text-align:center">崩溃后的安全恢复</th>
<th style="text-align:center">全文索引</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">InnoDB</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">行级锁</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
</tr>
<tr>
<td style="text-align:center">MyISAM</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">表级锁</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
</tbody>
</table>
<ul class="lvl-0">
<li class="lvl-2">
<p>MyISAM 节约空间，性能快</p>
</li>
<li class="lvl-2">
<p>InnoDB 安全性高，支持事务，支持外键，支持崩溃后的安全恢复</p>
</li>
</ul>
<p>数据库的本质是文件，每个表都是一个文件，每个数据库都是一个文件夹，数据库的引擎就是用来管理这些文件的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>.frm</code> 文件：表结构</p>
</li>
<li class="lvl-2">
<p><code>.ibd</code> 文件：表数据和索引</p>
</li>
</ul>
<hr>
<p>抓个虫</p>
<p>新版MySQL默认编码是<code>utf8mb4</code>，而不是utf8，utf8mb4是utf8的超集，支持emoji表情所以创建表的时候，选择<strong>默认</strong>就可以了</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 13</title>
    <url>/2023/07/14/1/</url>
    <content><![CDATA[<h2 id="数据库连接池">数据库连接池</h2>
<p>数据库连接池是一种数据库连接的缓存技术，它可以在系统初始化时创建一定数量的数据库连接，当系统需要访问数据库时，直接从数据库连接池中获取一个数据库连接，使用完毕后再将数据库连接放回数据库连接池中，而不是每次都重新创建和关闭数据库连接，这样可以提高系统的性能。</p>
<p>一般使用数据库的流程是：创建数据库连接 -&gt; 执行 SQL 语句 -&gt; 关闭数据库连接。如果每次都重新创建和关闭数据库连接，会消耗大量的系统资源，影响系统性能。</p>
<h2 id="相关概念">相关概念</h2>
<p>池化技术：将一些资源缓存起来，供系统使用，使用完毕后再放回池中，而不是每次都重新创建和关闭资源。</p>
<p>最小连接数：数据库连接池中最少的数据库连接数量。</p>
<p>最大连接数：数据库连接池中最多的数据库连接数量。</p>
<p>等待超时时间：当数据库连接池中的数据库连接都被使用时，如果有新的数据库连接请求，那么这些请求会被阻塞，直到有数据库连接被释放出来，这个时间就是等待超时时间。</p>
<p>所以，数据库连接池的大小应该是最小连接数和最大连接数之间，如果数据库连接池中的数据库连接都被使用，那么新的数据库连接请求会被阻塞，直到有数据库连接被释放出来，这个时间就是等待超时时间。</p>
<p>我们可以编写连接池，来实现一个接口 DataSource，这个接口中定义了一些方法，比如：获取数据库连接、获取数据库连接的超时时间、获取最大连接数、获取最小连接数等。</p>
<h2 id="开源数据库连接池">开源数据库连接池</h2>
<p>开源数据库连接池有很多，比如：C3P0、Druid、HikariCP 等。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtZGJjcC8=">DBCP<i class="fa fa-external-link-alt"></i></span>：是 Apache 软件基金会下的一个开源数据库连接池，它实现了数据源接口 DataSource 和驱动接口 Driver，可以方便地与其他基于 JDBC 的框架进行集成。</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWNoYW5nZS5jb20vcHJvamVjdHMvYzNwMC8=">C3P0<i class="fa fa-external-link-alt"></i></span>：是一个开源的 JDBC 数据库连接池，它实现了数据源接口 DataSource 和驱动接口 Driver，可以方便地与其他基于 JDBC 的框架进行集成。</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZHJ1aWQvP3NwbT1hMmM2aC4xMjg3MzYzOS5hcnRpY2xlLWRldGFpbC41LjU3ZjE3ZmJhMlhJcEEw">Druid<i class="fa fa-external-link-alt"></i></span>：是阿里巴巴开源的一个数据库连接池，它实现了数据源接口 DataSource 和驱动接口 Driver，可以方便地与其他基于 JDBC 的框架进行集成。</p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyZXR0d29vbGRyaWRnZS9IaWthcmlDUA==">HikariCP<i class="fa fa-external-link-alt"></i></span>：是一个高性能的 JDBC 数据库连接池，它实现了数据源接口 DataSource 和驱动接口 Driver，可以方便地与其他基于 JDBC 的框架进行集成。</p>
</li>
</ul>
<h2 id="注意">注意</h2>
<blockquote>
<p>对下面内容的说明</p>
</blockquote>
<details>
<summary>点击展开</summary>
由于时间原因，我只听了一遍老师的讲解，并没有进行实践，所以下面的内容可能有错误，如果你发现了错误，欢迎指正。🤗
</details>
<hr>
<h2 id="DBCP">DBCP</h2>
<blockquote>
<p>编写 dbcp.properties 配置文件</p>
</blockquote>
<p>配置数据库连接池的相关参数。</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库连接池的 JDBC URL</span></span><br><span class="line"><span class="attr">dbcp.url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbcstudy?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment"># 数据库连接池的用户名</span></span><br><span class="line"><span class="attr">dbcp.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 数据库连接池的密码</span></span><br><span class="line"><span class="attr">dbcp.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 数据库连接池的最小连接数</span></span><br><span class="line"><span class="attr">dbcp.minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 数据库连接池的最大连接数</span></span><br><span class="line"><span class="attr">dbcp.maxIdle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 数据库连接池的等待超时时间</span></span><br><span class="line"><span class="attr">dbcp.maxWait</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment"># 数据库连接池的初始连接数</span></span><br><span class="line"><span class="attr">dbcp.initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 数据库连接池的驱动类</span></span><br><span class="line"><span class="attr">dbcp.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</details>
<blockquote>
<p>编写 DBUtil 类</p>
</blockquote>
<p>用于创建数据库连接和关闭数据库连接。</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取 dbcp.properties 配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> DBUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            <span class="comment">// 创建数据库连接池</span></span><br><span class="line">            <span class="type">BasicDataSource</span> <span class="variable">basicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line">            <span class="comment">// 设置数据库连接池的相关参数</span></span><br><span class="line">            basicDataSource.setDriverClassName(properties.getProperty(<span class="string">&quot;dbcp.driverClassName&quot;</span>));</span><br><span class="line">            basicDataSource.setUrl(properties.getProperty(<span class="string">&quot;dbcp.url&quot;</span>));</span><br><span class="line">            basicDataSource.setUsername(properties.getProperty(<span class="string">&quot;dbcp.username&quot;</span>));</span><br><span class="line">            basicDataSource.setPassword(properties.getProperty(<span class="string">&quot;dbcp.password&quot;</span>));</span><br><span class="line">            basicDataSource.setInitialSize(Integer.parseInt(properties.getProperty(<span class="string">&quot;dbcp.initialSize&quot;</span>)));</span><br><span class="line">            basicDataSource.setMaxIdle(Integer.parseInt(properties.getProperty(<span class="string">&quot;dbcp.maxIdle&quot;</span>)));</span><br><span class="line">            basicDataSource.setMinIdle(Integer.parseInt(properties.getProperty(<span class="string">&quot;dbcp.minIdle&quot;</span>)));</span><br><span class="line">            basicDataSource.setMaxWaitMillis(Long.parseLong(properties.getProperty(<span class="string">&quot;dbcp.maxWait&quot;</span>)));</span><br><span class="line">            <span class="comment">// 将数据库连接池赋值给 dataSource</span></span><br><span class="line">            dataSource = basicDataSource;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p>拓展：</p>
<ol>
<li class="lvl-3">
<p>properties 文件是一种配置文件，它的格式是 key=value，可以使用 Properties 类读取 properties 文件。</p>
</li>
<li class="lvl-3">
<p>如今，DBCP 已经不再维护，并且在高并发的情况下，DBCP 性能不佳，所以我们不再使用 DBCP。而是选择性能更好的数据库连接池：Druid 和 HikariCP。</p>
</li>
</ol>
<h2 id="C3P0">C3P0</h2>
<blockquote>
<p>编写 c3p0-config.xml 配置文件</p>
</blockquote>
<p>配置数据库连接池的相关参数。</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的最小连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的最大连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的等待超时时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的初始连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的驱动类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的 JDBC URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcstudy?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的用户名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池的密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<p>拓展：</p>
<ol>
<li class="lvl-3">
<p>c3p0-config.xml 配置文件的位置有两种：</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>放在 src 目录下，这样就可以直接使用 new ComboPooledDataSource() 创建数据库连接池。</p>
</li>
<li class="lvl-2">
<p>放在 resources 目录下，这样就可以使用配置文件的方式创建数据库连接池。</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>xml 配置文件的优先级高于 properties 配置文件。</p>
</li>
<li class="lvl-3">
<p>xml 是一种配置文件，它的格式是标签，可以使用 DOM4J 类读取 xml 文件。</p>
</li>
</ol>
<blockquote>
<p>编写 DBUtil 类</p>
</blockquote>
<p>用于创建数据库连接和关闭数据库连接。</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbcstudy.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建数据库连接池</span></span><br><span class="line">            dataSource = <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="结论">结论</h2>
<details>
<summary>点击展开</summary>
<ol>
<li class="lvl-3">
<p>DBCP 和 C3P0 都是开源的数据库连接池，它们都实现了数据源接口 DataSource 和驱动接口 Driver，可以方便地与其他基于 JDBC 的框架进行集成。</p>
</li>
<li class="lvl-3">
<p>DBCP 和 C3P0 都是使用池化技术，将一些资源缓存起来，供系统使用，使用完毕后再放回池中，而不是每次都重新创建和关闭资源。</p>
</li>
<li class="lvl-3">
<p>DBCP 和 C3P0 都可以配置数据库连接池的相关参数，比如：最小连接数、最大连接数、等待超时时间、初始连接数等。</p>
</li>
<li class="lvl-3">
<p>DBCP 和 C3P0 都可以使用配置文件的方式配置数据库连接池的相关参数。</p>
</li>
<li class="lvl-3">
<p>DBCP 和 C3P0 都可以使用代码的方式配置数据库连接池的相关参数。</p>
</li>
<li class="lvl-3">
<p>DBCP 和 C3P0 都可以使用数据库连接池的方式创建数据库连接。</p>
</li>
</ol>
<hr>
<p>太多废话了，Copilot 你怎么看？🤔</p>
<p>GitHub Copilot: 这段文本总结了 DBCP 和 C3P0 两个开源的数据库连接池的特点和优势。它们都实现了数据源接口和驱动接口，可以方便地与其他基于 JDBC 的框架进行集成。它们都使用池化技术，将一些资源缓存起来，供系统使用，使用完毕后再放回池中，而不是每次都重新创建和关闭资源。它们都可以配置数据库连接池的相关参数，比如最小连接数、最大连接数、等待超时时间、初始连接数等。同时，它们也都可以使用配置文件或代码的方式进行配置。最后，它们都可以使用数据库连接池的方式创建数据库连接。</p>
<hr>
</details>
<p>无论使用什么数据源，DataSource 接口都是一个标准，所以我们可以使用 DataSource 接口的实现类创建数据库连接池，然后使用数据库连接池创建数据库连接。</p>
<p>有关 Druid 和 HikariCP 的使用，暂时没有学习，后续学习后再进行补充。</p>
<p>至此，JDBC 的学习就结束了，对 MySQL 的学习也告一段落了。🎉</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 3</title>
    <url>/2023/06/02/1/</url>
    <content><![CDATA[<h2 id="删除和修改数据表字段">删除和修改数据表字段</h2>
<p>修改表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY <span class="keyword">COLUMN</span> 字段名 字段类型;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>MODIFY: 修改约束</p>
</li>
<li class="lvl-2">
<p>CHANGE: 修改字段名</p>
</li>
</ul>
<p>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME 新表名;</span><br></pre></td></tr></table></figure>
<p>增加表的字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> 字段名 字段类型;</span><br></pre></td></tr></table></figure>
<p>删除表的字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 字段名;</span><br></pre></td></tr></table></figure>
<p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"><span class="comment">-- 确定表存在后再删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></table></figure>
<p><mark>所有的修改都要谨慎操作，尽量加上判断，因为修改后的数据无法恢复。</mark></p>
<hr>
<p>注意点：<br>
1. 用<code>``</code>包裹字段名。<br>
2. 注释使用<code>/**/</code><br>
3. 大小写不敏感，但是建议关键字大写，表名和字段名小写。<br>
4. 所有符号用英文符号。</p>
<h2 id="外键-了解即可">外键(了解即可)</h2>
<p>外键是用来关联两个表的，外键的值必须在另一个表中存在，外键的值可以重复。</p>
<p>约束(Constraint)：约束是用来限制数据的，比如主键、外键、非空、唯一等。</p>
<p>外键的定义：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时定义外键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段名 字段类型,</span><br><span class="line">    字段名 字段类型,</span><br><span class="line">    字段名 字段类型,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(字段名) <span class="keyword">REFERENCES</span> 表名(字段名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后定义外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(字段名) <span class="keyword">REFERENCES</span> 表名(字段名);</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">    `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `age` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `city` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">order</span>`(</span><br><span class="line">    `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `user_id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `order_no` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `order_price` <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(`user_id`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>`(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表后定义外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">order</span>` <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(`user_id`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>`(`id`);</span><br></pre></td></tr></table></figure>
<p>以上外键是物理外键，还有逻辑外键，逻辑外键是在程序中定义的，不是在数据库中定义的。<br>
<strong>不建议使用物理外键</strong>，避免数据库之间的耦合。</p>
<p>删除有外键的表时，需要先删除外键，再删除表。</p>
<hr>
<p>阿里巴巴的代码规范中</p>
<p><mark>明确禁止使用外键约束，一切外键关系在应用层由程序控制，禁止在数据库中使用外键约束。</mark></p>
<h2 id="DML-Data-Manipulation-Language-数据操作语言">DML(Data Manipulation Language)数据操作语言</h2>
<p>DML是用来操作数据的，包括增删改查。</p>
<h3 id="增加数据：INSERT">增加数据：INSERT</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入所有字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>,...);</span><br><span class="line"><span class="comment">-- 插入指定字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>,...);</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`id`,`name`,`age`,`city`) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="删除数据：DELETE">删除数据：DELETE</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除所有数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>TRUNCATE TABLE 表名; 用来删除表中所有数据，但是不会删除表结构，效率比DELETE高。<s>删库跑路(bushi)😵</s></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>
<p>相较于DELETE</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>相同点：都可以删除表中的数据。</p>
</li>
<li class="lvl-2">
<p>不同点：</p>
<ul class="lvl-2">
<li class="lvl-4">TRUNCATE TABLE不能加WHERE条件。</li>
<li class="lvl-4">TRUNCATE TABLE删除后无法恢复，DELETE可以。</li>
<li class="lvl-4">TRUNCATE TABLE删除后不会触发触发器，DELETE会。</li>
<li class="lvl-4">TRUNCATE TABLE删除后不会重置自增长，DELETE会。</li>
<li class="lvl-4">TRUNCATE TABLE删除后不会影响表结构，DELETE会。</li>
</ul>
</li>
</ul>
<h3 id="修改数据：UPDATE">修改数据：UPDATE</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改所有数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,...;</span><br><span class="line"><span class="comment">-- 修改指定数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,... <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;王五&#x27;</span>,`age`<span class="operator">=</span><span class="number">22</span>,`city`<span class="operator">=</span><span class="string">&#x27;广州&#x27;</span> <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>WHERE条件<br>
WHERE条件可以是比较运算符、逻辑运算符、IN、BETWEEN、LIKE等。</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">BETWEEN</td>
<td style="text-align:center">在某个范围内</td>
</tr>
<tr>
<td style="text-align:center">IN</td>
<td style="text-align:center">在某个范围内</td>
</tr>
<tr>
<td style="text-align:center">LIKE</td>
<td style="text-align:center">模糊查询</td>
</tr>
<tr>
<td style="text-align:center">IS NULL</td>
<td style="text-align:center">为空</td>
</tr>
<tr>
<td style="text-align:center">IS NOT NULL</td>
<td style="text-align:center">不为空</td>
</tr>
<tr>
<td style="text-align:center">AND</td>
<td style="text-align:center">与</td>
</tr>
<tr>
<td style="text-align:center">OR</td>
<td style="text-align:center">或</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 比较运算符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `age`<span class="operator">&gt;</span><span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 逻辑运算符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `age`<span class="operator">&gt;</span><span class="number">20</span> <span class="keyword">AND</span> `city`<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span>;</span><br><span class="line"><span class="comment">-- IN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `city` <span class="keyword">IN</span> (<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"><span class="comment">-- BETWEEN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `age` <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- LIKE</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br><span class="line"><span class="comment">-- IS NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `city` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- IS NOT NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `city` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>SELECT语句中的WHERE条件可以使用AND、OR、NOT等逻辑运算符连接，也可以使用括号改变优先级。之后会介绍SELECT语句。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 4</title>
    <url>/2023/06/03/1/</url>
    <content><![CDATA[<h2 id="DQL-Data-Query-Language-数据查询语言">DQL(Data Query Language)数据查询语言</h2>
<p>DQL是用来查询数据的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>SELECT</p>
</li>
<li class="lvl-2">
<p>简单与复杂查询</p>
</li>
<li class="lvl-2">
<p>数据库核心</p>
</li>
<li class="lvl-2">
<p>频繁使用</p>
</li>
</ul>
<h3 id="查询数据：SELECT">查询数据：SELECT</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="comment">-- 查询指定数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>与查询有关的词语</p>
<table>
<thead>
<tr>
<th style="text-align:center">词语</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SELECT</td>
<td style="text-align:center">查询</td>
</tr>
<tr>
<td style="text-align:center">DISTINCT</td>
<td style="text-align:center">去重</td>
</tr>
<tr>
<td style="text-align:center">FROM</td>
<td style="text-align:center">从</td>
</tr>
<tr>
<td style="text-align:center">WHERE</td>
<td style="text-align:center">条件</td>
</tr>
<tr>
<td style="text-align:center">GROUP BY</td>
<td style="text-align:center">分组</td>
</tr>
<tr>
<td style="text-align:center">HAVING</td>
<td style="text-align:center">筛选</td>
</tr>
<tr>
<td style="text-align:center">ORDER BY</td>
<td style="text-align:center">排序</td>
</tr>
<tr>
<td style="text-align:center">LIMIT</td>
<td style="text-align:center">分页</td>
</tr>
<tr>
<td style="text-align:center">COUNT</td>
<td style="text-align:center">计数</td>
</tr>
<tr>
<td style="text-align:center">SUM</td>
<td style="text-align:center">求和</td>
</tr>
<tr>
<td style="text-align:center">AVG</td>
<td style="text-align:center">平均值</td>
</tr>
<tr>
<td style="text-align:center">MAX</td>
<td style="text-align:center">最大值</td>
</tr>
<tr>
<td style="text-align:center">MIN</td>
<td style="text-align:center">最小值</td>
</tr>
</tbody>
</table>
<p>优先级：FROM &gt; WHERE &gt; GROUP BY &gt; HAVING &gt; SELECT &gt; ORDER BY &gt; LIMIT</p>
<hr>
<p>查询指定字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,`age` <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并重命名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> <span class="keyword">AS</span> 别名<span class="number">1</span>,字段<span class="number">2</span> <span class="keyword">AS</span> 别名<span class="number">2</span>,... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">AS</span> `姓名`,`age` <span class="keyword">AS</span> `年龄` <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>
<hr>
<p>模糊查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 字段 <span class="keyword">LIKE</span> <span class="string">&#x27;值%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>联表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span>,表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>
<p>JOIN 与 ON</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `<span class="keyword">user</span>`.`name`,`<span class="keyword">user</span>`.`age`,`<span class="keyword">user</span>`.`city`<span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">JOIN</span> `user_info` <span class="keyword">ON</span> `<span class="keyword">user</span>`.`id`<span class="operator">=</span>`user_info`.`user_id`;</span><br></pre></td></tr></table></figure>
<p>如果需要查询多个表，可以继续使用 JOIN 语句，也可以使用逗号分隔的表名列表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">ON</span> 条件 <span class="keyword">JOIN</span> 表<span class="number">3</span> 别名<span class="number">3</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>
<p>但是，一般是先联一张表，再联一张表，再联一张表，以此类推。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/01/sql-join.png" alt></p>
<hr>
<p><strong>下面的内容只是简单的记录，详细的内容请看<a href="MySQL5.md">MySQL5.md</a>。</strong></p>
<hr>
<p>查询指定字段并去重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `city` <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,字段<span class="number">2</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,...;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `age` <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并分页</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 LIMIT 开始位置,查询条数;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>查询指定字段并分页并排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,字段<span class="number">2</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,... LIMIT 开始位置,查询条数;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `age` <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并分页并排序并去重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,字段<span class="number">2</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,... LIMIT 开始位置,查询条数;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `city` <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `city` <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并分页并排序并去重并计算总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并分页并排序并去重并计算总数并分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,...;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `city`,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">GROUP</span> <span class="keyword">BY</span> `city`;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并分页并排序并去重并计算总数并分组并筛选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">HAVING</span> 条件;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `city`,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">GROUP</span> <span class="keyword">BY</span> `city` <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>查询指定字段并分页并排序并去重并计算总数并分组并筛选并连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,... <span class="keyword">HAVING</span> 条件 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,字段<span class="number">2</span> <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>,... LIMIT 开始位置,查询条数;</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `city`,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">GROUP</span> <span class="keyword">BY</span> `city` <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> `city` <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><s>接下来就是套娃，我就不写了🤐</s></p>
<hr>
<p>参考资料：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC10dXRvcmlhbC5odG1s">菜鸟教程 - MySQL<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9zcWwvc3FsLXR1dG9yaWFsLmh0bWw=">菜鸟教程 - SQL<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 5</title>
    <url>/2023/06/04/1/</url>
    <content><![CDATA[<h2 id="DQL">DQL</h2>
<p>接上一篇笔记，对SELECT语句的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.]field1 [<span class="keyword">AS</span> alias1] [, [table.]field2 [<span class="keyword">AS</span> alias2] ...]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name1 [, table_name2 ...]</span><br><span class="line">    [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2] <span class="comment">-- 连接查询</span></span><br><span class="line">    [<span class="keyword">WHERE</span> ...] <span class="comment">-- 条件</span></span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...] <span class="comment">-- 分组</span></span><br><span class="line">    [<span class="keyword">HAVING</span> ...] <span class="comment">-- 筛选</span></span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] <span class="comment">-- 排序</span></span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,] row_count <span class="operator">|</span> row_count <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]; <span class="comment">-- 分页</span></span><br></pre></td></tr></table></figure>
<p>以上是查询语句的基本语法，其中方括号[]内的内容是可选的，大括号{}内的内容是必选的。</p>
<h2 id="分页">分页</h2>
<p>分页是指将查询结果分页显示，常用于分页显示数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` LIMIT <span class="number">0</span>,<span class="number">10</span>; <span class="comment">-- 从第0条开始，显示10条数据</span></span><br></pre></td></tr></table></figure>
<p>LIMIT后的第一个参数是偏移量，第二个参数是显示的条数。</p>
<p>分页的好处是可以减少数据的传输量，提高效率。</p>
<h2 id="自连接">自连接</h2>
<p>自连接是指表与自身进行连接，自身连接的表需要使用别名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.`name`,b.`name` <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">AS</span> a,`<span class="keyword">user</span>` <span class="keyword">AS</span> b <span class="keyword">WHERE</span> a.`id`<span class="operator">=</span>b.`id`;</span><br></pre></td></tr></table></figure>
<p>为什么要使用自连接呢？比如说有一个表，里面有两个字段，一个是员工编号，一个是上级编号，现在要查询每个员工的上级是谁，这时候就需要用到自连接。</p>
<h2 id="排序">排序</h2>
<p>排序是指将查询结果按照某个字段进行排序，常用于对数据进行排序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `id` <span class="keyword">DESC</span>; <span class="comment">-- 按照id降序排列</span></span><br></pre></td></tr></table></figure>
<p>ORDER BY后的参数是排序的字段，DESC是降序，ASC是升序，如果不写，默认是升序。</p>
<h2 id="子查询">子查询</h2>
<p>子查询是指在查询语句中嵌套查询语句，常用于查询结果作为另一个查询语句的条件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `id` <span class="keyword">IN</span> (<span class="keyword">SELECT</span> `id` <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `id`<span class="operator">&gt;</span><span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>上面的查询语句中，子查询语句的结果作为外层查询语句的条件。</p>
<p>子查询的本质是将查询结果作为一个临时表，然后再进行查询。</p>
<p>子查询和嵌套查询是一个意思。</p>
<h2 id="MySQL函数">MySQL函数</h2>
<p>MySQL函数分为单行函数和分组函数，单行函数是指对每一行数据进行操作，分组函数是指对一组数据进行操作。在MySQL中，函数的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> function_name(parameter_list);</span><br></pre></td></tr></table></figure>
<p>函数名后面跟着的是参数列表，参数列表可以有多个参数，也可以没有参数，参数之间用逗号隔开。</p>
<p>参考</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1mdW5jdGlvbnMuaHRtbA==">MySQL函数 --runoob<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2Z1bmN0aW9ucy5odG1s">MySQL函数 --mysql<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>我们将函数分为以下几类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>字符串函数</p>
</li>
<li class="lvl-2">
<p>数值函数</p>
</li>
<li class="lvl-2">
<p>日期函数</p>
</li>
<li class="lvl-2">
<p>其他函数</p>
</li>
</ul>
<h2 id="常用函数">常用函数</h2>
<p>然而，常用函数并不是所有的函数都常用，所以我们只需要掌握常用的函数即可。相反，聚合函数是必须要掌握的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数学函数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-1</span>); <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">1.1</span>); <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">1.9</span>); <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.5</span>); <span class="comment">-- 四舍五入</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND(); <span class="comment">-- 随机数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以下了解即可</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">5</span>,<span class="number">2</span>); <span class="comment">-- 取余</span></span><br><span class="line"><span class="keyword">SELECT</span> POW(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">-- 幂运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SQRT</span>(<span class="number">4</span>); <span class="comment">-- 开方</span></span><br><span class="line"><span class="keyword">SELECT</span> PI(); <span class="comment">-- 圆周率</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SIN</span>(PI()<span class="operator">/</span><span class="number">2</span>); <span class="comment">-- 正弦</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COS</span>(PI()); <span class="comment">-- 余弦</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TAN</span>(PI()<span class="operator">/</span><span class="number">4</span>); <span class="comment">-- 正切</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ASIN</span>(<span class="number">1</span>); <span class="comment">-- 反正弦</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ACOS</span>(<span class="number">1</span>); <span class="comment">-- 反余弦</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ATAN</span>(<span class="number">1</span>); <span class="comment">-- 反正切</span></span><br><span class="line"><span class="keyword">SELECT</span> ATAN2(<span class="number">1</span>,<span class="number">1</span>); <span class="comment">-- 反正切2</span></span><br><span class="line"><span class="keyword">SELECT</span> DEGREES(PI()); <span class="comment">-- 弧度转角度</span></span><br><span class="line"><span class="keyword">SELECT</span> RADIANS(<span class="number">180</span>); <span class="comment">-- 角度转弧度</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-1</span>); <span class="comment">-- 符号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXP</span>(<span class="number">1</span>); <span class="comment">-- 指数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOG</span>(<span class="number">10</span>); <span class="comment">-- 对数</span></span><br><span class="line"><span class="keyword">SELECT</span> LOG2(<span class="number">8</span>); <span class="comment">-- 以2为底的对数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOG10</span>(<span class="number">100</span>); <span class="comment">-- 以10为底的对数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SINH</span>(<span class="number">1</span>); <span class="comment">-- 双曲正弦</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COSH</span>(<span class="number">1</span>); <span class="comment">-- 双曲余弦</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TANH</span>(<span class="number">1</span>); <span class="comment">-- 双曲正切</span></span><br><span class="line"><span class="keyword">SELECT</span> COT(<span class="number">1</span>); <span class="comment">-- 余切</span></span><br><span class="line"><span class="keyword">SELECT</span> CRC32(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- CRC32校验</span></span><br><span class="line"><span class="keyword">SELECT</span> MD5(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- MD5加密</span></span><br><span class="line"><span class="keyword">SELECT</span> SHA1(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- SHA1加密</span></span><br><span class="line"><span class="keyword">SELECT</span> SHA2(<span class="string">&#x27;hello&#x27;</span>,<span class="number">256</span>); <span class="comment">-- SHA2加密</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">123456789</span>,<span class="number">2</span>); <span class="comment">-- 格式化数字</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.999</span>,<span class="number">1</span>); <span class="comment">-- 截断</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>字符串函数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> BIT_LENGTH(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>); <span class="comment">-- 字符串拼接</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT_WS(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>); <span class="comment">-- 字符串拼接</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;world&#x27;</span>); <span class="comment">-- 字符串插入</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>); <span class="comment">-- 截取字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>); <span class="comment">-- 截取字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> LOCATE(<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- 查找字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;HELLO&#x27;</span>); <span class="comment">-- 转小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- 转大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">-- 截取字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">2</span>); <span class="comment">-- 截取字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;L&#x27;</span>); <span class="comment">-- 替换字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- 反转字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以下了解即可</span></span><br><span class="line"><span class="keyword">SELECT</span> FROM_BASE64(<span class="string">&#x27;aGVsbG8=&#x27;</span>); <span class="comment">-- base64解码</span></span><br><span class="line"><span class="keyword">SELECT</span> TO_BASE64(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">-- base64编码</span></span><br><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">10</span>); <span class="comment">-- 十进制转二进制</span></span><br><span class="line"><span class="keyword">SELECT</span> OCT(<span class="number">10</span>); <span class="comment">-- 十进制转八进制</span></span><br><span class="line"><span class="keyword">SELECT</span> HEX(<span class="number">10</span>); <span class="comment">-- 十进制转十六进制</span></span><br><span class="line"><span class="keyword">SELECT</span> CONV(<span class="number">10</span>,<span class="number">10</span>,<span class="number">2</span>); <span class="comment">-- 进制转换</span></span><br><span class="line"><span class="keyword">SELECT</span> ASCII(<span class="string">&#x27;a&#x27;</span>); <span class="comment">-- 字符转ASCII码</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">CHAR</span>(<span class="number">97</span>); <span class="comment">-- ASCII码转字符</span></span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;hello&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;-&#x27;</span>); <span class="comment">-- 左填充</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;hello&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;-&#x27;</span>); <span class="comment">-- 右填充</span></span><br><span class="line"><span class="keyword">SELECT</span> LTRIM(<span class="string">&#x27; hello &#x27;</span>); <span class="comment">-- 去除左空格</span></span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(<span class="string">&#x27; hello &#x27;</span>); <span class="comment">-- 去除右空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; hello &#x27;</span>); <span class="comment">-- 去除空格</span></span><br><span class="line"><span class="keyword">SELECT</span> REPEAT(<span class="string">&#x27;hello&#x27;</span>,<span class="number">3</span>); <span class="comment">-- 重复字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> FIELD(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>); <span class="comment">-- 查找字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> FIND_IN_SET(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hello,world&#x27;</span>); <span class="comment">-- 查找字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">123456789</span>,<span class="number">2</span>); <span class="comment">-- 格式化数字</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>日期函数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME(); <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span>(<span class="string">&#x27;2020-01-01&#x27;</span>); <span class="comment">-- 日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span>(<span class="string">&#x27;12:00:00&#x27;</span>); <span class="comment">-- 时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIMESTAMP</span>(<span class="string">&#x27;2020-01-01 12:00:00&#x27;</span>); <span class="comment">-- 时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以下了解即可</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>); <span class="comment">-- 格式化日期</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>); <span class="comment">-- 日期加减</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>); <span class="comment">-- 日期加减</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(NOW(),NOW()); <span class="comment">-- 日期差</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>系统</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>(); <span class="comment">-- 当前用户</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION(); <span class="comment">-- MySQL版本</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>(); <span class="comment">-- 当前用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以下了解即可</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE(); <span class="comment">-- 当前数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> HOST(); <span class="comment">-- 当前主机</span></span><br><span class="line"><span class="keyword">SELECT</span> UUID(); <span class="comment">-- UUID</span></span><br><span class="line"><span class="keyword">SELECT</span> UUID_SHORT(); <span class="comment">-- UUID</span></span><br><span class="line"><span class="keyword">SELECT</span> LAST_INSERT_ID(); <span class="comment">-- 最后插入ID</span></span><br><span class="line"><span class="keyword">SELECT</span> ROW_COUNT(); <span class="comment">-- 影响行数</span></span><br><span class="line"><span class="keyword">SELECT</span> FOUND_ROWS(); <span class="comment">-- 影响行数</span></span><br><span class="line"><span class="keyword">SELECT</span> CONNECTION_ID(); <span class="comment">-- 连接ID</span></span><br><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">1</span>); <span class="comment">-- 睡眠</span></span><br><span class="line"><span class="keyword">SELECT</span> BENCHMARK(<span class="number">1000000</span>,MD5(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">-- 基准测试</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 6</title>
    <url>/2023/06/30/1/</url>
    <content><![CDATA[<h2 id="聚合函数">聚合函数</h2>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AVG()</td>
<td style="text-align:left">返回某列的平均值</td>
</tr>
<tr>
<td style="text-align:left">COUNT()</td>
<td style="text-align:left">返回某列的行数</td>
</tr>
<tr>
<td style="text-align:left">MAX()</td>
<td style="text-align:left">返回某列的最大值</td>
</tr>
<tr>
<td style="text-align:left">MIN()</td>
<td style="text-align:left">返回某列的最小值</td>
</tr>
<tr>
<td style="text-align:left">SUM()</td>
<td style="text-align:left">返回某列值之和</td>
</tr>
<tr>
<td style="text-align:left">STD()</td>
<td style="text-align:left">返回某列的标准差</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees; <span class="comment">--Count(指定列) 会忽略 NULL 值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees; <span class="comment">--Count(*) 会计算 NULL 值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees; <span class="comment">--Count(1) 会计算 NULL 值</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上三种方式效率相同, 但是 Count(1) 会更快一些, 因为它不会检查表中的列名或者表达式是否存在.<br>
count(*) 会检查列名是否存在, 但是不会检查表达式是否存在.<br>
count(列名) 会检查列名是否存在, 但是不会检查表达式是否存在.</p>
</blockquote>
<h2 id="分组过滤">分组过滤</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SubjectName, <span class="built_in">AVG</span>(StudentResult) <span class="keyword">AS</span> AvgResult,<span class="built_in">MAX</span>(StudentResult) <span class="keyword">AS</span> MaxResult,<span class="built_in">MIN</span>(StudentResult) <span class="keyword">AS</span> MinResult <span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject s <span class="keyword">ON</span> r.SubjectId <span class="operator">=</span> s.SubjectId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> SubjectName</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(StudentResult) <span class="operator">&gt;</span> <span class="number">60</span></span><br></pre></td></tr></table></figure>
<h2 id="MD5-加密">MD5 加密</h2>
<p>MD5 是一种不可逆的加密方式, 一般用于密码加密.<br>
MD5 加密后的字符串长度为 32 位.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MD5 加密</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据(明文)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- MD5 加密</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> `password` <span class="operator">=</span> MD5(`password`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> `username` <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">AND</span> `password` <span class="operator">=</span> MD5(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="comment">-- 1 admin 7c4a8d09ca3762af61e59520943dc26494f8941b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入时加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (username, password) <span class="keyword">VALUES</span> (<span class="string">&#x27;admin&#x27;</span>, MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="SELECT-小结">SELECT 小结</h2>
<p>SELECT 是 SQL 中最重要的命令, 也是最复杂的命令.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.]field1 [<span class="keyword">AS</span> alias1] [, [table.]field2 [<span class="keyword">AS</span> alias2] ...]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name1 [, table_name2 ...]</span><br><span class="line">    [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2] <span class="comment">-- 两盒查询</span></span><br><span class="line">    [<span class="keyword">WHERE</span> ...] <span class="comment">-- 条件</span></span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...] <span class="comment">-- 分组</span></span><br><span class="line">    [<span class="keyword">HAVING</span> ...] <span class="comment">-- 筛选</span></span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] <span class="comment">-- 排序</span></span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,] row_count <span class="operator">|</span> row_count <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]; <span class="comment">-- 分页</span></span><br></pre></td></tr></table></figure>
<p><code>[]</code> 表示可选, <code>&#123;&#125;</code> 表示必选, <code>|</code> 表示可选其中之一.<br>
<code>xxx AS xxx</code> 表示别名, 用于查询结果中的字段名.<br>
<code>*</code> 表示所有字段, <code>table.*</code> 表示指定表的所有字段.<br>
<code>xxx join xxx</code> 表示两个表的连接方式, 一般有 <code>left join</code>, <code>right join</code>, <code>inner join</code>.<br>
<code>WHERE</code> 表示条件, 用于筛选数据.<br>
<code>GROUP BY</code> 表示分组, 用于分组统计.<br>
<code>HAVING</code> 表示筛选, 用于筛选分组后的数据, 与 <code>WHERE</code> 的区别是, <code>WHERE</code> 是在分组前筛选, <code>HAVING</code> 是在分组后筛选.<br>
<code>ORDER BY</code> 表示排序, 用于排序数据.<br>
<code>LIMIT</code> 表示分页, 用于分页查询.</p>
<h2 id="事务">事务</h2>
<p>事务是由一组 SQL 语句组成的逻辑处理单元, 事务具有以下四个特性, 通常称为事务的 ACID 特性.<br>
<mark>要么全部执行, 要么全部不执行.</mark></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>原子性(Atomicity): 事务是一个原子操作单元, 其对数据的修改, 要么全都执行, 要么全都不执行.</p>
</li>
<li class="lvl-2">
<p>一致性(Consistency): 在事务开始和完成时, 数据都必须保持一致状态.</p>
</li>
<li class="lvl-2">
<p>隔离性(Isolation): 数据库系统提供一定的隔离机制, 保证事务在不受外部并发操作影响的&quot;独立&quot;环境执行.</p>
</li>
<li class="lvl-2">
<p>持久性(Durability): 事务完成之后, 它对于数据的修改是永久性的, 即使出现系统故障也能够保持.</p>
</li>
</ul>
<p>eg: 转账</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. A 账户余额 1000 元, B 账户余额 200 元. A 转账 100 元给 B.</span><br><span class="line">2. A 账户余额 900 元, B 账户余额 300 元.</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>隔离导致的问题: 脏读, 不可重复读, 幻读.</p>
</blockquote>
<p><strong>脏读</strong>: 一个事务读取到了另一个事务未提交的数据.<br>
<strong>不可重复读</strong>: 一个事务读取到了另一个事务已提交的 update 数据.<br>
<strong>幻读</strong>: 一个事务读取到了另一个事务已提交的 insert 数据.</p>
<h3 id="事务的隔离级别">事务的隔离级别</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>读未提交(Read Uncommitted): 一个事务还没提交时, 它做的变更就能被别的事务看到.</p>
</li>
<li class="lvl-2">
<p>读提交(Read Committed): 一个事务提交之后, 它做的变更才会被其他事务看到.</p>
</li>
<li class="lvl-2">
<p>可重复读(Repeatable Read): 一个事务执行过程中看到的数据, 总是跟这个事务启动时看到的数据是一致的.</p>
</li>
<li class="lvl-2">
<p>串行化(Serializable): 对于同一行记录, 读写会加锁, 事务只能一个接一个地执行, 不能并发执行.</p>
</li>
</ul>
<h3 id="事务实现转账">事务实现转账</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `balance` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;1000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;200&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"><span class="comment">-- 事务开始</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="comment">-- A 账户减少 100 元</span></span><br><span class="line"><span class="keyword">UPDATE</span> `account` <span class="keyword">SET</span> `balance` <span class="operator">=</span> `balance` <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">-- B 账户增加 100 元</span></span><br><span class="line"><span class="keyword">UPDATE</span> `account` <span class="keyword">SET</span> `balance` <span class="operator">=</span> `balance` <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="comment">-- 事务提交</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>
<p>MYSQL 是默认事务自动提交的, 也就是说, 每执行一条 SQL 语句, 就会自动提交一次事务.<br>
但是我们也可以手动处理事务，使用语句 <code>SET AUTOCOMMIT = 0;</code> 关闭自动提交事务, 然后使用 <code>COMMIT</code> 提交事务, 使用 <code>ROLLBACK</code> 回滚事务.</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 8</title>
    <url>/2023/07/05/1/</url>
    <content><![CDATA[<h2 id="权限管理与备份">权限管理与备份</h2>
<h3 id="用户管理">用户管理</h3>
<p>通过 MySQL 的用户管理, 可以对用户进行创建, 修改, 删除, 授权等操作.<br>
不过，我们一般使用可视化工具来管理用户，例如 Navicat Premium,SQLyog 等。对于用户管理的 SQL 语句，可以参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1hZG1pbmlzdHJhdGlvbi5odG1s">MySQL 用户管理<i class="fa fa-external-link-alt"></i></span>。</p>
<details>
<summary>常见权限</summary>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户授权</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限 <span class="keyword">ON</span> 数据库.表 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 权限有：</span></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES: 允许用户对指定数据库的所有权限</span></span><br><span class="line"><span class="comment">-- CREATE: 允许用户创建数据库或表</span></span><br><span class="line"><span class="comment">-- DROP: 允许用户删除数据库或表</span></span><br><span class="line"><span class="comment">-- DELETE: 允许用户删除表中的记录</span></span><br><span class="line"><span class="comment">-- INSERT: 允许用户向表中插入数据</span></span><br><span class="line"><span class="comment">-- SELECT: 允许用户查询表中的数据</span></span><br><span class="line"><span class="comment">-- UPDATE: 允许用户更新表中的数据</span></span><br><span class="line"><span class="comment">-- GRANT OPTION: 允许用户授权</span></span><br><span class="line"><span class="comment">-- RELOAD: 允许用户重新加载服务器配置文件</span></span><br><span class="line"><span class="comment">-- SHUTDOWN: 允许用户关闭服务器</span></span><br><span class="line"><span class="comment">-- PROCESS: 允许用户查看正在运行的进程</span></span><br><span class="line"><span class="comment">-- FILE: 允许用户读取服务器上的文件</span></span><br><span class="line"><span class="comment">-- REFERENCES: 无效权限</span></span><br><span class="line"><span class="comment">-- INDEX: 允许用户创建或删除索引</span></span><br><span class="line"><span class="comment">-- ALTER: 允许用户使用 ALTER TABLE 命令</span></span><br><span class="line"><span class="comment">-- SHOW DATABASES: 允许用户查看数据库</span></span><br><span class="line"><span class="comment">-- SUPER: 允许用户执行 CHANGE MASTER, KILL, PURGE MASTER LOGS, 和 SET GLOBAL 语句</span></span><br><span class="line"><span class="comment">-- CREATE TEMPORARY TABLES: 允许用户创建临时表</span></span><br><span class="line"><span class="comment">-- LOCK TABLES: 允许用户锁定表</span></span><br><span class="line"><span class="comment">-- EXECUTE: 允许用户执行存储过程</span></span><br><span class="line"><span class="comment">-- REPLICATION SLAVE: 允许用户作为从服务器</span></span><br><span class="line"><span class="comment">-- REPLICATION CLIENT: 允许用户查询从服务器的配置</span></span><br><span class="line"><span class="comment">-- CREATE VIEW: 允许用户创建视图</span></span><br><span class="line"><span class="comment">-- SHOW VIEW: 允许用户查看视图的定义</span></span><br><span class="line"><span class="comment">-- CREATE ROUTINE: 允许用户创建存储过程和函数</span></span><br><span class="line"><span class="comment">-- ALTER ROUTINE: 允许用户修改存储过程和函数</span></span><br><span class="line"><span class="comment">-- CREATE USER: 允许用户创建, 删除, 重命名用户帐户</span></span><br><span class="line"><span class="comment">-- EVENT: 允许用户创建, 修改, 删除事件</span></span><br><span class="line"><span class="comment">-- TRIGGER: 允许用户创建, 修改, 删除触发器</span></span><br><span class="line"><span class="comment">-- CREATE TABLESPACE: 允许用户创建, 删除, 修改表空间</span></span><br><span class="line"><span class="comment">-- CREATE ROLE: 允许用户创建, 删除, 修改角色</span></span><br><span class="line"><span class="comment">-- DROP ROLE: 允许用户删除角色</span></span><br><span class="line"><span class="comment">-- SET DEFAULT ROLE: 允许用户设置默认角色</span></span><br><span class="line"><span class="comment">-- ANALYZE: 允许用户分析表</span></span><br><span class="line"><span class="comment">-- CHECK TABLE: 允许用户检查表</span></span><br><span class="line"><span class="comment">-- CREATE FUNCTION: 允许用户创建函数</span></span><br><span class="line"><span class="comment">-- CREATE PROCEDURE: 允许用户创建存储过程</span></span><br><span class="line"><span class="comment">-- CREATE TABLE: 允许用户创建表</span></span><br></pre></td></tr></table></figure>
</details>
<p>通过命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改用户密码 (不推荐使用)</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line"><span class="comment">-- 修改用户密码 (mysql 8.0 之后)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改用户名称</span></span><br><span class="line">RENAME <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 用户授权</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限 <span class="keyword">ON</span> 数据库.表 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 撤销用户权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限 <span class="keyword">ON</span> 数据库.表 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看用户权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看当前用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="comment">-- 查看当前用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS;</span><br><span class="line"><span class="comment">-- 查看所有用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure>
<h3 id="数据库备份">数据库备份</h3>
<p>数据库备份是指将数据库的数据和结构备份到一个文件中, 以便在灾难发生时恢复数据库.<br>
数据库备份的方法有很多种, 例如使用 mysqldump 命令, 使用 Navicat Premium 等可视化工具, 使用 MySQL Workbench 等可视化工具等.</p>
<p>为什么要备份数据库呢？因为数据库中的数据是非常重要的，如果数据丢失了，那么就会造成很大的损失。</p>
<p>数据库备份的方法</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 mysqldump 命令</p>
</li>
<li class="lvl-2">
<p>使用 Navicat Premium 等可视化工具</p>
</li>
<li class="lvl-2">
<p>拷贝数据库文件</p>
</li>
</ul>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kYXRhYmFzZS1leHBvcnQuaHRtbA==">MySQL 导出数据<i class="fa fa-external-link-alt"></i></span>。</p>
<p>通过命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 备份数据库</span><br><span class="line">mysqldump -u 用户名 -p 数据库名 &gt; 备份文件名.sql</span><br><span class="line">-- 恢复数据库</span><br><span class="line">mysql -u 用户名 -p 数据库名 &lt; 备份文件名.sql</span><br><span class="line"></span><br><span class="line">-- 备份数据库结构</span><br><span class="line">mysqldump -u 用户名 -p -d 数据库名 &gt; 备份文件名.sql</span><br><span class="line">-- 恢复数据库结构</span><br><span class="line">mysql -u 用户名 -p -d 数据库名 &lt; 备份文件名.sql</span><br><span class="line"></span><br><span class="line">-- 备份数据库数据</span><br><span class="line">mysqldump -u 用户名 -p -t 数据库名 &gt; 备份文件名.sql</span><br><span class="line">-- 恢复数据库数据</span><br><span class="line">mysql -u 用户名 -p -t 数据库名 &lt; 备份文件名.sql</span><br><span class="line"></span><br><span class="line">-- 备份表</span><br><span class="line">mysqldump -u 用户名 -p 数据库名 表名 &gt; 备份文件名.sql</span><br><span class="line">-- 恢复表</span><br><span class="line">mysql -u 用户名 -p 数据库名 表名 &lt; 备份文件名.sql</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意<br>
mysqldump 命令是在命令行中执行的，而不是在 MySQL 中执行的。并且，登录 MySQL 时，使用 source 命令来恢复文件，而不是 mysql 命令。例如恢复数据库时，应该使用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">source</span> 备份文件名.sql</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 7</title>
    <url>/2023/07/01/1/</url>
    <content><![CDATA[<h2 id="索引">索引</h2>
<p>在 MySQL 中, 索引是一种特殊的文件(InnoDB 数据表上的索引是表空间的一个组成部分), 它们包含着对数据表里所有记录的引用指针.</p>
<p>索引是对数据库表中一列或多列的值进行排序的一种结构, 使用索引可快速访问数据库表中的特定信息.</p>
<p>索引是一个单独的文件, 它们很快, 但是会占用磁盘空间, 并且在插入, 更新和删除数据时需要额外的时间来更新索引.</p>
<p><strong>索引的本质是数据结构</strong>, 数据结构是为了提高数据的检索效率而产生的.</p>
<h3 id="索引的分类">索引的分类</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>普通索引 Key/Index<br>
(普通索引是最基本的索引, 没有任何限制)</p>
</li>
<li class="lvl-2">
<p>唯一索引 Unique<br>
(唯一索引的值必须唯一, 但是允许有空值)</p>
</li>
<li class="lvl-2">
<p>主键索引 Primary Key<br>
(主键索引的值必须唯一, 且不允许有空值)</p>
</li>
<li class="lvl-2">
<p>全文索引 Fulltext<br>
(全文索引是对一整段文字进行索引, 例如对一篇文章的标题和正文进行索引, 以便用户可以通过搜索词快速找到该文章)</p>
</li>
<li class="lvl-2">
<p>复合索引<br>
(复合索引是将多个列组合在一起创建索引, 例如将学生表的学号和姓名组合在一起创建索引, 以便用户可以通过学号和姓名快速找到该学生)</p>
</li>
<li class="lvl-2">
<p>空间索引<br>
(空间索引是对空间数据类型的字段创建索引, 例如对地理坐标点进行索引, 以便用户可以通过地理坐标快速找到该地点)</p>
</li>
</ul>
<h3 id="使用索引">使用索引</h3>
<ol>
<li class="lvl-3">
<p>在创建表时给字段增加索引</p>
</li>
<li class="lvl-3">
<p>在创建表之后给字段增加索引</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX 索引名 <span class="keyword">ON</span> 表名(列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名 <span class="keyword">ON</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个唯一索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析 SQL 执行计划</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure>
<h3 id="测试索引">测试索引</h3>
<p>有关 MySQL 的函数, 可以参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1mdW5jdGlvbnMuaHRtbA==">MySQL 函数<i class="fa fa-external-link-alt"></i></span>，并且，<em>函数不是当前学习的重点</em>。</p>
<details>
<summary>点击展开完整测试索引代码</summary>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建测试数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test <span class="keyword">DEFAULT</span> CHARSET utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用测试数据库</span></span><br><span class="line">USE test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个函数，用于生成随机字符串</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string(n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> chars_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">    <span class="keyword">SET</span> return_str <span class="operator">=</span> CONCAT(return_str, <span class="built_in">SUBSTRING</span>(chars_str, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">52</span>), <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line">  <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个函数，用于生成随机 M 或 F</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> `rand_gender`() </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  IF <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">2</span>) <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">SET</span> return_str <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SET</span> return_str <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line">  <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个函数，用于生成1000,000条测试数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data() </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span> <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line">  WHILE i <span class="operator">&lt;</span> num DO</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`name`, `age`, `sex`, `address`, `phone`) <span class="keyword">VALUES</span> (rand_string(<span class="number">10</span>), <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">100</span>), rand_gender(), rand_string(<span class="number">10</span>), rand_string(<span class="number">11</span>));</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line">  <span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用函数生成测试数据</span></span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询测试数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">-- 耗时长</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建索引 命名为 id_表名_字段名</span></span><br><span class="line"><span class="comment">-- 索引语法: CREATE INDEX 索引名 ON 表名(列名);</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX `id_test_name` <span class="keyword">ON</span> `test`(`name`);</span><br><span class="line"><span class="comment">-- 再次查询测试数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">-- 耗时短</span></span><br></pre></td></tr></table></figure>
</details>
<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询测试数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">-- 耗时长</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建索引 命名为 id_表名_字段名</span></span><br><span class="line"><span class="comment">-- 索引语法: CREATE INDEX 索引名 ON 表名(列名);</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX `id_test_name` <span class="keyword">ON</span> `test`(`name`);</span><br><span class="line"><span class="comment">-- 再次查询测试数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">-- 耗时短</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上代码在 MySQL 8.0.33 版本中测试通过对于新的 MySQL 版本, 定义函数时与以前的版本有所不同, 需要在函数名后面加上括号, 例如: <code>CREATE FUNCTION rand_string(n INT)</code>；DELINEATE 也不再支持, 例如: <code>DELIMITER $$</code>，因此在定义函数时不需要再使用 DELIMITER 了，因此，结尾的 <code>$$</code> 也不再需要了.</p>
</blockquote>
<h3 id="索引的优缺点">索引的优缺点</h3>
<blockquote>
<p>优点</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>大大减少了服务器需要扫描的数据量</p>
</li>
<li class="lvl-2">
<p>帮助服务器避免排序和临时表</p>
</li>
<li class="lvl-2">
<p>将随机 I/O 变为顺序 I/O</p>
</li>
<li class="lvl-2">
<p>可以将随机查询变为索引查询</p>
</li>
<li class="lvl-2">
<p>可以加速表和表之间的连接</p>
</li>
<li class="lvl-2">
<p>在使用分组和排序子句进行数据检索时，可以显著减少查询时间</p>
</li>
<li class="lvl-2">
<p>可以通过使用唯一索引或主键来强制表中每一行的唯一性</p>
</li>
<li class="lvl-2">
<p>可以减少查询中使用的锁定时间</p>
</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建和维护索引需要时间成本, 例如在插入数据时, 除了将数据插入到表中, 还需要将数据插入到索引中</p>
</li>
<li class="lvl-2">
<p>索引需要占用物理空间, 例如在创建索引时, 除了需要占用表的物理空间, 还需要占用索引的物理空间</p>
</li>
<li class="lvl-2">
<p>当对表中的数据进行增删改时, 索引也需要进行维护, 例如在对表中的数据进行增删改时, 除了需要对表中的数据进行增删改, 还需要对索引中的数据进行增删改</p>
</li>
<li class="lvl-2">
<p>索引只能加快查询速度, 不能加快更新表的速度, 例如在对表中的数据进行增删改时, 除了需要对表中的数据进行增删改, 还需要对索引中的数据进行增删改</p>
</li>
</ul>
<h3 id="索引原则">索引原则</h3>
<ol>
<li class="lvl-3">
<p>索引的字段必须是经常被查询的字段</p>
</li>
<li class="lvl-3">
<p>索引不是越多越好, 索引越多, 插入, 更新, 删除的速度就越慢</p>
</li>
<li class="lvl-3">
<p>不要对经常变动的字段创建索引, 例如: 订单表的订单状态</p>
</li>
<li class="lvl-3">
<p>不要对数据量过小的表创建索引, 例如: 一些配置表</p>
</li>
</ol>
<h3 id="索引的数据结构（选学）">索引的数据结构（选学）</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>哈希表</p>
</li>
<li class="lvl-2">
<p>有序数组</p>
</li>
<li class="lvl-2">
<p>二叉树</p>
</li>
<li class="lvl-2">
<p>B 树</p>
</li>
<li class="lvl-2">
<p>B+ 树</p>
</li>
<li class="lvl-2">
<p>前缀树</p>
</li>
<li class="lvl-2">
<p>倒排索引</p>
</li>
</ul>
<iframe src="https://blog.codinglabs.org/articles/theory-of-mysql-index.html" frameborder="0" width="100%" height="500px"></iframe>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNvZGluZ2xhYnMub3JnL2FydGljbGVzL3RoZW9yeS1vZi1teXNxbC1pbmRleC5odG1s">MySQL 索引原理及实现<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 9</title>
    <url>/2023/07/07/1/</url>
    <content><![CDATA[<h2 id="设计一个项目的数据库">设计一个项目的数据库</h2>
<h3 id="为何要设计数据库">为何要设计数据库</h3>
<p>在项目开发的过程中，我们需要存储数据，而数据库就是存储数据的地方。数据库的设计，可以让我们更好地存储数据，更好地管理数据，更好地使用数据。</p>
<p>👎Bad design:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据冗余，浪费存储空间</p>
</li>
<li class="lvl-2">
<p>数据不一致，修改数据时，需要修改多处</p>
</li>
<li class="lvl-2">
<p>程序性能低，查询数据时，需要多次查询</p>
</li>
</ul>
<p>👍Good design:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据不冗余，节省存储空间</p>
</li>
<li class="lvl-2">
<p>数据一致，修改数据时，只需要修改一处</p>
</li>
<li class="lvl-2">
<p>方便开发</p>
</li>
</ul>
<p>软件开发中，数据库设计是一个非常重要的环节，它关系到软件的性能、可扩展性、可维护性等。<br>
🤔我们要怎么设计数据库呢？</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>需求分析：分析项目的需求，确定需要存储哪些数据</p>
</li>
<li class="lvl-2">
<p>概念设计：将需求转换为数据库的概念模型</p>
</li>
</ul>
<p>设计数据库的步骤(适用于个人博客)：</p>
<ol>
<li class="lvl-3">
<p>收集信息，分析需求</p>
<ul class="lvl-2">
<li class="lvl-6">用户表</li>
<li class="lvl-6">分类表</li>
<li class="lvl-6">文章表</li>
<li class="lvl-6">评论表</li>
<li class="lvl-6">友链表</li>
<li class="lvl-6">自定义表</li>
</ul>
</li>
<li class="lvl-3">
<p>确定实体，将需求落实到每个字段</p>
<ul class="lvl-2">
<li class="lvl-6">用户表：用户 ID、用户名、密码、邮箱、头像、创建时间、更新时间</li>
<li class="lvl-6">分类表：分类 ID、分类名称、创建时间、更新时间</li>
<li class="lvl-6">文章表：文章 ID、标题、内容、创建时间、更新时间、作者 ID</li>
<li class="lvl-6">评论表：评论 ID、评论内容、评论时间、评论者 ID、文章 ID</li>
<li class="lvl-6">友链表：友链 ID、友链名称、友链地址、创建时间、更新时间</li>
<li class="lvl-6">自定义表：系统信息、某个关键字、某个配置项</li>
</ul>
</li>
</ol>
<blockquote>
<p>注意： 命名时不要使用驼峰命名法，而是使用下划线命名法，例如：user_id、user_name、create_time、update_time 等。因为在 MySQL 中，不区分大小写。如果使用驼峰命名法，那么在 SQL 语句中，就需要使用反引号来包裹字段名，例如：<code>userId</code>、<code>userName</code>、<code>createTime</code>、<code>updateTime</code> 等。这样会增加 SQL 语句的复杂度，不利于开发。</p>
</blockquote>
<ol start="3">
<li class="lvl-3">
<p>确定实体之间的关系</p>
<ul class="lvl-2">
<li class="lvl-6">用户表和文章表：一对多</li>
<li class="lvl-6">文章表和分类表：多对多</li>
<li class="lvl-6">文章表和评论表：一对多</li>
<li class="lvl-6">文章表和用户表：一对多</li>
<li class="lvl-6">友链表和用户表：一对多</li>
<li class="lvl-6">自定义表和用户表：一对多</li>
</ul>
<hr>
<ul class="lvl-2">
<li class="lvl-6">写作：user &gt; article</li>
<li class="lvl-6">分类：article &gt; category</li>
<li class="lvl-6">评论：article &gt; comment</li>
<li class="lvl-6">作者：article &gt; user</li>
<li class="lvl-6">友链：user &gt; link</li>
<li class="lvl-6">自定义：user &gt; config</li>
</ul>
</li>
</ol>
<h3 id="三大范式">三大范式</h3>
<p>为什么要遵循范式？</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据冗余</p>
</li>
<li class="lvl-2">
<p>更新异常</p>
</li>
<li class="lvl-2">
<p>删除异常 – 丢失有效信息</p>
</li>
<li class="lvl-2">
<p>插入异常 – 无法正常显示信息</p>
</li>
</ul>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2NsOTcxMTIzL3AvMTUyNjQ0NzQuaHRtbA==">数据库设计的三大范式<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3NnMjUvcC85NjE1MTAwLmh0bWw=">数据库设计的三大范式<i class="fa fa-external-link-alt"></i></span>以上两个链接中的内容有些许不同，但是都是对三大范式的解释，可以参考。</p>
</li>
</ul>
<h4 id="第一范式-1NF">第一范式 1NF</h4>
<p>第一范式是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，<strong>即实体中的某个属性不能有多个值或者不能有重复的属性。</strong><br>
例如，用户表中的用户名字段，不能存储多个用户名，也不能存储重复的用户名。</p>
<p>eg:<br>
用户表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>gender</th>
<th>contact</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>张三</td>
<td>18</td>
<td>男</td>
<td>12345678901</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>20</td>
<td>男</td>
<td>12345678902</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td>22</td>
<td>男</td>
<td>12345678903</td>
</tr>
</tbody>
</table>
<h4 id="第二范式-2NF">第二范式 2NF</h4>
<p>第二范式是在第一范式的基础上建立起来的，第二范式要求数据库表中的<strong>每个实例或行必须可以被唯一地区分</strong>。通常需要为表添加一个主键，以便能够唯一地区分表中的每一行。例如，用户表中的用户 ID 字段，就是一个主键，可以唯一地区分表中的每一行。</p>
<p>eg:<br>
用户表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>张三</td>
<td>18</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>20</td>
<td>男</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td>22</td>
<td>男</td>
</tr>
</tbody>
</table>
<p>文章表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>title</th>
<th>content</th>
<th>author_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>标题1</td>
<td>内容1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>标题2</td>
<td>内容2</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>标题3</td>
<td>内容3</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>上面的文章表中，author_id 字段就是一个外键，它引用了用户表中的用户 ID 字段，可以唯一地区分用户表中的每一行。</p>
<h4 id="第三范式-3NF">第三范式 3NF</h4>
<p>第三范式是在第二范式的基础上建立起来的（即同时满足第一范式和第二范式），第三范式要求数据库表中的<strong>每一列数据都和主键直接相关</strong>，而不能间接相关。例如，用户表中的用户名字段，和用户 ID 字段直接相关，而和用户的邮箱字段间接相关。</p>
<p>eg:<br>
文章表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>title</th>
<th>content</th>
<th>author_id</th>
<th>category_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>标题1</td>
<td>内容1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>标题2</td>
<td>内容2</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>标题3</td>
<td>内容3</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>分类表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>create_time</th>
<th>update_time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>分类1</td>
<td>2021-07-07 21:38:04</td>
<td>2021-07-07 21:38:04</td>
</tr>
<tr>
<td>2</td>
<td>分类2</td>
<td>2021-07-07 21:38:04</td>
<td>2021-07-07 21:38:04</td>
</tr>
</tbody>
</table>
<p>为了满足第三范式，我们需要将文章表中的分类 ID 字段，拆分为分类表中的分类 ID 字段和分类名称字段。</p>
<h3 id="规范与性能">规范与性能</h3>
<p>关联查询的性能比较差，所以在设计数据库时，需要权衡规范与性能。以阿里公司的数据库设计规范为例，它要求数据库表中的每个字段都要有注释，但是不要求满足第三范式。参考：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9lYm9vay8zODY=">阿里巴巴Java开发手册（终极版）<i class="fa fa-external-link-alt"></i></span></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>考虑商业化的需求与目标（如成本、效率、安全等），合理设计表结构，尽量减少关联查询，以提高性能。</p>
</li>
<li class="lvl-2">
<p>适当考虑冗余字段，以提高性能。（例如，用户表中的用户名字段，可以冗余到文章表中，这样就不需要关联查询用户表了）</p>
</li>
<li class="lvl-2">
<p>适当考虑 规范性 与 性能 的平衡，以提高开发效率。</p>
</li>
<li class="lvl-2">
<p>故意增加一些计算例 （从大数据量中查询少量数据，可以使用计算列，以提高性能）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>New-C-01</title>
    <url>/2023/09/09/1/</url>
    <content><![CDATA[<h2 id="结构体基本概念">结构体基本概念</h2>
<blockquote>
<p>为什么要使用结构体？</p>
</blockquote>
<p>在C语言中，我们可以使用数组来存储一组相同类型的数据，但是如果我们想要存储一组不同类型的数据，那么我们就需要使用结构体。</p>
<blockquote>
<p>定义：</p>
</blockquote>
<p>在C语言中，结构体是一种构造数据类型，它可以包含多个不同类型的变量。结构体的定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    成员<span class="number">1</span>;</span><br><span class="line">    成员<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">    成员n;</span><br><span class="line">&#125;;<span class="comment">// 注意这个分号，不能省略</span></span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score;    </span><br><span class="line">&#125; stu1, stu2, stu3; <span class="comment">// 在定义结构体的同时定义结构体变量</span></span><br><span class="line"><span class="comment">// 这种方式定义的结构体变量，必须在定义结构体的同一作用域中使用，否则会报错，所以这种方式定义的结构体变量，一般用于定义全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score;    </span><br><span class="line">&#125; stu1 = &#123;<span class="number">18</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">59.5</span>&#125;, stu2 = &#123;<span class="number">19</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">60.5</span>&#125;; <span class="comment">// 在定义结构体的同时定义结构体变量并初始化</span></span><br><span class="line"><span class="comment">// 这种方式定义的结构体变量，不推荐使用。</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构体变量的定义：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 变量名;</span></span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构体变量的初始化：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 变量名 =</span> &#123;成员<span class="number">1</span>的值, 成员<span class="number">2</span>的值, ..., 成员n的值&#125;;</span><br></pre></td></tr></table></figure>
<p>取出结构体中的成员的值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 结构体变量名.成员名</span></span><br><span class="line"><span class="comment">// 2. 结构体指针-&gt;成员名（推荐使用）</span></span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> =</span> &#123;<span class="number">18</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">59.5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu2</span>;</span></span><br><span class="line">stu2.age = <span class="number">19</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(stu2.name, <span class="string">&quot;李四&quot;</span>);<span class="comment">// 字符串的赋值不能直接使用赋值运算符，需要使用strcpy函数</span></span><br><span class="line">stu2.score = <span class="number">60.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> * <span class="title">pstu</span> =</span> &amp;stu2;</span><br><span class="line">pstu-&gt;age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(pstu-&gt;name, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">pstu-&gt;score = <span class="number">61.5</span>;<span class="comment">// 默认是 double 类型，所以需要强制类型转换，在末尾加上 f 即可</span></span><br><span class="line"><span class="comment">// pstu-&gt;age 等价于 (*pstu).age 这是一种简写方式，也是一种规定。</span></span><br></pre></td></tr></table></figure>
<h2 id="通过函数来操作结构体">通过函数来操作结构体</h2>
<blockquote>
<p>结构体作为函数参数</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>值传递</p>
</li>
<li class="lvl-3">
<p>地址传递</p>
</li>
</ol>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printStudent</span><span class="params">(<span class="keyword">struct</span> Student stu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生的姓名：%s，年龄：%d，成绩：%f\n&quot;</span>, stu.name, stu.age, stu.score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> =</span> &#123;<span class="number">18</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">59.5</span>&#125;;</span><br><span class="line">    printStudent(stu);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构体指针作为函数参数</p>
</blockquote>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printStudent</span><span class="params">(<span class="keyword">struct</span> Student * pstu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生的姓名：%s，年龄：%d，成绩：%f\n&quot;</span>, pstu-&gt;name, pstu-&gt;age, pstu-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> =</span> &#123;<span class="number">18</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">59.5</span>&#125;;</span><br><span class="line">    printStudent(&amp;stu);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入与输出</p>
</blockquote>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OutputStudent</span><span class="params">(<span class="keyword">struct</span> Student * pstu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生的姓名：%s，年龄：%d，成绩：%f\n&quot;</span>, pstu-&gt;name, pstu-&gt;age, pstu-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InputStudent</span><span class="params">(<span class="keyword">struct</span> Student * pstu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生的姓名：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pstu-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生的年龄：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pstu-&gt;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生的成绩：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;pstu-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    InputStudent(&amp;stu);</span><br><span class="line">    OutputStudent(&amp;stu);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="我们应该发送内容还是发送地址？">我们应该发送内容还是发送地址？</h3>
<p>在C语言中，我们可以通过值传递和地址传递来发送结构体，那么我们应该发送内容还是发送地址呢？</p>
<blockquote>
<p>结构体比较大的时候，我们应该发送地址</p>
</blockquote>
<p>参考上一节的代码，我们可以看到，我们在函数中，通过地址来修改结构体的内容，这样做的好处是，我们不需要再返回结构体，而是直接修改结构体的内容，这样做的效率更高。</p>
<blockquote>
<p>结构体比较小的时候，我们应该发送内容</p>
</blockquote>
<p>如果结构体比较小，那么我们就应该发送内容，因为结构体比较小，所以我们不需要担心效率的问题，而且我们发送内容的时候，不需要再使用指针，这样做的代码更加简洁。</p>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> score;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OutputStudent</span><span class="params">(<span class="keyword">struct</span> Student stu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生的姓名：%s，年龄：%d，成绩：%f\n&quot;</span>, stu.name, stu.age, stu.score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InputStudent</span><span class="params">(<span class="keyword">struct</span> Student * pstu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生的姓名：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pstu-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生的年龄：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pstu-&gt;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生的成绩：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;pstu-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    InputStudent(&amp;stu);</span><br><span class="line">    OutputStudent(stu);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这与上一节的 <code>输入与输出</code> 的代码是一样的，但是我们在 <code>OutputStudent</code> 函数中，我们使用的是值传递，而不是地址传递。</p>
<h3 id="指针的重要性">指针的重要性</h3>
<p>编程是用于解决实际问题的，所以编程分三步，储存数据，处理数据，输出数据。在C语言中，我们可以通过指针来储存数据，处理数据，输出数据。</p>
<p>在C语言中，指针是一种非常重要的数据类型，我们可以通过指针来操作内存，而且我们可以通过指针来提高程序的效率。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>表达一些复杂的数据结构</p>
</li>
<li class="lvl-2">
<p>快速的传递数据，减少内存的占用</p>
</li>
<li class="lvl-2">
<p>使函数返回一个以上的值</p>
</li>
<li class="lvl-2">
<p>直接访问硬件设备</p>
</li>
<li class="lvl-2">
<p>方便处理字符串</p>
</li>
<li class="lvl-2">
<p>是理解面向对象的语言中的引用的基础</p>
</li>
</ul>
<p><strong>数据结构就是数据的存储与处理方式</strong>，我们可以通过指针来表达一些复杂的数据结构，比如链表，树等。</p>
<blockquote>
<p>指针的基本概念</p>
</blockquote>
<p>指针是一种数据类型，它存储的是数据的地址，而不是数据本身。</p>
<blockquote>
<p>地址</p>
</blockquote>
<p>在C语言中，每一个变量都有一个地址，这个地址是由系统分配的，我们可以通过 <code>&amp;</code> 来获取变量的地址。</p>
<h3 id="冒号排序">冒号排序</h3>
<p>冒泡排序是一种简单的排序算法，它重复的走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来，直到没有元素需要交换，这个算法的名字由来是因为越小的元素会经由交换慢慢的浮到数列的顶端。</p>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> * arr, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    <span class="comment">// 这里的 len - 1 是因为，我们只需要比较 len - 1 次，最后一次不需要比较</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">        <span class="comment">// 这里的 len - 1 - i 是因为，我们每比较一次，就会有一个元素到达最终的位置，所以我们每比较一次，就需要比较的元素就会减少一个</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数的作用是对数组进行冒泡排序</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> * arr, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数的作用是打印数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubbleSort(arr, len);</span><br><span class="line">    printArray(arr, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络（IPv4部分）</title>
    <url>/2023/06/04/2/</url>
    <content><![CDATA[<h1>IPv4</h1>
<p>IPv4是目前使用最广泛的IP协议，它的地址长度为32位，通常用点分十进制表示。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 32位二进制</span><br><span class="line">11000000.10101000.00000001.00000001</span><br><span class="line"># 点分十进制</span><br><span class="line">192.168.1.1</span><br></pre></td></tr></table></figure>
<hr>
<p>如何将32位二进制转换为点分十进制呢？将32位二进制分成4组，每组8位，然后将每组转换为十进制，就得到了点分十进制。</p>
<hr>
<p>如何计算二进制的十进制呢？将二进制的每一位乘以2的n次方，n从0开始，从右往左递增，然后将每一位的结果相加，就得到了十进制。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 11000000.10101000.00000001.00000001</span><br><span class="line"># 1*2^7 + 1*2^6 + 0*2^5 + 0*2^4 + 0*2^3 + 0*2^2 + 0*2^1 + 0*2^0 = 192</span><br><span class="line"># 1*2^7 + 0*2^6 + 1*2^5 + 0*2^4 + 1*2^3 + 0*2^2 + 0*2^1 + 0*2^0 = 168</span><br><span class="line"># 0*2^7 + 0*2^6 + 0*2^5 + 0*2^4 + 0*2^3 + 0*2^2 + 0*2^1 + 1*2^0 = 1</span><br><span class="line"># 0*2^7 + 0*2^6 + 0*2^5 + 0*2^4 + 0*2^3 + 0*2^2 + 0*2^1 + 1*2^0 = 1</span><br></pre></td></tr></table></figure>
<p>技巧：一般IPv4地址32位分成4组，每组8位，每组的最大值为255，所以第8位为1的二进制的十进制最大值为255，第8位为0的二进制的十进制最大值为127。</p>
<hr>
<p>那么，十进制怎么转化成二进制呢？将十进制除以2，得到的余数就是二进制的每一位，然后将商再除以2，得到的余数就是二进制的每一位，以此类推，直到商为0为止，然后将余数从下往上排列，就得到了二进制。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 192</span><br><span class="line"># 192/2 = 96 余数0</span><br><span class="line"># 96/2 = 48 余数0</span><br><span class="line"># 48/2 = 24 余数0</span><br><span class="line"># 24/2 = 12 余数0</span><br><span class="line"># 12/2 = 6 余数0</span><br><span class="line"># 6/2 = 3 余数0</span><br><span class="line"># 3/2 = 1 余数1</span><br><span class="line"># 1/2 = 0 余数1</span><br><span class="line"># 11000000</span><br></pre></td></tr></table></figure>
<h2 id="分类编址IPv4地址">分类编址IPv4地址</h2>
<p>IP地址是指互联网上的每一台主机的地址，它由网络号和主机号组成，网络号用来标识主机所在的网络，主机号用来标识主机。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IP地址 = 网络号 + 主机号</span><br></pre></td></tr></table></figure>
<hr>
<p>A类IP地址一个A类IP地址由1字节的网络地址和3字节主机地址组成，即8位网络地址和24位主机地址，它主要为大型网络而设计的，网络地址的最高位必须是“0”， 地址范围从1.0.0.0 到127.0.0.0）。可用的A类网络有127个，每个网络能容纳16777214个主机。其中127.0.0.1是一个特殊的IP地址，表示主机本身，用于本地机器的测试。<br>
2^7 = 128，减去两个保留地址，126个网络。每个网络可容纳2^24 - 2 = 16777214个主机。</p>
<p>注：<br>
A:0-127，其中0代表任何地址，127为回环测试地址，因此，A类ip地址的实际范围是1-126.<br>
默认子网掩码为255.0.0.0</p>
<p>B类IP地址一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，即16位网络地址和16位主机地址，它主要为中型网络而设计的，网络地址的最高位必须是“10”，地址范围从128.0.0.0到191.255.255.255。可用的B类网络有16382个，每个网络能容纳6万多个主机 。<br>
2^14 = 16384，减去两个保留地址，16382个网络。每个网络可容纳2^16 - 2 = 65534个主机。</p>
<p>注：<br>
B:128-191，其中128.0.0.0和191.255.0.0为保留ip，实际范围是128.1.0.0–191.254.0.0。</p>
<p>C类IP地址一个C类IP地址由3字节的网络地址和1字节的主机地址组成，即24位网络地址和8位主机地址，它主要为小型网络而设计的，网络地址的最高位必须是“110”。范围从192.0.0.0到223.255.255.255。C类网络可达209万余个，每个网络能容纳254个主机。<br>
2^21 = 2097152，减去两个保留地址，2097150个网络。每个网络可容纳2^8 - 2 = 254个主机。</p>
<p>注：<br>
C:192-223，其中192.0.0.0和223.255.255.0为保留ip，实际范围是192.0.1.0–223.255.254.0</p>
<p>D类地址用于多点广播（Multicast）。 D类IP地址第一个字节以“lll0”开始，它是一个专门保留的地址。它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中。多点广播地址用来一次寻址一组计算机，它标识共享同一协议的一组计算机。224.0.0.0到239.255.255.255用于多点广播 。</p>
<p>E类IP地址以“llll0”开始，为将来使用保留。240.0.0.0到255.255.255.254，255.255.255.255用于广播地址。</p>
<pre><code>全零（“0．0．0．0”）地址对应于当前主机。全“1”的IP地址（“255．255．255．255”）是当前子网的广播地址。
</code></pre>
<p>在IP地址3种主要类型里，各保留了3个区域作为私有地址，其地址范围如下：<br>
A类地址：10.0.0.0～10.255.255.255<br>
B类地址：172.16.0.0～172.31.255.255<br>
C类地址：192.168.0.0～192.168.255.255</p>
<p>eg.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0.0.0.0 是一个特殊的IP地址，表示主机本身，用于本地机器的测试。</span><br><span class="line">以127开头的非全0地址或非全1的地址，表示的是本机的回环地址，即自己访问自己，一般用于测试。</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>类别</th>
<th>可用网络数</th>
<th>每个网络可容纳的主机数</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>126</td>
<td>16777214</td>
</tr>
<tr>
<td>B</td>
<td>16382</td>
<td>65534</td>
</tr>
<tr>
<td>C</td>
<td>2097150</td>
<td>254</td>
</tr>
</tbody>
</table>
<h2 id="划分子网的IPv4地址">划分子网的IPv4地址</h2>
<p>子网掩码是用来划分网络地址和主机地址的，它是一个32位的二进制数，其中网络地址部分全为“1”，主机地址部分全为“0”。<strong>子网掩码的作用是将IP地址划分为网络地址和主机地址两部分</strong>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IP地址 = 网络号 + 主机号</span><br><span class="line">子网掩码 = 网络号 + 主机号</span><br></pre></td></tr></table></figure>
<p>目的：将一个网络划分为多个子网，以满足不同的网络需求。</p>
<p>32位的子网掩码，从左到右，连续的1表示网络号，连续的0表示主机号。将划分的子网的IPv4地址和子网掩码进行逻辑与运算，得到的结果就是子网的网络号。</p>
<p>eg1.</p>
<p><img src="./eg2.png" alt><br>
<img src="./eg2_1.png" alt></p>
<p>eg2.<br>
<img src="./eg3.png" alt><br>
<img src="./eg3_1.png" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>来自 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWM0NDExZDdqYi8/cD00NQ==">Bilibili 计算机网络微课堂<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="默认子网掩码">默认子网掩码</h3>
<p>默认子网掩码是指在没有划分子网的情况下，根据IP地址的类别，自动分配的子网掩码。</p>
<table>
<thead>
<tr>
<th>IP地址类别</th>
<th>默认子网掩码</th>
<th>子网掩码的二进制表示</th>
<th>构成</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>255.0.0.0</td>
<td>11111111.00000000.00000000.00000000</td>
<td>8位网络号 + 24位主机号</td>
</tr>
<tr>
<td>B</td>
<td>255.255.0.0</td>
<td>11111111.11111111.00000000.00000000</td>
<td>16位网络号 + 16位主机号</td>
</tr>
<tr>
<td>C</td>
<td>255.255.255.0</td>
<td>11111111.11111111.11111111.00000000</td>
<td>24位网络号 + 8位主机号</td>
</tr>
</tbody>
</table>
<h2 id="无分类编址CIDR">无分类编址CIDR</h2>
<p>CIDR（Classless Inter-Domain Routing，无分类域间路由选择），是为了解决IP地址的耗尽问题而提出的。CIDR采用了一种新的IP地址分配方法，它不再将IP地址看成是A、B、C类地址，而是将一个IP地址写成：IP地址/子网掩码的形式，其中“/”后面的数值表示子网掩码中连续的“1”的个数。</p>
<p>优点：CIDR可以将一个网络划分为多个子网，也可以将多个网络合并为一个网络，从而更加灵活地分配IP地址。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>CIDR使用&quot;斜线记法&quot;来表示IP地址和子网掩码的组合，如：<br>
eg.</p>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">128.14.35.7/20</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>CIDR实际上是<strong>将网络前缀都相同的连续的IP地址块组成一个CIDR块</strong>，这样就可以用一个较短的前缀来表示一组IP地址块。</p>
</li>
<li class="lvl-2">
<p>只要知道了CIDR地址块中任何一个IP地址，就可以知道CIDR地址块的全部细节</p>
<ul class="lvl-2">
<li class="lvl-6">地址块中最小的IP地址</li>
<li class="lvl-6">地址块中最大的IP地址</li>
<li class="lvl-6">地址块中的IP地址总数</li>
<li class="lvl-6">地址块聚合某类网络数量</li>
<li class="lvl-6">地址掩码</li>
</ul>
</li>
</ul>
<p>eg.<br>
<img src="./eg4.png" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>来自 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWM0NDExZDdqYi8/cD00Ng==">Bilibili 计算机网络微课堂<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="路由聚合-构造超网">路由聚合(构造超网)</h3>
<p>路由聚合是指将多个路由聚合成一个路由，从而减少路由表的规模，提高路由查找的效率。</p>
<p>路由聚合的基本思想是：将多个具有相同前缀的路由聚合成一个路由，这样就可以用一个较短的前缀来表示一组路由。</p>
<p>eg.<br>
<img src="./eg5.png" alt></p>
<h2 id="IPv4地址应用规划">IPv4地址应用规划</h2>
<p>为了更好地利用IPv4地址，需要对IPv4地址进行合理的规划，以便于管理和使用。</p>
<h3 id="定长子网掩码-Fixed-Length-Subnet-Mask">定长子网掩码(Fixed-Length Subnet Mask)</h3>
<p>FLSM：指在一个网络中，所有子网的子网掩码都相同。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用同一个子网掩码的子网，其主机数相同，这样就方便了管理。</p>
</li>
<li class="lvl-2">
<p>每一个子网分配的主机数都是固定的，这样就不利于灵活地分配IP地址。</p>
</li>
</ul>
<p>eg.<br>
<img src="./eg6.png" alt><br>
<img src="./eg6_1.png" alt><br>
<img src="./eg6_2.png" alt></p>
<p>只能划分出2^n 个子网，每个子网的主机数都是2^m-2个，其中n+m=32。造成了大量的IP地址浪费，原因是：每个子网的主机数都是固定的，而实际使用的主机数往往比较少，这样就造成了IP地址的浪费。</p>
<h3 id="可变长子网掩码-Variable-Length-Subnet-Mask">可变长子网掩码(Variable-Length Subnet Mask)</h3>
<p>VLSM：指在一个网络中，不同子网的子网掩码可以不同。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用不同子网掩码的子网，其主机数可以不同，这样就方便了管理。</p>
</li>
<li class="lvl-2">
<p>每一个子网分配的主机数都是可变的，这样就利于灵活地分配IP地址。</p>
</li>
</ul>
<p>eg.<br>
<img src="./eg7.png" alt><br>
<img src="./eg7_1.png" alt></p>
<h3 id="总结">总结</h3>
<p><img src="./eg8.png" alt></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>网件 AX8 RAX80 路由器探索 硬件·散热·改装·固件·救砖</title>
    <url>/2024/11/04/1/</url>
    <content><![CDATA[<h2 id="引子">引子</h2>
<p>最近老的 RT-AC68U 老是断流，加之已经用了很久了，LAN 口也有点老化，不能发挥全部性能了，所以以 338.5CNY 的价格入手了一台网件的 AX8 RAX80 路由器<s>万能拼多多，百分百官翻</s>，这是一款支持 WiFi 6 的路由器。</p>
<h2 id="硬件差异以及散热改装">硬件差异以及散热改装</h2>
<p>这台路由器的硬件配置是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>CPU: BCM49408,4cores 1.8GHz.</p>
</li>
<li class="lvl-2">
<p>5G&amp;2.4G: BCM43684,802.11ax support.</p>
</li>
<li class="lvl-2">
<p>5G RFFE,SKY85743.</p>
</li>
<li class="lvl-2">
<p>2.4G RFFE,SKY85331.</p>
</li>
<li class="lvl-2">
<p>RAM: 1GB.</p>
</li>
<li class="lvl-2">
<p>Flash: 512MB.</p>
</li>
</ul>
<p>这个配置与华硕 AX88U 一致，但是价格便宜了许多，意味着它可以使用梅林固件。</p>
<p>在一些文章中展示了它使用了一个台达风扇(EFB0505LA.)，但是在我这台路由器上并没有看到风扇，可能是后期的版本取消了风扇。</p>
<p>参考 参考链接<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>、参考链接<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>、参考链接<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> 中有详细的硬件拆解和评测。可以看到路由器内部的构造。</p>
<div class="note success"><p>无风扇版本手动添加风扇</p>
</div>
<p>我们可以手动添加风扇，但是不一定生效，需要刷写固件，这里按下不表。只先讲一讲怎么添加风扇。</p>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hpcGhlbGwuY29tL3BvcnRhbC5waHA/bW9kPXZpZXcmYWlkPTIyMzA3JnBhZ2U9Mw==">Netgear RAX80 评测<i class="fa fa-external-link-alt"></i></span> 中讲解了详细的拆解过程，可以参考。</p>
<p>不需要与官方一样的型号，规格一致即可，原装的台达EFB0505LA. 5V 0.1A风扇，台达风扇大多是 OEM 的，不容易找到，台达一般不对外零售，淘宝上基本是假货，所以找同规格替代即可</p>
<p>购买一个 5010 规格的风扇，市面上许多风扇假装是 3 线风扇，实际上是 2 线风扇，所以需要注意。其实 2 线风扇也可以使用，只是没有PWM调速功能，但是某宝上的风扇大多都虚标，即使最快也没正版的快，所以不用太在意。也可以使用12v风扇，这样不能满血，但是也能降温，而且噪音更小，降压使用寿命更长。</p>
<blockquote>
<p>关于风扇线序，一般是红线为正极，黑线为负极，黄线为转速信号线，蓝色线为PWM调速线，但是这个路由器没有 PWM 调速功能，所以不用管蓝线。</p>
</blockquote>
<p>用文本画一个示意图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       防呆口</span><br><span class="line">|| +-----+-----+ ||</span><br><span class="line">| |⁻⁻⁻⁻⁻| |⁻⁻⁻⁻⁻| |</span><br><span class="line"> -----------------</span><br><span class="line"> 黄线   红线   黑线</span><br></pre></td></tr></table></figure>
<p>我DIY过很多，买过很多风扇，得出一个结论，除了拆机正品，其他的都是假的，所以不用太在意，挑便宜的买。</p>
<p>比如之前买过一个20块的，和一个2块的，结果都只能用一年（全天运行）…</p>
<p>没有风扇的版本，同样不带螺丝柱，所以需要自己安装螺丝柱，然后安装风扇。</p>
<p>当然，这个东西也不好找，可以使用胶水、热熔胶，或者是扎带固定。</p>
<p>也可以买一些子母铆钉，这个挺便宜<s>也美观(盖上盖子没人看得到)</s>，也要注意规格，不要买太大的，最好配一些垫片，这样可以防止螺丝摩擦到主板。</p>
<p>参考 参考链接<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> 中讲解了详细的添加风扇的过程，可以参考。</p>
<p>有人提到使用离心涡轮风扇才是适配这个有导流槽的铸铁散热器的最佳选择，但是我翻遍了购物网站，没有找到合适的风扇，这个可能需要自己定制，所以基本上不可能实现，而笔记本那种涡轮风扇，反而不如普通风扇好用。</p>
<p>参考 参考链接<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> 中讲解了被动散热的改装，可以参考。</p>
<div class="note success"><p>被动散热改装</p>
</div>
<p>关于被动散热，成本比较高，因为是定制的散热片，所以不推荐（三百多的主机，散热花掉50块是很不划算的）。但是可以自己买铜带自己做，这个成本比较低（物料大概也就5块的样子），但是要比较全的工具，以及一些五金件加工的经验。</p>
<div class="note info"><p>风扇控制固件问题</p>
</div>
<p>这里还有关风扇控制的问题，主要是固件的问题。</p>
<p>官方的固件也是有风扇控制的，但是极为保守，刚开机时可以看到转一下，然后就不转了；SWRT官改固件内置了自动风扇控制，但是不能调节，也没有开关，为此我从 koolshare 移植了该插件，详见梅林固件部分；koolshare 固件可以调节风扇转速，但是这个固件被认为存在安全性问题，且很久没有维护了。</p>
<p>不过，我还是没有添加风扇和被动散热，我直接在底座加了一个电脑用的散热风扇底座，就是那种老式的，里面6个小风扇，总功率大约2.5W，可以通过 USB 接口供电，我直接把它接线到 DC 适配器上，以前用AC68U的时候，一直插在路由器上，久而久之，USB接口接触不良了…好在还有一个3.0的接口，2.0的接口就不管了。</p>
<p>实测效果也不错，从 70 度降到 57 度，但是噪音有点大，不过我不在意（我把路由器放在电视机旁边的柜子上，那个柜子有 2.2m 高）。</p>
<h2 id="官方固件">官方固件</h2>
<p>如何下载官方固件？</p>
<p>参考链接<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p>
<p>官方固件下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0Z2Vhci5jb20vc3VwcG9ydC9wcm9kdWN0L1JBWDgwLmFzcHg=">https://www.netgear.com/support/product/RAX80.aspx<i class="fa fa-external-link-alt"></i></span></p>
<p>这里只提供了最新版本的固件下载，如果需要下载旧版本的固件，可以通过以下方法获取：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在网件的美国官网搜索页面中输入“RAX80 Firmware&quot;，然后点击搜索按钮，即可看到部分的固件版本。例如: <span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0Z2Vhci5jb20vc2VhcmNoLz89JnJlZmVycmVyUGFnZVVybD0mcXVlcnk9UkFYODArRmlybXdhcmUr">https://www.netgear.com/search/?=&amp;referrerPageUrl=&amp;query=RAX80+Firmware+<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p>但是，这样得到的固件版本并不全，如果需要下载更多的固件版本，可以通过以下方法获取。前提是你需要知道具体的版本号，例如：<code>1.0.1.40_1.0.22</code>、<code>1.0.0.30_1.0.17</code>，然后补全到以下链接中：<code>http://www.downloads.netgear.com/files/GDC/RAX80/RAX80-V1.0.2.76_1.0.35.zip</code>替换其中的版本号即可下载到对应的固件版本。</p>
</li>
</ul>
<blockquote>
<p>据说 1.0.0.30_1.0.17 这个版本还支持 SuperWifi，以及不锁区，支持开启 telnet<br>
网件的更新真是开倒车，越来越差了。</p>
</blockquote>
<h3 id="官方固件打开-telnet">官方固件打开 telnet</h3>
<p>打开网件路由器的telnet功能，可以通过以下方法实现：</p>
<div class="note info"><p>固件后台页面打开 telnet</p>
</div>
<p><span class="exturl" data-url="aHR0cDovLzEwLjAuMC4xL2RlYnVnLmh0bQ==">http://10.0.0.1/debug.htm<i class="fa fa-external-link-alt"></i></span></p>
<p>勾选上<code>Enable Telnet</code>，然后点击<code>Apply</code>按钮即可。</p>
<blockquote>
<p>该方法只适用于部分固件版本，如果你的固件版本不支持，可以尝试回滚老版本固件，<br>
1.0.1.40活着1.0.1.62活着1.0.1.64都可以，低于这几个版本的也可</p>
</blockquote>
<div class="note info"><p>开源工具打开 telnet</p>
</div>
<p>或者使用工具 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JrZXJsZXIvbmV0Z2Vhcl90ZWxuZXQ=">netgear_telnet<i class="fa fa-external-link-alt"></i></span></p>
<p>按照要求，配置 python 虚拟环境，然后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./telnet-enable.py &lt;ip&gt; &lt;mac&gt; &lt;username&gt; [<span class="string">&#x27;&lt;password&gt;&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./telnet-enable.py 192.168.1.1 A0:40:A0:69:B6:30 admin <span class="string">&#x27;mypassword&#x27;</span></span><br></pre></td></tr></table></figure>
<p>但是这个工具已经将仓库标记为存档状态，所以可能不再维护。</p>
<p>你也可以尝试拆机使用 TTL 线连接路由器，然后通过串口方式进入路由器的系统。只不过这样的方式比较麻烦，不推荐。</p>
<p>参考链接<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p>
<h3 id="官方固件更改地区">官方固件更改地区</h3>
<div class="note info"><p>开发者工具更改地区</p>
</div>
<p>可以尝试使用开发者工具，检查网页元素，将标签的<code>disabled</code>属性去掉，然后选择地区，点击<code>Apply</code>按钮即可。</p>
<blockquote>
<p>还有進去看代碼有找到hid_telnet的部分，但 style=”display:none;” 的部分沒有看到找對應的地方硬改成 style=”display:center;</p>
</blockquote>
<p>这种方式只适用于部分固件版本</p>
<div class="note info"><p>telnet 更改地区</p>
</div>
<p>其次可以使用 telnet 进入路由器系统，然后通过命令行的方式修改地区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 10.0.0.1</span><br><span class="line"><span class="built_in">cd</span> sbin</span><br><span class="line">artmtd -w region PR</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PR是People’s Republic of China的缩写，其他区域代码NA、WW、GR、RU、BZ、IN、KO、JP、AU、CA、US，若想查询当前区域，可通过artmtd -r region命令。参考链接<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p>
</blockquote>
<p>AU是澳大利亚区，功率最高。<br>
WW是欧区，无线全区域可选。</p>
<p>然后 <code>reboot</code> 重启路由器即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">更新一些区域代码</span><br><span class="line">0x001 is for region NA</span><br><span class="line">0x002 is for region WW</span><br><span class="line">0x003 is for region GR</span><br><span class="line">0x004 is for region PR</span><br><span class="line">0x005 is for region RU</span><br><span class="line">0x006 is for region BZ</span><br><span class="line">0x007 is for region IN</span><br><span class="line">0x008 is for region KO</span><br><span class="line">0x009 is for region JP</span><br><span class="line">0x000A is for region AU</span><br><span class="line">0x000B is for region CA</span><br><span class="line">0x000C is for region US</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">burnsku 0x0002 <span class="comment"># 解除地区限制</span></span><br><span class="line">burnsku 0x0004 <span class="comment"># 则可改回国区</span></span><br></pre></td></tr></table></figure>
<h2 id="梅林固件">梅林固件</h2>
<p>截至24年11月，我收集到的固件有：官方固件，SWRT官改固件，koolshare 固件</p>
<p>这些在搜索引擎中搜索即可找到最新版</p>
<p>比较推荐使用 SWRT官改固件，这个固件是基于梅林固件的，但是有一些改动,添加了软件中心，可以安装一些插件。</p>
<p>具体的安装方法它们的发布页都有详细的说明。</p>
<h3 id="SWRT-官改固件移植风扇控制插件">SWRT 官改固件移植风扇控制插件</h3>
<p>移植自 koolshare 的 <code>rogsoft</code> 项目中的 <code>rog</code> ROG 工具箱 插件</p>
<p>在软件中心离线安装主体部分</p>
<p><strong>而其中的库文件需要解包固件</strong>，将压缩包中<code>/rax80/</code>文件夹中的文件复制到根目录，再打包成新的固件，然后刷入路由器。</p>
<p>解包打包固件的方法可以参考本文的 <a href="#%E5%9B%BA%E4%BB%B6%E8%A7%A3%E6%9E%90">固件解析</a> 部分。</p>
<div id="downloadcard">
    <div class="card">
        <h2>下载文件</h2>
        <a href="./files/rog.tar.gz" download="rog.tar.gz" class="download-btn" target="_blank" data-pjax-state="load">下载 RAX80 工具箱</a>
    </div>
</div>
<style>
    #downloadcard {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0;
    }

    .card {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .card h2 {
        margin-bottom: 20px;
    }

    .download-btn {
        display: block;
        margin: 10px 0;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .download-btn:hover {
        background-color: #0056b3;
    }
</style>
<h2 id="救砖">救砖</h2>
<div class="note info"><p>使用 TFTP 救砖</p>
</div>
<p>据网友的经验，这个路由器的救砖方法比较简单，只需要使用 TFTP 协议，将固件上传到路由器即可。</p>
<p>参考链接<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> 中讲解了详细的救砖过程，可以参考。</p>
<p>注意上传的固件必须是 <code>.chk</code> 格式的固件，否则可能发生出乎意料的问题。</p>
<p>这个方法需要拆机 TTL，比较麻烦，所以有两个不需要拆机的方法。</p>
<p>参考链接<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> 中讲解了详细的救砖过程，可以参考。</p>
<div class="note primary"><p>主要方法</p>
</div>
<ul class="lvl-0">
<li class="lvl-2">
<p>Windows 终端执行</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmrpflash.exe -i net24 -f RAX80-V1.0.0.30_1.0.17.chk -t 20000</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>linux命令在终端执行前加上sudo即可</p>
</li>
</ul>
<blockquote>
<p>注意-t 20000必须加否则上传必失败。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>关机后按住重置按钮并打开电源，当nmrpflash开始上传后松开，等待nmrpflash上传完成提醒重启，大概3分钟时间。</p>
</li>
<li class="lvl-2">
<p>系统启动后当可以打开192.168.1.1时按住重置按钮大约30秒恢复出厂，重启后即可完全恢复原厂系统。</p>
</li>
<li class="lvl-2">
<p>之后可以重新设置电脑为自动获取ip。</p>
</li>
</ul>
<div class="note info"><p>Koolshare 提供的救砖方法</p>
</div>
<p>另一种方法来自 koolshare，为防止他们网站关闭，我将其转载在这里。</p>
<p>一、打开TFTP功能<br>
windows + R组合键，调出命令运行窗口，输入：OptionalFeatures后回车，打开windows功能窗口找到TFTP客户端功能，勾选后点击确定</p>
<p>二、准备救砖软件安装npcap后，才能正常使用nmrpflash，下载地址：<span class="exturl" data-url="aHR0cHM6Ly9ucGNhcC5jb20v">npcap-1.50.exe<i class="fa fa-external-link-alt"></i></span><br>
下载nmrpflash程序：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pjbGVobmVyL25tcnBmbGFzaA==">nmrpflash.zip<i class="fa fa-external-link-alt"></i></span>，解压得到nmrpflash文件夹，内有nmrpflash.exe程序。将nmrpflash文件夹放进C盘根目录中，方便以后使用。</p>
<p>三、准备救砖固件网件固件救砖必须使用.chk后缀的RAX80固件，既可以使用网件官方固件，比如RAX80-V1.0.0.30_1.0.17.chk,也可以使用RAX80梅林固件的chk版本本文使用梅林固件：<code>RAX80_386.3_0_ubi_koolshare.chk</code>进行救砖操作，救砖前将固件文件放进C盘的nmrp文件夹</p>
<p>四、网卡设置首先使用网线将RAX80的LAN口与电脑的网卡进行连接在windows操作系统中，将网卡的IP地址设置成<code>192.168.1.2</code>，掩码：<code>255.255.255.0</code>，网关：<code>192.168.1.1</code>注意，网卡的IP地址请严格按照以上进行设置</p>
<p>五、Powershell<br>
打开3个Windows PowerShell窗口，分别为命令窗口1，命令窗口2，命令窗口3，将他们并排显示在桌面上在第二个和第三个PowerShell窗口内输入命令：<code>cd C:\nmrpflash\</code>，以切换到nmrpflash.exe所在的文件夹如果此时RAX80电源是开启的，请关闭RAX80电源在命令窗口1中，输入<code>ping 192.168.1.1 -t</code>并回车，此时应该会显示请求超时在命令窗口2中，输入<code>.\nmrpflash.exe -L</code>并回车，找到RAX80连接的电脑网卡编号，我的是net24<br>
在命令窗口3中，输入以下命令，但是不敲回车执行，备用<br>
<code>tftp -i 192.168.1.1 PUT .\RAX80_386.3_0_ubi_koolshare</code></p>
<p>六、刷机在命令窗口2中，运行以下命令（其中，net24换成你自己的网卡编号，<code>RAX80_386.3_0_ubi_koolshare.chk</code>换成你要刷的固件）：</p>
<p><code>.\nmrpflash.exe -i net24 A 192.168.1.2 -a 192.168.1.1 -f .\RAX80_386.3_0_ubi_koolshare.chk</code><br>
以上命令运行后，立即按下RAX80开关，给RAX80通电，然后观察命令窗口1，是否出现TTL=100的回复（参考救砖教程图片版）</p>
<p>上面的命令运行后，观察命令窗口1，是否出现TTL=100的回复（参考救砖教程图片版）</p>
<p>如果命令窗口2中的nmrplfash命令已经执行结束，但是命令窗口1中还未出现<code>TTL=100</code>，或者是出现的<code>TTL=100</code>回复中断了，那么就在立即在命令窗口2中再执行一次上面的命令（可以使用键盘上的向上方向键，调出上一条命令后，直接按下回车执行）。</p>
<p>再次执行后，观察命令窗口1中是否稳定刷出<code>TTL=100</code>的回复，如果是，立即在命令窗口3中将之前准备好的命令执行（回车执行）</p>
<p>命令执行后等待二十秒左右，在命令窗口3中会出现传输成功字样，这就是TFTP刷机成功的标识</p>
<p>此时再等待2 - 3分钟后，可以手动将RAX80路由器断电再开启，即可进入你要刷的系统</p>
<p>请记得将最开始对网卡静态IP的设置更改为动态获取，以顺利访问路由器后台地址</p>
<div class="note warning"><p>救砖总结：</p>
</div>
<p>nmrp是网件自己的一个协议，可以用于网件固件的救砖，但是由于网件自己的nmrp软件过于老旧，必须在windows xp上运行，而nmrpflash是基于nmrp协议实现的第三方救砖工具，可以在windows 10、macOS、linux下运行。</p>
<p>理论上nmrpflash救砖只需要命令窗口2中的nmrpflash令执行后就可以了，不需要命令窗口3中的tftp命令参与，但是因为RAX80在开机后只有很短的时间会收到nmrp协议的广播，而且即使收到，也大概率会出现Timeout，从而无法成功上传固件（成功使用nmrpflash给RAX80上传固件的时间窗口很难把握）。</p>
<p>即使nmrpflash无法成功使用刷到固件，但也会触发RAX80进入TFTP模式，（TTL=100就是进入TFTP模式的标识，相信使用TFTP刷华硕机器的朋友并不陌生）。</p>
<p>那么就能利用TFTP命令进行固件的刷写了，所以以上步骤，如果完全没有偏差的执行，那么从ML固件刷回网件原厂是完全没有任何问题的。</p>
<h2 id="固件解析">固件解析</h2>
<p>这台设备使用两种格式的固件，分别是官方的 <code>chk</code> 格式和华硕的 <code>w</code> 格式。</p>
<h3 id="chk-格式">chk 格式</h3>
<p>chk 格式的固件比较简单，只需要使用 <code>binwalk</code> 工具解析即可。</p>
<p>最新的 <code>binwalk</code> 使用了 rust 语言，不再是 pytohn 了，</p>
<p>所以我们使用 <code>docker</code> 来运行 <code>binwalk</code>。</p>
<p>这里记录 windows 下的使用方法，linux 下的使用方法类似。</p>
<p>使用的前提是安装了 <code>docker</code>，以及 <code>WSL2</code>环境，不太推荐使用 <code>Hyper-V</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ReFirmLabs/binwalk.git</span><br><span class="line"><span class="built_in">cd</span> binwalk</span><br><span class="line"><span class="built_in">sudo</span> docker build -t binwalkv3 .</span><br><span class="line"><span class="built_in">sudo</span> docker run -t -v.:/analysis binwalkv3 -Me firmware.chk</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 <code>firmware.chk</code> 是你的固件文件，运行完成后打开 <code>extractions</code> 文件夹即可看到解析的文件。</p>
</blockquote>
<p>打包可以看 参考链接<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>、参考链接<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup></p>
<h3 id="w-格式">w 格式</h3>
<p>w 格式的固件比较复杂，需要使用 <code>ubi_reader</code> 工具解析。</p>
<p>参考链接<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup></p>
<p>首先使用 python 创建虚拟环境</p>
<p>激活环境后，使用 <code>pip</code> 安装 <code>ubi_reader</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --user ubi_reader</span><br></pre></td></tr></table></figure>
<p>参考链接<a href="#">^11</a>、参考链接<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> 中讲解了详细的解析过程，可以参考。</p>
<p>打开 CMD</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubireader_display_info firmware.w <span class="comment">#获取UBI信息以及布局块等信息</span></span><br><span class="line">ubireader_extract_images firmware.w <span class="comment">#提取镜像</span></span><br><span class="line">ubireader_extract_files firmware.w <span class="comment">#提取文件内容</span></span><br><span class="line">bireader_utils_info firmware.w <span class="comment">#分析UBI镜像并创建shell脚本和UBI配置文件</span></span><br></pre></td></tr></table></figure>
<p>在 Windows 下，到提取镜像这一步基本就结束了，因为 Windows 下没有类似 Linux 下的相关命令，而且基本上提取文件内容也是空的。这里得到了一个 <code>.ubifs</code> 文件，这个文件是一个 UBI 文件系统，需要在 Linux 下进一步解析。</p>
<p>提取镜像后转到 Linux 下，这里我是用的 WSL2，Ubuntu 22.04。</p>
<p>用file查看属性，发现是squashfs文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file img.ubifs</span><br></pre></td></tr></table></figure>
<p>可以发现是一个 squashfs 文件系统，使用 unsquashfs 解压就得到了文件系统。</p>
<p>先获取文件系统信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unsquashfs -s img.ubifs</span><br></pre></td></tr></table></figure>
<p>这里会输出一些信息，以及解压的文件目录。记住这些信息，因为这些信息会告诉你这个文件系统的一些信息。</p>
<p>然后解压文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unsquashfs img.ubifs</span><br></pre></td></tr></table></figure>
<p>打包文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mksquashfs squashfs-root img2.squashfs -b 128K -comp xz</span><br></pre></td></tr></table></figure>
<p>具体参考链接<sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup>。</p>
<p>更多有关固件逆向的信息可以参考链接<sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup>。</p>
<h2 id="参考链接">参考链接</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9wb3N0LnNtemRtLmNvbS9wLzczMDYwOS8=">小白教程：Nighthawk RAX80轻松突出千兆极限，重要资料全备份<i class="fa fa-external-link-alt"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly96aWVnZXIudHcvcmV2aWV3cy1uZXRnZWFyLXJheDgwLw==">實際使用心得| NETGEAR Nighthawk RAX80 – 消失的風扇！<i class="fa fa-external-link-alt"></i></span> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hpcGhlbGwuY29tL2FydGljbGUtMjIzMDctMS5odG1s">Netgear RAX80 评测<i class="fa fa-external-link-alt"></i></span> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC83NzU0NjczMTcy">一次改造成功仍然翻车的经历—网件RAX80加装风扇<i class="fa fa-external-link-alt"></i></span> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84NTAwMzE1OTc4">Rax80被动散热加强<i class="fa fa-external-link-alt"></i></span> <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0Z2Vhci5jb20vc3VwcG9ydC9wcm9kdWN0L3JheDgwLyNkb3dubG9hZA==">RAX80 — Nighthawk AX8 8-Stream WiFi Router<i class="fa fa-external-link-alt"></i></span> <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JrZXJsZXIvbmV0Z2Vhcl90ZWxuZXQ=">netgear_telnet<i class="fa fa-external-link-alt"></i></span> <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9uZ2FiYnMuY29tL3JlYWQucGhwP3RpZD0yMTcyMzg4NiZyYW5kPTEw">【硬件升级】 NETGEAR RAX系列wifi6路由器锁区解决办法<i class="fa fa-external-link-alt"></i></span> <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93aWZpaGVsbC5jb20vMjA2Lmh0bWw=">NETGEAR RAX80 救砖修复刷回原厂固件教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9mdy5rb29sY2VudGVyLmNvbS9iaW5hcnkvbm1ycC8lRTclQkQlOTElRTQlQkIlQjZSQVg4MCVFNiU5NSU5MSVFNyVBMCU5NiVFNiU5NiU4NyVFNSVBRCU5NyVFNiU5NSU5OSVFNyVBOCU4Qi5odG1s">网件RAX80救砖文字教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL2ZvcnVtLnBocD9tb2Q9dmlld3RocmVhZCZ0aWQ9MzI5MzQz">【k3】【假装是大佬系列】官改魔改教程~站在A大的肩膀上改固件其实超级简单<i class="fa fa-external-link-alt"></i></span> <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY2tvbmUxMjM0Ny9hcnRpY2xlL2RldGFpbHMvMTIxOTY3NDc4">binwalk<i class="fa fa-external-link-alt"></i></span> <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29uZWtleS1zZWMvdWJpX3JlYWRlcg==">ubi_reader<i class="fa fa-external-link-alt"></i></span> <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ4Nzg0OS9hcnRpY2xlL2RldGFpbHMvMTI2MjgxOTY2">固件提取——ASUS.w格式固件提取遇到的问题<i class="fa fa-external-link-alt"></i></span> <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01lbmdYUC9hcnRpY2xlL2RldGFpbHMvMTA4ODEwMDcx">squashfs重打包和ubi重打包<i class="fa fa-external-link-alt"></i></span> <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDExMzQ2OS9hcnRpY2xlL2RldGFpbHMvMTEzNzQ0MTQ3">路由器固件逆向&amp;&amp;AFL 入门<i class="fa fa-external-link-alt"></i></span> <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>New-C-02</title>
    <url>/2023/09/12/1/</url>
    <content><![CDATA[<h2 id="枚举">枚举</h2>
<blockquote>
<p>什么是枚举？</p>
</blockquote>
<p>枚举是一种用户自定义的数据类型，它是由一组<strong>枚举常量</strong>组成的，枚举常量的值是从0开始递增的整数。</p>
<p>使用枚举可以提高程序的可读性。让代码更加清晰。以及可以在一定程度上增加程序的健壮性、安全性。</p>
<p>但是一般情况下，我们不会使用枚举，因为它的使用场景比较少。</p>
<blockquote>
<p>枚举的定义</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 枚举名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    枚举常量<span class="number">1</span>,</span><br><span class="line">    枚举常量<span class="number">2</span>,</span><br><span class="line">    ...</span><br><span class="line">    枚举常量n</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    RED,</span><br><span class="line">    YELLOW,</span><br><span class="line">    BLUE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>枚举的使用</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    RED,</span><br><span class="line">    YELLOW,</span><br><span class="line">    BLUE</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">c1</span> =</span> RED;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">c2</span> =</span> YELLOW;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">c3</span> =</span> BLUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c1); <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c2); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c3); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>枚举的注意事项</p>
</blockquote>
<p>枚举常量的值是从0开始递增的整数，但是我们也可以自己指定枚举常量的值，如果我们没有指定，那么它的值就是默认的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    RED, <span class="comment">// 0</span></span><br><span class="line">    YELLOW, <span class="comment">// 1</span></span><br><span class="line">    BLUE <span class="comment">// 2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    RED2 = <span class="number">5</span>,</span><br><span class="line">    YELLOW2, <span class="comment">// 6</span></span><br><span class="line">    BLUE2 <span class="comment">// 7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">c1</span> =</span> RED;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">c2</span> =</span> YELLOW;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">c3</span> =</span> BLUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c1); <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c2); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c3); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color2</span> <span class="title">c4</span> =</span> RED2;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color2</span> <span class="title">c5</span> =</span> YELLOW2;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color2</span> <span class="title">c6</span> =</span> BLUE2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c4); <span class="comment">// 5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c5); <span class="comment">// 6</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c6); <span class="comment">// 7</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="进制转换">进制转换</h2>
<blockquote>
<p>什么是进制？</p>
</blockquote>
<p>进制是一种计数的方法，它是一种数学计数方法。在计算机中，常用的进制有二进制、八进制、十进制、十六进制。它们用英文表示分别是：Binary、Octal、Decimal、Hexadecimal。用在数字后的字母缩写表示不同的进制。例如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>二进制：101B</p>
</li>
<li class="lvl-2">
<p>八进制：76Q</p>
</li>
<li class="lvl-2">
<p>十进制：123D</p>
</li>
<li class="lvl-2">
<p>十六进制：A1H</p>
</li>
</ul>
<h3 id="进制转换的方法">进制转换的方法</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>二进制转八进制</p>
<p>二进制转八进制的方法是：将二进制数每三位一组，从小数点开始向左和向右分组，不足三位的在前面补0，然后将每组转换成八进制数，最后将小数点去掉。</p>
<p>e.g.</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">101.</span>101B = <span class="number">010</span><span class="number">.110</span>.1B = <span class="number">2.6</span>.1Q = <span class="number">2.</span>61Q</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>二进制转十进制</p>
<p>二进制转十进制的方法是：将二进制数每一位乘以2的n次方，n是这一位的位数，然后将每一位的结果相加。</p>
<p>e.g.</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">101.</span>101B = <span class="number">1</span> * <span class="number">2</span>^<span class="number">2</span> + <span class="number">0</span> * <span class="number">2</span>^<span class="number">1</span> + <span class="number">1</span> * <span class="number">2</span>^<span class="number">0</span> + <span class="number">1</span> * <span class="number">2</span>^-<span class="number">1</span> + <span class="number">0</span> * <span class="number">2</span>^-<span class="number">2</span> + <span class="number">1</span> * <span class="number">2</span>^-<span class="number">3</span> = <span class="number">5.</span>625D</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>二进制转十六进制</p>
<p>二进制转十六进制的方法是：将二进制数每四位一组，从小数点开始向左和向右分组，不足四位的在前面补0，然后将每组转换成十六进制数，最后将小数点去掉。</p>
<p>e.g.</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">101.</span>101B = <span class="number">0101</span>.101B = <span class="number">5.</span><span class="variable constant_">DH</span> = 5D.<span class="property">H</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>八进制转二进制</p>
<p>八进制转二进制的方法是：将八进制数每一位转换成三位的二进制数，然后将每一位的结果相加。</p>
<p>e.g.</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">76Q = <span class="number">111.</span>110B = 111110B</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>八进制转十进制</p>
<p>八进制转十进制的方法是：将八进制数每一位乘以8的n次方，n是这一位的位数，然后将每一位的结果相加。</p>
<p>e.g.</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">76Q = <span class="number">7</span> * <span class="number">8</span>^<span class="number">1</span> + <span class="number">6</span> * <span class="number">8</span>^<span class="number">0</span> = 62D</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>十六进制转二进制</p>
<p>十六进制转二进制的方法是：将十六进制数每一位转换成四位的二进制数，然后将每一位的结果相加。</p>
<p>e.g.</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">A1H</span> = <span class="number">1010.</span>0001B = 10100001B</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>十六进制转十进制</p>
<p>十六进制转十进制的方法是：将十六进制数每一位乘以16的n次方，n是这一位的位数，然后将每一位的结果相加。</p>
<p>e.g.</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">A1H</span> = <span class="number">10</span> * <span class="number">16</span>^<span class="number">1</span> + <span class="number">1</span> * <span class="number">16</span>^<span class="number">0</span> = 161D</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="R-进制到-n-进制的转换">R 进制到 n 进制的转换</h3>
<blockquote>
<p>十进制到 r 进制的转换</p>
</blockquote>
<p>方法：除 r 取余，直至商为 0，然后将余数倒序排列。</p>
<p>e.g.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1000)D = (?)H</span></span><br><span class="line"><span class="number">1000</span> / <span class="number">16</span> = <span class="number">62</span> ... <span class="number">8</span></span><br><span class="line"><span class="number">62</span> / <span class="number">16</span> = <span class="number">3</span> ... <span class="number">14</span></span><br><span class="line"><span class="number">3</span> / <span class="number">16</span> = <span class="number">0</span> ... <span class="number">3</span></span><br><span class="line"><span class="comment">// (1000)D = (3E8)H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (1234)D = (?)B</span></span><br><span class="line"><span class="number">1234</span> / <span class="number">2</span> = <span class="number">617</span> ... <span class="number">0</span></span><br><span class="line"><span class="number">617</span> / <span class="number">2</span> = <span class="number">308</span> ... <span class="number">1</span></span><br><span class="line"><span class="number">308</span> / <span class="number">2</span> = <span class="number">154</span> ... <span class="number">0</span></span><br><span class="line"><span class="number">154</span> / <span class="number">2</span> = <span class="number">77</span> ... <span class="number">0</span></span><br><span class="line"><span class="number">77</span> / <span class="number">2</span> = <span class="number">38</span> ... <span class="number">1</span></span><br><span class="line"><span class="number">38</span> / <span class="number">2</span> = <span class="number">19</span> ... <span class="number">0</span></span><br><span class="line"><span class="number">19</span> / <span class="number">2</span> = <span class="number">9</span> ... <span class="number">1</span></span><br><span class="line"><span class="number">9</span> / <span class="number">2</span> = <span class="number">4</span> ... <span class="number">1</span></span><br><span class="line"><span class="number">4</span> / <span class="number">2</span> = <span class="number">2</span> ... <span class="number">0</span></span><br><span class="line"><span class="number">2</span> / <span class="number">2</span> = <span class="number">1</span> ... <span class="number">0</span></span><br><span class="line"><span class="number">1</span> / <span class="number">2</span> = <span class="number">0</span> ... <span class="number">1</span></span><br><span class="line"><span class="comment">// (1234)D = (10011010010)B</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (123)D = (?)Q</span></span><br><span class="line"><span class="number">123</span> / <span class="number">8</span> = <span class="number">15</span> ... <span class="number">3</span></span><br><span class="line"><span class="number">15</span> / <span class="number">8</span> = <span class="number">1</span> ... <span class="number">7</span></span><br><span class="line"><span class="number">1</span> / <span class="number">8</span> = <span class="number">0</span> ... <span class="number">1</span></span><br><span class="line"><span class="comment">// (123)D = (173)Q</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>r 进制到十进制的转换</p>
</blockquote>
<p>方法：将 r 进制数每一位乘以 r 的 n 次方，n 是这一位的位数，然后将每一位的结果相加。</p>
<p>e.g.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (10101)B = (?)D</span></span><br><span class="line"><span class="number">1</span> * <span class="number">2</span>^<span class="number">4</span> + <span class="number">0</span> * <span class="number">2</span>^<span class="number">3</span> + <span class="number">1</span> * <span class="number">2</span>^<span class="number">2</span> + <span class="number">0</span> * <span class="number">2</span>^<span class="number">1</span> + <span class="number">1</span> * <span class="number">2</span>^<span class="number">0</span> = 21D</span><br><span class="line"></span><br><span class="line"><span class="comment">// (371)Q = (?)D</span></span><br><span class="line"><span class="number">3</span> * <span class="number">8</span>^<span class="number">2</span> + <span class="number">7</span> * <span class="number">8</span>^<span class="number">1</span> + <span class="number">1</span> * <span class="number">8</span>^<span class="number">0</span> = 249D</span><br><span class="line"></span><br><span class="line"><span class="comment">// (6C2FE)H = (?)D</span></span><br><span class="line"><span class="number">6</span> * <span class="number">16</span>^<span class="number">4</span> + <span class="number">12</span> * <span class="number">16</span>^<span class="number">3</span> + <span class="number">2</span> * <span class="number">16</span>^<span class="number">2</span> + <span class="number">15</span> * <span class="number">16</span>^<span class="number">1</span> + <span class="number">14</span> * <span class="number">16</span>^<span class="number">0</span> = <span class="number">434</span>,942D</span><br></pre></td></tr></table></figure>
<h2 id="补码">补码</h2>
<p>学习目标：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>最小负数的二进制补码是什么？</p>
</li>
<li class="lvl-2">
<p>最大正数的二进制补码是什么？</p>
</li>
<li class="lvl-2">
<p>已知一个整数的二进制补码，如何求出这个整数的原始值？</p>
</li>
<li class="lvl-2">
<p>数字超过最大值或者小于最小值，会发生什么？</p>
</li>
</ul>
<h3 id="带符号数">带符号数</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>原码</p>
<p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。</p>
<p>8位二进制数的原码表示范围是：[-127, 127]</p>
</li>
<li class="lvl-2">
<p>补码</p>
<p>补码就是在原码的基础上，符号位不变，其余位取反，然后加1。</p>
<p>e.g.</p>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">5的原码：0000 0101</span><br><span class="line">5的反码：0000 0101</span><br><span class="line">0.010101B = 0.101010B - 1 = 0.101001B</span><br><span class="line">-0.101001B = 1.010110B</span><br></pre></td></tr></table></figure>
<p>补码被广泛应用于计算机系统中，因为补码的加法运算比较简单。</p>
</li>
<li class="lvl-2">
<p>反码</p>
<p>反码就是在原码的基础上，符号位不变，其余位取反。</p>
<p>反码运算不便，一般不使用。</p>
</li>
<li class="lvl-2">
<p>移码</p>
<p>移码表示数值平移了一个固定的量 N，这个量的大小等于2^(n-1)，n表示二进制数的位数。N 称为移码的模量。</p>
<p>移码主要用于浮点数的表示。</p>
</li>
</ul>
<h3 id="补码怎么求？">补码怎么求？</h3>
<p>存在一个问题：如何表示一个负数？例如：-5，这个数肯定与 5 不一样。</p>
<p>我们求十进制转换二进制的时候，是将十进制数不断除以 2，然后将余数倒序排列。但是这个方法对于负数就不适用了，因为负数除以 2 之后，余数就不是 0 或者 1 了。</p>
<p>我们可以将负数的二进制表示成正数的二进制表示，然后在最高位加上符号位，0 表示正数，1 表示负数。</p>
<blockquote>
<p>GitHub Copilot: 当补码不够位数时，左边应该补符号位，即正数补0，负数补1。这是因为补码的最高位是符号位，用来表示数的正负。</p>
</blockquote>
<p>而负数的补码就是它的反码加1。</p>
<p>e.g.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">例如 (3)D = (0000 0011)B</span><br><span class="line">    (-3)D = (1111 1101)B</span><br><span class="line"></span><br><span class="line">    int 3 = 0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">    int -3 = 1000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">    int 3 的补码 = int 3 的原码 = 0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line"></span><br><span class="line">    int -3 的补码 = int -3 的反码 + 1 = 1111 1111 1111 1111 1111 1111 1111 1101 + 1 = 1111 1111 1111 1111 1111 1111 1111 1110</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>求正数的补码</p>
<p>正数的补码就是它的原码。</p>
</li>
<li class="lvl-2">
<p>求负数的补码</p>
<p>负数的补码就是它的反码加1。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>New-C-03</title>
    <url>/2023/09/15/1/</url>
    <content><![CDATA[<h2 id="链表">链表</h2>
<blockquote>
<p>什么是链表？</p>
</blockquote>
<p>链表是一种常见的数据结构，它是由一组<strong>节点</strong>组成的，每个节点包含两部分：数据域和指针域。</p>
<p>链表于算法中的作用非常大，它可以用来实现栈、队列、哈希表等数据结构。</p>
<blockquote>
<p>算法</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>通俗定义：算法是解决问题的一系列步骤。</p>
</li>
<li class="lvl-2">
<p>狭义定义：算法是对存储数据的操作。</p>
</li>
<li class="lvl-2">
<p>广义定义：也叫泛型算法，是对存储数据的操作，不考虑数据的类型。</p>
</li>
</ul>
<p>我们至少可以通过两种结构来存储数据：数组和链表。</p>
<p>数组的连续性使得它的存取速度非常快，但是数组的大小是固定的，而且数组的插入和删除操作非常耗时。导致了三个问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>无法存储大量数据</p>
</li>
<li class="lvl-2">
<p>需要一块连续的大量的内存空间</p>
</li>
<li class="lvl-2">
<p>插入和删除操作耗时、效率低</p>
</li>
</ul>
<p>链表的存储方式是非连续的，它的每个节点都包含了数据和指针，指针指向下一个节点，这样就形成了一个链表。</p>
<p>链表的插入和删除操作非常快，但是存取速度非常慢，因为链表的存储方式是非连续的，所以我们无法通过下标来访问链表中的元素。</p>
<h3 id="链表的基本操作">链表的基本操作</h3>
<blockquote>
<p>链表的分类</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>单向链表</p>
</li>
<li class="lvl-2">
<p>双向链表</p>
</li>
<li class="lvl-2">
<p>循环链表</p>
</li>
</ul>
<blockquote>
<p>相关概念</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>头节点：链表中第一个节点</p>
</li>
<li class="lvl-2">
<p>尾节点：链表中最后一个节点</p>
</li>
<li class="lvl-2">
<p>头指针：指向头节点的指针</p>
</li>
<li class="lvl-2">
<p>尾指针：指向尾节点的指针</p>
</li>
</ul>
<blockquote>
<p>单向链表</p>
</blockquote>
<p>单向链表是最简单的链表，它的每个节点都包含两个部分：数据域和指针域。</p>
<p>数据域用来存储数据，指针域用来指向下一个节点。</p>
<p>eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>双向链表</p>
</blockquote>
<p>双向链表的每个节点都包含三个部分：数据域、指针域和前驱指针域。</p>
<p>数据域用来存储数据，指针域用来指向下一个节点，前驱指针域用来指向上一个节点。</p>
<p>eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">    Node *prev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>循环链表</p>
</blockquote>
<p>循环链表是一种特殊的链表，它的尾节点指向头节点，形成了一个环。</p>
<p>循环链表的优点是从链尾到链头比较方便，当要处理的数据具有环型结构特点时，就特别适合采用循环链表。</p>
<p>eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="实例">实例</h3>
<p>下面这个实例将演示一个可以创建链表、插入节点、删除节点、查找节点的程序。</p>
<details>
<summary>点击展开</summary>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">create</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *head, *p, *s;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    head = new Node;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input the data: &quot;</span>); </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        s = new Node;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        p = s;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">insert</span><span class="params">(Node *head, <span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *p, *s;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == x)</span><br><span class="line">        &#123;</span><br><span class="line">            s = new Node;</span><br><span class="line">            s-&gt;data = y;</span><br><span class="line">            s-&gt;next = p-&gt;next;</span><br><span class="line">            p-&gt;next = s;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">del</span><span class="params">(Node *head, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *p, *s;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next-&gt;data == x)</span><br><span class="line">        &#123;</span><br><span class="line">            s = p-&gt;next;</span><br><span class="line">            p-&gt;next = s-&gt;next;</span><br><span class="line">            delete s;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">find</span><span class="params">(Node *head, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *p;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(Node *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *p;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, x, y;</span><br><span class="line">    Node *head;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the number of nodes: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    head = create(n);</span><br><span class="line">    print(head);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (choice != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please input a number to choose an option:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1. Insert a node\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2. Delete a node\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3. Find a node\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4. Exit\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;5. Print the list\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Your choice: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Please input the number you want to insert and the number you want to insert after: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                head = insert(head, x, y);</span><br><span class="line">                print(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Please input the number you want to delete: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">                head = del(head, x);</span><br><span class="line">                print(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Please input the number you want to find: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">                find(head, x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                print(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Invalid choice\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="位运算符">位运算符</h2>
<p>位运算符是对二进制位进行操作的运算符，是把数字看作二进制来进行计算。</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">按位与运算符，参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">按位或运算符，只要对应的二个二进制位有一个为1时，结果位就为1</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">按位异或运算符，当两对应的二进制位相异时，结果为1</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">按位取反运算符，对数据的每个二进制位取反，即把1变为0，把0变为1</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">左移运算符，运算数的各二进制位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定了移动的位数，高位丢弃，低位补0</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">右移运算符，把&quot;&gt;&gt;“左边的运算数的各二进制位全部右移若干位，”&gt;&gt;&quot;右边的数指定了移动的位数</td>
</tr>
</tbody>
</table>
<p>eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">60</span>; <span class="comment">// 60 = 0011 1100</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b = <span class="number">13</span>; <span class="comment">// 13 = 0000 1101</span></span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line">    k = i &amp; j; <span class="comment">// 5 = 0000 0101</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;k 的值是 %d\n&quot;</span>, k);<span class="comment">// 输出结果为5</span></span><br><span class="line"></span><br><span class="line">    k = i &amp;&amp; j; <span class="comment">// 1 = 0000 0001</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;k 的值是 %d\n&quot;</span>, k);<span class="comment">// 输出结果为1</span></span><br><span class="line"></span><br><span class="line">    k = i | j; <span class="comment">// 7 = 0000 0111</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;k 的值是 %d\n&quot;</span>, k);<span class="comment">// 输出结果为7</span></span><br><span class="line">    </span><br><span class="line">    c = a &amp; b; <span class="comment">// 12 = 0000 1100</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    c = a | b; <span class="comment">// 61 = 0011 1101</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Line 2 - c 的值是 %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    c = a ^ b; <span class="comment">// 49 = 0011 0001</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    c = ~a; <span class="comment">// -61 = 1100 0011</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Line 4 - c 的值是 %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    c = a &lt;&lt; <span class="number">2</span>; <span class="comment">// 240 = 1111 0000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    c = a &gt;&gt; <span class="number">2</span>; <span class="comment">// 15 = 0000 1111</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Line 6 - c 的值是 %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NULL">NULL</h2>
<p>NULL是C语言中的一个宏定义，它的值是0，表示空指针。</p>
<p>二进制中，0表示假，1表示真，而如果二进制全部为0，那么有下面几种情况：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数值 0</p>
</li>
<li class="lvl-2">
<p>字符结束符 ‘\0’</p>
</li>
<li class="lvl-2">
<p>空指针 NULL</p>
</li>
</ul>
<p>NULL 本质也是一个 0，但是它的含义是空指针，而不是数值 0。表示的是内存单元的地址为 0，而不是内存单元中存储的值为 0。</p>
<p>在学科内规定了，以零为编号的内存单元不存放有效数据，所以我们可以用 0 来表示空指针。</p>
<h2 id="杂记">杂记</h2>
<blockquote>
<p>算法的狭义定义</p>
</blockquote>
<p>对于狭义的算法，我们可以通过下面的方式来定义：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对存储结构的操作</p>
</li>
<li class="lvl-2">
<p>对不同存储结构，要求的操作是不同的</p>
</li>
</ul>
<p>这说明了算法的两个特点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>算法是依附于存储结构的，不同的存储结构，要求的操作是不同的</p>
</li>
<li class="lvl-2">
<p>算法的效率是依赖于存储结构的</p>
</li>
</ul>
<blockquote>
<p>算法的特点</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>输入：算法具有0个或多个输入</p>
</li>
<li class="lvl-2">
<p>输出：算法至少有1个或多个输出</p>
</li>
<li class="lvl-2">
<p>有穷性：算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成</p>
</li>
<li class="lvl-2">
<p>确定性：算法中的每一步都有确定的含义，不会出现二义性</p>
</li>
<li class="lvl-2">
<p>可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成</p>
</li>
</ul>
<blockquote>
<p>广义算法</p>
</blockquote>
<p>广义算法也叫泛型算法，它是对存储结构的操作，不考虑存储结构的类型。</p>
<blockquote>
<p>文件</p>
</blockquote>
<p>文件是存储在辅助存储器上的数据序列，它是数据的集合。</p>
<blockquote>
<p>宏定义</p>
</blockquote>
<p>宏定义是一种预处理指令，它是用来定义标识符的，它的作用是在程序中以标识符代替一个字符串。</p>
<blockquote>
<p>typedef</p>
</blockquote>
<p>typedef是一种类型定义符，它的作用是为一种数据类型定义一个新的名字。</p>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>New-C-04</title>
    <url>/2023/09/17/1/</url>
    <content><![CDATA[<p>接下来的内容是基于 C 语言的数据结构和算法。</p>
<h2 id="什么是数据结构？">什么是数据结构？</h2>
<p>我们如何把现实生活中大量而复杂的问题以特定的数据类型和特定的存储结构保存到计算机中，以及在此基础上为实现某个功能而执行的相应操作(这个相应的操作也叫算法)，这就是数据结构要研究的内容。</p>
<p>数据结构 = 数据类型 + 存储结构 + 相关算法</p>
<p>推荐图书：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>《数据结构 C语言版 (严蔚敏)》</p>
</li>
<li class="lvl-2">
<p>《《数据结构》算法实现及解析（第二版） (高一凡)》</p>
</li>
</ul>
<p>严蔚敏的书是经典，风格严谨，但是全书都是伪算法，没有实现代码，高一凡的书将算法实现了。这是真正治学的态度。</p>
<h2 id="衡量算法的标准">衡量算法的标准</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>时间复杂度</p>
</li>
<li class="lvl-2">
<p>空间复杂度</p>
</li>
<li class="lvl-2">
<p>难易程度</p>
</li>
<li class="lvl-2">
<p>健壮性</p>
</li>
</ul>
<blockquote>
<p>时间复杂度</p>
</blockquote>
<p>程序的执行时间 T(n) 与每行代码的执行次数 n 成正比，即：T(n)=O(f(n))，其中 f(n) 表示每行代码执行的次数总和，而 O 表示正比例关系，这个公式的关键是 f(n)。</p>
<p>时间复杂度并不是真正的时间，而是执行次数的计算，因为不同的机器执行相同的代码所需的时间不同，因此用执行次数来比较算法的时间复杂度。</p>
<blockquote>
<p>空间复杂度</p>
</blockquote>
<p>算法的空间复杂度是指算法需要消耗的空间资源，一般来说，计算机算法是问题规模 n 的函数 f(n)，算法的空间复杂度也因此记做：S(n)=O(f(n))。</p>
<h2 id="malloc-动态内存分配-和-free-内存释放">malloc 动态内存分配 和 free 内存释放</h2>
<p>malloc 是 C 语言中的函数，用于动态分配内存空间，其原型为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_bytes)</span>;</span><br></pre></td></tr></table></figure>
<p>malloc 函数的参数是一个无符号整数，用于指定需要分配的内存空间的大小，单位是字节。malloc 函数的返回值是一个指针，指向分配的内存空间的首地址。</p>
<p>free 是 C 语言中的函数，用于释放 malloc 函数分配的内存空间，其原型为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br></pre></td></tr></table></figure>
<p>free 函数的参数是一个指针，指向需要释放的内存空间的首地址。</p>
<p>e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个程序中，首先定义了一个指针变量 p，然后调用 malloc 函数分配了一个 int 类型的内存空间，然后判断是否分配成功，如果分配成功，则将 10 赋值给这个内存空间，然后打印这个内存空间的值，最后调用 free 函数释放这个内存空间。</p>
<p><strong>注意</strong>：在 C 语言中，使用 malloc 分配内存空间后，必须使用 free 函数释放这个内存空间，否则会造成内存泄漏。</p>
<h3 id="跨函数使用-malloc-动态分配的内存空间">跨函数使用 malloc 动态分配的内存空间</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = func();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个程序中，首先定义了一个指针变量 p，然后调用 func 函数，将 func 函数的返回值赋值给 p，然后打印这个内存空间的值，最后调用 free 函数释放这个内存空间。</p>
<h2 id="线性结构">线性结构</h2>
<p>就是把所有节点用一根线串起来。</p>
<p>线性结构是最常用的一种数据结构，包括线性表、栈、队列、串、数组和广义表等。</p>
<p>线性结构有两种，一是连续存储的线性表(数组)，二是离散存储的线性表(链表)。</p>
<p>下面这个程序来自郝斌老师的视频，是一个数组的实现。</p>
<p>e.g.</p>
<details>
<summary>数组的实现</summary>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span> <span class="comment">//包含了malloc函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">//包含了exit函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了一个数据类型，该数据类型的名字叫做struct Arr, 该数据类型含有三个成员，分别是pBase, len, cnt</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> *pBase; <span class="comment">// 存储的是数组第一个元素的地址</span></span><br><span class="line">    <span class="type">int</span> len;    <span class="comment">// 数组所能容纳的最大元素的个数</span></span><br><span class="line">    <span class="type">int</span> cnt;    <span class="comment">// 当前数组有效元素的个数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> length)</span>;         <span class="comment">// 分号不能省</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">append_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> val)</span>;          <span class="comment">// 追加</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> pos, <span class="type">int</span> val)</span>; <span class="comment">// pos的值从1开始</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> pos, <span class="type">int</span> *pVal)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inversion_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Arr</span> <span class="title">arr</span>;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    init_arr(&amp;arr, <span class="number">6</span>);</span><br><span class="line">    show_arr(&amp;arr);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">1</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">10</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">-3</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">6</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">88</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">if</span> (delete_arr(&amp;arr, <span class="number">4</span>, &amp;val))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除成功!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您删除的元素是: %d\n&quot;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* append_arr(&amp;arr, 2);</span></span><br><span class="line"><span class="comment">        append_arr(&amp;arr, 3);</span></span><br><span class="line"><span class="comment">        append_arr(&amp;arr, 4);</span></span><br><span class="line"><span class="comment">        append_arr(&amp;arr, 5);</span></span><br><span class="line"><span class="comment">        insert_arr(&amp;arr, -1, 99);</span></span><br><span class="line"><span class="comment">        append_arr(&amp;arr, 6);</span></span><br><span class="line"><span class="comment">        append_arr(&amp;arr, 7);</span></span><br><span class="line"><span class="comment">        if ( append_arr(&amp;arr, 8) )</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;追加成功\n&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;追加失败!\n&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    show_arr(&amp;arr);</span><br><span class="line">    inversion_arr(&amp;arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;倒置之后的数组内容是:\n&quot;</span>);</span><br><span class="line">    show_arr(&amp;arr);</span><br><span class="line">    sort_arr(&amp;arr);</span><br><span class="line">    show_arr(&amp;arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;, arr.len);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    pArr-&gt;pBase = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * length);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pArr-&gt;pBase)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;动态内存分配失败!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">// 终止整个程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pArr-&gt;len = length;</span><br><span class="line">        pArr-&gt;cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == pArr-&gt;cnt)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pArr-&gt;cnt == pArr-&gt;len)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_empty(pArr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数组为空!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pArr-&gt;cnt; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, pArr-&gt;pBase[i]); <span class="comment">// int *</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">append_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 满是返回false</span></span><br><span class="line">    <span class="keyword">if</span> (is_full(pArr))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不满时追加</span></span><br><span class="line">    pArr-&gt;pBase[pArr-&gt;cnt] = val;</span><br><span class="line">    (pArr-&gt;cnt)++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> pos, <span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_full(pArr))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">1</span> || pos &gt; pArr-&gt;cnt + <span class="number">1</span>) <span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = pArr-&gt;cnt - <span class="number">1</span>; i &gt;= pos - <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        pArr-&gt;pBase[i + <span class="number">1</span>] = pArr-&gt;pBase[i];</span><br><span class="line">    &#125;</span><br><span class="line">    pArr-&gt;pBase[pos - <span class="number">1</span>] = val;</span><br><span class="line">    (pArr-&gt;cnt)++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr, <span class="type">int</span> pos, <span class="type">int</span> *pVal)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_empty(pArr))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">1</span> || pos &gt; pArr-&gt;cnt)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    *pVal = pArr-&gt;pBase[pos - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = pos; i &lt; pArr-&gt;cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pArr-&gt;pBase[i - <span class="number">1</span>] = pArr-&gt;pBase[i];</span><br><span class="line">    &#125;</span><br><span class="line">    pArr-&gt;cnt--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inversion_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = pArr-&gt;cnt - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        t = pArr-&gt;pBase[i];</span><br><span class="line">        pArr-&gt;pBase[i] = pArr-&gt;pBase[j];</span><br><span class="line">        pArr-&gt;pBase[j] = t;</span><br><span class="line">        ++i;</span><br><span class="line">        --j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_arr</span><span class="params">(<span class="keyword">struct</span> Arr *pArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pArr-&gt;cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; pArr-&gt;cnt; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pArr-&gt;pBase[i] &gt; pArr-&gt;pBase[j])</span><br><span class="line">            &#123;</span><br><span class="line">                t = pArr-&gt;pBase[i];</span><br><span class="line">                pArr-&gt;pBase[i] = pArr-&gt;pBase[j];</span><br><span class="line">                pArr-&gt;pBase[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="typedef-关键字">typedef 关键字</h2>
<p>typedef 是 C 语言中的一个关键字，用于给数据类型起别名。</p>
<p>以前，我们定义一个结构体类型的变量时，需要这样写：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> =</span> &#123;<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>, <span class="number">90.5f</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d %.1f\n&quot;</span>, stu.name, stu.age, stu.score);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样写很麻烦，而且不直观，我们可以使用 typedef 来给 struct Student 起一个别名，这样就可以直接使用这个别名来定义结构体类型的变量了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125; STU, *PSTU; <span class="comment">// PSTU 是指向 struct Student 类型的指针,等价于 struct Student *。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    STU stu = &#123;<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>, <span class="number">90.5f</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d %.1f\n&quot;</span>, stu.name, stu.age, stu.score);</span><br><span class="line"></span><br><span class="line">    PSTU p = &amp;stu;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d %.1f\n&quot;</span>, p-&gt;name, p-&gt;age, p-&gt;score);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>typedef 还可以给基本数据类型起别名。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INTEGER;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    INTEGER a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序中，我们给 int 起了一个别名 INTEGER，然后使用这个别名定义了一个变量 a。</p>
<h2 id="链表的定义">链表的定义</h2>
<p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p>
<blockquote>
<p>离散存储结构</p>
</blockquote>
<p>离散存储结构是指数据元素的存储地址不连续的存储结构。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>定义</p>
<ol>
<li class="lvl-7">n个结点离散分配</li>
<li class="lvl-7">彼此通过指针相连</li>
<li class="lvl-7">每个结点只有一个前驱结点，每个结点只有一个后继结点，首结点没有前驱结点，尾结点没有后继结点。</li>
</ol>
</li>
<li class="lvl-2">
<p>相关专业术语</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>首结点：第一个有效结点，它是头指针指向的结点。</p>
</li>
<li class="lvl-4">
<p>尾结点：最后一个有效结点，它的指针域为空。</p>
</li>
<li class="lvl-4">
<p>头结点：为了操作的统一和方便而设立的，<mark>放在第一个元素的结点之前</mark>，其数据域一般无意义(也可存放链表的长度等信息)，指针域存放第一个元素结点的地址。</p>
</li>
<li class="lvl-4">
<p>头指针：指向头结点的指针变量。</p>
</li>
<li class="lvl-4">
<p>尾指针：指向尾结点的指针变量。</p>
</li>
</ul>
</li>
</ul>
<h2 id="写完这篇博客的感想">写完这篇博客的感想</h2>
<p>创建这篇博客是在 2023-09-17 下午，然而完成编写的时间是 2023-10-10 晚上，时隔了将近一个月，这是因为我在这一个月里，一直在忙学校课程的事情，以及国庆假期也在学习其他的东西，也是感觉近期鸭梨山大，花了很多时间玩游戏(<a href="/2023/10/09/1#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0">Cyberpunk 2077</a>)以释放压力，以及课程视频也很长、难以理解，所以这篇博客就拖到了今天才完成。🥴</p>
<p>另外，我也有将很多时间放在了非本专业学科(英语、日语、汉语言、政治经济学)上面，学习这些也让人感觉很有意思，充满实感、成就感，但是也会花费很多时间，所以我也在思考，应该如何平衡好这些事情。🫠</p>
]]></content>
      <categories>
        <category>Cpp</category>
        <category>DataStructure</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>NextJS-01</title>
    <url>/2024/10/08/1/</url>
    <content><![CDATA[<h2 id="介绍">介绍</h2>
<p>Next.js 是一个基于 React 的前端框架，用于构建 React 应用程序。</p>
<p>Next.js 是一个轻量级的 React 框架，它提供了很多有用的功能，如代码分割、预渲染、静态导出等。</p>
<h2 id="Step-First-app">Step First app</h2>
<p>创建一个新的 Next.js 应用程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-next-app@latest</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>awesome page</p>
</li>
</ul>
<p>在 app 目录下创建一个新的文件 <code>awesome/page.js</code>，并添加以下代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">AwesomePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Awesome Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回到浏览器，打开 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDozMDAwL2F3ZXNvbWU=">http://localhost:3000/awesome<i class="fa fa-external-link-alt"></i></span> ，你将看到一个新的页面。</p>
<h2 id="review-React">review React</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>打开 <code>src/App.jsx</code> 文件，添加以下代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>准备工作- TensorFlow 和其他工具软件包</title>
    <url>/2023/10/25/1/</url>
    <content><![CDATA[<h2 id="TensorFlow">TensorFlow</h2>
<p>TensorFlow是一个开源软件库，用于各种感知和语言理解任务的机器学习。目前被50个团队用于研究和生产许多Google商业产品，如语音识别、Gmail、Google 相册和搜索，其中许多产品曾使用过其前任软件DistBelief。 TensorFlow最初由谷歌大脑团队开发，用于Google的研究和生产，于2015年11月9日在Apache 2.0开源许可证下发布。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcv">Official Website<i class="fa fa-external-link-alt"></i></span> | <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGVuc29yZmxvdw==">GitHub<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Setup">Setup</h2>
<p>跟随以下步骤，在2023年10月25日，Windows11 系统下安装TensorFlow 2.6.0版本。</p>
<blockquote>
<p>我的电脑配置:</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>CPU: AMD Ryzen 9 6900HX with Readon Graphic @3.3GHz</p>
</li>
<li class="lvl-2">
<p>GPU0: NVIDIA GeForce RTX 3060 Laptop</p>
</li>
<li class="lvl-2">
<p>GPU1: AMD Radeon Graphic 680M</p>
</li>
<li class="lvl-2">
<p>RAM: 32GB Samsung DDR5 BDie 5000Mit/s</p>
</li>
<li class="lvl-2">
<p>SSD: 1TB Micron 3400 PCIe4.0 NVMe SSD</p>
</li>
<li class="lvl-2">
<p>WLan: Intel AX210 802.11ax WiFi 6E</p>
</li>
<li class="lvl-2">
<p>Lan: RealTek Semiconductor RTL8125 Gaming 2.5GbE Family Ethernet Controller</p>
</li>
</ul>
<blockquote>
<p>说明</p>
</blockquote>
<p><mark>很多教程都喜欢在实体环境下安装，这样是不好的，官方的文档也不推荐这样做。🤣</mark></p>
<p>所以我们使用 conda 创建一个虚拟环境，然后在虚拟环境中安装 TensorFlow。“Wink😉”</p>
<blockquote>
<p>使用 Miniconda 就可以了， CUDA Toolkit 和 cuDNN 也可以在虚拟环境中安装，实体环境中可以忽略。</p>
</blockquote>
<summary>展开查看</summary>
<details>
<blockquote>
<p>需要提前下载的文件：</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL3Byb2R1Y3RzL2luZGl2aWR1YWw=">Anaconda<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9jdWRhLXRvb2xraXQtYXJjaGl2ZQ==">CUDA Toolkit<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9yZHAvY3Vkbm4tYXJjaGl2ZQ==">cuDNN<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="CUDA-Toolkit">CUDA Toolkit</h3>
<p>在官网下载最新版本的 CUDA Toolkit(cuda_12.3.0_545.84_windows)。</p>
<p>不必担心兼容性问题，CUDA 是向下兼容的，即新版本的 CUDA 可以运行旧版本的 cuDNN。</p>
<p>安装 CUDA Toolkit，选择安装路径，点击“Install”按钮。</p>
<p>等待安装完成，点击“Finish”按钮。</p>
<h3 id="cuDNN">cuDNN</h3>
<p>把下载好的 cuDNN(cudnn-windows-x86_64-8.9.4.25_cuda12-archive) 压缩包解压到 CUDA Toolkit 的安装路径下。</p>
<h3 id="Python-Environment-Anaconda">Python Environment: Anaconda</h3>
<p>打开 Anaconda 官网，下载最新版本的 Anaconda(Anaconda3-2023.09-0-Windows-x86_64)。</p>
<p>安装 Anaconda，选择安装路径，勾选“Add Anaconda to my PATH environment variable”，点击“Install”按钮。</p>
<p>等待安装完成，点击“Next”按钮。</p>
</details>
<h4 id="Create-a-new-environment">Create a new environment</h4>
<p>打开 Anaconda Prompt，创建一个新的环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n tf-gpu python=3.9</span><br></pre></td></tr></table></figure>
<p>激活新环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list <span class="comment"># 查看所有环境</span></span><br><span class="line">conda activate tf-gpu <span class="comment"># 激活新环境</span></span><br></pre></td></tr></table></figure>
<h3 id="Install-cuda-toolkit-and-cudnn">Install cuda toolkit and cudnn</h3>
<ol>
<li class="lvl-3">
<p>先寻找 <code>cuda toolkit</code> 和 <code>cudnn</code></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda search cudatoolkit</span><br><span class="line">conda search cudnn</span><br></pre></td></tr></table></figure>
<p>这里我们选择安装 <code>cudatoolkit==11.3.1</code> 和 <code>cudnn==8.2.1</code></p>
<div class="note warning"><h5 id="注意版本号">注意版本号</h5>
<p>注意：<code>cudatoolkit</code> 和 <code>cudnn</code> 的版本要对应，且与 <code>tensorflow-gpu</code> 的版本对应，否则会报错。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly90ZW5zb3JmbG93Lmdvb2dsZS5jbi9pbnN0YWxsL3NvdXJjZV93aW5kb3dzP2hsPWVuI2dwdQ==">Tested build configurations<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>并不需要完全一致，但最好是一致的。参考下图，<code>cudatoolkit==11.3.1</code> 和 <code>cudnn==8.2.1</code>，<code>cudnn==8.2.1</code> 其实对应的是 <code>cudatoolkit==11.3.0</code>，但是也可以运行。</p>
</blockquote>
</div>
<p><img src="./versionIssue.png" alt></p>
<ol start="2">
<li class="lvl-3">
<p>安装 <code>cudatoolkit</code> 和 <code>cudnn</code></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install cudatoolkit==11.3.1</span><br><span class="line">conda install cudnn==8.2.1</span><br></pre></td></tr></table></figure>
<p>最好按照上面的顺序安装。（因为我觉得 <code>cudnn</code> 依赖于 <code>cudatoolkit</code>）🫠</p>
<h3 id="Install-tensorflow-gpu">Install tensorflow-gpu</h3>
<ol>
<li class="lvl-3">
<p>安装 <code>tensorflow-gpu</code></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.6.0</span><br></pre></td></tr></table></figure>
<p><s>2. 测试</s></p>
<p>不用测试了，一定会报错的。😅<br>
因为依赖的 <code>numpy</code> 与 <code>protobuf</code> 的版本不对应。😡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy==1.19.5   </span><br><span class="line">pip install protobuf==3.20.0</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>测试</p>
</li>
</ol>
<div class="note success"><h4 id="Test-code">Test code</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import tensorflow as tf; print(tf.test.is_built_with_cuda()); print(tf.config.list_physical_devices(&#x27;GPU&#x27;)); print(tf.reduce_sum(tf.random.normal([1000,1000]))); print(tf.compat.v1.Session())&quot;</span></span><br></pre></td></tr></table></figure>
</div>
<p><img src="./test.png" alt></p>
<p>结果提示：<code>True</code>，说明安装成功。❤️<br>
并且识别到了 Nvdia 独立显卡。🎉</p>
<h2 id="10月25日更新">10月25日更新</h2>
<p>后来，我需要安装 <code>pytroch</code>，因为是 <code>conda</code> 环境，所以直接conda安装就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch=2.4.1 torchvision=0.19.1 torchaudio=2.4.1 pytorch-cuda=12.1 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这条命令我没有测试，当时是直接安装的最新版本。现在重新配了环境，现在的最新版与当时不同了，可能会有一些出入，但是基本上是这样的。现在的版本对应下面的表格。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Name</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>pytorch</td>
<td>2.4.1</td>
</tr>
<tr>
<td>torchvision</td>
<td>0.19.1</td>
</tr>
<tr>
<td>torchaudio</td>
<td>2.4.1</td>
</tr>
</tbody>
</table>
<p>但是会有兼容性问题，所以需要安装 <code>numpy==1.20.0</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy==1.22.0</span><br></pre></td></tr></table></figure>
<p>之后，测试一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import torch; print(torch.__version__); print(torch.cuda.is_available()); print(torch.backends.cudnn.m.is_available()); print(torch.rand(5, 3))&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="10月28日更新">10月28日更新</h2>
<p>需要使用到 <code>matplotlib</code>，所以安装一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install matplotlib==3.3.4</span><br></pre></td></tr></table></figure>
<p>这个版本没有出现兼容性问题。</p>
<p>以及 <code>opencv</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install opencv==4.6.0</span><br></pre></td></tr></table></figure>
<p>如果运行程序提示错误，很可能是 <code>numpy</code> 的版本问题，可以尝试重装 <code>numpy==1.20.0</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall numpy</span><br><span class="line">pip install numpy==1.22.0</span><br></pre></td></tr></table></figure>
<p><s><code>numpy</code> 这小子真是个麻烦的家伙。😅</s></p>
<p>随后进行测试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import matplotlib; print(matplotlib.__version__); import cv2; print(cv2.__version__)&quot;</span></span><br></pre></td></tr></table></figure>
<p>具体功能测试</p>
<blockquote>
<p>matplotlib</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>opencv</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cv2.__version__)</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./src/avatar.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后，我们发现 opencv 报错了。</p>
<p>提示 <code>The function is not implemented. Rebuild the library with……</code></p>
<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install opencv-contrib-python==4.8.1.78</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly90ZW5zb3JmbG93Lmdvb2dsZS5jbi8=">TensorFlow 官方文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmFuYWNvbmRhLmNvbS9mcmVlL2FuYWNvbmRhL2FwcGxpY2F0aW9ucy90ZW5zb3JmbG93Lw==">Anaconda Install TensorFlow<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly90ZW5zb3JmbG93Lmdvb2dsZS5jbi9pbnN0YWxsL3NvdXJjZV93aW5kb3dzP2hsPWVuI2dwdQ==">Tested build configurations<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcvZ3VpZGUvZ3B1P2hsPXpoLWNu">使用 Gpu<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly90ZW5zb3JmbG93Lmdvb2dsZS5jbi9pbnN0YWxsL3BpcD9obD1lbg==">Install TensorFlow with pip<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbW15X05pa2UvYXJ0aWNsZS9kZXRhaWxzLzEzMDA3MTgyMw==">十分钟安装TensorFlow-GPU<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="24-年-10-月-15-日-更新">24 年 10 月 15 日 更新</h2>
<p>如果遇到</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>AttributeError: module ‘numpy.typing’ has no attribute ‘NDArray’</p>
</li>
<li class="lvl-2">
<p>TypeError: ‘numpy._DTypeMeta’ object is not subscriptable</p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<p>报错，可以尝试升级 numpy。</p>
<p>这个环境配置中绝大部分问题都是由于 numpy 引起的。</p>
<p>如果遇到 dll 缺失的问题，就在虚拟环境中搜索相关的 dll 文件，然后复制到系统目录 <code>C:\Windows\System</code> 下即可（大概率是 CUDA 问题，懒得去动）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall numpy</span><br><span class="line">pip install numpy==1.xx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中 <code>1.xx</code> 是你想要安装的版本号。要自己尝试那个是可用的，不然会报错。我从 <code>1.17.0</code> 尝试到 <code>1.22.0</code>，就没有报错了。</p>
</blockquote>
<p>测试指令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>cuda</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>tensorflow-gpu</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import tensorflow as tf; print(tf.test.is_built_with_cuda()); print(tf.config.list_physical_devices(&#x27;GPU&#x27;)); print(tf.reduce_sum(tf.random.normal([1000,1000]))); print(tf.compat.v1.Session())&quot;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>pytorch</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import torch; print(torch.__version__); print(torch.cuda.is_available()); print(torch.backends.cudnn.m.is_available()); print(torch.rand(5, 3))&quot;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>matplotlib</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import matplotlib; print(matplotlib.__version__)&quot;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>opencv</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import cv2; print(cv2.__version__)&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>完成后一看，这环境真大，好多东西。😅 11.2 GB (12,072,464,651 字节)</p>
</blockquote>
<h3 id="当前环境包列表">当前环境包列表</h3>
<p>当前系统环境如下：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>python</td>
<td>3.9.13</td>
</tr>
<tr>
<td>conda</td>
<td>24.7.1</td>
</tr>
<tr>
<td>Windows</td>
<td>11 Pro 23H2(OS Build 22631.4317)</td>
</tr>
<tr>
<td>NVida Graphic Driver</td>
<td>565.90</td>
</tr>
<tr>
<td>Readon Graphic Driver</td>
<td>22.40.84.06</td>
</tr>
</tbody>
</table>
<div id="downloadcard">
    <div class="card">
        <h2>下载文件</h2>
        <a href="./files/tf-gpu-241015-requirements.txt" download="requirements.txt" class="download-btn" target="_blank" data-pjax-state="load">下载 pip 的包列表文件</a>
        <a href="./files/tf-gpu-241015-requirements.yaml" download="requirements.yaml" class="download-btn" target="_blank" data-pjax-state="load">下载 conda 的包列表文件</a>
    </div>
</div>
<style>
    #downloadcard {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0;
    }

    .card {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .card h2 {
        margin-bottom: 20px;
    }

    .download-btn {
        display: block;
        margin: 10px 0;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .download-btn:hover {
        background-color: #0056b3;
    }
</style>
<h3 id="使用-requirements-txt-以及-requirements-yml">使用 requirements.txt 以及 requirements.yml</h3>
<p>requirements.txt 是 pip 的包管理文件，requirements.yaml 是 conda 的包管理文件。</p>
<p>通过这两个文件，可以快速安装环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> create -f requirements.yaml</span><br></pre></td></tr></table></figure>
<h3 id="25年4月13日">25年4月13日</h3>
<p>又安装了 scikit-learn scikit_learn-1.6.1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install scikit-learn==1.6.1</span><br></pre></td></tr></table></figure>
<p>又要解决该死的 numpy 版本问题了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy==1.23.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ANNs</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第一篇</title>
    <url>/2023/07/23/1/</url>
    <content><![CDATA[<h2 id="PyQt6">PyQt6</h2>
<p>PyQt6是一个用于创建GUI应用程序的Python绑定，它是Qt6应用程序开发框架的一部分。它包含了超过620个类和6000个函数和方法。</p>
<p>PyQt6是一个商业软件，Qt6是一个商业软件，但是PyQt6可以在GPL许可证下使用。PyQt6是Python v3和Qt v6的绑定。它可以在Linux、Windows、macOS和其他操作系统上运行。</p>
<p>参考文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2MucXQuaW8vcXRmb3JweXRob24v">PyQt6官方文档<i class="fa fa-external-link-alt"></i></span></p>
<p>PyQt4, PyQt5 已经是过时的版本了，我们学习要符合发展趋势，故学习PyQt6。</p>
<h2 id="安装，第一个窗口">安装，第一个窗口</h2>
<h3 id="安装">安装</h3>
<blockquote>
<p>使用pip安装PyQt6</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install PyQt6</span><br></pre></td></tr></table></figure>
<blockquote>
<p>或者 IDE 中安装</p>
</blockquote>
<p>在 PyCharm 中，我们可以使用 IDE 自带的包管理器安装 PyQt6。</p>
<h3 id="第一个窗口">第一个窗口</h3>
<blockquote>
<p>创建一个窗口</p>
</blockquote>
<p>创建 <code>mywindow.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sys 是一个 Python 内置的模块，用于系统相关的功能。</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyQt6.QtWidgets 模块包含了一整套UI元素组件，用于创建经典桌面风格的用户界面。</span></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个应用程序对象</span></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个窗口</span></span><br><span class="line">window = QWidget()</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 进入程序的主循环、并通过exit函数确保主循环安全结束</span></span><br><span class="line">sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="窗口类-Window-Type-Classes">窗口类 (Window Type Classes)</h2>
<p>qt6中的窗口类有很多，我们可以根据自己的需求选择不同的窗口类。</p>
<blockquote>
<p>QMainWindow</p>
</blockquote>
<p>QMainWindow 是一个主窗口类，它提供了一个应用程序主窗口。我们可以在主窗口中添加菜单栏、工具栏、状态栏等。</p>
<blockquote>
<p>QDialog</p>
</blockquote>
<p>QDialog 是一个对话框类，它提供了一个应用程序对话框。我们可以在对话框中添加按钮、文本框、下拉框等。</p>
<blockquote>
<p>QWidget</p>
</blockquote>
<p>QWidget 可以看作是一个窗口的基类，它提供了一些基本的功能，我们可以在 QWidget 的基础上创建自定义的窗口类。</p>
<h3 id="测试">测试</h3>
<blockquote>
<p>QMainWindow</p>
</blockquote>
<p>创建 <code>QMainWindow.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = QMainWindow()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 Ready 文本</span></span><br><span class="line">window.statusBar().showMessage(<span class="string">&#x27;Ready&#x27;</span>)</span><br><span class="line"><span class="comment"># 如果我们把上面这行代码用在 QWidget 类中，会报错，因为 QWidget 类中没有 statusBar() 方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加菜单栏 File</span></span><br><span class="line">window.menuBar().addMenu(<span class="string">&#x27;File&#x27;</span>)</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>QDialog</p>
</blockquote>
<p>创建 <code>QDialog.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QDialog</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = QDialog()</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，这个窗口没有最小化、最大化。</p>
<h2 id="添加图标和标题">添加图标和标题</h2>
<p>创建 src 文件夹，将 icon.png 图标放入 src 文件夹中。</p>
<p>创建 <code>IconAndTitle.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个与 Qt 无关，这是 python 的面向对象编程的知识。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">window</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 设置窗口标题</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;PyQt6&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置窗口图标</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowIcon(QIcon(<span class="string">&#x27;./src/icon.png&#x27;</span>))</span><br><span class="line">        <span class="comment"># 指定窗口的宽度和高度</span></span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="comment"># 指定窗口的位置</span></span><br><span class="line">        <span class="variable language_">self</span>.move(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="comment"># styleSheet 是 Qt 的一个属性，用于设置窗口的样式。</span></span><br><span class="line">        <span class="variable language_">self</span>.setStyleSheet(<span class="string">&#x27;background-color: #f0f0f0;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">win = window()</span><br><span class="line"></span><br><span class="line">win.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="QtDesigner">QtDesigner</h2>
<p>QtDesigner 是一个可视化的窗口设计工具，我们可以使用它来创建窗口。</p>
<p>官网下载地址：<span class="exturl" data-url="aHR0cHM6Ly9idWlsZC1zeXN0ZW0uZm1hbi5pby9xdC1kZXNpZ25lci1kb3dubG9hZA==">QtDesigner<i class="fa fa-external-link-alt"></i></span><br>
（不用在官网下载）</p>
<p>默认下，我们没有 QtDesigner，我们需要安装 qt6-tools， qt6-tools 包含了 QtDesigner。路径在项目内 <code>venv/Lib/site-packages/qt6_applications/Qt/bin/designer.exe</code></p>
<p>如何设计窗口，这里不做过多介绍，GUI 操作，发挥你的想象力。</p>
<blockquote>
<p>将 QtDesigner 设计好的窗口转换为 Python 代码</p>
</blockquote>
<p>在 QtDesigner 中，我们设计好窗口后，点击菜单栏中的 File -&gt; Save As…，将窗口保存为 .ui 文件。</p>
<p>我们先使用 bash 命令运行一次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyuic6 -o UiToPy.py UiToPy.ui</span><br></pre></td></tr></table></figure>
<blockquote>
<p>导入到代码的方式</p>
</blockquote>
<p>在项目中创建一个 ui 文件夹，将 .ui 文件放入 ui 文件夹中。</p>
<p>创建 <code>UiToPy.py</code> 文件，编写如下代码：</p>
<details>
<summary>UiToPy.py</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> uic</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UI</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        uic.loadUi(<span class="string">&#x27;./ui/UiToPy.ui&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">win = UI()</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>这种以代码导入的方式，我们可以在代码中对窗口进行修改。但是，这种在后续代码中对原有窗口的修改不是很推荐，因为我们修改了窗口的代码，如果窗口的设计有修改，我们还需要重新导入一次，使得非常的繁琐与臃肿。</p>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第十篇</title>
    <url>/2023/08/11/1/</url>
    <content><![CDATA[<h2 id="PDBC-in-PyQt6">PDBC in PyQt6</h2>
<h3 id="MySQL-Database-Connection-in-PyQt6">MySQL Database Connection in PyQt6</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入MySQL驱动</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 信号与槽的连接</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_createDB.clicked.connect(<span class="variable language_">self</span>.createDB)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_connectDB.clicked.connect(<span class="variable language_">self</span>.connectDB)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createDB</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mydatabase = mc.connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;&quot;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            mycursor = mydatabase.cursor()</span><br><span class="line">            dbname = <span class="variable language_">self</span>.lineEdit_input.text()</span><br><span class="line"></span><br><span class="line">            mycursor.execute(<span class="string">&quot;CREATE DATABASE &#123;&#125; &quot;</span>.<span class="built_in">format</span>(dbname))</span><br><span class="line">            <span class="variable language_">self</span>.label_result.setText(<span class="string">&quot;数据库 &#123;&#125; 创建成功！&quot;</span>.<span class="built_in">format</span>(dbname))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> mc.Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 输出异常信息</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Mysql Error %d: %s&quot;</span> % (e.args[<span class="number">0</span>], e.args[<span class="number">1</span>]))</span><br><span class="line">            <span class="variable language_">self</span>.label_result.setText(<span class="string">&quot;数据库创建失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connectDB</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mydatabase = mc.connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;&quot;</span>,</span><br><span class="line">                database=<span class="variable language_">self</span>.lineEdit_input.text()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.label_result.setText(<span class="string">&quot;数据库连接成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> mc.Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 输出异常信息</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Mysql Error %d: %s&quot;</span> % (e.args[<span class="number">0</span>], e.args[<span class="number">1</span>]))</span><br><span class="line">            <span class="variable language_">self</span>.label_result.setText(<span class="string">&quot;数据库连接失败！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：中文环境输出异常 <code>Mysql Error -1: Authentication plugin 'caching_sha2_password' is not supported</code></p>
<p>需要修改数据库密码加密方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>或者选择安装 <code>mysql-connector-python</code> 模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install mysql-connector-python</span><br></pre></td></tr></table></figure>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9jb25uZWN0b3ItcHl0aG9uL2VuLw==">mysql-connector-python<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Insert-Data-in-PyQt6">Insert Data in PyQt6</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入MySQL驱动</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入QMessageBox</span></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QMessageBox</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接信号与槽</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_insert.clicked.connect(<span class="variable language_">self</span>.insert_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mydatabase = mc.connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;pyqt6db&quot;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            mycursor = mydatabase.cursor()</span><br><span class="line"></span><br><span class="line">            sql = <span class="string">&quot;INSERT INTO users (username, password) VALUES (%s, %s)&quot;</span></span><br><span class="line">            val = (<span class="variable language_">self</span>.lineEdit.text(), <span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">            mycursor.execute(sql, val)</span><br><span class="line"></span><br><span class="line">            mydatabase.commit()</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(mycursor.rowcount, <span class="string">&quot;记录插入成功。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            mycursor.close()</span><br><span class="line">            mydatabase.close()</span><br><span class="line"></span><br><span class="line">            QMessageBox.information(<span class="variable language_">self</span>.pushButton_insert, <span class="string">&quot;提示&quot;</span>, <span class="string">&quot;插入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> mc.Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;插入失败：&quot;</span>, e)</span><br><span class="line">            QMessageBox.critical(<span class="variable language_">self</span>.pushButton_insert, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;插入失败！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Select-Data-in-PyQt6">Select Data in PyQt6</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入MySQL驱动</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QMessageBox</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 信号与槽</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_show.clicked.connect(<span class="variable language_">self</span>.select_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_data</span>(<span class="params">self</span>):</span><br><span class="line">        dbname = <span class="variable language_">self</span>.lineEdit_dbName.text()</span><br><span class="line">        tablename = <span class="variable language_">self</span>.lineEdit_tableName.text()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mydatabase = mc.connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dbname)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            mycursor = mydatabase.cursor()</span><br><span class="line">            mycursor.execute(<span class="string">&quot;select * from &#123;&#125;&quot;</span>.<span class="built_in">format</span>(tablename))</span><br><span class="line">            myresult = mycursor.fetchall()</span><br><span class="line">            <span class="variable language_">self</span>.tableWidget_Table.setRowCount(<span class="built_in">len</span>(myresult))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(myresult)):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(myresult[i])):</span><br><span class="line">                    <span class="variable language_">self</span>.tableWidget_Table.setItem(i, j, QtWidgets.QTableWidgetItem(<span class="built_in">str</span>(myresult[i][j])))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> mc.Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;错误&quot;</span>, e)</span><br><span class="line">            QMessageBox.critical(<span class="variable language_">self</span>.pushButton_show, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;数据库连接失败，请检查数据库名称是否正确！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Search-Data-in-PyQt6">Search Data in PyQt6</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入MySQL驱动</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QMessageBox</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按钮绑定事件</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_search.clicked.connect(<span class="variable language_">self</span>.search_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search_data</span>(<span class="params">self</span>):</span><br><span class="line">        dbname = <span class="variable language_">self</span>.lineEdit_dbName.text()</span><br><span class="line">        tablename = <span class="variable language_">self</span>.lineEdit_tableName.text()</span><br><span class="line">        username = <span class="variable language_">self</span>.lineEdit_userName.text()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mydatabase = mc.connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dbname)</span><br><span class="line">            )</span><br><span class="line">            mycursor = mydatabase.cursor()</span><br><span class="line">            <span class="comment"># 查询 username，输出 password</span></span><br><span class="line">            mycursor.execute(<span class="string">&quot;SELECT password FROM &#123;&#125; WHERE username=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(tablename, username))</span><br><span class="line">            myresult = mycursor.fetchone()</span><br><span class="line"></span><br><span class="line">            row = mycursor.fetchone()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> myresult <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="string">&quot;用户名不存在！&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="string">&quot;Found result!&quot;</span>)</span><br><span class="line">                <span class="comment"># lineEdit_password 显示密码</span></span><br><span class="line">                <span class="variable language_">self</span>.lineEdit_password.setText(myresult[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(e))</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            QMessageBox.warning(<span class="variable language_">self</span>.pushButton_search, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;数据库或表不存在！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="简易登录界面">简易登录界面</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入MySQL驱动</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QMessageBox</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为登录按钮添加事件</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_login.clicked.connect(<span class="variable language_">self</span>.login)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取用户名和密码</span></span><br><span class="line">            username = <span class="variable language_">self</span>.lineEdit_username.text()</span><br><span class="line">            password = <span class="variable language_">self</span>.lineEdit_password.text()</span><br><span class="line">            mydatabase = mc.connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;lzc6584567&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;pyqt6db&quot;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            mycursor = mydatabase.cursor()</span><br><span class="line">            sql = <span class="string">&quot;SELECT * FROM users WHERE username = %s AND password = %s&quot;</span></span><br><span class="line">            val = (username, password)</span><br><span class="line">            mycursor.execute(sql, val)</span><br><span class="line"></span><br><span class="line">            myresult = mycursor.fetchone()</span><br><span class="line">            <span class="built_in">print</span>(myresult)</span><br><span class="line">            <span class="keyword">if</span> myresult <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                QMessageBox.warning(<span class="variable language_">self</span>.pushButton_login, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;用户名或密码错误！&quot;</span>, QMessageBox.StandardButton.Yes)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                QMessageBox.information(<span class="variable language_">self</span>.pushButton_login, <span class="string">&quot;提示&quot;</span>, <span class="string">&quot;登录成功！&quot;</span>, QMessageBox.StandardButton.Yes)</span><br><span class="line">        <span class="keyword">except</span> mc.Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;数据库连接失败！&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">            QMessageBox.warning(<span class="variable language_">self</span>.pushButton_login, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;数据库连接失败！\n&quot;</span> + <span class="built_in">str</span>(e), QMessageBox.StandardButton.Yes)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="源码">源码</h2>
<style>
#box1 {
    width: 80%;
    height: 100px;
    background-color: white;
    border: 5px solid #00bcd4;
    border-radius: 50px;
    padding: 8px 12px;
    margin-bottom: 20px;
    text-align: center;
    line-height: 30px;
    margin: 0 auto;
    text-decoration: none;
}
#box2 {
    width: 20%;
    height: 20%;
    background-color: #f5f5f5;
    border: 2px solid #000000;
    border-radius: 50px;
    padding: 8px 12px;
    text-align: center;
    line-height: 50px;
    margin: 0 auto;
    position: relative;
    text-decoration: none;
}
#box2 a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    line-height: 35px;
    text-decoration: none;
}
#box2 a:hover {
    background-color: #ff4081;
    color: white;
    border: 0 solid #000000;
    border-radius: 50px;
    text-align: center;
    text-decoration: none;
}
</style>
<div id="box1">
<span style="text-align: center; color:black;">pyqt6_blog_10_demo.7z</span>
<br>
<span style="text-align: center; color:black;">3.92 KB (4,018 字节)</span>
<br>
<div id="box2">
<a href="./Part_4.7z" data-pjax-state="load" download="pyqt6_blog_10_demo.7z">点击下载</a>
</div>
</div>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第十一篇</title>
    <url>/2023/08/12/1/</url>
    <content><![CDATA[<h2 id="QPainter">QPainter</h2>
<p>将使用 QPainter 类来绘制一个长方形。QPainter 类提供了基本的绘画功能，它是一个低级的绘画类，它能在各种设备上进行绘画，如屏幕、打印机、图像等。</p>
<p>QPainter 类提供了各种绘画方法，如绘制文本、图像、直线、点、椭圆、弧、多边形等。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9kb2MucXQuaW8vcXQtNi9xcGFpbnRlci5odG1s">https://doc.qt.io/qt-6/qpainter.html<i class="fa fa-external-link-alt"></i></span></p>
<p>QPainter 类的常用方法如下表所示。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">begin()</td>
<td style="text-align:left">开始绘画</td>
</tr>
<tr>
<td style="text-align:left">end()</td>
<td style="text-align:left">结束绘画</td>
</tr>
<tr>
<td style="text-align:left">drawArc()</td>
<td style="text-align:left">绘制弧</td>
</tr>
<tr>
<td style="text-align:left">drawChord()</td>
<td style="text-align:left">绘制弦</td>
</tr>
<tr>
<td style="text-align:left">drawConvexPolygon()</td>
<td style="text-align:left">绘制凸多边形</td>
</tr>
<tr>
<td style="text-align:left">drawEllipse()</td>
<td style="text-align:left">绘制椭圆</td>
</tr>
<tr>
<td style="text-align:left">drawLine()</td>
<td style="text-align:left">绘制直线</td>
</tr>
<tr>
<td style="text-align:left">drawPie()</td>
<td style="text-align:left">绘制饼</td>
</tr>
<tr>
<td style="text-align:left">drawPoint()</td>
<td style="text-align:left">绘制点</td>
</tr>
<tr>
<td style="text-align:left">drawPolygon()</td>
<td style="text-align:left">绘制多边形</td>
</tr>
<tr>
<td style="text-align:left">drawPolyline()</td>
<td style="text-align:left">绘制折线</td>
</tr>
<tr>
<td style="text-align:left">drawRect()</td>
<td style="text-align:left">绘制矩形</td>
</tr>
<tr>
<td style="text-align:left">drawRoundedRect()</td>
<td style="text-align:left">绘制圆角矩形</td>
</tr>
<tr>
<td style="text-align:left">drawText()</td>
<td style="text-align:left">绘制文本</td>
</tr>
<tr>
<td style="text-align:left">drawTextItem()</td>
<td style="text-align:left">绘制文本项</td>
</tr>
<tr>
<td style="text-align:left">drawTiledPixmap()</td>
<td style="text-align:left">绘制平铺的图像</td>
</tr>
<tr>
<td style="text-align:left">drawPixmap()</td>
<td style="text-align:left">绘制图像</td>
</tr>
<tr>
<td style="text-align:left">eraseRect()</td>
<td style="text-align:left">擦除矩形区域</td>
</tr>
<tr>
<td style="text-align:left">fillRect()</td>
<td style="text-align:left">填充矩形区域</td>
</tr>
<tr>
<td style="text-align:left">setBrush()</td>
<td style="text-align:left">设置画刷</td>
</tr>
<tr>
<td style="text-align:left">setPen()</td>
<td style="text-align:left">设置画笔</td>
</tr>
<tr>
<td style="text-align:left">setRenderHint()</td>
<td style="text-align:left">设置绘画选项</td>
</tr>
<tr>
<td style="text-align:left">setWindow()</td>
<td style="text-align:left">设置窗口</td>
</tr>
<tr>
<td style="text-align:left">setViewport()</td>
<td style="text-align:left">设置视口</td>
</tr>
</tbody>
</table>
<h3 id="drawRect-矩形">drawRect() 矩形</h3>
<blockquote>
<p>drawRect(x, y, width, height)</p>
</blockquote>
<p>drawRect() 方法的参数是矩形的 x、y 坐标，以及宽度和高度。</p>
<p>创建文件 <code>drawRectDemo.py</code>，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QColor</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_rectangles</span>(<span class="params">qp</span>):</span><br><span class="line">    col = QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    col.setNamedColor(<span class="string">&#x27;#d4d4d4&#x27;</span>)</span><br><span class="line">    qp.setPen(col)</span><br><span class="line"></span><br><span class="line">    qp.setBrush(QColor(<span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    qp.drawRect(<span class="number">10</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    qp.setBrush(QColor(<span class="number">255</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">160</span>))</span><br><span class="line">    qp.drawRect(<span class="number">130</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    qp.setBrush(QColor(<span class="number">25</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">200</span>))</span><br><span class="line">    qp.drawRect(<span class="number">250</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Draw rect&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        qp = QPainter()</span><br><span class="line">        qp.begin(<span class="variable language_">self</span>)</span><br><span class="line">        draw_rectangles(qp)</span><br><span class="line">        qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="drawEllipse-椭圆">drawEllipse() 椭圆</h3>
<blockquote>
<p>drawEllipse(x, y, width, height)</p>
</blockquote>
<p>drawEllipse() 方法的参数是椭圆的 x、y 坐标，以及宽度和高度。</p>
<p>创建文件 <code>drawEllipseDemo.py</code>，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QColor</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ellipses</span>(<span class="params">qp</span>):</span><br><span class="line">    qp.setPen(QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    qp.setBrush(QColor(<span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    qp.drawEllipse(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    qp.setBrush(QColor(<span class="number">255</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">160</span>))</span><br><span class="line">    qp.drawEllipse(<span class="number">130</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    qp.setBrush(QColor(<span class="number">25</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">200</span>))</span><br><span class="line">    qp.drawEllipse(<span class="number">250</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.init_ui()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">100</span>)</span><br><span class="line">            <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Draw ellipse&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.show()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">            qp = QPainter()</span><br><span class="line">            qp.begin(<span class="variable language_">self</span>)</span><br><span class="line">            draw_ellipses(qp)</span><br><span class="line">            qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="drawText-文本">drawText() 文本</h3>
<blockquote>
<p>drawText(x, y, width, height, flags, text)</p>
</blockquote>
<p>drawText() 方法的参数是文本的 x、y 坐标，以及宽度和高度。flags 参数是文本的对齐方式，text 参数是要绘制的文本。</p>
<p>创建文件 <code>drawTextDemo.py</code>，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QColor, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_texts</span>(<span class="params">qp</span>):</span><br><span class="line">    qp.setPen(QColor(<span class="number">168</span>, <span class="number">34</span>, <span class="number">3</span>))</span><br><span class="line">    qp.setFont(QFont(<span class="string">&#x27;Decorative&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">    qp.drawText(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    qp.setPen(QColor(<span class="number">34</span>, <span class="number">3</span>, <span class="number">168</span>))</span><br><span class="line">    qp.setFont(QFont(<span class="string">&#x27;Decorative&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">    qp.drawText(<span class="number">10</span>, <span class="number">30</span>, <span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    qp.setPen(QColor(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">    qp.setFont(QFont(<span class="string">&#x27;Decorative&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">    qp.drawText(<span class="number">10</span>, <span class="number">50</span>, <span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Draw text&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        qp = QPainter()</span><br><span class="line">        qp.begin(<span class="variable language_">self</span>)</span><br><span class="line">        draw_texts(qp)</span><br><span class="line">        qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Gradient-渐变">Gradient 渐变</h2>
<p>渐变是一种平滑的色彩变化，可以用来绘制图形的背景。</p>
<p>QPainter 类提供了三种渐变类型，分别是线性渐变、放射性渐变和锥形渐变。</p>
<h3 id="线性渐变-QLinearGradient">线性渐变(QLinearGradient)</h3>
<p>线性渐变是沿着一条直线的渐变，可以用来绘制矩形、圆形、椭圆等图形的背景。</p>
<blockquote>
<p>QLinearGradient(x1, y1, x2, y2)</p>
</blockquote>
<p>QLinearGradient() 方法的参数是渐变的起始点和结束点的坐标。</p>
<p>创建文件 <code>linearGradientDemo.py</code>，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QLinearGradient, QColor</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_gradient</span>(<span class="params">qp</span>):</span><br><span class="line">    gradient = QLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    gradient.setColorAt(<span class="number">0</span>, QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    gradient.setColorAt(<span class="number">0.5</span>, QColor(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line">    gradient.setColorAt(<span class="number">1</span>, QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    qp.setBrush(gradient)</span><br><span class="line">    qp.drawRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.init_ui()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</span><br><span class="line">            <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Linear gradient&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.show()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">            qp = QPainter()</span><br><span class="line">            qp.begin(<span class="variable language_">self</span>)</span><br><span class="line">            draw_gradient(qp)</span><br><span class="line">            qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="放射性渐变-QRadialGradient">放射性渐变(QRadialGradient)</h3>
<p>放射性渐变是以一个中心点为基准，向四周辐射状的渐变，可以用来绘制圆形、椭圆等图形的背景。</p>
<blockquote>
<p>QRadialGradient(cx, cy, radius, centerX, centerY)</p>
</blockquote>
<p>QRadialGradient() 方法的参数是渐变的中心点坐标、半径，以及焦点的坐标。</p>
<p>创建文件 <code>radialGradientDemo.py</code>，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QRadialGradient, QColor</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_gradient</span>(<span class="params">qp</span>):</span><br><span class="line">    gradient = QRadialGradient(<span class="number">70</span>, <span class="number">70</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">70</span>)</span><br><span class="line">    gradient.setColorAt(<span class="number">0</span>, QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    gradient.setColorAt(<span class="number">0.5</span>, QColor(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line">    gradient.setColorAt(<span class="number">1</span>, QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    qp.setBrush(gradient)</span><br><span class="line">    qp.drawRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.init_ui()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</span><br><span class="line">            <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Radial gradient&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.show()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">            qp = QPainter()</span><br><span class="line">            qp.begin(<span class="variable language_">self</span>)</span><br><span class="line">            draw_gradient(qp)</span><br><span class="line">            qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="锥形渐变-QConicalGradient">锥形渐变(QConicalGradient)</h3>
<p>锥形渐变是以一个中心点为基准，以旋转的方式向四周辐射状的渐变，可以用来绘制圆形、椭圆等图形的背景。</p>
<blockquote>
<p>QConicalGradient(cx, cy, angle)</p>
</blockquote>
<p>QConicalGradient() 方法的参数是渐变的中心点坐标、角度。</p>
<p>创建文件 <code>conicalGradientDemo.py</code>，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QConicalGradient, QColor</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_gradient</span>(<span class="params">qp</span>):</span><br><span class="line">    gradient = QConicalGradient(<span class="number">50</span>, <span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">    gradient.setColorAt(<span class="number">0</span>, QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    gradient.setColorAt(<span class="number">0.5</span>, QColor(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line">    gradient.setColorAt(<span class="number">1</span>, QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    qp.setBrush(gradient)</span><br><span class="line">    qp.drawRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.init_ui()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</span><br><span class="line">            <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Conical gradient&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="variable language_">self</span>.show()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">            qp = QPainter()</span><br><span class="line">            qp.begin(<span class="variable language_">self</span>)</span><br><span class="line">            draw_gradient(qp)</span><br><span class="line">            qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Event-事件">Event 事件</h2>
<p>事件是程序与用户之间的交互行为，如鼠标点击、键盘按下等。</p>
<p>PyQt6 有一个独特的信号和槽的机制来处理事件。事件源是对象，事件是对象状态的变化。事件源对象维护一个事件句柄列表，并且在事件发生时，它会遍历所有的事件句柄，调用每个事件句柄的事件处理函数。</p>
<p>PyQt6 有许多内置的事件处理函数，如：keyPressEvent()、keyReleaseEvent()、mousePressEvent()、mouseMoveEvent()、mouseReleaseEvent()、paintEvent() 等。</p>
<h3 id="mousePressEvent-mouseMoveEvent-mouseReleaseEvent">mousePressEvent() &amp; mouseMoveEvent() &amp; mouseReleaseEvent()</h3>
<p>创建文件 <code>mouseEventDemo.py</code>，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">280</span>, <span class="number">170</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Mouse event&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setMouseTracking(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.resize(<span class="number">100</span>, <span class="number">20</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.move(<span class="number">30</span>, <span class="number">60</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="string">&#x27;mouse tracking&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.MouseButton.LeftButton:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Mouse left button pressed&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.RightButton:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Mouse right button pressed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.x()</span><br><span class="line">        y = <span class="variable language_">self</span>.y()</span><br><span class="line"></span><br><span class="line">        text = <span class="string">&quot;X: &#123;0&#125;, Y: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(x, y)</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(text)</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.MouseButton.LeftButton:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Mouse left button released&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.RightButton:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Mouse right button released&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    ex.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第十二篇</title>
    <url>/2023/08/13/1/</url>
    <content><![CDATA[<h2 id="Drawing-By-Click">Drawing By Click</h2>
<h3 id="Drawing-Point-By-Click">Drawing Point By Click</h3>
<p>创建文件 <code>drawing_by_click.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Drawing By Click&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.points = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        painter = QPainter(<span class="variable language_">self</span>)</span><br><span class="line">        painter.setPen(QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> <span class="variable language_">self</span>.points:</span><br><span class="line">            painter.drawPoint(point)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.points.append(event.pos())</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Drawing-Line-By-Click">Drawing Line By Click</h3>
<p>创建文件 <code>drawing_line_by_click.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Drawing Line By Click&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.points = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        painter = QPainter(<span class="variable language_">self</span>)</span><br><span class="line">        painter.setPen(QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.points) - <span class="number">1</span>):</span><br><span class="line">            painter.drawLine(<span class="variable language_">self</span>.points[i], <span class="variable language_">self</span>.points[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.points.append(event.pos())</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Drawing-Rectangle-By-Click">Drawing Rectangle By Click</h3>
<p>创建文件 <code>drawing_rectangle_by_click.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Drawing Rectangle By Click&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.points = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        painter = QPainter(<span class="variable language_">self</span>)</span><br><span class="line">        painter.setPen(QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.points) - <span class="number">1</span>):</span><br><span class="line">            painter.drawRect(<span class="variable language_">self</span>.points[i].x(), <span class="variable language_">self</span>.points[i].y(),</span><br><span class="line">                             <span class="variable language_">self</span>.points[i + <span class="number">1</span>].x() - <span class="variable language_">self</span>.points[i].x(),</span><br><span class="line">                             <span class="variable language_">self</span>.points[i + <span class="number">1</span>].y() - <span class="variable language_">self</span>.points[i].y())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.points.append(event.pos())</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Drawing-Circle-By-Click">Drawing Circle By Click</h3>
<p>创建文件 <code>drawing_circle_by_click.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Drawing Circle By Click&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.points = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        painter = QPainter(<span class="variable language_">self</span>)</span><br><span class="line">        painter.setPen(QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.points) - <span class="number">1</span>):</span><br><span class="line">            painter.drawEllipse(<span class="variable language_">self</span>.points[i].x(), <span class="variable language_">self</span>.points[i].y(),</span><br><span class="line">                                <span class="variable language_">self</span>.points[i + <span class="number">1</span>].x() - <span class="variable language_">self</span>.points[i].x(),</span><br><span class="line">                                <span class="variable language_">self</span>.points[i + <span class="number">1</span>].y() - <span class="variable language_">self</span>.points[i].y())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.points.append(event.pos())</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Drawing-Text-By-Click">Drawing Text By Click</h3>
<p>创建文件 <code>drawing_text_by_click.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter, QPen, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Drawing Text By Click&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.points = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        painter = QPainter(<span class="variable language_">self</span>)</span><br><span class="line">        painter.setPen(QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        painter.setFont(QFont(<span class="string">&quot;Times New Roman&quot;</span>, <span class="number">20</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.points) - <span class="number">1</span>):</span><br><span class="line">            painter.drawText(<span class="variable language_">self</span>.points[i].x(), <span class="variable language_">self</span>.points[i].y(),</span><br><span class="line">                             <span class="variable language_">self</span>.points[i + <span class="number">1</span>].x() - <span class="variable language_">self</span>.points[i].x(),</span><br><span class="line">                             <span class="variable language_">self</span>.points[i + <span class="number">1</span>].y() - <span class="variable language_">self</span>.points[i].y(),</span><br><span class="line">                             Qt.AlignmentFlag.AlignCenter, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.points.append(event.pos())</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="QGraphicView-And-QGraphicScene">QGraphicView And QGraphicScene</h2>
<p>QGraphicView 和 QGraphicScene 是 Qt 提供的用于绘图的类，可以用于绘制各种图形，包括点、线、矩形、圆、文本等。</p>
<blockquote>
<p>实例</p>
</blockquote>
<p>创建文件 <code>qgraphicview_and_qgraphicscene.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPen, QBrush, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QGraphicsView, QGraphicsScene</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyView</span>(<span class="title class_ inherited__">QGraphicsView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QGraphicView And QGraphicScene&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.scene = QGraphicsScene()</span><br><span class="line">        <span class="variable language_">self</span>.setScene(<span class="variable language_">self</span>.scene)</span><br><span class="line">        <span class="variable language_">self</span>.draw()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.scene.addLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        <span class="variable language_">self</span>.scene.addRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, QPen(Qt.GlobalColor.green, <span class="number">5</span>),</span><br><span class="line">                           QBrush(Qt.GlobalColor.blue))</span><br><span class="line">        <span class="variable language_">self</span>.scene.addEllipse(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>, QPen(Qt.GlobalColor.yellow, <span class="number">5</span>),</span><br><span class="line">                              QBrush(Qt.GlobalColor.cyan))</span><br><span class="line">        <span class="variable language_">self</span>.scene.addText(<span class="string">&quot;Hello World&quot;</span>, QFont(<span class="string">&quot;Times New Roman&quot;</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    view = MyView()</span><br><span class="line">    view.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="QGraphicRectItem">QGraphicRectItem</h3>
<p>QGraphicRectItem 是 QGraphicScene 中的矩形类，可以用于绘制矩形。</p>
<blockquote>
<p>实例</p>
</blockquote>
<p>创建文件 <code>qgraphicrectitem.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPen, QBrush</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QGraphicsView, QGraphicsScene, QGraphicsRectItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyView</span>(<span class="title class_ inherited__">QGraphicsView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QGraphicRectItem&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.scene = QGraphicsScene()</span><br><span class="line">        <span class="variable language_">self</span>.setScene(<span class="variable language_">self</span>.scene)</span><br><span class="line">        <span class="variable language_">self</span>.draw()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        rect = QGraphicsRectItem(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        rect.setPen(QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        rect.setBrush(QBrush(Qt.GlobalColor.blue))</span><br><span class="line">        <span class="variable language_">self</span>.scene.addItem(rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    view = MyView()</span><br><span class="line">    view.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Handling-Key-Press-Events">Handling Key Press Events</h2>
<p>我将在 <span class="exturl" data-url="aHR0cDovL3FncmFwaGljcmVjdGl0ZW0ucHk=">qgraphicrectitem.py<i class="fa fa-external-link-alt"></i></span> 的基础上进行修改，使其可以通过键盘控制矩形的移动。</p>
<blockquote>
<p>实例</p>
</blockquote>
<p>创建文件 <code>handling_key_press_events.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPen, QBrush</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QGraphicsView, QGraphicsScene, QGraphicsRectItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyView</span>(<span class="title class_ inherited__">QGraphicsView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.rect = QGraphicsRectItem(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Handling Key Press Events&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.scene = QGraphicsScene()</span><br><span class="line">        <span class="variable language_">self</span>.setScene(<span class="variable language_">self</span>.scene)</span><br><span class="line">        <span class="variable language_">self</span>.draw()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.rect.setPen(QPen(Qt.GlobalColor.red, <span class="number">5</span>))</span><br><span class="line">        <span class="variable language_">self</span>.rect.setBrush(QBrush(Qt.GlobalColor.blue))</span><br><span class="line">        <span class="variable language_">self</span>.scene.addItem(<span class="variable language_">self</span>.rect)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 当按下上下左右键时，矩形将移动</span></span><br><span class="line">        <span class="keyword">if</span> event.key() == Qt.Key.Key_Up:</span><br><span class="line">            <span class="variable language_">self</span>.rect.moveBy(<span class="number">0</span>, -<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_Down:</span><br><span class="line">            <span class="variable language_">self</span>.rect.moveBy(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_Left:</span><br><span class="line">            <span class="variable language_">self</span>.rect.moveBy(-<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_Right:</span><br><span class="line">            <span class="variable language_">self</span>.rect.moveBy(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 当按下 H 键时，矩形将消失</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_H:</span><br><span class="line">            <span class="variable language_">self</span>.scene.removeItem(<span class="variable language_">self</span>.rect)</span><br><span class="line">        <span class="comment"># 当按下 S 键时，矩形将重新出现</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_S:</span><br><span class="line">            <span class="variable language_">self</span>.scene.addItem(<span class="variable language_">self</span>.rect)</span><br><span class="line">        <span class="comment"># 当按下 C 键时，矩形将改变颜色</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_C:</span><br><span class="line">            <span class="variable language_">self</span>.rect.setBrush(QBrush(Qt.GlobalColor.green))</span><br><span class="line">        <span class="comment"># 当按下 R 键时，矩形将恢复原来的颜色</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_R:</span><br><span class="line">            <span class="variable language_">self</span>.rect.setBrush(QBrush(Qt.GlobalColor.blue))</span><br><span class="line">        <span class="comment"># 当按下 Q 键时，矩形将逆时针旋转 10 度</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_Q:</span><br><span class="line">            <span class="variable language_">self</span>.rect.setRotation(<span class="variable language_">self</span>.rect.rotation() - <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 当按下 E 键时，矩形将顺时针旋转 10 度</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_E:</span><br><span class="line">            <span class="variable language_">self</span>.rect.setRotation(<span class="variable language_">self</span>.rect.rotation() + <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 当按下 + 键时，矩形将放大 10%</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_Plus:</span><br><span class="line">            <span class="variable language_">self</span>.rect.setScale(<span class="variable language_">self</span>.rect.scale() + <span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># 当按下 - 键时，矩形将缩小 10%</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_Minus:</span><br><span class="line">            <span class="variable language_">self</span>.rect.setScale(<span class="variable language_">self</span>.rect.scale() - <span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># 当按下 0 键时，矩形将恢复原来的大小</span></span><br><span class="line">        <span class="keyword">elif</span> event.key() == Qt.Key.Key_0:</span><br><span class="line">            <span class="variable language_">self</span>.rect.setScale(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    view = MyView()</span><br><span class="line">    view.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第十三篇</title>
    <url>/2023/08/14/1/</url>
    <content><![CDATA[<h2 id="QtQuick-QML">QtQuick &amp; QML</h2>
<p>QtQuick 是 Qt 的一个模块，它提供了一套用于创建动态用户界面的 QML 语言，以及一个用于在 C++ 中使用 QML 的 API。</p>
<p>QML(Quantum Markup Language)是一种声明性的语言，它允许用户通过简单的 JavaScript 语法来创建动态的用户界面。QML 语言的语法和 JavaScript 语言的语法非常相似，但是 QML 语言的语义和 JavaScript 语言的语义是不同的。</p>
<h3 id="用-QtQuick-创建-GUI-窗口">用 QtQuick 创建 GUI 窗口</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>GuiWindow.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: (<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建文件 <code>GuiWindow.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QUrl, QObject</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QGuiApplication</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtQml <span class="keyword">import</span> QQmlApplicationEngine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QGuiApplication(sys.argv)</span><br><span class="line">    engine = QQmlApplicationEngine()</span><br><span class="line">    window = Window()</span><br><span class="line">    engine.rootContext().setContextProperty(<span class="string">&quot;window&quot;</span>, window)</span><br><span class="line">    engine.load(QUrl(<span class="string">&quot;GuiWindow.qml&quot;</span>))</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="按钮-信号处理">按钮 &amp; 信号处理</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>Button.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;Button Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">Button</span> &#123;</span><br><span class="line">        <span class="attribute">text</span>: <span class="string">&quot;Click Me&quot;</span></span><br><span class="line">        <span class="attribute">id:</span><span class="string"> button</span></span><br><span class="line">        <span class="comment">// x: 100</span></span><br><span class="line">        <span class="comment">// y: 100</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="comment">// height: 50</span></span><br><span class="line">        <span class="comment">// width: 200</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="title">Rectangle</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: botton.down ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;blue&quot;</span></span><br><span class="line">            <span class="attribute">border.width</span>: <span class="number">1</span></span><br><span class="line">            <span class="attribute">radius</span>: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">            <span class="built_in">window</span>.hello()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建文件 <code>Button.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QUrl, QObject, pyqtSlot</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QGuiApplication</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtQml <span class="keyword">import</span> QQmlApplicationEngine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QGuiApplication(sys.argv)</span><br><span class="line">    engine = QQmlApplicationEngine()</span><br><span class="line">    window = Window()</span><br><span class="line">    engine.rootContext().setContextProperty(<span class="string">&quot;window&quot;</span>, window)</span><br><span class="line">    engine.load(QUrl(<span class="string">&quot;./Button.qml&quot;</span>))</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，我们在 <code>Button.py</code> 中定义了一个 <code>Window</code> 类，这个类继承自 <code>QObject</code>，并且定义了一个 <code>hello</code> 方法，这个方法使用了 <code>@pyqtSlot()</code> 装饰器，这个装饰器的作用是将这个方法注册为一个槽函数，这样在 QML 中就可以调用这个方法了。</p>
<h3 id="行与列">行与列</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>RowColumn.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;Row &amp; Column Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">Row</span> &#123;</span><br><span class="line">        <span class="attribute">spacing</span>: <span class="number">10</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="title">Button</span> &#123;</span><br><span class="line">            <span class="attribute">text</span>: <span class="string">&quot;Button 1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title">Button</span> &#123;</span><br><span class="line">            <span class="attribute">text</span>: <span class="string">&quot;Button 2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title">Button</span> &#123;</span><br><span class="line">            <span class="attribute">text</span>: <span class="string">&quot;Button 3&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">Column</span> &#123;</span><br><span class="line">        <span class="attribute">spacing</span>: <span class="number">10</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="title">Button</span> &#123;</span><br><span class="line">            <span class="attribute">text</span>: <span class="string">&quot;Button 1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title">Button</span> &#123;</span><br><span class="line">            <span class="attribute">text</span>: <span class="string">&quot;Button 2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title">Button</span> &#123;</span><br><span class="line">            <span class="attribute">text</span>: <span class="string">&quot;Button 3&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Label-事件处理">Label &amp; 事件处理</h2>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>Label.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;Label Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">Label</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> label</span></span><br><span class="line">        <span class="attribute">text</span>: <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">font.pixelSize</span>: <span class="number">20</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">        <span class="title">MouseArea</span> &#123;</span><br><span class="line">            <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">            <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">                label.text = <span class="string">&quot;Hello PyQt6&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CheckBox-事件处理">CheckBox &amp; 事件处理</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>CheckBox.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;CheckBox Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">CheckBox</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> checkBox</span></span><br><span class="line">        <span class="attribute">text</span>: <span class="string">&quot;CheckBox&quot;</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">onClicked</span>: &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkBox.checked) &#123;</span><br><span class="line">                checkBox.text = <span class="string">&quot;Checked&quot;</span></span><br><span class="line">            &#125; <span class="title">else</span> &#123;</span><br><span class="line">                checkBox.text = <span class="string">&quot;UnChecked&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ComboBox-事件处理">ComboBox &amp; 事件处理</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>ComboBox.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;ComboBox Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">ComboBox</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> comboBox</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">model</span>: [<span class="string">&quot;Item 1&quot;</span>, <span class="string">&quot;Item 2&quot;</span>, <span class="string">&quot;Item 3&quot;</span>]</span><br><span class="line">        <span class="attribute">onCurrentTextChanged</span>: &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(comboBox.currentText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MenuBar">MenuBar</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>MenuBar.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;MenuBar Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">MenuBar</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> menuBar</span></span><br><span class="line">        <span class="title">Menu</span> &#123;</span><br><span class="line">            <span class="attribute">title</span>: <span class="string">&quot;File&quot;</span></span><br><span class="line">            <span class="title">MenuItem</span> &#123;</span><br><span class="line">                <span class="attribute">text</span>: <span class="string">&quot;New&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title">MenuItem</span> &#123;</span><br><span class="line">                <span class="attribute">text</span>: <span class="string">&quot;Open&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title">MenuItem</span> &#123;</span><br><span class="line">                <span class="attribute">text</span>: <span class="string">&quot;Save&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title">Menu</span> &#123;</span><br><span class="line">            <span class="attribute">title</span>: <span class="string">&quot;Edit&quot;</span></span><br><span class="line">            <span class="title">MenuItem</span> &#123;</span><br><span class="line">                <span class="attribute">text</span>: <span class="string">&quot;Copy&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title">MenuItem</span> &#123;</span><br><span class="line">                <span class="attribute">text</span>: <span class="string">&quot;Paste&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpinBox">SpinBox</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>SpinBox.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;SpinBox Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">SpinBox</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> spinBox</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">to</span>: <span class="number">100</span></span><br><span class="line">        <span class="attribute">value</span>: <span class="number">50</span></span><br><span class="line">        <span class="attribute">onValueChanged</span>: &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(spinBox.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Slider">Slider</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>Slider.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;Slider Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">Slider</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> slider</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">from</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">to</span>: <span class="number">100</span></span><br><span class="line">        <span class="attribute">value</span>: <span class="number">50</span></span><br><span class="line">        <span class="attribute">onValueChanged</span>: &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(slider.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ScrollView">ScrollView</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>ScrollView.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;ScrollView Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">ScrollView</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> scrollView</span></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="title">Column</span> &#123;</span><br><span class="line">            <span class="attribute">spacing</span>: <span class="number">10</span></span><br><span class="line">            <span class="attribute">width</span>: scrollView.width</span><br><span class="line">            <span class="attribute">height</span>: scrollView.height</span><br><span class="line">            <span class="title">Repeater</span> &#123;</span><br><span class="line">                <span class="attribute">model</span>: <span class="number">100</span></span><br><span class="line">                <span class="title">Text</span> &#123;</span><br><span class="line">                    <span class="attribute">text</span>: <span class="string">&quot;Item &quot;</span> + index</span><br><span class="line">                    <span class="attribute">font.pixelSize</span>: <span class="number">20</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Switch-Button">Switch Button</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>SwitchButton.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> mainWindow</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;SwitchButton Example&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">Switch</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> switchButton</span></span><br><span class="line">        <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">        <span class="attribute">onToggled</span>: &#123;</span><br><span class="line">            <span class="keyword">if</span> (switchButton.checked) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;Checked&quot;</span>)</span><br><span class="line">            &#125; <span class="title">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;UnChecked&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第十四篇</title>
    <url>/2023/08/16/1/</url>
    <content><![CDATA[<h2 id="Charts">Charts</h2>
<p>Charts 模块提供了一套用于创建图表的 QML 类型，以及一个用于在 C++ 中使用图表的 API。</p>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install PyQt6-Charts</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考</p>
</blockquote>
<p>runebook: <span class="exturl" data-url="aHR0cHM6Ly9ydW5lYm9vay5kZXYvemgvZG9jcy9xdC8taW5kZXgtI1F0JTIwQ2hhcnRz">PyQt6-Charts<i class="fa fa-external-link-alt"></i></span><br>
doc-qt-io: <span class="exturl" data-url="aHR0cHM6Ly9kb2MucXQuaW8vcXQtNi9xdGNoYXJ0cy1xbWxjaGFydHNnYWxsZXJ5LWV4YW1wbGUuaHRtbA==">Charts with QML Gallery<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="小插曲">小插曲</h2>
<details>
<summary>点击查看</summary>
<p>在导入<code>from PyQt6.QtCharts import QLineSeries, QChart, QChartView</code>时，会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ImportError: DLL load failed <span class="keyword">while</span> importing QtCharts: 找不到指定的模块。</span><br></pre></td></tr></table></figure>
<p>一开始，我认为是 PyQt6-Charts 没有安装成功，但是在 PyCharm 中，我可以看到 PyQt6-Charts 已经安装成功了。随后，我在网上搜索了一下，在简中互联网上，没有找到解决方案，但是在 StackOverflow 上，找到了解决方案。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDI4NjM1MDUvZGxsLWxvYWQtZmFpbGVkLXdoZW4taW1wb3J0aW5nLXB5cXQ1">PyQt6-Charts<i class="fa fa-external-link-alt"></i></span></p>
<p>参考这篇文章，我先找到了几个疑点：</p>
<ol>
<li class="lvl-3">
<p>PyQt6-Charts 是基于 PyQt6 的，而不是 PyQt5。</p>
</li>
<li class="lvl-3">
<p>PyQt6-Charts 可能只创建了文件夹，而没有创建文件。</p>
</li>
<li class="lvl-3">
<p>PyQt6-Charts 对应的是 PyQt6 的哪个版本。</p>
</li>
<li class="lvl-3">
<p>PyQt6-Charts 对应的是 Python 的哪个版本。</p>
</li>
</ol>
<p>对于第一个疑点，我在安装 PyQt6-Charts 时，使用的是 <code>pip install PyQt6-Charts</code>，而不是 <code>pip install PyQt5-Charts</code>，所以，这个疑点是排除的。第二，我在安装 PyQt6-Charts 时，确实只创建了文件夹，而没有创建文件，所以，这个疑点是成立的，所以我从 PyPI 上下载了 PyQt6-Charts 的 whl 安装文件，然后使用 <code>pip install PyQt6_Charts.whl</code> 安装了 PyQt6-Charts。第三，我在安装 PyQt6-Charts 时，没有指定 PyQt6 的版本，所以，这个疑点是成立的，所以我反复尝试了几个 PyQt6 的版本。第四，我尝试创建了多个虚拟环境，使用不同的 Python 版本，包括 conda 环境，但是都没有解决问题。</p>
<p>最后，我发觉问题出自与软件包的兼容性，我使用的是 Python 3.11</p>
<p>requirement.txt</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">argsense==0.4.3</span><br><span class="line">click==8.1.6</span><br><span class="line">colorama==0.4.6</span><br><span class="line">lambda-ex==1.1.0</span><br><span class="line">lk-logger==5.6.2</span><br><span class="line">lk-qtquick-scaffold==2.0.0</span><br><span class="line">lk-utils==2.5.6</span><br><span class="line">markdown-it-py==3.0.0</span><br><span class="line">mdurl==0.1.2</span><br><span class="line">mysql==0.0.3</span><br><span class="line">mysql-connector==2.2.9</span><br><span class="line">mysql-connector-python==8.1.0</span><br><span class="line">mysqlclient==2.2.0</span><br><span class="line">packaging==23.1</span><br><span class="line">protobuf==4.21.12</span><br><span class="line">Pygments==2.16.1</span><br><span class="line">PyQt6==6.5.2</span><br><span class="line">PyQt6-Charts==6.5.0</span><br><span class="line">PyQt6-Charts-Qt6==6.5.2</span><br><span class="line">PyQt6-Qt6==6.5.2</span><br><span class="line">PyQt6-sip==13.5.2</span><br><span class="line">pyqt6-tools==6.4.2.3.3</span><br><span class="line">python-dotenv==1.0.0</span><br><span class="line">PyYAML==6.0.1</span><br><span class="line">qt6-applications==6.5.0.2.3</span><br><span class="line">qt6-tools==6.5.0.1.3</span><br><span class="line">QtPy==2.3.1</span><br><span class="line">rich==13.5.2</span><br></pre></td></tr></table></figure>
<p>问题可能出在 <code>pyqt6-plugins</code> 上，遂将其卸载，问题解决。</p>
</details>
<h2 id="Charts-实例">Charts 实例</h2>
<h3 id="LineChart-QLineSeries">LineChart / QLineSeries</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>创建文件 <code>LineChart.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QPointF</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCharts <span class="keyword">import</span> QLineSeries, QChart, QChartView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">700</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PyQt6 Line Chart&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.line_chart()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">line_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QLineSeries()</span><br><span class="line">    </span><br><span class="line">        series.append([</span><br><span class="line">            QPointF(<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            QPointF(<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">            QPointF(<span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line">            QPointF(<span class="number">4</span>, <span class="number">8</span>),</span><br><span class="line">            QPointF(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">            QPointF(<span class="number">7</span>, <span class="number">16</span>),</span><br><span class="line">        ])</span><br><span class="line">    </span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">    </span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(chart_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另一种方法</p>
</blockquote>
<p>创建文件 <code>main.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QCoreApplication, Qt, QUrl</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtQml <span class="keyword">import</span> QQmlApplicationEngine</span><br><span class="line"></span><br><span class="line">CURRENT_DIRECTORY = Path(__file__).resolve().parent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    engine = QQmlApplicationEngine()</span><br><span class="line"></span><br><span class="line">    filename = os.fspath(CURRENT_DIRECTORY / <span class="string">&quot;LineChart.qml&quot;</span>)</span><br><span class="line">    url = QUrl.fromLocalFile(filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_object_created</span>(<span class="params">obj, obj_url</span>):</span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> url == obj_url:</span><br><span class="line">            QCoreApplication.exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    engine.objectCreated.connect(</span><br><span class="line">        handle_object_created, Qt.ConnectionType.QueuedConnection</span><br><span class="line">    )</span><br><span class="line">    engine.load(url)</span><br><span class="line"></span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建文件 <code>LineChart.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"><span class="keyword">import</span> QtCharts</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> root</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;PyQt6 Line Chart&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">ChartView</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> chartView</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line"></span><br><span class="line">        <span class="title">LineSeries</span> &#123;</span><br><span class="line">            <span class="title">XYPoint</span> &#123;</span><br><span class="line">                <span class="attribute">x</span>: <span class="number">0</span></span><br><span class="line">                <span class="attribute">y</span>: <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title">XYPoint</span> &#123;</span><br><span class="line">                <span class="attribute">x</span>: <span class="number">1</span></span><br><span class="line">                <span class="attribute">y</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title">XYPoint</span> &#123;</span><br><span class="line">                <span class="attribute">x</span>: <span class="number">2</span></span><br><span class="line">                <span class="attribute">y</span>: <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title">XYPoint</span> &#123;</span><br><span class="line">                <span class="attribute">x</span>: <span class="number">3</span></span><br><span class="line">                <span class="attribute">y</span>: <span class="number">5</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title">XYPoint</span> &#123;</span><br><span class="line">                <span class="attribute">x</span>: <span class="number">4</span></span><br><span class="line">                <span class="attribute">y</span>: <span class="number">8</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title">XYPoint</span> &#123;</span><br><span class="line">                <span class="attribute">x</span>: <span class="number">5</span></span><br><span class="line">                <span class="attribute">y</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title">XYPoint</span> &#123;</span><br><span class="line">                <span class="attribute">x</span>: <span class="number">7</span></span><br><span class="line">                <span class="attribute">y</span>: <span class="number">16</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BarChart-QBarSeries">BarChart / QBarSeries</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<p>创建文件 <code>BarChart.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtCharts <span class="keyword">import</span> QChart, QChartView, QBarCategoryAxis, QBarSeries, QBarSet</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PyQt6 Bar Chart&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.bar_chart()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bar_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QBarSeries()</span><br><span class="line">    </span><br><span class="line">        set0 = QBarSet(<span class="string">&quot;Jane&quot;</span>)</span><br><span class="line">        set1 = QBarSet(<span class="string">&quot;John&quot;</span>)</span><br><span class="line">        set2 = QBarSet(<span class="string">&quot;Axel&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        set0 &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">6</span></span><br><span class="line">        set1 &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">        set2 &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">13</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">        series.append(set0)</span><br><span class="line">        series.append(set1)</span><br><span class="line">        series.append(set2)</span><br><span class="line">    </span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Bar Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line">    </span><br><span class="line">        categories = [<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Apr&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;Jun&quot;</span>]</span><br><span class="line">        axis = QBarCategoryAxis()</span><br><span class="line">        axis.append(categories)</span><br><span class="line">        chart.createDefaultAxes()</span><br><span class="line">        chart.setAxisX(axis, series)</span><br><span class="line">    </span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line">    </span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(chart_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另一种方法</p>
</blockquote>
<p>在文件 <code>main.py</code>，修改指定的文件名为 <code>BarChart.qml</code></p>
<p>创建文件 <code>BarChart.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"><span class="keyword">import</span> QtCharts</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> root</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;PyQt6 Bar Chart&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">ChartView</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> chartView</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line"></span><br><span class="line">        <span class="title">BarSeries</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> mySeries</span></span><br><span class="line">            <span class="attribute">axisX</span>: <span class="title">BarCategoryAxis</span> &#123; <span class="attribute">categories</span>: [<span class="string">&quot;2007&quot;</span>, <span class="string">&quot;2008&quot;</span>, <span class="string">&quot;2009&quot;</span>, <span class="string">&quot;2010&quot;</span>, <span class="string">&quot;2011&quot;</span>, <span class="string">&quot;2012&quot;</span> ] &#125;</span><br><span class="line">            <span class="title">BarSet</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;Bob&quot;</span>; <span class="attribute">values</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] &#125;</span><br><span class="line">            <span class="title">BarSet</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;Susan&quot;</span>; <span class="attribute">values</span>: [<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>] &#125;</span><br><span class="line">            <span class="title">BarSet</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;James&quot;</span>; <span class="attribute">values</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">8</span>] &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PieChart-QPieSeries">PieChart / QPieSeries</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<p>创建文件 <code>PieChart.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtCharts <span class="keyword">import</span> QChart, QChartView, QPieSeries, QPieSlice</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PyQt6 Pie Chart&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pie_chart()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pie_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QPieSeries()</span><br><span class="line">    </span><br><span class="line">        slice0 = QPieSlice(<span class="string">&quot;Jane&quot;</span>, <span class="number">10</span>)</span><br><span class="line">        slice0.setExploded()</span><br><span class="line">        slice0.setLabelVisible()</span><br><span class="line">    </span><br><span class="line">        slice1 = QPieSlice(<span class="string">&quot;John&quot;</span>, <span class="number">5</span>)</span><br><span class="line">        slice1.setLabelVisible()</span><br><span class="line">    </span><br><span class="line">        slice2 = QPieSlice(<span class="string">&quot;Axel&quot;</span>, <span class="number">30</span>)</span><br><span class="line">        slice2.setLabelVisible()</span><br><span class="line">    </span><br><span class="line">        slice3 = QPieSlice(<span class="string">&quot;Mary&quot;</span>, <span class="number">50</span>)</span><br><span class="line">        slice3.setLabelVisible()</span><br><span class="line">    </span><br><span class="line">        series.append(slice0)</span><br><span class="line">        series.append(slice1)</span><br><span class="line">        series.append(slice2)</span><br><span class="line">        series.append(slice3)</span><br><span class="line">    </span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Pie Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line">    </span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line">    </span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(chart_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另一种方法</p>
</blockquote>
<p>在文件 <code>main.py</code>，修改指定的文件名为 <code>PieChart.qml</code></p>
<p>创建文件 <code>PieChart.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"><span class="keyword">import</span> QtCharts</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> root</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;PyQt6 Pie Chart&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">ChartView</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> chartView</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line"></span><br><span class="line">        <span class="title">PieSeries</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> mySeries</span></span><br><span class="line">            <span class="title">PieSlice</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;Jane&quot;</span>; <span class="attribute">value</span>: <span class="number">10</span> &#125;</span><br><span class="line">            <span class="title">PieSlice</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;John&quot;</span>; <span class="attribute">value</span>: <span class="number">5</span> &#125;</span><br><span class="line">            <span class="title">PieSlice</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;Axel&quot;</span>; <span class="attribute">value</span>: <span class="number">30</span> &#125;</span><br><span class="line">            <span class="title">PieSlice</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;Mary&quot;</span>; <span class="attribute">value</span>: <span class="number">50</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="StackBarChart-QStackedBarSeries">StackBarChart / QStackedBarSeries</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<p>创建文件 <code>StackBarChart.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtCharts <span class="keyword">import</span> QChart, QChartView, QStackedBarSeries, QBarSet</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PyQt6 Stack Bar Chart&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.stack_bar_chart()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stack_bar_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QStackedBarSeries()</span><br><span class="line">    </span><br><span class="line">        set0 = QBarSet(<span class="string">&quot;Jane&quot;</span>)</span><br><span class="line">        set1 = QBarSet(<span class="string">&quot;John&quot;</span>)</span><br><span class="line">        set2 = QBarSet(<span class="string">&quot;Axel&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        set0 &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">6</span></span><br><span class="line">        set1 &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">        set2 &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">13</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">        series.append(set0)</span><br><span class="line">        series.append(set1)</span><br><span class="line">        series.append(set2)</span><br><span class="line">    </span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Stacked Bar Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line">    </span><br><span class="line">        categories = [<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Apr&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;Jun&quot;</span>]</span><br><span class="line">        axis = QBarCategoryAxis()</span><br><span class="line">        axis.append(categories)</span><br><span class="line">        chart.createDefaultAxes()</span><br><span class="line">        chart.addAxis(axis, Qt.AlignmentFlag.AlignBottom)</span><br><span class="line">    </span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line">    </span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(chart_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<blockquote>
<p>另一种方法</p>
</blockquote>
<p>在文件 <code>main.py</code>，修改指定的文件名为 <code>StackBarChart.qml</code></p>
<p>创建文件 <code>StackBarChart.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"><span class="keyword">import</span> QtCharts</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> root</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;PyQt6 Stack Bar Chart&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">ChartView</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> chartView</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line"></span><br><span class="line">        <span class="title">StackedBarSeries</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> mySeries</span></span><br><span class="line">            <span class="attribute">axisX</span>: <span class="title">BarCategoryAxis</span> &#123; <span class="attribute">categories</span>: [<span class="string">&quot;2007&quot;</span>, <span class="string">&quot;2008&quot;</span>, <span class="string">&quot;2009&quot;</span>, <span class="string">&quot;2010&quot;</span>, <span class="string">&quot;2011&quot;</span>, <span class="string">&quot;2012&quot;</span> ] &#125;</span><br><span class="line">            <span class="title">BarSet</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;Bob&quot;</span>; <span class="attribute">values</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] &#125;</span><br><span class="line">            <span class="title">BarSet</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;Susan&quot;</span>; <span class="attribute">values</span>: [<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>] &#125;</span><br><span class="line">            <span class="title">BarSet</span> &#123; <span class="attribute">label</span>: <span class="string">&quot;James&quot;</span>; <span class="attribute">values</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">8</span>] &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ScatterChart-QScatterSeries">ScatterChart / QScatterSeries</h3>
<blockquote>
<p>核心代码</p>
</blockquote>
<p>创建文件 <code>ScatterChart.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtCharts <span class="keyword">import</span> QChart, QChartView, QScatterSeries, QValueAxis</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PyQt6 Scatter Chart&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.scatter_chart()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scatter_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QScatterSeries()</span><br><span class="line"></span><br><span class="line">        series.append(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">        series.append(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">        series.append(<span class="number">3</span>, <span class="number">8</span>)</span><br><span class="line">        series.append(<span class="number">7</span>, <span class="number">4</span>)</span><br><span class="line">        series.append(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Scatter Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line"></span><br><span class="line">        chart.createDefaultAxes()</span><br><span class="line">        axis_x = QValueAxis()</span><br><span class="line">        axis_x.setRange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        axis_x.setTickCount(<span class="number">11</span>)</span><br><span class="line">        axis_x.setLabelFormat(<span class="string">&quot;%.2f&quot;</span>)</span><br><span class="line">        axis_x.setTitleText(<span class="string">&quot;X Axis&quot;</span>)</span><br><span class="line">        <span class="comment"># chart.setAxisX(axis_x, series)</span></span><br><span class="line"></span><br><span class="line">        axis_y = QValueAxis()</span><br><span class="line">        axis_y.setRange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        axis_y.setTickCount(<span class="number">11</span>)</span><br><span class="line">        axis_y.setLabelFormat(<span class="string">&quot;%.2f&quot;</span>)</span><br><span class="line">        axis_y.setTitleText(<span class="string">&quot;Y Axis&quot;</span>)</span><br><span class="line">        <span class="comment"># chart.setAxisY(axis_y, series)</span></span><br><span class="line"></span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line"></span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(chart_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<blockquote>
<p>另一种方法</p>
</blockquote>
<p>在文件 <code>main.py</code>，修改指定的文件名为 <code>ScatterChart.qml</code></p>
<p>创建文件 <code>ScatterChart.qml</code>，内容如下：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick</span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls</span><br><span class="line"><span class="keyword">import</span> QtCharts</span><br><span class="line"></span><br><span class="line"><span class="title">ApplicationWindow</span> &#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string"> root</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span></span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;PyQt6 Scatter Chart&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title">ChartView</span> &#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string"> chartView</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">anchors.fill</span>: <span class="built_in">parent</span></span><br><span class="line"></span><br><span class="line">        <span class="title">ScatterSeries</span> &#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string"> mySeries</span></span><br><span class="line">            <span class="title">XYPoint</span> &#123; <span class="attribute">x</span>: <span class="number">0</span>; <span class="attribute">y</span>: <span class="number">6</span> &#125;</span><br><span class="line">            <span class="title">XYPoint</span> &#123; <span class="attribute">x</span>: <span class="number">2</span>; <span class="attribute">y</span>: <span class="number">4</span> &#125;</span><br><span class="line">            <span class="title">XYPoint</span> &#123; <span class="attribute">x</span>: <span class="number">3</span>; <span class="attribute">y</span>: <span class="number">8</span> &#125;</span><br><span class="line">            <span class="title">XYPoint</span> &#123; <span class="attribute">x</span>: <span class="number">7</span>; <span class="attribute">y</span>: <span class="number">4</span> &#125;</span><br><span class="line">            <span class="title">XYPoint</span> &#123; <span class="attribute">x</span>: <span class="number">10</span>; <span class="attribute">y</span>: <span class="number">5</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DountChart-QPieSeries">DountChart / QPieSeries</h3>
<p>DountChart 是 PieChart 的变种，所以，这里不再赘述。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9kb2MucXQuaW8vcXQtNi9xdGNoYXJ0cy1kb251dGJyZWFrZG93bi1leGFtcGxlLmh0bWw=">DountChart<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="多个图表以及混合图表">多个图表以及混合图表</h2>
<h3 id="多个图表">多个图表</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>这个案例，我使用了 <code>QGridLayout</code>，创建了一个网格布局，将四个图表放在了网格布局中。</p>
<p>核心代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multi_charts</span>(<span class="params">self</span>):</span><br><span class="line">    grid_layout = QGridLayout()</span><br><span class="line">    grid_layout.setSpacing(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    grid_layout.addWidget(<span class="variable language_">self</span>.line_chart(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    grid_layout.addWidget(<span class="variable language_">self</span>.bar_chart(), <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    grid_layout.addWidget(<span class="variable language_">self</span>.stack_bar_chart(), <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    grid_layout.addWidget(<span class="variable language_">self</span>.pie_chart(), <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    widget = QWidget()</span><br><span class="line">    widget.setLayout(grid_layout)</span><br><span class="line">    <span class="variable language_">self</span>.setCentralWidget(widget)</span><br></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<details>
<summary>点击查看</summary>
<p>创建文件 <code>MultiCharts.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QGridLayout, QSplitter</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QPointF</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCharts <span class="keyword">import</span> QLineSeries, QChart, QChartView, QBarSeries, QBarSet, QStackedBarSeries</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">700</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PyQt6 Multi Charts&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.multi_charts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multi_charts</span>(<span class="params">self</span>):</span><br><span class="line">        grid_layout = QGridLayout()</span><br><span class="line">        grid_layout.setSpacing(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        grid_layout.addWidget(<span class="variable language_">self</span>.line_chart(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        grid_layout.addWidget(<span class="variable language_">self</span>.bar_chart(), <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        grid_layout.addWidget(<span class="variable language_">self</span>.stack_bar_chart(), <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        grid_layout.addWidget(<span class="variable language_">self</span>.pie_chart(), <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        widget = QWidget()</span><br><span class="line">        widget.setLayout(grid_layout)</span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(widget)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">line_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QLineSeries()</span><br><span class="line"></span><br><span class="line">        series.append([</span><br><span class="line">            QPointF(<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            QPointF(<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">            QPointF(<span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line">            QPointF(<span class="number">4</span>, <span class="number">8</span>),</span><br><span class="line">            QPointF(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">            QPointF(<span class="number">7</span>, <span class="number">16</span>),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line"></span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chart_view</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bar_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QBarSeries()</span><br><span class="line"></span><br><span class="line">        set0 = QBarSet(<span class="string">&quot;Jane&quot;</span>)</span><br><span class="line">        set1 = QBarSet(<span class="string">&quot;John&quot;</span>)</span><br><span class="line">        set2 = QBarSet(<span class="string">&quot;Axel&quot;</span>)</span><br><span class="line"></span><br><span class="line">        set0 &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">6</span></span><br><span class="line">        set1 &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">        set2 &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">13</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        series.append(set0)</span><br><span class="line">        series.append(set1)</span><br><span class="line">        series.append(set2)</span><br><span class="line"></span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Bar Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line"></span><br><span class="line">        categories = [<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Apr&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;Jun&quot;</span>]</span><br><span class="line">        axis = QBarCategoryAxis()</span><br><span class="line">        axis.append(categories)</span><br><span class="line">        chart.createDefaultAxes()</span><br><span class="line">        chart.setAxisX(axis, series)</span><br><span class="line"></span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line"></span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chart_view</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stack_bar_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QStackedBarSeries()</span><br><span class="line"></span><br><span class="line">        set0 = QBarSet(<span class="string">&quot;Jane&quot;</span>)</span><br><span class="line">        set1 = QBarSet(<span class="string">&quot;John&quot;</span>)</span><br><span class="line">        set2 = QBarSet(<span class="string">&quot;Axel&quot;</span>)</span><br><span class="line"></span><br><span class="line">        set0 &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">6</span></span><br><span class="line">        set1 &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">        set2 &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">13</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        series.append(set0)</span><br><span class="line">        series.append(set1)</span><br><span class="line">        series.append(set2)</span><br><span class="line"></span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Stacked Bar Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line"></span><br><span class="line">        categories = [<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Apr&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;Jun&quot;</span>]</span><br><span class="line">        axis = QBarCategoryAxis()</span><br><span class="line">        axis.append(categories)</span><br><span class="line">        chart.createDefaultAxes()</span><br><span class="line">        chart.addAxis(axis, Qt.AlignmentFlag.AlignBottom)</span><br><span class="line"></span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line"></span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chart_view</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pie_chart</span>(<span class="params">self</span>):</span><br><span class="line">        series = QPieSeries()</span><br><span class="line"></span><br><span class="line">        slice0 = QPieSlice(<span class="string">&quot;Jane&quot;</span>, <span class="number">10</span>)</span><br><span class="line">        slice0.setExploded()</span><br><span class="line">        slice0.setLabelVisible()</span><br><span class="line"></span><br><span class="line">        slice1 = QPieSlice(<span class="string">&quot;John&quot;</span>, <span class="number">5</span>)</span><br><span class="line">        slice1.setLabelVisible()</span><br><span class="line"></span><br><span class="line">        slice2 = QPieSlice(<span class="string">&quot;Axel&quot;</span>, <span class="number">30</span>)</span><br><span class="line">        slice2.setLabelVisible()</span><br><span class="line"></span><br><span class="line">        slice3 = QPieSlice(<span class="string">&quot;Mary&quot;</span>, <span class="number">50</span>)</span><br><span class="line">        slice3.setLabelVisible()</span><br><span class="line"></span><br><span class="line">        series.append(slice0)</span><br><span class="line">        series.append(slice1)</span><br><span class="line">        series.append(slice2)</span><br><span class="line">        series.append(slice3)</span><br><span class="line"></span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Pie Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line"></span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line"></span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chart_view</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h3 id="混合图表">混合图表</h3>
<blockquote>
<p>案例</p>
</blockquote>
<p>这个案例，我将 <code>QLineSeries</code> 和 <code>QBarSeries</code> 混合在了一起。</p>
<p>完整代码如下：</p>
<details>
<summary>点击查看</summary>
<p>创建文件 <code>MixedCharts.py</code>，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtCharts <span class="keyword">import</span> QLineSeries, QChart, QChartView, QBarSeries, QBarSet, QBarCategoryAxis</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QPointF, Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">700</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PyQt6 Mixed Charts&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.mixed_charts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mixed_charts</span>(<span class="params">self</span>):</span><br><span class="line">        series = QLineSeries()</span><br><span class="line"></span><br><span class="line">        series.append([</span><br><span class="line">            QPointF(<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            QPointF(<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">            QPointF(<span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line">            QPointF(<span class="number">4</span>, <span class="number">8</span>),</span><br><span class="line">            QPointF(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">            QPointF(<span class="number">7</span>, <span class="number">16</span>),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        chart = QChart()</span><br><span class="line">        chart.addSeries(series)</span><br><span class="line"></span><br><span class="line">        series2 = QBarSeries()</span><br><span class="line"></span><br><span class="line">        set0 = QBarSet(<span class="string">&quot;Jane&quot;</span>)</span><br><span class="line">        set1 = QBarSet(<span class="string">&quot;John&quot;</span>)</span><br><span class="line">        set2 = QBarSet(<span class="string">&quot;Axel&quot;</span>)</span><br><span class="line"></span><br><span class="line">        set0 &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">6</span></span><br><span class="line">        set1 &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">        set2 &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">13</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        series2.append(set0)</span><br><span class="line">        series2.append(set1)</span><br><span class="line">        series2.append(set2)</span><br><span class="line"></span><br><span class="line">        chart.addSeries(series2)</span><br><span class="line">        chart.setTitle(<span class="string">&quot;Mixed Chart Example&quot;</span>)</span><br><span class="line">        chart.setAnimationOptions(QChart.AnimationOption.SeriesAnimations)</span><br><span class="line"></span><br><span class="line">        categories = [<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Apr&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;Jun&quot;</span>]</span><br><span class="line">        axis = QBarCategoryAxis()</span><br><span class="line">        axis.append(categories)</span><br><span class="line">        chart.createDefaultAxes()</span><br><span class="line">        <span class="comment"># chart.setAxisX(axis, series)</span></span><br><span class="line"></span><br><span class="line">        chart.legend().setVisible(<span class="literal">True</span>)</span><br><span class="line">        chart.legend().setAlignment(Qt.AlignmentFlag.AlignBottom)</span><br><span class="line"></span><br><span class="line">        chart_view = QChartView(chart)</span><br><span class="line">        chart_view.setRenderHint(QPainter.RenderHint.Antialiasing)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(chart_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第十五篇</title>
    <url>/2023/08/17/1/</url>
    <content><![CDATA[<h2 id="基于-PyQt6-的-图书馆管理系统">基于 PyQt6 的 图书馆管理系统</h2>
<p>这篇文章主要是对前面所学的知识进行一个综合性的运用，所以这篇文章的内容会比较多。</p>
<p>我将要做的是一个图书馆管理系统，这个系统主要是对图书馆的图书进行管理，包括图书的增删改查，以及对图书的借阅和归还。</p>
<h3 id="利用-QtDesigner-页面设计">利用 QtDesigner 页面设计</h3>
<p>首先我们需要设计一个页面，这个页面主要是用来显示图书馆的主要信息，包括图书的名称，作者，出版社，出版日期，图书的数量，图书的借阅状态等等。</p>
<p>其次添加一些按钮，用来实现对图书的增删改查，以及对图书的借阅和归还，还有账号的管理</p>
<h3 id="对按钮绑定事件">对按钮绑定事件</h3>
<p>我们需要对按钮进行绑定事件，这样才能实现对图书的增删改查，以及对图书的借阅和归还，还有账号的管理</p>
<h3 id="数据库的设计">数据库的设计</h3>
<p>我们需要设计一个数据库，用来存储图书馆的信息，包括图书的名称，作者，出版社，出版日期，图书的数量，图书的借阅状态等等。</p>
<h3 id="数据库的连接">数据库的连接</h3>
<p>我们需要对数据库进行连接，这样才能实现对图书的增删改查，以及对图书的借阅和归还，还有账号的管理</p>
<h3 id="细节的处理">细节的处理</h3>
<p>我们需要对一些细节进行处理，比如登录登出，关闭事件，以及一些提示信息的显示等等。</p>
<h2 id="开放源代码">开放源代码</h2>
<p>通过 GitHub 仓库进行开放源代码，欢迎大家进行学习和交流。</p>
<blockquote>
<p>项目地址</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvTExpYnJhcnktSW5mb3JtYXRpb24tTWFuYWdlbWVudC1TeXN0ZW0=">LLibrary-Information-Management-System<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>项目克隆</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:Yuzhii0718/LLibrary-Information-Management-System.git</span><br></pre></td></tr></table></figure>
<h2 id="项目截图">项目截图</h2>
<p><img src="https://github.com/Yuzhii0718/LLibrary-Information-Management-System/raw/master/src/doc/images/1.png" alt><br>
<img src="https://github.com/Yuzhii0718/LLibrary-Information-Management-System/raw/master/src/doc/images/2.png" alt><br>
<img src="https://github.com/Yuzhii0718/LLibrary-Information-Management-System/raw/master/src/doc/images/3.png" alt><br>
<img src="https://github.com/Yuzhii0718/LLibrary-Information-Management-System/raw/master/src/doc/images/4.png" alt><br>
<img src="https://github.com/Yuzhii0718/LLibrary-Information-Management-System/raw/master/src/doc/images/5.png" alt></p>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第二篇</title>
    <url>/2023/07/24/1/</url>
    <content><![CDATA[<h2 id="QLabel">QLabel</h2>
<p>QLabel 是一个用于显示文本或图像的组件，它可以显示纯文本、超链接、图像、HTML文档等。</p>
<blockquote>
<p>QLabel 案例</p>
</blockquote>
<p>项目根目录下创建 PartTwo 文件夹，导入素材，创建 <code>QLabelDemo.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QColor, QPixmap, QMovie, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLabelDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QLabel 案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        label1 = QLabel(<span class="string">&#x27;这是一个文本标签&#x27;</span>)</span><br><span class="line">        label1.setText(<span class="string">&#x27;这是一个文本标签&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置文本标签的字体和大小</span></span><br><span class="line">        label1.setFont(QFont(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">        <span class="comment"># 设置文本标签的对齐方式</span></span><br><span class="line">        label1.setAutoFillBackground(<span class="literal">True</span>)</span><br><span class="line">        palette = label1.palette()</span><br><span class="line">        <span class="comment"># 设置文本标签的背景颜色</span></span><br><span class="line">        palette.setColor(label1.backgroundRole(), QColor(<span class="number">192</span>, <span class="number">253</span>, <span class="number">123</span>))</span><br><span class="line">        label1.setPalette(palette)</span><br><span class="line">        label1.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line"></span><br><span class="line">        label2 = QLabel(<span class="string">&#x27;这是一个超链接标签&#x27;</span>)</span><br><span class="line">        label2.setText(<span class="string">&#x27;&lt;a href=&quot;//www.baidu.com&quot;&gt;这是一个超链接标签&lt;/a&gt;&#x27;</span>)</span><br><span class="line">        <span class="comment">#  让超链接在点击后打开默认浏览器</span></span><br><span class="line">        label2.setOpenExternalLinks(<span class="literal">True</span>)</span><br><span class="line">        label2.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line"></span><br><span class="line">        label3 = QLabel(<span class="string">&#x27;这是一个图片标签&#x27;</span>)</span><br><span class="line">        label3.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line">        label3.setPixmap(QPixmap(<span class="string">&#x27;./images/python.png&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        label4 = QLabel(<span class="string">&#x27;这是一个动图标签&#x27;</span>)</span><br><span class="line">        label4.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line">        label4.setMovie(QMovie(<span class="string">&#x27;./images/动图.gif&#x27;</span>))</span><br><span class="line">        <span class="comment"># 设置动图标签的大小</span></span><br><span class="line">        label4.setScaledContents(<span class="literal">True</span>)</span><br><span class="line">        label4.setFixedSize(<span class="number">360</span>, <span class="number">200</span>)</span><br><span class="line">        <span class="comment"># 设置播放速度</span></span><br><span class="line">        label4.movie().setSpeed(<span class="number">200</span>)</span><br><span class="line">        label4.movie().start()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 垂直布局</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addWidget(label2)</span><br><span class="line">        vbox.addWidget(label3)</span><br><span class="line">        vbox.addWidget(label4)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口的布局</span></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QLabelDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果：<br>
<img src="./PyQt6-2/images/Qlabel.png" alt></p>
<h2 id="QPushButtton">QPushButtton</h2>
<p>QPushButton 是一个按钮组件，它可以包含文本或图标。</p>
<blockquote>
<p>QPushButton 案例</p>
</blockquote>
<p>创建 <code>QPushButtonDemo.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QSize</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QFont, QIcon</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QMenu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_click</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;按钮被点击了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QPushButton 案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.create_button()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_button</span>(<span class="params">self</span>):</span><br><span class="line">        button = QPushButton(<span class="string">&#x27;按钮&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        button.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        button.move(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="comment"># 粗体按钮</span></span><br><span class="line">        button.setFont(QFont(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>, QFont.Weight.ExtraBold))</span><br><span class="line">        <span class="comment"># 小图标</span></span><br><span class="line">        button.setIcon(QIcon(<span class="string">&#x27;./images/python.png&#x27;</span>))</span><br><span class="line">        button.setIconSize(QSize(<span class="number">36</span>, <span class="number">36</span>))</span><br><span class="line">        <span class="comment"># 连接 on_click 函数</span></span><br><span class="line">        <span class="comment"># button.clicked.connect(on_click)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建菜单</span></span><br><span class="line">        menu = QMenu()</span><br><span class="line">        menu.addAction(<span class="string">&#x27;菜单项1&#x27;</span>)</span><br><span class="line">        menu.addAction(<span class="string">&#x27;菜单项2&#x27;</span>)</span><br><span class="line">        menu.addAction(<span class="string">&#x27;菜单项3&#x27;</span>)</span><br><span class="line">        <span class="comment"># 连接 on_click 函数</span></span><br><span class="line">        menu.triggered.connect(on_click)</span><br><span class="line">        button.setMenu(menu)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果：<br>
<img src="./PyQt6-2/images/QPushButton.png" alt></p>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第四篇</title>
    <url>/2023/07/27/1/</url>
    <content><![CDATA[<h2 id="QRadioButton">QRadioButton</h2>
<p>QRadioButton 单选按钮控件</p>
<blockquote>
<p>QRadioButton 案例</p>
</blockquote>
<p>创建 <code>QRadioButtonDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QSize</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QWidget,</span><br><span class="line">    QRadioButton,</span><br><span class="line">    QLabel,</span><br><span class="line">    QHBoxLayout,</span><br><span class="line">    QVBoxLayout,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QRadioButtonDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QLabel(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.radio_button3 = QRadioButton(<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.radio_button2 = QRadioButton(<span class="string">&quot;Java&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_1 = QLabel(<span class="string">&quot;请选择你喜欢的编程语言&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.radio_button1 = QRadioButton(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QRadioButton 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label_1.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.radio_button1.setIcon(QIcon(<span class="string">&quot;./images/python.png&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radio_button1.setIconSize(QSize(<span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radio_button1.setChecked(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.radio_button2.setIcon(QIcon(<span class="string">&quot;./images/java.svg&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radio_button2.setFont(QFont(<span class="string">&quot;Times&quot;</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.radio_button3.setIcon(QIcon(<span class="string">&quot;./images/cpp.svg&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.radio_button1.toggled.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="variable language_">self</span>.radio_button2.toggled.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="variable language_">self</span>.radio_button3.toggled.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line"></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.radio_button1)</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.radio_button2)</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.radio_button3)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(<span class="variable language_">self</span>.label_1)</span><br><span class="line">        vbox.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line">        vbox.addLayout(hbox)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">radio_selected</span>(<span class="params">self</span>):</span><br><span class="line">        radio_btn = <span class="variable language_">self</span>.sender()</span><br><span class="line">        <span class="keyword">if</span> radio_btn.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;你选择了 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(radio_btn.text()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QRadioButtonDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Grouping-QRadioButton">Grouping QRadioButton</h2>
<p>使用 QtDesigner 设计并创建 <code>QRadioButtonGrouping.ui</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyuic6 -x QRadioButtonGrouping.ui -o QRadioButtonGrouping.py</span><br></pre></td></tr></table></figure>
<p><code>QRadioButtonGrouping.py</code> 文件</p>
<details>
<summary>完整代码</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;QRadioButtonGrouping.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt6 UI code generator 6.4.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic6 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Dialog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Dialog</span>):</span><br><span class="line">        Dialog.setObjectName(<span class="string">&quot;Dialog&quot;</span>)</span><br><span class="line">        Dialog.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label = QtWidgets.QLabel(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.label.setGeometry(QtCore.QRect(<span class="number">9</span>, <span class="number">9</span>, <span class="number">133</span>, <span class="number">25</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">14</span>)</span><br><span class="line">        font.setBold(<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label.setStyleSheet(<span class="string">&quot;QLabel &#123;\n&quot;</span></span><br><span class="line"><span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;    color:purple\n&quot;</span></span><br><span class="line"><span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QtWidgets.QLabel(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setGeometry(QtCore.QRect(<span class="number">9</span>, <span class="number">132</span>, <span class="number">76</span>, <span class="number">25</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">14</span>)</span><br><span class="line">        font.setBold(<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setStyleSheet(<span class="string">&quot;QLabel &#123;\n&quot;</span></span><br><span class="line"><span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;    color:purple\n&quot;</span></span><br><span class="line"><span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setObjectName(<span class="string">&quot;label_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_3 = QtWidgets.QLabel(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setGeometry(QtCore.QRect(<span class="number">9</span>, <span class="number">254</span>, <span class="number">382</span>, <span class="number">37</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setStyleSheet(<span class="string">&quot;QLabel &#123;\n&quot;</span></span><br><span class="line"><span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;    color:purple\n&quot;</span></span><br><span class="line"><span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setText(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setObjectName(<span class="string">&quot;label_3&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.widget = QtWidgets.QWidget(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.widget.setGeometry(QtCore.QRect(<span class="number">9</span>, <span class="number">52</span>, <span class="number">90</span>, <span class="number">74</span>))</span><br><span class="line">        <span class="variable language_">self</span>.widget.setObjectName(<span class="string">&quot;widget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>.widget)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_py = QtWidgets.QRadioButton(parent=<span class="variable language_">self</span>.widget)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_py.setObjectName(<span class="string">&quot;radioButton_py&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.radioButton_py)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_java = QtWidgets.QRadioButton(parent=<span class="variable language_">self</span>.widget)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_java.setObjectName(<span class="string">&quot;radioButton_java&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.radioButton_java)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_cpp = QtWidgets.QRadioButton(parent=<span class="variable language_">self</span>.widget)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_cpp.setObjectName(<span class="string">&quot;radioButton_cpp&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.radioButton_cpp)</span><br><span class="line">        <span class="variable language_">self</span>.widget1 = QtWidgets.QWidget(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.widget1.setGeometry(QtCore.QRect(<span class="number">9</span>, <span class="number">174</span>, <span class="number">63</span>, <span class="number">74</span>))</span><br><span class="line">        <span class="variable language_">self</span>.widget1.setObjectName(<span class="string">&quot;widget1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2 = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>.widget1)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.setObjectName(<span class="string">&quot;verticalLayout_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_wechat = QtWidgets.QRadioButton(parent=<span class="variable language_">self</span>.widget1)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_wechat.setObjectName(<span class="string">&quot;radioButton_wechat&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.addWidget(<span class="variable language_">self</span>.radioButton_wechat)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_alipay = QtWidgets.QRadioButton(parent=<span class="variable language_">self</span>.widget1)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_alipay.setObjectName(<span class="string">&quot;radioButton_alipay&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.addWidget(<span class="variable language_">self</span>.radioButton_alipay)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_paypal = QtWidgets.QRadioButton(parent=<span class="variable language_">self</span>.widget1)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_paypal.setObjectName(<span class="string">&quot;radioButton_paypal&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.addWidget(<span class="variable language_">self</span>.radioButton_paypal)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ++++++ 自定义 开始 ++++++</span></span><br><span class="line">        <span class="variable language_">self</span>.radioButton_py.clicked.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_java.clicked.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_cpp.clicked.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_wechat.clicked.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_alipay.clicked.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_paypal.clicked.connect(<span class="variable language_">self</span>.radio_selected)</span><br><span class="line">        <span class="comment"># ++++++ 自定义 结束 ++++++</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(Dialog)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Dialog)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, Dialog</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Dialog.setWindowTitle(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;Dialog&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;选择想要看的书&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;付款方式&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_py.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;Python 教程&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_java.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;Java 教程&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_cpp.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;C++ 教程&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_wechat.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;微信&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_alipay.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;支付宝&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.radioButton_paypal.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;Paypal&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ++++++ 自定义 开始 ++++++</span></span><br><span class="line">    <span class="comment"># 槽与信号</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">radio_selected</span>(<span class="params">self</span>):</span><br><span class="line">        selected_book = <span class="string">&quot;&quot;</span></span><br><span class="line">        selected_pay = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.radioButton_py.isChecked():</span><br><span class="line">            selected_book = <span class="string">&quot;Python 教程&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.radioButton_java.isChecked():</span><br><span class="line">            selected_book = <span class="string">&quot;Java 教程&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.radioButton_cpp.isChecked():</span><br><span class="line">            selected_book = <span class="string">&quot;C++ 教程&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.radioButton_wechat.isChecked():</span><br><span class="line">            selected_pay = <span class="string">&quot;微信&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.radioButton_alipay.isChecked():</span><br><span class="line">            selected_pay = <span class="string">&quot;支付宝&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.radioButton_paypal.isChecked():</span><br><span class="line">            selected_pay = <span class="string">&quot;Paypal&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.label_3.setText(<span class="string">&quot;您选择的书是：&#123;&#125;，付款方式是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(selected_book, selected_pay))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ++++++ 自定义 结束 ++++++</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    Dialog = QtWidgets.QDialog()</span><br><span class="line">    ui = Ui_Dialog()</span><br><span class="line">    ui.setupUi(Dialog)</span><br><span class="line">    Dialog.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>效果图<br>
<img src="./QRadioButton.png" alt></p>
<p><img src="./QRadioButtonAfter.jpg" alt></p>
<h2 id="今日感想">今日感想</h2>
<p>怎么说呢，学习、使用 PyQt6， 基本上是在敲代码，解决编辑器提示的错误和警告，解决各种因为自己的疏忽导致的错误，然后就是这样学起来非常耗费时间，课程约是一个课时，我却花费了约是两个小时学习，但是也是很有成就感的，毕竟自己敲出来的代码，自己解决的问题，自己的成就感是最大的。</p>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第三篇</title>
    <url>/2023/07/25/1/</url>
    <content><![CDATA[<h2 id="QLineEdit">QLineEdit</h2>
<p>QLineEdit 是一个单行文本输入框组件，它允许用户输入和编辑单行纯文本。</p>
<blockquote>
<p>QLineEdit 案例</p>
</blockquote>
<p>创建 <code>QLineEditDemo.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QLineEdit, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLineEditDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QLineEdit 案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        label1 = QLabel(<span class="string">&#x27;只读文本框&#x27;</span>)</span><br><span class="line">        label1.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line">        label2 = QLabel(<span class="string">&#x27;密码文本框&#x27;</span>)</span><br><span class="line">        label2.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line">        label3 = QLabel(<span class="string">&#x27;普通文本框&#x27;</span>)</span><br><span class="line">        label3.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line"></span><br><span class="line">        line_edit1 = QLineEdit(<span class="string">&#x27;只读文本框&#x27;</span>)</span><br><span class="line">        line_edit1.setReadOnly(<span class="literal">True</span>)</span><br><span class="line">        line_edit2 = QLineEdit(<span class="string">&#x27;密码文本框&#x27;</span>)</span><br><span class="line">        line_edit2.setEchoMode(QLineEdit.EchoMode.Password)</span><br><span class="line">        line_edit3 = QLineEdit(<span class="string">&#x27;普通文本框&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addWidget(line_edit1)</span><br><span class="line">        vbox.addWidget(label2)</span><br><span class="line">        vbox.addWidget(line_edit2)</span><br><span class="line">        vbox.addWidget(label3)</span><br><span class="line">        vbox.addWidget(line_edit3)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QLineEditDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Layout-Management">Layout Management</h2>
<p>QHBoxLayou、QVBoxLayout、QGridLayout 是三种常用的布局方式，它们分别是水平布局、垂直布局和网格布局。</p>
<blockquote>
<p>QHBoxLayou 案例</p>
</blockquote>
<p>创建 <code>QHBoxLayoutDemo.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QLineEdit, QHBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QHBoxLayoutDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QHBoxLayout 案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        label1 = QLabel(<span class="string">&#x27;用户名：&#x27;</span>)</span><br><span class="line">        label2 = QLabel(<span class="string">&#x27;密码：&#x27;</span>)</span><br><span class="line">        line_edit1 = QLineEdit()</span><br><span class="line">        line_edit2 = QLineEdit()</span><br><span class="line"></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        hbox.addWidget(label1)</span><br><span class="line">        hbox.addWidget(line_edit1)</span><br><span class="line">        hbox.addWidget(label2)</span><br><span class="line">        hbox.addWidget(line_edit2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(hbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QHBoxLayoutDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>QVBoxLayout 案例</p>
</blockquote>
<p>创建 <code>QVBoxLayoutDemo.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QLineEdit, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QVBoxLayoutDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QVBoxLayout 案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        label1 = QLabel(<span class="string">&#x27;用户名：&#x27;</span>)</span><br><span class="line">        label2 = QLabel(<span class="string">&#x27;密码：&#x27;</span>)</span><br><span class="line">        line_edit1 = QLineEdit()</span><br><span class="line">        line_edit2 = QLineEdit()</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addWidget(line_edit1)</span><br><span class="line">        vbox.addWidget(label2)</span><br><span class="line">        vbox.addWidget(line_edit2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QVBoxLayoutDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>QGridLayout 案例</p>
</blockquote>
<p>创建 <code>QGridLayoutDemo.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QLineEdit, QGridLayout, QPushButton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QGridLayoutDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QGridLayout 案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        label1 = QLabel(<span class="string">&#x27;用户名：&#x27;</span>)</span><br><span class="line">        label2 = QLabel(<span class="string">&#x27;密码：&#x27;</span>)</span><br><span class="line">        line_edit1 = QLineEdit()</span><br><span class="line">        line_edit2 = QLineEdit()</span><br><span class="line">        button1 = QPushButton(<span class="string">&#x27;登录&#x27;</span>)</span><br><span class="line">        button2 = QPushButton(<span class="string">&#x27;退出&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.addWidget(label1, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(line_edit1, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        grid.addWidget(label2, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(line_edit2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        grid.addWidget(button1, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(button2, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(grid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QGridLayoutDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果如下：<br>
<img src="./LayoutManagement.png" alt></p>
<h2 id="Event-Handling">Event Handling</h2>
<p>事件处理是 GUI 编程中的重要内容，PyQt6 为我们提供了丰富的事件处理机制。</p>
<p>信号和槽是 PyQt6 中的一种机制，它用于对象间的通信。当一个对象的状态发生改变时，它发出信号，其他对象接收到信号后，执行槽函数。</p>
<blockquote>
<p>信号和槽案例</p>
</blockquote>
<p>创建 <code>SignalSlotDemo.py</code> 文件，编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QLineEdit, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SignalSlotDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;信号和槽案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        label1 = QLabel(<span class="string">&#x27;输入文本：&#x27;</span>)</span><br><span class="line">        label2 = QLabel(<span class="string">&#x27;输出文本：&#x27;</span>)</span><br><span class="line">        line_edit1 = QLineEdit()</span><br><span class="line">        line_edit2 = QLineEdit()</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addWidget(line_edit1)</span><br><span class="line">        vbox.addWidget(label2)</span><br><span class="line">        vbox.addWidget(line_edit2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 信号和槽的连接</span></span><br><span class="line">        line_edit1.textChanged.connect(line_edit2.setText)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = SignalSlotDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当然，我们也可以使用 Qt Designer 设计 信号和槽</p>
<p>设计完成后，我们需要将 <code>.ui</code> 文件转换为 <code>.py</code> 文件，使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyuic6 -x SignalSlotDemo.ui -o SignalSlotDemo.py</span><br></pre></td></tr></table></figure>
<h2 id="实践：简单计算器">实践：简单计算器</h2>
<p>我们使用 PyQt6 实现一个简单的计算器，实现加减乘除四则运算。</p>
<p>使用 Qt Designer 设计界面。两个输入框，四个按钮，一个标签。</p>
<p>保存为 <code>Calculator.ui</code> 文件，使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyuic6 -x calculator.ui -o calculator.py</span><br></pre></td></tr></table></figure>
<p>修改 <code>calculator.py</code> 文件，主要是添加信号和槽。编写 加减乘除 的逻辑代码。</p>
<p>将代码添加在 <code>class Ui_Form(object):</code> 类中，添加的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写四个函数，分别实现加减乘除四个功能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) + <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">minus</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) - <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mult</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) * <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) / <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 连接信号与槽</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.pushButton_add.clicked.connect(add)</span><br><span class="line">    <span class="variable language_">self</span>.pushButton_minus.clicked.connect(minus)</span><br><span class="line">    <span class="variable language_">self</span>.pushButton_mult.clicked.connect(mult)</span><br><span class="line">    <span class="variable language_">self</span>.pushButton_divide.clicked.connect(divide)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>完整的代码如下：</p>
<details>
<summary>calculator.py</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;calculator.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt6 UI code generator 6.4.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic6 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是一个简单的计算器应用，两个输入框，实现了加减乘除四个功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        Form.setObjectName(<span class="string">&quot;Form&quot;</span>)</span><br><span class="line">        Form.resize(<span class="number">450</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2 = QtWidgets.QVBoxLayout(Form)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.setObjectName(<span class="string">&quot;verticalLayout_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout = QtWidgets.QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout = QtWidgets.QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.setObjectName(<span class="string">&quot;horizontalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_1 = QtWidgets.QLabel(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">15</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_1.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label_1.setObjectName(<span class="string">&quot;label_1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addWidget(<span class="variable language_">self</span>.label_1)</span><br><span class="line">        spacerItem = QtWidgets.QSpacerItem(<span class="number">40</span>, <span class="number">20</span>, QtWidgets.QSizePolicy.Policy.Expanding,</span><br><span class="line">                                           QtWidgets.QSizePolicy.Policy.Minimum)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addItem(spacerItem)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_1 = QtWidgets.QLineEdit(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">12</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_1.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_1.setObjectName(<span class="string">&quot;lineEdit_1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addWidget(<span class="variable language_">self</span>.lineEdit_1)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addLayout(<span class="variable language_">self</span>.horizontalLayout)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_2 = QtWidgets.QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_2.setObjectName(<span class="string">&quot;horizontalLayout_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QtWidgets.QLabel(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">15</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setObjectName(<span class="string">&quot;label_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_2.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line">        spacerItem1 = QtWidgets.QSpacerItem(<span class="number">40</span>, <span class="number">20</span>, QtWidgets.QSizePolicy.Policy.Expanding,</span><br><span class="line">                                            QtWidgets.QSizePolicy.Policy.Minimum)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_2.addItem(spacerItem1)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_2 = QtWidgets.QLineEdit(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">12</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_2.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_2.setObjectName(<span class="string">&quot;lineEdit_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_2.addWidget(<span class="variable language_">self</span>.lineEdit_2)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addLayout(<span class="variable language_">self</span>.horizontalLayout_2)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.addLayout(<span class="variable language_">self</span>.verticalLayout)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_3 = QtWidgets.QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_3.setObjectName(<span class="string">&quot;horizontalLayout_3&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">18</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add.setObjectName(<span class="string">&quot;pushButton_add&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_3.addWidget(<span class="variable language_">self</span>.pushButton_add)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_minus = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">18</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_minus.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_minus.setObjectName(<span class="string">&quot;pushButton_minus&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_3.addWidget(<span class="variable language_">self</span>.pushButton_minus)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_mult = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">18</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_mult.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_mult.setObjectName(<span class="string">&quot;pushButton_mult&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_3.addWidget(<span class="variable language_">self</span>.pushButton_mult)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_divide = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">18</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_divide.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_divide.setObjectName(<span class="string">&quot;pushButton_divide&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout_3.addWidget(<span class="variable language_">self</span>.pushButton_divide)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.addLayout(<span class="variable language_">self</span>.horizontalLayout_3)</span><br><span class="line">        <span class="variable language_">self</span>.label_result = QtWidgets.QLabel(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">14</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setStyleSheet(<span class="string">&quot;QLabel &#123;\n&quot;</span></span><br><span class="line">                                        <span class="string">&quot;color: green;\n&quot;</span></span><br><span class="line">                                        <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setObjectName(<span class="string">&quot;label_result&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout_2.addWidget(<span class="variable language_">self</span>.label_result)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># ++++ 添加的代码 开始 ++++</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编写四个函数，分别实现加减乘除四个功能</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) + <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">minus</span>():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) - <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">mult</span>():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) * <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">divide</span>():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_1.text()) / <span class="built_in">float</span>(<span class="variable language_">self</span>.lineEdit_2.text())</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="built_in">str</span>(result))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="variable language_">self</span>.label_result.setText(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接信号与槽</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add.clicked.connect(add)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_minus.clicked.connect(minus)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_mult.clicked.connect(mult)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_divide.clicked.connect(divide)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ++++ 添加的代码 结束 ++++</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Form&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_1.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;第一个数字&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_1.setPlaceholderText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;请输入第一个数字&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;第二个数字&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_2.setPlaceholderText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;请输入第二个数字&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;+&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_minus.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_mult.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;x&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_divide.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;/&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_result.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;结果&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    Form = QtWidgets.QWidget()</span><br><span class="line">    ui = Ui_Form()</span><br><span class="line">    ui.setupUi(Form)</span><br><span class="line">    Form.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>效果如下：<br>
<img src="./Calculator.png" alt></p>
<details>
<summary>整活</summary>
<h2 id="整活">整活</h2>
<p>恩情模式</p>
<p><s>将军的恩情报不完😓😵</s></p>
<style>
# box1 {
    width: 80%;
    height: 100px;
    background-color: white;
    border: 5px solid #00bcd4;
    border-radius: 50px;
    padding: 8px 12px;
    margin-bottom: 20px;
    text-align: center;
    line-height: 30px;
    margin: 0 auto;
    text-decoration: none;
}
# box2 {
    width: 20%;
    height: 20%;
    background-color: #f5f5f5;
    border: 2px solid #000000;
    border-radius: 50px;
    padding: 8px 12px;
    text-align: center;
    line-height: 50px;
    margin: 0 auto;
    position: relative;
    text-decoration: none;
}
# box2 a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    line-height: 35px;
    text-decoration: none;
}
# box2 a:hover {
    background-color: #ff4081;
    color: white;
    border: 0 solid #000000;
    border-radius: 50px;
    text-align: center;
    text-decoration: none;
}
</style>
<div id="box1">
<span style="text-align: center; color:black;">GratitudeMode.7z</span>
<br>
<span style="text-align: center; color:black;">3.16 MB (3,318,867 字节)</span>
<br>
<div id="box2">
<a href="./GratitudeMode.7z" data-pjax-state="load" download="GratitudeMode.7z">点击下载</a>
</div>
<br>
<div hidden="until-found">
<span>解压密码：</span>
<span hidden="until-found">A5508408135C854CF155735DA5F3542E</span>
</div>
</div>
</details>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第五篇</title>
    <url>/2023/08/02/1/</url>
    <content><![CDATA[<h2 id="QCheckBox">QCheckBox</h2>
<p>QCheckBox 复选框控件，可以选择或取消选择</p>
<blockquote>
<p>QCheckBox 案例</p>
</blockquote>
<p>创建 <code>QCheckBoxDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QSize</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QWidget,</span><br><span class="line">    QCheckBox,</span><br><span class="line">    QLabel,</span><br><span class="line">    QHBoxLayout,</span><br><span class="line">    QVBoxLayout,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QCheckBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QLabel(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.check_box3 = QCheckBox(<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.check_box2 = QCheckBox(<span class="string">&quot;Java&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_1 = QLabel(<span class="string">&quot;请选择你喜欢的编程语言&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.check_box1 = QCheckBox(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QCheckBox 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label_1.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.check_box1.setIcon(QIcon(<span class="string">&quot;./images/python.png&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.check_box1.setIconSize(QSize(<span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">        <span class="variable language_">self</span>.check_box1.setChecked(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.check_box2.setIcon(QIcon(<span class="string">&quot;./images/java.svg&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.check_box2.setFont(QFont(<span class="string">&quot;Times&quot;</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.check_box3.setIcon(QIcon(<span class="string">&quot;./images/cpp.svg&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.check_box1.stateChanged.connect(<span class="variable language_">self</span>.check_box_selected)</span><br><span class="line">        <span class="variable language_">self</span>.check_box2.stateChanged.connect(<span class="variable language_">self</span>.check_box_selected)</span><br><span class="line">        <span class="variable language_">self</span>.check_box3.stateChanged.connect(<span class="variable language_">self</span>.check_box_selected)</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.check_box1)</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.check_box2)</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.check_box3)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_1)</span><br><span class="line">        v_layout.addLayout(h_layout)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_box_selected</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.check_box1.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;你选择了 Python&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.check_box2.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;你选择了 Java&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.check_box3.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;你选择了 C++&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QCheckBoxDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，我们复用了 <code>QRadioButtonDemo.py</code> 文件中的代码，只是将 QRadioButton 换成了 QCheckBox。</p>
<h2 id="QSpinBox">QSpinBox</h2>
<p>QSpinBox 数字框控件，可以输入数字</p>
<blockquote>
<p>QSpinBox 案例</p>
</blockquote>
<p>创建 <code>QSpinBoxDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QWidget,</span><br><span class="line">    QSpinBox,</span><br><span class="line">    QLabel,</span><br><span class="line">    QHBoxLayout,</span><br><span class="line">    QVBoxLayout, QLineEdit,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QSpinBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&quot;计算机价格计算器&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QLabel(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.line_edit = QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.spin_box = QSpinBox()</span><br><span class="line">        <span class="variable language_">self</span>.label_1 = QLabel(<span class="string">&quot;输入价格与数量&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QSpinBox 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setRange(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setValue(<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setSingleStep(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.valueChanged.connect(<span class="variable language_">self</span>.spin_box_selected)</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.line_edit)</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.spin_box)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_1)</span><br><span class="line">        v_layout.addLayout(h_layout)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spin_box_selected</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.line_edit.text() != <span class="number">0</span>:</span><br><span class="line">            price = <span class="built_in">int</span>(<span class="variable language_">self</span>.line_edit.text())</span><br><span class="line">            number = <span class="variable language_">self</span>.spin_box.value()</span><br><span class="line">            total_price = price * number</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">f&quot;总价为：<span class="subst">&#123;total_price&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;请输入价格&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QSpinBoxDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="QDoubleSpinBox">QDoubleSpinBox</h3>
<p>QDoubleSpinBox 浮点数框控件，可以输入浮点数</p>
<blockquote>
<p>QDoubleSpinBox 案例</p>
</blockquote>
<details>
<summary>点击展开代码</summary>
<p>创建 <code>QDoubleSpinBoxDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QWidget,</span><br><span class="line">    QDoubleSpinBox,</span><br><span class="line">    QLabel,</span><br><span class="line">    QHBoxLayout,</span><br><span class="line">    QVBoxLayout, QLineEdit,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QDoubleSpinBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&quot;计算机价格计算器&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QLabel(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.line_edit = QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box = QDoubleSpinBox()</span><br><span class="line">        <span class="variable language_">self</span>.label_1 = QLabel(<span class="string">&quot;输入价格与数量&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QDoubleSpinBox 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.setRange(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.setValue(<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.setSingleStep(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.valueChanged.connect(<span class="variable language_">self</span>.double_spin_box_selected)</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.line_edit)</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.double_spin_box)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_1)</span><br><span class="line">        v_layout.addLayout(h_layout)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">double_spin_box_selected</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.line_edit.text() != <span class="number">0</span>:</span><br><span class="line">            price = <span class="built_in">float</span>(<span class="variable language_">self</span>.line_edit.text())</span><br><span class="line">            number = <span class="variable language_">self</span>.double_spin_box.value()</span><br><span class="line">            total_price = price * number</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">f&quot;总价为：<span class="subst">&#123;total_price&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;请输入价格&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QDoubleSpinBoxDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>可以看到，我们复用了 <code>QSpinBoxDemo.py</code> 文件中的代码，只是将 QSpinBox 换成了 QDoubleSpinBox。</p>
<h3 id="QSpinBox-EditingFinished-信号">QSpinBox EditingFinished() 信号</h3>
<p>QSpinBox EditingFinished() 信号，当 QSpinBox 编辑完成时，会触发该信号</p>
<blockquote>
<p>QSpinBox EditingFinished() 信号案例</p>
</blockquote>
<details>
<summary>点击展开代码</summary>
<p>创建 <code>QSpinBoxEditingFinishedDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QWidget,</span><br><span class="line">    QSpinBox,</span><br><span class="line">    QLabel,</span><br><span class="line">    QHBoxLayout,</span><br><span class="line">    QVBoxLayout, QLineEdit,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QSpinBoxEditingFinishedDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&quot;计算机价格计算器&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QLabel(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.line_edit = QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.spin_box = QSpinBox()</span><br><span class="line">        <span class="variable language_">self</span>.label_1 = QLabel(<span class="string">&quot;输入价格与数量&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_3 = QLabel(<span class="string">&quot;编辑...&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QSpinBoxEditingFinished 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setRange(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setValue(<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setSingleStep(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.valueChanged.connect(<span class="variable language_">self</span>.spin_box_selected)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.editingFinished.connect(<span class="variable language_">self</span>.spin_box_editing_finished)</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.line_edit)</span><br><span class="line">        h_layout.addWidget(<span class="variable language_">self</span>.spin_box)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_1)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_3)</span><br><span class="line">        v_layout.addLayout(h_layout)</span><br><span class="line">        v_layout.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spin_box_selected</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.line_edit.text() != <span class="number">0</span>:</span><br><span class="line">            price = <span class="built_in">int</span>(<span class="variable language_">self</span>.line_edit.text())</span><br><span class="line">            number = <span class="variable language_">self</span>.spin_box.value()</span><br><span class="line">            total_price = price * number</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">f&quot;总价为：<span class="subst">&#123;total_price&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.label_2.setText(<span class="string">&quot;请输入价格&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spin_box_editing_finished</span>(<span class="params">self</span>):</span><br><span class="line">        price = <span class="built_in">int</span>(<span class="variable language_">self</span>.line_edit.text())</span><br><span class="line">        number = <span class="variable language_">self</span>.spin_box.value()</span><br><span class="line">        total_price = price * number</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setText(<span class="string">f&quot;编辑完成，总价为：<span class="subst">&#123;total_price&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QSpinBoxEditingFinishedDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>可以看到，我们复用了 <code>QSpinBoxDemo.py</code> 文件中的代码，只是将 QSpinBox 换成了 QDoubleSpinBox。并且添加了 <code>self.spin_box.editingFinished.connect(self.spin_box_editing_finished)</code> 代码，当 QSpinBox 编辑完成时，会触发 <code>spin_box_editing_finished</code> 方法。</p>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第六篇</title>
    <url>/2023/08/03/1/</url>
    <content><![CDATA[<h2 id="QLCDNumber-数码管">QLCDNumber 数码管</h2>
<p>QLCDNumber 数码管控件，可以显示数字。</p>
<blockquote>
<p>QLCDNumber 案例</p>
</blockquote>
<p>创建 <code>QLCDNumberDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QTimer</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLCDNumber, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLCDNumberDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.lcd_number = QLCDNumber()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QLCDNumber 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lcd_number.setDigitCount(<span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lcd_number.setMode(QLCDNumber.Mode.Hex)</span><br><span class="line">        <span class="variable language_">self</span>.lcd_number.setSegmentStyle(QLCDNumber.SegmentStyle.Filled)</span><br><span class="line">        <span class="variable language_">self</span>.lcd_number.display(<span class="number">1234567890</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.timer = QTimer()</span><br><span class="line">        <span class="variable language_">self</span>.timer.setInterval(<span class="number">1000</span>)</span><br><span class="line">        <span class="variable language_">self</span>.timer.timeout.connect(<span class="variable language_">self</span>.lcd_number_display)</span><br><span class="line">        <span class="variable language_">self</span>.timer.start()</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.lcd_number)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lcd_number_display</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lcd_number.display(<span class="variable language_">self</span>.lcd_number.intValue() + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QLCDNumberDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>QLCDNumber 构建一个随机数生成器</p>
</blockquote>
<p>利用 QLCDNumber 构建一个随机数生成器，点击按钮，生成一个随机数。</p>
<details>
<summary>点击展开代码</summary>
<p>创建 <code>QLCDNumberDemo_1.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;QLCDNumberDemo_1.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt6 UI code generator 6.4.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic6 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> QtCore, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Dialog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Dialog</span>):</span><br><span class="line">        Dialog.setObjectName(<span class="string">&quot;Dialog&quot;</span>)</span><br><span class="line">        Dialog.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lcdNumber = QtWidgets.QLCDNumber(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.lcdNumber.setGeometry(QtCore.QRect(<span class="number">50</span>, <span class="number">40</span>, <span class="number">301</span>, <span class="number">131</span>))</span><br><span class="line">        <span class="variable language_">self</span>.lcdNumber.setObjectName(<span class="string">&quot;lcdNumber&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton = QtWidgets.QPushButton(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setGeometry(QtCore.QRect(<span class="number">120</span>, <span class="number">220</span>, <span class="number">161</span>, <span class="number">51</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Connect the button to the function</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton.clicked.connect(<span class="variable language_">self</span>.rand_generator)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(Dialog)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Dialog)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rand_generator</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lcdNumber.display(randint(<span class="number">0</span>, <span class="number">810</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, Dialog</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Dialog.setWindowTitle(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;Dialog&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;生成&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    Dialog = QtWidgets.QDialog()</span><br><span class="line">    ui = Ui_Dialog()</span><br><span class="line">    ui.setupUi(Dialog)</span><br><span class="line">    Dialog.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h2 id="QComboBox-下拉框">QComboBox 下拉框</h2>
<p>QComboBox 下拉框控件，可以选择一项。</p>
<blockquote>
<p>QComboBox 案例</p>
</blockquote>
<p>创建 <code>QComboBoxDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QComboBox, QLabel, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QComboBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&quot;请选择编程语言&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QLabel(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.combo_box = QComboBox()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QComboBox 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.combo_box.addItem(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.combo_box.addItem(<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.combo_box.addItem(<span class="string">&quot;Java&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.combo_box.addItem(<span class="string">&quot;C#&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.combo_box.currentIndexChanged.connect(<span class="variable language_">self</span>.combo_box_selected)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.combo_box)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combo_box_selected</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setText(<span class="variable language_">self</span>.combo_box.currentText())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QComboBoxDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，我们复用了 <code>QRadioButtonDemo.py</code> 文件中的代码，稍作修改即可。</p>
<h2 id="Qt-Designer-中的槽与信号">Qt Designer 中的槽与信号</h2>
<p>在 Qt Designer 中，我们可以直接在界面上添加槽与信号。</p>
<p>简单来说，槽就是一个函数，信号就是一个触发条件。</p>
<p>在 Qt Designer 中，我们可以直接在界面上添加槽与信号，有以下几个步骤：</p>
<ol>
<li class="lvl-3">
<p>在界面上添加一个控件，比如按钮</p>
</li>
<li class="lvl-3">
<p>右键按钮，选择 <code>Go to slot...</code></p>
</li>
<li class="lvl-3">
<p>选择一个信号，比如 <code>clicked()</code></p>
</li>
<li class="lvl-3">
<p>点击 <code>OK</code>，会自动跳转到 <code>main.py</code> 文件中，此时会自动创建一个槽函数</p>
</li>
<li class="lvl-3">
<p>在槽函数中添加代码</p>
</li>
</ol>
<h2 id="QSlider-滑动条">QSlider 滑动条</h2>
<p>QSlider 滑动条控件，可以滑动选择一个值。</p>
<blockquote>
<p>QSlider 案例</p>
</blockquote>
<p>创建 <code>QSliderDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QSlider, QLabel, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QSliderDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider = QSlider(Qt.Orientation.Horizontal)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QSlider 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setAlignment(Qt.AlignmentFlag.AlignCenter)</span><br><span class="line">        <span class="variable language_">self</span>.label.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size: 20px; font-weight: bold;&#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider.setMinimum(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider.setMaximum(<span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider.setSingleStep(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider.setValue(<span class="number">50</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider.setTickPosition(QSlider.TickPosition.TicksBelow)</span><br><span class="line">        <span class="variable language_">self</span>.slider.setTickInterval(<span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider.valueChanged.connect(<span class="variable language_">self</span>.slider_value_changed)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.slider)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">slider_value_changed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="string">f&quot;当前值为：<span class="subst">&#123;self.slider.value()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QSliderDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第七篇</title>
    <url>/2023/08/04/1/</url>
    <content><![CDATA[<h2 id="QListWidget-列表控件">QListWidget 列表控件</h2>
<p>QListWidget 列表控件，可以显示一个列表。</p>
<blockquote>
<p>QListWidget 案例</p>
</blockquote>
<p>创建 <code>QListWidgetDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QListWidget, QVBoxLayout, QListWidgetItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QListWidgetDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.list_widget = QListWidget()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QListWidget 案例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 3&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 4&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 5&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 6&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 7&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 8&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 9&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.list_widget.addItem(<span class="string">&quot;Item 10&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.list_widget.itemClicked.connect(<span class="variable language_">self</span>.list_widget_item_clicked)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.list_widget)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_widget_item_clicked</span>(<span class="params">self, item: QListWidgetItem</span>):</span><br><span class="line">        <span class="built_in">print</span>(item.text())</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.list_widget.currentItem().text())</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.list_widget.currentRow())</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.list_widget.count())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = QListWidgetDemo()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Qt Designer 中的 QListWidget</p>
</blockquote>
<p>在 Qt Designer 中，我们可以直接添加 QListWidget 控件。</p>
<details>
<summary>点击展开代码</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;QListWidgetDemo_1.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt6 UI code generator 6.4.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic6 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        Form.setObjectName(<span class="string">&quot;Form&quot;</span>)</span><br><span class="line">        Form.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout = QtWidgets.QVBoxLayout(Form)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label = QtWidgets.QLabel(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget = QtWidgets.QListWidget(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">12</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setObjectName(<span class="string">&quot;listWidget&quot;</span>)</span><br><span class="line">        item = QtWidgets.QListWidgetItem()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(item)</span><br><span class="line">        item = QtWidgets.QListWidgetItem()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(item)</span><br><span class="line">        item = QtWidgets.QListWidgetItem()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(item)</span><br><span class="line">        item = QtWidgets.QListWidgetItem()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(item)</span><br><span class="line">        item = QtWidgets.QListWidgetItem()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(item)</span><br><span class="line">        item = QtWidgets.QListWidgetItem()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(item)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.listWidget)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QtWidgets.QLabel(parent=Form)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setFamily(<span class="string">&quot;Segoe UI&quot;</span>)</span><br><span class="line">        font.setPointSize(<span class="number">20</span>)</span><br><span class="line">        font.setItalic(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setObjectName(<span class="string">&quot;label_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.label_2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Add this function to connect the listWidget and label_2</span></span><br><span class="line">        <span class="variable language_">self</span>.listWidget.itemClicked.connect(<span class="variable language_">self</span>.list_widget_item_clicked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_widget_item_clicked</span>(<span class="params">self, item: QtWidgets.QListWidgetItem</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setText(item.text())</span><br><span class="line">    <span class="comment"># End of the function</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Form&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;选择一个语言&quot;</span>))</span><br><span class="line">        __sortingEnabled = <span class="variable language_">self</span>.listWidget.isSortingEnabled()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setSortingEnabled(<span class="literal">False</span>)</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(<span class="number">0</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Python&quot;</span>))</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(<span class="number">1</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Java&quot;</span>))</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(<span class="number">2</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;C++&quot;</span>))</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(<span class="number">3</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Kotalin&quot;</span>))</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(<span class="number">4</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Go&quot;</span>))</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(<span class="number">5</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Rust&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setSortingEnabled(__sortingEnabled)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;TextLabel&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    Form = QtWidgets.QWidget()</span><br><span class="line">    ui = Ui_Form()</span><br><span class="line">    ui.setupUi(Form)</span><br><span class="line">    Form.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h3 id="向-QListWidget-中添加元素">向 QListWidget 中添加元素</h3>
<details>
<summary>点击展开代码</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;QListWidgetDemo_2.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt6 UI code generator 6.4.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic6 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        Form.setObjectName(<span class="string">&quot;Form&quot;</span>)</span><br><span class="line">        Form.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget = QtWidgets.QListWidget(parent=Form)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setGeometry(QtCore.QRect(<span class="number">70</span>, <span class="number">60</span>, <span class="number">256</span>, <span class="number">192</span>))</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setObjectName(<span class="string">&quot;listWidget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton = QtWidgets.QPushButton(parent=Form)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setGeometry(QtCore.QRect(<span class="number">160</span>, <span class="number">260</span>, <span class="number">75</span>, <span class="number">24</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.widget = QtWidgets.QWidget(parent=Form)</span><br><span class="line">        <span class="variable language_">self</span>.widget.setGeometry(QtCore.QRect(<span class="number">30</span>, <span class="number">20</span>, <span class="number">308</span>, <span class="number">29</span>))</span><br><span class="line">        <span class="variable language_">self</span>.widget.setObjectName(<span class="string">&quot;widget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout = QtWidgets.QHBoxLayout(<span class="variable language_">self</span>.widget)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.setObjectName(<span class="string">&quot;horizontalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label = QtWidgets.QLabel(parent=<span class="variable language_">self</span>.widget)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit = QtWidgets.QLineEdit(parent=<span class="variable language_">self</span>.widget)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit.setObjectName(<span class="string">&quot;lineEdit&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addWidget(<span class="variable language_">self</span>.lineEdit)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add this function to connect the listWidget and label_2</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton.clicked.connect(<span class="variable language_">self</span>.push_button_clicked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push_button_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(<span class="variable language_">self</span>.lineEdit.text())</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit.clear()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># End of the function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Form&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;添加&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;喜欢的编程语言&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    Form = QtWidgets.QWidget()</span><br><span class="line">    ui = Ui_Form()</span><br><span class="line">    ui.setupUi(Form)</span><br><span class="line">    Form.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h3 id="在-QListWidget-CRUD">在 QListWidget CRUD</h3>
<details>
<summary>点击展开代码</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;QListWidgetDemo_3.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt6 UI code generator 6.4.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic6 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6 <span class="keyword">import</span> QtCore, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="comment"># import the QDialog class</span></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QDialog, QMessageBox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Object changed to QDialog</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Dialog</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Dialog</span>):</span><br><span class="line">        Dialog.setObjectName(<span class="string">&quot;Dialog&quot;</span>)</span><br><span class="line">        Dialog.resize(<span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout = QtWidgets.QHBoxLayout(Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.setObjectName(<span class="string">&quot;horizontalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget = QtWidgets.QListWidget(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setObjectName(<span class="string">&quot;listWidget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addWidget(<span class="variable language_">self</span>.listWidget)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout = QtWidgets.QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add = QtWidgets.QPushButton(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add.setObjectName(<span class="string">&quot;pushButton_add&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.pushButton_add)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_edit = QtWidgets.QPushButton(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_edit.setObjectName(<span class="string">&quot;pushButton_edit&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.pushButton_edit)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_remove = QtWidgets.QPushButton(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_remove.setObjectName(<span class="string">&quot;pushButton_remove&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.pushButton_remove)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_sort = QtWidgets.QPushButton(parent=Dialog)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_sort.setObjectName(<span class="string">&quot;pushButton_sort&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.pushButton_sort)</span><br><span class="line">        spacerItem = QtWidgets.QSpacerItem(<span class="number">20</span>, <span class="number">40</span>, QtWidgets.QSizePolicy.Policy.Minimum,</span><br><span class="line">                                           QtWidgets.QSizePolicy.Policy.Expanding)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addItem(spacerItem)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addLayout(<span class="variable language_">self</span>.verticalLayout)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(Dialog)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Dialog)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add this function to connect the listWidget</span></span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add.clicked.connect(<span class="variable language_">self</span>.push_button_add_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_edit.clicked.connect(<span class="variable language_">self</span>.push_button_edit_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_remove.clicked.connect(<span class="variable language_">self</span>.push_button_remove_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_sort.clicked.connect(<span class="variable language_">self</span>.push_button_sort_clicked)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add this function to connect the listWidget</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push_button_add_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        row = <span class="variable language_">self</span>.listWidget.currentRow()</span><br><span class="line">        text, ok = QtWidgets.QInputDialog.getText(<span class="variable language_">self</span>, <span class="string">&quot;Input Dialog: ADD&quot;</span>, <span class="string">&quot;Enter text:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> text != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.listWidget.insertItem(row, text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push_button_edit_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        row = <span class="variable language_">self</span>.listWidget.currentRow()</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(row)</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            text, ok = QtWidgets.QInputDialog.getText(<span class="variable language_">self</span>, <span class="string">&quot;Input Dialog: EDIT&quot;</span>, <span class="string">&quot;Enter text:&quot;</span>,</span><br><span class="line">                                                      QtWidgets.QLineEdit.EchoMode.Normal, item.text())</span><br><span class="line">            <span class="keyword">if</span> ok <span class="keyword">and</span> text != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                item.setText(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push_button_remove_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        row = <span class="variable language_">self</span>.listWidget.currentRow()</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.item(row)</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        reply = QMessageBox.question(<span class="variable language_">self</span>, <span class="string">&quot;Message&quot;</span>, <span class="string">&quot;Are you sure to delete the selected item?&quot;</span>,</span><br><span class="line">                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.StandardButton.Yes:</span><br><span class="line">            item = <span class="variable language_">self</span>.listWidget.takeItem(row)</span><br><span class="line">            <span class="keyword">del</span> item</span><br><span class="line">            del_reply = QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&quot;Message&quot;</span>, <span class="string">&quot;The selected item has been deleted.&quot;</span>,</span><br><span class="line">                                                 QMessageBox.StandardButton.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push_button_sort_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.sortItems()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># End of the added function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, Dialog</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Dialog.setWindowTitle(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;Dialog&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_add.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;ADD&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_edit.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;EDIT&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_remove.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;REMOVE&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_sort.setText(_translate(<span class="string">&quot;Dialog&quot;</span>, <span class="string">&quot;SORT&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    Dialog = QtWidgets.QDialog()</span><br><span class="line">    ui = Ui_Dialog()</span><br><span class="line">    ui.setupUi(Dialog)</span><br><span class="line">    Dialog.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>分析代码可知，我们需要在 <code>QListWidgetDemo_3.ui</code> 中添加四个按钮，分别是 <code>ADD</code>、<code>EDIT</code>、<code>REMOVE</code>、<code>SORT</code>。</p>
<p>创建了4个按钮后，我们需要在 <code>QListWidgetDemo_3.py</code> 中添加4个按钮的点击事件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add this function to connect the listWidget</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_button_add_clicked</span>(<span class="params">self</span>):</span><br><span class="line">    row = <span class="variable language_">self</span>.listWidget.currentRow()</span><br><span class="line">    text, ok = QtWidgets.QInputDialog.getText(<span class="variable language_">self</span>, <span class="string">&quot;Input Dialog: ADD&quot;</span>, <span class="string">&quot;Enter text:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> ok <span class="keyword">and</span> text != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.insertItem(row, text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_button_edit_clicked</span>(<span class="params">self</span>):</span><br><span class="line">    row = <span class="variable language_">self</span>.listWidget.currentRow()</span><br><span class="line">    item = <span class="variable language_">self</span>.listWidget.item(row)</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        text, ok = QtWidgets.QInputDialog.getText(<span class="variable language_">self</span>, <span class="string">&quot;Input Dialog: EDIT&quot;</span>, <span class="string">&quot;Enter text:&quot;</span>,</span><br><span class="line">                                                  QtWidgets.QLineEdit.EchoMode.Normal, item.text())</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> text != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            item.setText(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_button_remove_clicked</span>(<span class="params">self</span>):</span><br><span class="line">    row = <span class="variable language_">self</span>.listWidget.currentRow()</span><br><span class="line">    item = <span class="variable language_">self</span>.listWidget.item(row)</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    reply = QMessageBox.question(<span class="variable language_">self</span>, <span class="string">&quot;Message&quot;</span>, <span class="string">&quot;Are you sure to delete the selected item?&quot;</span>,</span><br><span class="line">                                 QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)</span><br><span class="line">    <span class="keyword">if</span> reply == QMessageBox.StandardButton.Yes:</span><br><span class="line">        item = <span class="variable language_">self</span>.listWidget.takeItem(row)</span><br><span class="line">        <span class="keyword">del</span> item</span><br><span class="line">        del_reply = QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&quot;Message&quot;</span>, <span class="string">&quot;The selected item has been deleted.&quot;</span>,</span><br><span class="line">                                             QMessageBox.StandardButton.Ok)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_button_sort_clicked</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="variable language_">self</span>.listWidget.sortItems()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># End of the added function</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第九篇</title>
    <url>/2023/08/10/1/</url>
    <content><![CDATA[<h2 id="反思最近的学习状态">反思最近的学习状态</h2>
<p>对于 PyQt6 的学习，很是漫长，写下第九篇 Blog 时，我已经不想去看了。我突然发觉这种面面俱到的学习方法其实是不对的，对每一个 Qt 部件都去学习，这样的学习效率其实是很低的，而且很容易忘记。我应该把精力放在实际项目中，遇到什么问题再去查阅文档，这样的学习效率才是最高的。</p>
<p>所以，我决定了，我先大概了解一下 Qt 的基本部件，也就是说，我将简单的了解这些部件，简单的记录它们，不会像以往那么的详细了。然后就开始做项目，遇到什么问题再去查阅文档，这样的学习效率才是最高的。</p>
<p>目前，我已经物色了几个有趣的项目，我会在后面的 Blog 中介绍。</p>
<p>参考文档：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2MucXQuaW8vcXRmb3JweXRob24vUHlTaWRlNi9RdFdpZGdldHMvaW5kZXguaHRtbA==">PyQt6 官方文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="开发一个记事本">开发一个记事本</h2>
<p>接下来，我们将开发一个记事本，作为 PyQt6 的第九篇 Blog。</p>
<h3 id="在-Designer-中创建一个记事本">在 Designer 中创建一个记事本</h3>
<h4 id="Menubar-and-Menu-items">Menubar and Menu items</h4>
<ol>
<li class="lvl-3">
<p>打开 Designer, 创建一个 MainWindow</p>
</li>
<li class="lvl-3">
<p>在 MainWindow 中添加一个 MenuBar</p>
</li>
<li class="lvl-3">
<p>在 MenuBar 中添加 Menu</p>
</li>
<li class="lvl-3">
<p>在 Menu 中添加 Action</p>
</li>
</ol>
<h4 id="Icon-to-Action">Icon to Action</h4>
<ol>
<li class="lvl-3">
<p>在 Designer 中，选择 Action</p>
</li>
<li class="lvl-3">
<p>在右侧的属性栏中，选择 Icon</p>
</li>
<li class="lvl-3">
<p>点击右侧的按钮，选择一个 Icon</p>
</li>
<li class="lvl-3">
<p>在 Designer 中，选择 TextEdit</p>
</li>
<li class="lvl-3">
<p>添加一个 toolBar</p>
</li>
<li class="lvl-3">
<p>在 toolBar 中添加 Action</p>
</li>
<li class="lvl-3">
<p>设置布局</p>
</li>
</ol>
<p>可以先创建一个资源文件，然后把 Icon 放到资源文件中，这样可以方便管理。</p>
<h2 id="Notepad-完整代码">Notepad 完整代码</h2>
<p>这里学习了一下如何将 GUI 代码和逻辑代码分离, 使其更易于维护</p>
<style>
#box1 {
    width: 80%;
    height: 100px;
    background-color: white;
    border: 5px solid #00bcd4;
    border-radius: 50px;
    padding: 8px 12px;
    margin-bottom: 20px;
    text-align: center;
    line-height: 30px;
    margin: 0 auto;
    text-decoration: none;
}
#box2 {
    width: 20%;
    height: 20%;
    background-color: #f5f5f5;
    border: 2px solid #000000;
    border-radius: 50px;
    padding: 8px 12px;
    text-align: center;
    line-height: 50px;
    margin: 0 auto;
    position: relative;
    text-decoration: none;
}
#box2 a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    line-height: 35px;
    text-decoration: none;
}
#box2 a:hover {
    background-color: #ff4081;
    color: white;
    border: 0 solid #000000;
    border-radius: 50px;
    text-align: center;
    text-decoration: none;
}
</style>
<div id="box1">
<span style="text-align: center; color:black;">Yuzhii_notepad.7z</span>
<br>
<span style="text-align: center; color:black;">13.4 KB (13,736 字节)</span>
<br>
<div id="box2">
<a href="./Yuzhii_notepad.7z" data-pjax-state="load" download="Yuzhii_notepad.7z">点击下载</a>
</div>
</div>
<p>效果:<br>
<img src="./notepad.png" alt></p>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt6 第八篇</title>
    <url>/2023/08/05/2/</url>
    <content><![CDATA[<h2 id="QFontComboBox">QFontComboBox</h2>
<p>QFontComboBox 继承自 QComboBox，用于显示系统中所有的字体，可以通过 setCurrentFont() 方法设置当前字体，通过 currentFont() 方法获取当前字体。</p>
<blockquote>
<p>QFontComboBox 案例</p>
</blockquote>
<p>创建 <code>QFontComboBoxDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QFontComboBox, QVBoxLayout, QLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QFontComboBox&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.font_cb = QFontComboBox(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.font_cb.currentFontChanged.connect(<span class="variable language_">self</span>.on_current_font_changed)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;Hello World&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.move(<span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setFont(<span class="variable language_">self</span>.font_cb.currentFont())</span><br><span class="line">        <span class="variable language_">self</span>.v_layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.font_cb)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(<span class="variable language_">self</span>.v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_current_font_changed</span>(<span class="params">self, font</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setFont(font)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="QTableWidgetItem">QTableWidgetItem</h2>
<p>QTableWidgetItem 是一个表格控件，可以用于 QTableWidget 和 QTreeWidget 中，用于显示表格中的每一个单元格，可以通过 setText() 方法设置文本，通过 text() 方法获取文本。</p>
<blockquote>
<p>QTableWidgetItem 案例</p>
</blockquote>
<p>创建 <code>QTableWidgetItemDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QTableWidget, QTableWidgetItem, QVBoxLayout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QTableWidgetItem&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_widget = QTableWidget(<span class="number">4</span>, <span class="number">3</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setHorizontalHeaderLabels([<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>])</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setVerticalHeaderLabels([<span class="string">&#x27;行1&#x27;</span>, <span class="string">&#x27;行2&#x27;</span>, <span class="string">&#x27;行3&#x27;</span>, <span class="string">&#x27;行4&#x27;</span>])</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">0</span>, <span class="number">0</span>, QTableWidgetItem(<span class="string">&#x27;张三&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">0</span>, <span class="number">1</span>, QTableWidgetItem(<span class="string">&#x27;18&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">0</span>, <span class="number">2</span>, QTableWidgetItem(<span class="string">&#x27;男&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">1</span>, <span class="number">0</span>, QTableWidgetItem(<span class="string">&#x27;李四&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">1</span>, <span class="number">1</span>, QTableWidgetItem(<span class="string">&#x27;19&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">1</span>, <span class="number">2</span>, QTableWidgetItem(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">2</span>, <span class="number">0</span>, QTableWidgetItem(<span class="string">&#x27;王五&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">2</span>, <span class="number">1</span>, QTableWidgetItem(<span class="string">&#x27;20&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">2</span>, <span class="number">2</span>, QTableWidgetItem(<span class="string">&#x27;男&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">3</span>, <span class="number">0</span>, QTableWidgetItem(<span class="string">&#x27;赵六&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">3</span>, <span class="number">1</span>, QTableWidgetItem(<span class="string">&#x27;21&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.table_widget.setItem(<span class="number">3</span>, <span class="number">2</span>, QTableWidgetItem(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.v_layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.table_widget)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(<span class="variable language_">self</span>.v_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果图：<br>
<img src="./QTableWidgetItemDemo.png" alt></p>
<h2 id="QCalendarWidget">QCalendarWidget</h2>
<p>QCalendarWidget 是一个日历控件，可以通过 setCurrentPage() 方法设置当前页，通过 selectedDate() 方法获取当前选中的日期。</p>
<blockquote>
<p>QCalendarWidget 案例</p>
</blockquote>
<p>创建 <code>QCalendarWidgetDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QDate</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QCalendarWidget, QVBoxLayout, QLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QCalendarWidget&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.calendar_widget = QCalendarWidget(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.calendar_widget.clicked.connect(<span class="variable language_">self</span>.on_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;Hello World&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.move(<span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="variable language_">self</span>.calendar_widget.selectedDate().toString(<span class="string">&#x27;yyyy-MM-dd&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.v_layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.calendar_widget)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(<span class="variable language_">self</span>.v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="variable language_">self</span>.calendar_widget.selectedDate().toString(<span class="string">&#x27;yyyy-MM-dd&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果图：<br>
<img src="./QCalendarWidgetDemo.png" alt></p>
<h2 id="QInputDialog">QInputDialog</h2>
<p>QInputDialog 是一个输入对话框，可以通过 getText() 方法获取用户输入的文本，通过 getInt() 方法获取用户输入的整数，通过 getDouble() 方法获取用户输入的浮点数。</p>
<blockquote>
<p>QInputDialog 案例</p>
</blockquote>
<p>创建 <code>QInputDialogDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QInputDialog, QVBoxLayout, QLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QInputDialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button = QPushButton(<span class="string">&#x27;点击&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button.clicked.connect(<span class="variable language_">self</span>.on_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;Hello World&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.move(<span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.button)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(<span class="variable language_">self</span>.v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        text, ok = QInputDialog.getText(<span class="variable language_">self</span>, <span class="string">&#x27;输入文本&#x27;</span>, <span class="string">&#x27;请输入文本&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> ok:</span><br><span class="line">            <span class="variable language_">self</span>.label.setText(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="QColorDialog">QColorDialog</h2>
<p>QColorDialog 是一个颜色选择对话框，可以通过 getColor() 方法获取用户选择的颜色。</p>
<blockquote>
<p>QColorDialog 案例</p>
</blockquote>
<p>创建 <code>QColorDialogDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QColor</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QColorDialog, QVBoxLayout, QLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QColorDialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button = QPushButton(<span class="string">&#x27;点击&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button.clicked.connect(<span class="variable language_">self</span>.on_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;Hello World&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.move(<span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.button)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(<span class="variable language_">self</span>.v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        <span class="keyword">if</span> color.isValid():</span><br><span class="line">            <span class="variable language_">self</span>.label.setText(color.name())</span><br><span class="line">            <span class="variable language_">self</span>.label.setStyleSheet(<span class="string">&#x27;background-color: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(color.name()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="QFontDialog">QFontDialog</h2>
<p>QFontDialog 是一个字体选择对话框，可以通过 getFont() 方法获取用户选择的字体。</p>
<blockquote>
<p>QFontDialog 案例</p>
</blockquote>
<p>创建 <code>QFontDialogDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QFontDialog, QVBoxLayout, QLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QFontDialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button = QPushButton(<span class="string">&#x27;点击&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button.clicked.connect(<span class="variable language_">self</span>.on_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;Hello World&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.move(<span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.button)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(<span class="variable language_">self</span>.v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        font, ok = QFontDialog.getFont()</span><br><span class="line">        <span class="keyword">if</span> ok:</span><br><span class="line">            <span class="variable language_">self</span>.label.setFont(font)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="QFileDialog">QFileDialog</h2>
<p>QFileDialog 是一个文件选择对话框，可以通过 getOpenFileName() 方法获取用户选择的文件，通过 getOpenFileNames() 方法获取用户选择的多个文件，通过 getSaveFileName() 方法获取用户选择的保存文件的路径。</p>
<blockquote>
<p>QFileDialog 案例</p>
</blockquote>
<p>创建 <code>QFileDialogDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QFileDialog, QVBoxLayout, QLabel, QTextEdit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QFileDialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button = QPushButton(<span class="string">&#x27;点击&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button.clicked.connect(<span class="variable language_">self</span>.on_clicked)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;Hello World&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.move(<span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">        <span class="variable language_">self</span>.textedit = QTextEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.button)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.v_layout.addWidget(<span class="variable language_">self</span>.textedit)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(<span class="variable language_">self</span>.v_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        file_name, _ = QFileDialog.getOpenFileName(<span class="variable language_">self</span>, <span class="string">&#x27;打开文件&#x27;</span>, <span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;所有文件(*.*);;文本文件(*.txt)&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> file_name:</span><br><span class="line">            <span class="variable language_">self</span>.label.setText(file_name)</span><br><span class="line">            <span class="comment"># self.textedit 显示文件内容</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="variable language_">self</span>.textedit.setText(f.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果图：<br>
<img src="./QFileDialogDemo.png" alt></p>
<h2 id="QMessagebox">QMessagebox</h2>
<p>QMessagebox 是一个消息框，用于显示消息，可以通过 setWindowTitle() 方法设置标题，通过 setText() 方法设置消息内容，通过 setIcon() 方法设置图标，通过 setStandardButtons() 方法设置按钮，通过 exec() 方法显示消息框，通过 clickedButton() 方法获取点击的按钮。</p>
<blockquote>
<p>QMessagebox 案例</p>
</blockquote>
<p>创建 <code>QMessageboxDemo.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QMessageBox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QMessageBox&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.btn = QPushButton(<span class="string">&#x27;Click&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.btn.clicked.connect(<span class="variable language_">self</span>.on_clicked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        msg_box = QMessageBox(<span class="variable language_">self</span>)</span><br><span class="line">        msg_box.setWindowTitle(<span class="string">&#x27;Title&#x27;</span>)</span><br><span class="line">        msg_box.setText(<span class="string">&#x27;Message&#x27;</span>)</span><br><span class="line">        msg_box.setIcon(QMessageBox.Icon.Information)</span><br><span class="line">        msg_box.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)</span><br><span class="line">        msg_box.<span class="built_in">exec</span>()</span><br><span class="line">        <span class="built_in">print</span>(msg_box.clickedButton())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt6</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>React-01</title>
    <url>/2024/09/18/1/</url>
    <content><![CDATA[<h2 id="介绍">介绍</h2>
<p>React 是一个用于构建用户界面的 JavaScript 库。</p>
<p>使用 React 可以创建复杂的 UI，同时使代码易于理解。</p>
<p>React:UI = render(data) 单向数据流</p>
<p>vue:ref 能够直接操作dom，并非是 view model<br>
react:单向数据流，不能通过双向绑定，实现响应式</p>
<h2 id="JSX">JSX</h2>
<p>JSX: JavaScript XML，将 UI 与逻辑层耦合在一起，提高代码的可读性和可维护性，在组件中使用JSX语法，可以直接在 JS 代码中编写 HTML 结构，而不需要用 JS 字符串拼接。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;&quot;</span> table-index&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;&quot;</span> <span class="attr">tableIndex</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>支持使用表达式</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, &#123;formatName(user)&#125;!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为函数的返回</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGreeting</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Stranger.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element2 = <span class="title function_">getGreeting</span>(user)</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>支持指定属性</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">tabIndex</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>React 式预防 XSS 攻击，会对所有的输入进行转义，所以不会导致 XSS 攻击。</p>
<blockquote>
<p>XSS 攻击：跨站脚本攻击，是一种代码注入攻击，攻击者在网页中注入恶意脚本，当用户浏览网页时，脚本会被执行，从而达到攻击目的。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>反射 XSS 攻击</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//www.baidu.com?name=&lt;script&gt;alert(XSS)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>存储 XSS 攻击</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;error.png&quot;</span> <span class="attr">onError</span>=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其实就是使用转义字符，将特殊字符转义为HTML实体，React中使用<code>&#123;&#125;</code>来转义。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储XSS攻击</span></span><br><span class="line"><span class="comment">// 评论区</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; comments.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    comments[i] = <span class="string">&#x27;&lt;li&gt;&#x27;</span> + comments[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;comments&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>JSX 支持对象</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, world!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="comment">/*__PURE__*/</span><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greet&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>JSX 渲染成 DOM</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, container)</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 只能够标识当前时刻状态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>)  <span class="comment">// 每秒更新一次</span></span><br></pre></td></tr></table></figure>
<h2 id="props-和-state">props 和 state</h2>
<h3 id="组件">组件</h3>
<p>组件是 React 应用的基本构建块，通过组件可以将 UI 拆分成独立的、可复用的部分。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组件组合以及拆分">组件组合以及拆分</h3>
<p>组件可以在其输出中引用其他组件，这使得我们可以使用相同组件抽象出任意层次的细节。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Cahal&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Edite&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Cahal&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Edite&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这段代码会渲染出一个包含三个 Welcome 组件的 App 组件。通过这个例子，我们可以看到组件在输出中可以引用其他组件，这让我们可以用同一组件来抽象出任意层次的细节。按钮、表单、对话框、整个屏幕的内容：在 React 应用中，所有这些通常都会以组件的形式表示。</p>
</blockquote>
<p>拆分组件是 React 应用中最常见的模式。这里有一个关于 App 组件如何拆分成更小的组件的示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> date.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;Avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#123;props.author.avatarUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alt</span>=<span class="string">&#123;props.author.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo-name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;props.author.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-date&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> comment = &#123;</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;I hope you enjoy learning React!&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> author = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Hello Kitty&#x27;</span>,</span><br><span class="line">  <span class="attr">avatarUrl</span>: <span class="string">&#x27;https://google.com/favicon.ico&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Comment</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">date</span>=<span class="string">&#123;comment.date&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">text</span>=<span class="string">&#123;comment.text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">author</span>=<span class="string">&#123;author&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个示例演示了如何将一个更复杂的组件拆分成更小的组件。Comment 组件描述了一个评论，包括作者的名字、头像和评论内容。这个组件在其结构中使用了 Avatar、UserInfo 和 UserInfoName 组件，将其拆分成更小的组件有助于理清应用的 UI 架构。</p>
</blockquote>
<h3 id="受控组件以及非受控组件">受控组件以及非受控组件</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>受控组件：表单元素的值由 React 控制，表单元素的值由 state 控制，通过 onChange 事件来更新 state。</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>: event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>)</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Name:</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">NameForm</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个示例展示了一个受控组件，输入框的值由 React 控制。每次按键时，handleChange 事件处理程序都会被调用，更新 React 的 state，因此输入框的值始终与 state 中的值保持一致。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>非受控组件：表单元素的值由 DOM 控制，通过 ref 来获取表单元素的值。</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">input</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Name:</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.input&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">NameForm</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个示例展示了一个非受控组件，输入框的值由 DOM 控制。每次按键时，handleSubmit 事件处理程序都会被调用，从输入框中获取值。</p>
</blockquote>
<h3 id="props-和-state-的区别">props 和 state 的区别</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>props：是父组件传递给子组件的数据，子组件不能修改 props，props 是只读的。</p>
</li>
<li class="lvl-2">
<p>state：是组件内部维护的数据，组件内部可以修改 state，当 state 发生变化时，组件会重新渲染。</p>
</li>
</ul>
<h3 id="props-和-state-的使用场景">props 和 state 的使用场景</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>props：用于父子组件通信，父组件通过 props 将数据传递给子组件。</p>
</li>
<li class="lvl-2">
<p>state：用于组件内部管理数据，当组件内部数据发生变化时，组件会重新渲染。</p>
</li>
</ul>
<h3 id="props-和-state-示例">props 和 state 示例</h3>
<p>props 示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>state 示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这两个示例展示了 props 和 state 的使用场景。Welcome 组件通过 props 接收父组件传递的数据，Clock 组件通过 state 维护内部数据。区别在于：props 是父组件传递给子组件的数据，子组件不能修改 props；state 是组件内部维护的数据，组件内部可以修改 state。</p>
</blockquote>
<h2 id="生命周期">生命周期</h2>
<p>React 组件有三个生命周期阶段：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Mounting：组件被创建并插入到 DOM 中。</p>
</li>
<li class="lvl-2">
<p>Updating：组件被重新渲染。</p>
</li>
<li class="lvl-2">
<p>Unmounting：组件被移除 DOM。</p>
</li>
</ul>
<p>1.<code>render</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>class 组件中必须有 render 方法，render 方法是 class 组件中唯一必须的方法。</p>
</li>
<li class="lvl-2">
<p>获取最新的 state 和 props，返回一个 React 元素。</p>
</li>
<li class="lvl-2">
<p>在不想修改 state 或 props 的情况下，不要修改 render 方法中的数据。</p>
</li>
</ul>
<p>2.<code>constructor</code></p>
<p>构造函数，用于初始化 state 和绑定事件处理方法。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>声明 state，初始化 state。</p>
</li>
<li class="lvl-2">
<p>绑定事件处理方法。</p>
</li>
</ul>
<p>避免将 props 复制到 state 中，因为 props 是只读的，state 可以修改。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(props)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不要用 setState 方法来修改 state，因为 setState 方法是异步的，可能会导致 state 不是最新的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">color</span>: props.<span class="property">color</span> &#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">color</span>: props.<span class="property">color</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>3.<code>componentDidMount</code></p>
<p>组件挂载后调用，只调用一次。</p>
<p>setState 方法会触发重新渲染<br>
addEventListener 添加事件监听</p>
<p>4.<code>componentDidUpdate</code></p>
<p>组件更新后调用，除了首次渲染，其他渲染都会调用。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidUpdate</span>(prevProps, prevState, snapshot) </span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">  <span class="comment">// 典型用法（不要忘记比较 props）：</span></span><br><span class="line">  <span class="comment">// 加条件判断，避免无限循环</span></span><br><span class="line">  <span class="keyword">if</span> (prevProps.<span class="property">color</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">color</span>: <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">color</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果组件实现了 getSnapshotBeforeUpdate 生命周期，那么它的返回值将作为 componentDidUpdate 的第三个参数 snapshot 传递。</span></span><br></pre></td></tr></table></figure>
<p>5.<code>componentWillUnmount</code></p>
<p>组件卸载前调用，用于清理工作。</p>
<p>6.<code>shouldComponentUpdate</code></p>
<p>这个方法用于判断是否需要重新渲染组件，默认返回 true。并不是很常用，因为 React 会自动判断是否需要重新渲染组件。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">color</span> !== nextProps.<span class="property">color</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> !== nextState.<span class="property">count</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7.<code>getDerivedStateFromProps</code></p>
<p>用于取代 componentWillReceiveProps，每次组件接收新的 props 时都会调用。</p>
<p>但是不推荐使用，因为会导致组件状态不可预测。</p>
<p>根据新的 props 更新 state，返回一个对象，或者返回 null 表示不更新 state。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="property">color</span> !== state.<span class="property">color</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">color</span>: props.<span class="property">color</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8.<code>getSnapshotBeforeUpdate</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getSnapshotBeforeUpdate</span>(prevProps, prevState)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrollingList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  listRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevProps.<span class="property">list</span>.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">list</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="variable language_">this</span>.<span class="property">listRef</span>.<span class="property">current</span></span><br><span class="line">      <span class="keyword">return</span> list.<span class="property">scrollHeight</span> - list.<span class="property">scrollTop</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, prevState, snapshot</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="variable language_">this</span>.<span class="property">listRef</span>.<span class="property">current</span></span><br><span class="line">      list.<span class="property">scrollTop</span> = list.<span class="property">scrollHeight</span> - snapshot</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.listRef&#125;</span>&gt;</span>&#123;/* ...contents... */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9.<code>static getDerivedStateFromError</code></p>
<p>错误边界 error boundary，用于捕获子组件的错误，只能捕获子组件的错误，无法捕获自身的错误。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 更新 state 使下一次渲染能够显示降级 UI</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10.<code>componentDidCatch</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidCatch</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">  <span class="comment">// 你同样可以将错误日志上报给服务器</span></span><br><span class="line">  <span class="title function_">logErrorToMyService</span>(error, info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>关于Vmware Workstation 在Windows11虚拟化的问题</title>
    <url>/2023/02/28/2/</url>
    <content><![CDATA[<p>最近学习linux，想在windows11上虚拟化linux，但是遇到了一些问题，记录一下。</p>
<h2 id="问题情况">问题情况</h2>
<p><img src="./Questions-about-VMware-Workstation-Virtualization-in-Windows-11/images/error.png" alt><br>
通常我们的解决办法是关闭虚拟机的虚拟化，但我认为这并不是解决问题的最佳方案，因为这样会导致虚拟机的性能下降。</p>
<h2 id="解决办法">解决办法</h2>
<p>通过搜索引擎，我知道了原因在两个方面</p>
<h3 id="1-没有打开的windows虚拟机平台">1. 没有打开的windows虚拟机平台</h3>
<blockquote>
<p>打开虚拟机平台，关闭hyper-v<br>
<img src="./Questions-about-VMware-Workstation-Virtualization-in-Windows-11/images/ctrlpanel.png" alt></p>
</blockquote>
<h3 id="2-windows11引入了hyper-v">2. windows11引入了hyper-v</h3>
<blockquote>
<p>直接在控制面版关闭hyper-v是无法做到完全关闭的，需要在powershell中关闭</p>
</blockquote>
<p><img src="./Questions-about-VMware-Workstation-Virtualization-in-Windows-11/images/cmd.png" alt></p>
<blockquote>
<p>以管理员身份输入以下命令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3>
<p>关闭hyper-v后，我发现我的WSA也无法使用了，目前无法解决，二者存在兼容性问题，请等待微软官方的更新，如果想要使用WSA，需要在powershell中输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>
<h2 id="24年5月8日更新">24年5月8日更新</h2>
<p>时隔一年，再来看看，其实使用虚拟机并不是必须的，学习linux完全不用图形界面</p>
<p>反而多了图形界面对于学习linux的干扰，所以，我现在使用wsl2来学习linux，wsl2是windows自带的linux子系统，使用起来非常方便，而且不用担心虚拟化的问题。</p>
<p>以及学校教的多是使用古老的 Centos 系统，时至今日，该系统已经不再适用于现代的开发，并且已经被放弃维护，Linux主线也更新到了6.9-rc7[2024-05-05]，所以，学习linux，还是使用最新的系统，比如Ubuntu 22.04 LTS，这样更有利于学习。</p>
<p>种种原因，配置虚拟机并不是一个好的选择。</p>
]]></content>
  </entry>
  <entry>
    <title>编程中的正则表达式</title>
    <url>/2023/04/16/1/</url>
    <content><![CDATA[<p>正则表达式在各种编程语言中都有应用，正则表达式的基本语法在各种编程语言中都是一致的。这里主要介绍python中的正则表达式。</p>
<h2 id="什么是正则表达式">什么是正则表达式</h2>
<p>正则表达式是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”）。正则表达式可以用来检索、替换那些匹配某个模式的文本。</p>
<h2 id="python中的正则表达式">python中的正则表达式</h2>
<p>python中的正则表达式使用re模块，re模块主要包含了以下几个函数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>re.match(pattern, string, flags=0)</p>
<ul class="lvl-2">
<li class="lvl-4">从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none</li>
</ul>
</li>
<li class="lvl-2">
<p>re.search(pattern, string, flags=0)</p>
<ul class="lvl-2">
<li class="lvl-4">扫描整个字符串并返回第一个成功的匹配</li>
</ul>
</li>
<li class="lvl-2">
<p>re.split(pattern, string, maxsplit=0, flags=0)</p>
<ul class="lvl-2">
<li class="lvl-4">split()按照能够匹配的子串将字符串分割后返回列表</li>
</ul>
</li>
<li class="lvl-2">
<p>re.findall(pattern, string, flags=0)</p>
<ul class="lvl-2">
<li class="lvl-4">findall()搜索字符串，以列表类型返回全部能匹配的子串</li>
</ul>
</li>
<li class="lvl-2">
<p>re.finditer(pattern, string, flags=0)</p>
<ul class="lvl-2">
<li class="lvl-4">finditer()搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</li>
</ul>
</li>
<li class="lvl-2">
<p>re.sub(pattern, repl, string, count=0, flags=0)</p>
<ul class="lvl-2">
<li class="lvl-4">sub()替换字符串中的匹配项</li>
</ul>
</li>
<li class="lvl-2">
<p>re.compile(pattern[, flags])</p>
<ul class="lvl-2">
<li class="lvl-4">compile()函数用于编译正则表达式，生成一个正则表达式（Pattern）对象，供match()和search()这两个函数使用</li>
</ul>
</li>
</ul>
<blockquote>
<p>re.match()和re.search()的区别: re.match()只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search()匹配整个字符串，直到找到一个匹配。<br>
re.split()返回的是一个列表，列表中的元素是分割后的字符串，如果分割符是连续的，那么中间的空字符串会被忽略。<br>
re.sub()返回的是一个字符串，替换后的字符串。</p>
</blockquote>
<h2 id="正则表达式的基本知识">正则表达式的基本知识</h2>
<ol>
<li class="lvl-3">
<p>元字符</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>. 匹配除换行符以外的任意字符</p>
</li>
<li class="lvl-2">
<p>\w 匹配字母或数字或下划线或汉字</p>
</li>
<li class="lvl-2">
<p>\s 匹配任意的空白符</p>
</li>
<li class="lvl-2">
<p>\d 匹配数字</p>
</li>
<li class="lvl-2">
<p>\b 匹配单词的开始或结束</p>
</li>
<li class="lvl-2">
<p>^ 匹配字符串的开始</p>
</li>
<li class="lvl-2">
<p>$ 匹配字符串的结束|</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>重复限定符</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>*</code> 匹配0个或多个的表达式</p>
</li>
<li class="lvl-2">
<p><code>+</code> 匹配1个或多个的表达式</p>
</li>
<li class="lvl-2">
<p><code>?</code> 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</p>
</li>
<li class="lvl-2">
<p><code>&#123;n&#125;</code> 匹配n个前面表达式</p>
</li>
<li class="lvl-2">
<p><code>&#123;n,&#125;</code> 匹配n个或者多个前面表达式</p>
</li>
<li class="lvl-2">
<p><code>&#123;n,m&#125;</code> 匹配n到m个前面表达式</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配有abc 开头的字符串</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^abc&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;\babc&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配有123 结尾的字符串</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;123$&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;123\b&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配8位数字的字符串</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d\d\d\d\d\d\d\d$&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>)</span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d&#123;8&#125;$&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配1开头的11位数字的字符串</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^1\d\d\d\d\d\d\d\d\d\d$&#x27;</span>, <span class="string">&#x27;12345678901&#x27;</span>)</span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^1\d&#123;10&#125;$&#x27;</span>, <span class="string">&#x27;12345678901&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配14~18位的数字</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d&#123;14,18&#125;$&#x27;</span>, <span class="string">&#x27;123456789012345&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以abc开头，以123结尾的字符串</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^abc.*123$&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以a开头，0个或多个b结尾的字符串</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;^a.*b$&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>分组，或，区间，非</p>
<ul class="lvl-2">
<li class="lvl-6">() 将括号中的字符作为一个分组</li>
<li class="lvl-6">| 匹配左右任意一个表达式</li>
<li class="lvl-6">[] 匹配[]中列举的字符</li>
<li class="lvl-6">[^] 匹配除了[]中列举的字符以外的字符|</li>
</ul>
</li>
</ol>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配以0个或多个abc开头</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;(abc)*&#x27;</span>, <span class="string">&#x27;abcabcabc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以abc或者123开头</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;(abc|123)&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以abc或者123开头</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;[abc123]&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以除了abc或者123以外的字符开头</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;[^abc123]&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>转义</p>
<ul class="lvl-2">
<li class="lvl-6">\ 转义字符</li>
<li class="lvl-6">\A 匹配字符串开始</li>
<li class="lvl-6">\Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串</li>
<li class="lvl-6">\z 匹配字符串结束</li>
<li class="lvl-6">\G 匹配最后匹配完成的位置</li>
<li class="lvl-6">\b 匹配一个单词边界，也就是指单词和空格间的位置</li>
<li class="lvl-6">\B 匹配非单词边界</li>
<li class="lvl-6">\n 匹配一个换行符</li>
<li class="lvl-6">\t 匹配一个制表符</li>
<li class="lvl-6">\r 匹配一个回车符</li>
<li class="lvl-6">\v 匹配一个垂直制表符</li>
<li class="lvl-6">\f 匹配一个换页符</li>
<li class="lvl-6">\ddd 匹配一个八进制数，其值小于256</li>
<li class="lvl-6">\xdd 匹配一个十六进制数，其值小于256</li>
<li class="lvl-6">\uxxxx 匹配一个十六进制数，其值小于65536</li>
<li class="lvl-6">\Uxxxxxxxx 匹配一个十六进制数，其值小于4294967296</li>
<li class="lvl-6">\num 匹配num个前面的分组</li>
<li class="lvl-6">\A 匹配字符串开始</li>
<li class="lvl-6">\Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串</li>
<li class="lvl-6">\z 匹配字符串结束</li>
<li class="lvl-6">\G 匹配最后匹配完成的位置</li>
<li class="lvl-6">\b 匹配一个单词边界，也就是指单词和空格间的位置</li>
<li class="lvl-6">\B 匹配非单词边界</li>
<li class="lvl-6">\n 匹配一个换行符</li>
<li class="lvl-6">\t 匹配一个制表符</li>
<li class="lvl-6">\r 匹配一个回车符</li>
<li class="lvl-6">\v 匹配一个垂直制表符</li>
<li class="lvl-6">\f 匹配一个换页符</li>
<li class="lvl-6">\ddd 匹配一个八进制数，其值小于256</li>
<li class="lvl-6">\xdd 匹配一个十六进制数，其值小于256</li>
</ul>
</li>
</ol>
<blockquote>
<p>转义符中，常用的有：\d \w \s \b \A \Z \z \G \n \t \r \v \f \ddd \xdd \uxxxx \Uxxxxxxxx \num</p>
</blockquote>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配以(abc)开头</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;\(abc\)&#x27;</span>, <span class="string">&#x27;(abc)&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="高级正则表达式">高级正则表达式</h2>
<h3 id="应用">应用</h3>
<ol>
<li class="lvl-3">
<p>数字编号捕获组</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th>分组</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td>(0\d{2})-(\d{8})</td>
<td>010-12345678</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td>0\d{2}</td>
<td>010</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>\d{8}</td>
<td>12345678</td>
</tr>
</tbody>
</table>
<ol start="2">
<li class="lvl-3">
<p>命名编号捕获组</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th>分组</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td>(?P<area>0\d{2})-(?P<phone>\d{8})</phone></td>
<td>010-12345678</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td>area</td>
<td>010</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>phone</td>
<td>12345678</td>
</tr>
</tbody>
</table>
<ol start="3">
<li class="lvl-3">
<p>非捕获组</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th>分组</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td>(?:0\d{2})-(?:\d{8})</td>
<td>010-12345678</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td>0\d{2}</td>
<td>010</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>\d{8}</td>
<td>12345678</td>
</tr>
</tbody>
</table>
<h3 id="反向引用">反向引用</h3>
<p>捕获会将匹配的内容保存在内存中，不仅可以在正则表达式外部程序中使用，还可以在正则表达式中使用，这就是反向引用。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数字编号反向引用</p>
<ul class="lvl-2">
<li class="lvl-4"><code>\k&lt;num&gt;</code> 匹配num个前面的分组</li>
<li class="lvl-4"><code>\num</code> 匹配num个前面的分组</li>
</ul>
</li>
<li class="lvl-2">
<p>命名编号反向引用</p>
<ul class="lvl-2">
<li class="lvl-4"><code>\k&lt;name&gt;</code> 匹配name分组</li>
<li class="lvl-4"><code>\'name'</code> 匹配name分组</li>
</ul>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找aabbbgbddesddfiid 里面的重复的单词</span></span><br><span class="line"><span class="comment"># 1. 匹配到一个字母</span></span><br><span class="line"><span class="comment"># 1.1 \w 匹配任意字母</span></span><br><span class="line"><span class="comment"># 1.2 (\w) 匹配任意字母</span></span><br><span class="line"><span class="comment"># 1.3 (\w+) 分组才能捕获，匹配任意字母.</span></span><br><span class="line"><span class="comment"># 1.3 (\w+)\1 匹配任意字母,且与第一步匹配到的字母相同</span></span><br><span class="line"><span class="comment"># 2. 匹配到一个字母，且与第一步匹配到的字母相同</span></span><br><span class="line"><span class="comment"># 3. 如果一样，继续匹配，如果不一样，返回第一步</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;(\w+)\1&#x27;</span>, <span class="string">&#x27;aabbbgbddesddfiid&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="贪婪与非贪婪">贪婪与非贪婪</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>贪婪：尽可能多的匹配</p>
<blockquote>
<p>默认情况下，正则表达式是贪婪的，也就是说，尽可能多的匹配字符</p>
</blockquote>
</li>
<li class="lvl-2">
<p>非贪婪：尽可能少的匹配</p>
<blockquote>
<p>在量词后面加上?，可以使量词变成非贪婪的，也就是说，尽可能少的匹配字符</p>
</blockquote>
<ul class="lvl-2">
<li class="lvl-4">*? 重复任意次，但尽可能少重复</li>
<li class="lvl-4">+? 重复1次或更多次，但尽可能少重复</li>
<li class="lvl-4">?? 重复0次或1次，但尽可能少重复</li>
<li class="lvl-4">{n,m}? 重复n到m次，但尽可能少重复</li>
<li class="lvl-4">{n,}? 重复n次以上，但尽可能少重复</li>
</ul>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建字符串str:611248905278918904</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;611248905278918904&#x27;</span></span><br><span class="line"><span class="comment"># 使用贪婪模式，正则表达式：(\d&#123;1,2&#125;)(\d&#123;8,9&#125;)</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;(\d&#123;1,2&#125;)(\d&#123;8,9&#125;)&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 输出结果：&lt;re.Match object; span=(0, 11), match=&#x27;61124890527&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用非贪婪模式，正则表达式：(\d&#123;1,2&#125;?)(\d&#123;8,9&#125;?)</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&#x27;(\d&#123;1,2&#125;?)(\d&#123;8,9&#125;?)&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 输出结果：&lt;re.Match object; span=(0, 9), match=&#x27;611248905&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="反义">反义</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>\D 匹配任意非数字字符</p>
</li>
<li class="lvl-2">
<p>\W 匹配任意非字母字符</p>
</li>
<li class="lvl-2">
<p>\S 匹配任意非空白字符</p>
</li>
<li class="lvl-2">
<p>\B 匹配非单词边界</p>
</li>
<li class="lvl-2">
<p>[^x] 匹配除了x以外的任意字符</p>
</li>
<li class="lvl-2">
<p>[^aeiou] 匹配除了aeiou这几个字母以外的任意字符</p>
</li>
</ul>
<p>参考</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWdleHAvcmVnZXhwLXR1dG9yaWFsLmh0bWw=">正则表达式 – 教程 | 菜鸟教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9weXRob24vcHl0aG9uLXJlZy1leHByZXNzaW9ucy5odG1s">Python 正则表达式 | 菜鸟教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="dHRwczovL3d3dy5iaWxpYmlsaS5jb20vdmlkZW8vQlYxSzM0MTE4N3dXLz9zaGFyZV9zb3VyY2U9Y29weV93ZWImdmRfc291cmNlPTA2ZWRkM2IzZWViY2VhMDgwYmRlNjBlYzg1NzJhNTRk">你是如何学会正则表达式的？_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<iframe src="//player.bilibili.com/player.html?aid=421618240&bvid=BV1K341187wW&cid=437204619&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-测试</title>
    <url>/2024/02/11/1/</url>
    <content><![CDATA[<h2 id="软件测试">软件测试</h2>
<p>为什么要测试？因为软件可能有缺陷，而缺陷可能导致软件无法正常工作。软件测试的目的是发现缺陷，以便修复缺陷。</p>
<p>测试的完整的定义是：测试是一个过程，这个过程中，我们发现了软件的缺陷。</p>
<p>所以，软件测试是发现缺陷的过程。</p>
<p>软件测试应该贯穿整个软件开发的周期。</p>
<h2 id="软件测试的原则">软件测试的原则</h2>
<ol>
<li class="lvl-3">
<p>完全测试是不可能的。</p>
</li>
<li class="lvl-3">
<p>测试存在风险，没有十全十美的测试方法</p>
</li>
<li class="lvl-3">
<p>软件测试只能表明缺陷的存在，不能表明缺陷的不存在</p>
</li>
<li class="lvl-3">
<p>软件产品中潜在的错误数与已发现的错误数成正比（集群现象）</p>
</li>
<li class="lvl-3">
<p>让不同的人进行测试（杀虫剂效应）</p>
</li>
<li class="lvl-3">
<p>开发与测试应该分离</p>
</li>
<li class="lvl-3">
<p>尽早不断地测试，应使测试贯穿整个软件开发周期</p>
</li>
<li class="lvl-3">
<p>设计测试用例时，应该考虑边界条件，特殊输入和错误输入（健壮性测试）</p>
</li>
<li class="lvl-3">
<p>集中测试容易出错或者错误较多的模块（80/20原则）</p>
</li>
<li class="lvl-4">
<p>长期保留测试用例</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FzYW4vcC82ODg4MDM4Lmh0bWw=">软件测试中的80/20原则<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9uYW9kZW5nLmNvbS5jbi96aC9wb3N0cy9vdGhlcnMvODAtMjAtcnVsZS8=">软件研发质量中的二八法则<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="软件测试模型">软件测试模型</h2>
<p>一个模型应该阐述6个方面：</p>
<ol>
<li class="lvl-3">
<p>测试时间</p>
</li>
<li class="lvl-3">
<p>测试步骤</p>
</li>
<li class="lvl-3">
<p>计划测试</p>
</li>
<li class="lvl-3">
<p>不同阶段中应该关注的测试对象</p>
</li>
<li class="lvl-3">
<p>测试过程中应该考虑哪些问题</p>
</li>
<li class="lvl-3">
<p>测试的目标</p>
</li>
</ol>
<p>常用的有 V 模型、W 模型、敏捷模型、螺旋模型、瀑布模型。</p>
<h2 id="测试用例">测试用例</h2>
<p>测试用例是一组输入、执行条件和预期结果的集合。测试用例是一个测试计划的基本单元。</p>
<p>测试用例 = 测试数据 + 测试环境 + 预期结果</p>
<p>测试结果 = 测试数据 + 实际结果 + 预期结果</p>
<p><strong>一个好的测试用例能够发现缺陷，而且能够重现缺陷。</strong></p>
<h2 id="软件测试方法">软件测试方法</h2>
<h3 id="静态分析方法（人工测试）">静态分析方法（人工测试）</h3>
<p>静态分析方法是指在程序运行之前对程序进行检查的方法。</p>
<ol>
<li class="lvl-3">
<p>桌前测试（自检）指的是程序员自己检查自己的代码。</p>
</li>
<li class="lvl-3">
<p>代码会审代码会审是一种由多个人参与的代码检查方法。</p>
</li>
<li class="lvl-3">
<p>代码走查是一种非正式的代码检查方法，由多名测试人员模拟程序的执行过程，发现程序中的缺陷。</p>
</li>
</ol>
<h3 id="动态测试方法（自动测试）">动态测试方法（自动测试）</h3>
<p>选择适当的测试用例，运行程序，观察程序的行为，以发现程序中的缺陷。</p>
<ol>
<li class="lvl-3">
<p>黑盒测试（功能测试）黑盒测试是一种测试方法，它只关心程序的输入和输出，而不关心程序的内部结构。</p>
</li>
<li class="lvl-3">
<p>白盒测试白盒测试是一种测试方法，它关心程序的内部结构，以发现程序中的缺陷。</p>
</li>
</ol>
<h2 id="黑盒测试">黑盒测试</h2>
<h3 id="等价类划分">等价类划分</h3>
<p>等价类划分是一种黑盒测试方法，它将输入数据划分为若干个等价类，然后从每个等价类中选择一个测试用例。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>有效等价类：有效等价类是指输入数据的一个子集，这个子集包含了程序的一个有效输入。</p>
</li>
<li class="lvl-2">
<p>无效等价类：无效等价类是指输入数据的一个子集，这个子集包含了程序的一个无效输入。</p>
</li>
</ul>
<p>等价类划分的步骤：</p>
<ol>
<li class="lvl-3">
<p>确定输入数据的等价类。</p>
</li>
<li class="lvl-3">
<p>选择测试用例。</p>
</li>
</ol>
<h4 id="等价划分法分类的启发式规则">等价划分法分类的启发式规则</h4>
<ol>
<li class="lvl-3">
<p>如果输入数据是一个范围，那么等价类划分法的启发式规则是：选择范围的边界值。</p>
</li>
<li class="lvl-3">
<p>如果输入数据是一个集合，那么等价类划分法的启发式规则是：选择集合的最小值和最大值。</p>
</li>
<li class="lvl-3">
<p>如果输入数据是一个布尔值，那么等价类划分法的启发式规则是：选择真和假。</p>
</li>
<li class="lvl-3">
<p>如果输入数据是一个字符串，那么等价类划分法的启发式规则是：选择字符串的最小长度和最大长度。</p>
</li>
</ol>
<p>etc…</p>
<h3 id="边界值分析">边界值分析</h3>
<p>边界值分析是一种黑盒测试方法，它将输入数据的边界值作为测试用例。</p>
<p>取值范围的边界值是指取值范围的最小值、最大值和最小值与最大值之间的值。</p>
<p>应当遵循的原则：</p>
<ol>
<li class="lvl-3">
<p>如果输入数据的取值范围是有限的，那么边界值分析的测试用例应该包括取值范围的边界值。</p>
</li>
<li class="lvl-3">
<p>如果输入数据的取值范围是无限的，那么边界值分析的测试用例应该包括取值范围的边界值和取值范围的边界值附近的值。</p>
</li>
</ol>
<p>边界值分析的步骤：</p>
<ol>
<li class="lvl-3">
<p>确定输入数据的边界值。</p>
</li>
<li class="lvl-3">
<p>选择测试用例。</p>
</li>
</ol>
<h3 id="因果图">因果图</h3>
<p>因果图是一种黑盒测试方法，它将程序的输入和输出之间的因果关系表示为一个图。</p>
<p>因果图有 4 个符号：恒等符号、逻辑与符号、逻辑或符号、逻辑非符号。</p>
<p>从输入、输出考虑，有 以下约束条件：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>E（互斥）</p>
</li>
<li class="lvl-2">
<p>I（包含）</p>
</li>
<li class="lvl-2">
<p>O（唯一）</p>
</li>
<li class="lvl-2">
<p>R（要求）</p>
</li>
<li class="lvl-2">
<p>M （强制/屏蔽）</p>
</li>
</ul>
<h3 id="决策表">决策表</h3>
<p>决策表是一种黑盒测试方法，它将程序的输入和输出之间的因果关系表示为一个表。</p>
<p>决策表的组成部分：</p>
<ol>
<li class="lvl-3">
<p>条件</p>
</li>
<li class="lvl-3">
<p>动作</p>
</li>
<li class="lvl-3">
<p>条件的取值</p>
</li>
<li class="lvl-3">
<p>动作的取值</p>
</li>
</ol>
<p>决策表的步骤：</p>
<ol>
<li class="lvl-3">
<p>确定条件和动作。</p>
</li>
<li class="lvl-3">
<p>确定条件的取值。</p>
</li>
<li class="lvl-3">
<p>确定动作的取值。</p>
</li>
<li class="lvl-3">
<p>选择测试用例。</p>
</li>
</ol>
<h3 id="场景法">场景法</h3>
<p>场景法是一种黑盒测试方法，它将程序的输入和输出之间的因果关系表示为一个场景。</p>
<p>基本流：是指程序的正常执行流程。最简单路径，表示程序的正常执行流程。</p>
<p>备选流：是指程序的异常执行流程。程序的异常执行流程有多条，每条异常执行流程都是一个备选流。</p>
<h2 id="白盒测试">白盒测试</h2>
<p>白盒测试，也叫玻璃盒测试，它关注的是程序内部的逻辑结构，是基于程序内部结构的测试。白盒测试的目的是检查程序的内部结构，以验证程序是否按照设计要求正确执行。白盒测试的主要任务是设计测试用例，以检查程序的内部逻辑结构是否正确。</p>
<h3 id="逻辑覆盖">逻辑覆盖</h3>
<p>逻辑覆盖是白盒测试的一种测试方法，以程序内在的逻辑结构为依据，设计测试用例，以检查程序的内部逻辑结构是否正确。逻辑覆盖主要有以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>语句覆盖：要求每个语句至少被执行一次。</p>
</li>
<li class="lvl-2">
<p>判定覆盖：要求每个判定的每个分支至少被执行一次。</p>
</li>
<li class="lvl-2">
<p>条件覆盖：要求每个判定的每个条件的每个取值至少被执行一次。</p>
</li>
<li class="lvl-2">
<p>判定/条件覆盖：要求每个判定的每个条件的每个取值至少被执行一次，且每个判定的每个分支至少被执行一次。</p>
</li>
<li class="lvl-2">
<p>条件组合覆盖：要求每个判定的每个条件的每个取值至少被执行一次，且每个判定的每个条件的每个组合至少被执行一次。</p>
</li>
<li class="lvl-2">
<p>路径覆盖：要求每个可能的路径至少被执行一次。</p>
</li>
</ul>
<h3 id="基本路径测试">基本路径测试</h3>
<p>基本路径测试是白盒测试的一种测试方法，它是一种结构化测试方法，是基于程序的内部结构的测试。基本路径测试的目的是检查程序的内部逻辑结构是否正确。基本路径测试的主要任务是设计测试用例，以检查程序的内部逻辑结构是否正确。</p>
<h3 id="控制流图">控制流图</h3>
<p>控制流图是一种图形化的表示程序的内部逻辑结构的方法，它是一种结构化的表示程序的内部逻辑结构的方法。控制流图的节点表示程序的基本块，边表示程序的控制流。控制流图的目的是帮助程序员理解程序的内部逻辑结构，以便设计测试用例。</p>
<h3 id="调试">调试</h3>
<p>调试是一种发现程序错误的方法，它是一种发现程序错误的方法。调试的目的是发现程序的错误，以便修正程序的错误。调试的主要任务是发现程序的错误，以便修正程序的错误。</p>
<h4 id="调试工具">调试工具</h4>
<p>调试工具是一种帮助程序员发现程序错误的工具，它是一种帮助程序员发现程序错误的工具。调试工具的目的是帮助程序员发现程序的错误，以便修正程序的错误。调试工具的主要任务是帮助程序员发现程序的错误，以便修正程序的错误。</p>
]]></content>
      <categories>
        <category>SoftwareEngineering</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Yuzhii的Springboot3笔记【1】</title>
    <url>/2024/04/11/1/</url>
    <content><![CDATA[<h2 id="Spring-Boot-特性">Spring Boot 特性</h2>
<p>Spring Boot 是 Spring 的一个子项目，它是 Spring 的简化版，目的是简化 Spring 应用的初始搭建以及开发过程。Spring Boot 通过约定大于配置的方式，简化了 Spring 应用的开发。</p>
<p>具体的介绍和特性可以参考</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWJvb3Q=">Spring Boot 官网<i class="fa fa-external-link-alt"></i></span></p>
<p>截至24年4月，Spring Boot 的最新版本是 3.2.4.</p>
<p>开发环境：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>openjdk 21.0.2 2024-01-16 LTS</p>
</li>
<li class="lvl-2">
<p>IntelliJ IDEA 2024.1.1</p>
</li>
<li class="lvl-2">
<p>Spring Boot 3.2.4</p>
</li>
<li class="lvl-2">
<p>Windows 11 Pro 23H2</p>
</li>
</ul>
<h2 id="Hello-World">Hello World</h2>
<ol>
<li class="lvl-3">
<p>创建一个使用 maven 的空项目</p>
</li>
<li class="lvl-3">
<p>创建一个模块 <code>springboot3-01-demo</code></p>
</li>
<li class="lvl-3">
<p>编辑 <code>pom.xml</code> 文件，添加 Spring Boot 的依赖</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所有Spring Boot的依赖都是从这里继承的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Web开发的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>在模块中创建一个 <code>org.example.boot.MainApplication</code> 类</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yuzhii.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yuzhii</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/11/21:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 项目启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// 标注这是一个SpringBoot应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>@SpringBootApplication</code> 注解是一个组合注解，包含了 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 注解。</p>
</blockquote>
<ol start="5">
<li class="lvl-3">
<p>运行，访问 <code>http://localhost:8080</code>，可以看到 <code>Whitelabel Error Page</code> 页面， 状态为404，说明项目启动成功。</p>
</li>
<li class="lvl-3">
<p>在 boot 下新建类 <code>controller.HelloController</code></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yuzhii.boot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuzhii</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-04-11 下午9:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>@RestController</code> 注解是 <code>@Controller</code> 和 <code>@ResponseBody</code> 注解的组合，表示这是一个控制器，并且返回的数据直接写给浏览器，如果是对象转为 json 数据。</p>
</blockquote>
<ol start="7">
<li class="lvl-3">
<p>访问 <code>http://localhost:8080/hello</code>，可以看到 <code>Hello,Spring Boot 3!</code>，说明项目启动成功。</p>
</li>
<li class="lvl-3">
<p>打包，pom.xml 中添加插件</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package #把项目打成可执行的jar包</span><br><span class="line">java -jar demo.jar #启动项目</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以在IDEA中直接使用 Maven 插件运行 <code>spring-boot:run</code>，也可以直接运行 <code>MainApplication</code> 类。打包也可以直接使用 Maven 插件 <code>package</code>（一般要先 <code>claen</code>）。<s>注意：如果是在IDEA中运行，需要在 <code>Edit Configurations</code> 中添加 <code>Main Class</code> 为 <code>org.yuzhii.boot.MainApplication</code>。</s></p>
</blockquote>
<h3 id="application-properties">application.properties</h3>
<p>我们可以直接在生成的jar包的同级目录下创建一个 <code>application.properties</code> 文件，来配置一些属性。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure>
<p>这样我们就可以通过 <code>http://localhost:8081/hello</code> 来访问我们的接口了。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvYXBwbGljYXRpb24tcHJvcGVydGllcy5odG1sI2FwcGVuZGl4LmFwcGxpY2F0aW9uLXByb3BlcnRpZXM=">Spring Boot Common Application Properties<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Spring-Initializr">Spring Initializr</h2>
<p>Spring Initializr 是一个 Web 项目，可以帮助我们快速创建 Spring Boot 项目。</p>
<p>在 IDEA 中现在已经更名为 <code>Spring Boot</code>(IntelliJ IDEA 2024.1.1)，可以直接在 IDEA 中创建 Spring Boot 项目。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v">Spring Initializr<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li class="lvl-3">
<p>创建一个模块</p>
</li>
<li class="lvl-3">
<p>选择 <code>Spring Boot</code>，点击 <code>Next</code></p>
</li>
<li class="lvl-3">
<p>添加 <code>Spring Web</code> 依赖，点击 <code>Create</code> 创建项目。(可以根据需要选择其他依赖)</p>
</li>
</ol>
<p>可以看到生成的项目结构和我们手动创建的项目结构是一样的。</p>
<p>其中 resources 目录下有一个 <code>application.properties</code> 文件，可以用来配置一些属性。<br>
<code>static</code> 目录下可以放一些静态资源，比如 html、css、js 等。<br>
<code>templates</code> 目录下可以放一些模板文件，比如 thymeleaf 模板。</p>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWJvb3Q=">Spring Boot 官网<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2xlaWZlbmd5YW5nL3NwcmluZ2Jvb3QzL3Z6bm1kZWI0a2duOTB2cng=">SpringBoot3全栈指南<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGVpZmVuZ3lhbmcvc3ByaW5nLWJvb3QtMw==">gitee 案例 “leifengyang / spring-boot-3”<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUVzNHkxcTdCZj9wPTImdmRfc291cmNlPWU1YWNmOGQ1MjQzYzIzNTU3MGJhZjRiNjA1MGVkNjJk">bilibili 教程 “尚硅谷SpringBoot零基础教程，面试&amp;加薪必会springboot3”<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Yuzhii的Springboot3笔记【3】</title>
    <url>/2024/05/08/1/</url>
    <content><![CDATA[<h2 id="条件注解">条件注解</h2>
<p>衔接上文，在<code>org.yuzhii.boot</code>模块中，我新建了一个<code>org.yuzhii.boot.config.AppConfig2</code>类，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yuzhii.boot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.FastsqlException;</span><br><span class="line"><span class="comment">// 这里导入的是druid的异常类</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.yuzhii.boot.bean.Cat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnClass(FastsqlException.class)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">cat01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在<code>org.yuzhii.boot</code>模块中，我新建了一个<code>org.yuzhii.boot.bean.Dog</code>类，然后在程序入口进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : ioc.getBeanNamesForType(Cat.class)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Cat:&quot;</span> + s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : ioc.getBeanNamesForType(Dog.class)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Dog:&quot;</span> + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入 <code>ioc.getBeanNamesForType(Dog.class).for</code> 时，IDEA会自动提示 <code>forEach</code> 方法，按下 <code>Tab</code> 键，可以自动补全。</p>
</blockquote>
<p>因为此时没有 Dog 类的实例，所以只会输出 Cat 类的实例。</p>
<p>复制之前 Cat 类的代码，然后将类名改为 Dog，并且加上 <code>@Component</code>，再次运行程序，此时会输出 Cat 和 Dog 类的实例。</p>
<p>回到 <code>AppConfig2</code> 类，添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean(value = Dog.class)</span> <span class="comment">// 这个注解的意思是：当容器中有Dog这个bean的时候，才会创建这个bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">zhangsan</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = Dog.class)</span> <span class="comment">// 这个注解的意思是：当容器中没有Dog这个bean的时候，才会创建这个bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">lisi</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回到程序入口，再次运行程序，此时会输出 Cat 和 Dog 类的实例，以及 zhangsan 和 lisi 的实例。</p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Yuzhii的Springboot3笔记【2】</title>
    <url>/2024/04/18/1/</url>
    <content><![CDATA[<p>Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不应该影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2phdmEtYW5ub3RhdGlvbi5odG1s">Java 注解<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="组件注册">组件注册</h2>
<p>紧接上回，我新建了一个模块，然后，在该模块中新建 <code>org.yuzhii.boot.bean.Cat</code> 类，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yuzhii.boot.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuzhii</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-04-18 下午8:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips: 当写完 <code>private</code> 属性后，可以使用 <code>Alt + Insert</code> 快捷键，选择 <code>Getter and Setter</code> 自动生成 <code>getter</code> 和 <code>setter</code> 方法。</p>
</blockquote>
<p>然后，再新建一个 <code>org.yuzhii.boot.User</code> 类，同样只有 <code>id</code> 和 <code>name</code> 两个属性</p>
<p>如果要将 <code>Cat</code> 和 <code>User</code> 进行配置，传统的做法是在新建一个xml文件，然后在xml文件中进行配置，比如在 <code>resources</code> 目录下新建一个 <code>ioc.xml</code> 文件，然后在该文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.yuzhii.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.yuzhii.boot.bean.Cat&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小猫&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是，SpringBoot 为我们提供了一种新的方式，即使用 <code>@Configuration</code> 和 <code>@Bean</code> 注解进行配置。</p>
<p>在 <code>org.yuzhii.boot</code> 包下新建一个 <code>config.AppConfig</code> 类，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yuzhii.boot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.yuzhii.boot.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuzhii</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-04-18 下午8:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;userHaha&quot;)</span> <span class="comment">//替代xml中的&lt;bean&gt;标签</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;yuzhii&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 Application 类中进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot302DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">ioc</span> <span class="operator">=</span> SpringApplication.run(Springboot302DemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">        String[] forType = ioc.getBeanNamesForType(User.class);</span><br><span class="line">        <span class="keyword">for</span> (String s : forType) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">userHaha1</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userHaha&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">userHaha2</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;userHaha&quot;</span>);</span><br><span class="line">        System.out.println(userHaha2 == userHaha1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后，可以看到控制台输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">userHaha</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
<p>如果给之前的 @Bean 注解添加一个 @Scope 注解，可以改变作用域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">// 多实例</span></span><br><span class="line"><span class="meta">@Bean(&quot;userHaha&quot;)</span> <span class="comment">//替代xml中的&lt;bean&gt;标签</span></span><br></pre></td></tr></table></figure>
<p>再次运行，可以看到控制台输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">userHaha</span><br><span class="line">false</span><br></pre></td></tr></table></figure>
<p>这是因为，<code>@Scope(&quot;prototype&quot;)</code> 注解表示多实例，每次获取的都是一个新的实例。</p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>尝鲜AI画图：Stable-Diffusion</title>
    <url>/2023/03/13/1/</url>
    <content><![CDATA[<h2 id="准备">准备</h2>
<ul class="lvl-0">
<li class="lvl-2">安装python3.10</li>
<li class="lvl-2">安装Git</li>
</ul>
<div class="note warning"><h3 id="注意">注意</h3>
<p>如果你是Windows用户，请不要使用最新的python3.11部署SD,因为stable-diffusion的依赖包pytorch不支持windows的python3.11,将系统环境变量的python改为3.10版本即可。</p>
</div>
<blockquote>
<p>官方推荐使用3.10.6版本，但是我使用3.10.10版本也可以正常运行</p>
</blockquote>
<h2 id="SD-WebUI">SD-WebUI</h2>
<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FVVE9NQVRJQzExMTEvc3RhYmxlLWRpZmZ1c2lvbi13ZWJ1aQ==">https://github.com/AUTOMATIC1111/stable-diffusion-webui<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="安装SD-WebUI">安装SD-WebUI</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:AUTOMATIC1111/stable-diffusion-webui.git</span><br></pre></td></tr></table></figure>
<h3 id="运行SD-WebUI">运行SD-WebUI</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> stable-diffusion-webui</span><br><span class="line">call webui-user.bat</span><br></pre></td></tr></table></figure>
<p>等待程序自动创建所需环境，安装所有依赖包，注意：如果依赖包安装错误，请手动安装依赖包，或者检查你的网络环境。但是，这里提供一种方法解决因网络问题而无法安装。</p>
<blockquote>
<p>打开SD-WebUI目录下的launch.py文件，将其中所有依赖包的github源稍加修改，如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖包修改前</span></span><br><span class="line">    gfpgan_package = os.environ.get(<span class="string">&#x27;GFPGAN_PACKAGE&#x27;</span>, <span class="string">&quot;git+https://github.com/TencentARC/GFPGAN.git@8d2447a2d918f8eba5a4a01463fd48e45126a379&quot;</span>)</span><br><span class="line"><span class="comment"># 依赖包修改后</span></span><br><span class="line">    gfpgan_package = os.environ.get(<span class="string">&#x27;GFPGAN_PACKAGE&#x27;</span>, <span class="string">&quot;git+https://ghproxy.com/https://github.com/TencentARC/GFPGAN.git@8d2447a2d918f8eba5a4a01463fd48e45126a379&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>即在github源前加上<code>https://ghproxy.com/</code>，然后重新运行webui.bat，等待程序自动创建所需环境，安装所有依赖包。</p>
<h3 id="运行">运行</h3>
<p>直接运行webui.bat即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call webui-user.bat</span><br></pre></td></tr></table></figure>
<p>程序会提示你打开一个本地网页，ctrl+鼠标左键点击即可打开网页。</p>
<blockquote>
<p>一般，这个网址会是：<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo3ODYwLw==">http://127.0.0.1:7860/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="模型">模型</h2>
<h3 id="Stable-diffusion">Stable-diffusion</h3>
<p>如今Stable-Diffusion如火如荼，已有很多相关社区，这里推荐两个时下热门的社区：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jaXZpdGFpLmNvbS8=">CIVITAI<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9odWdnaW5nZmFjZS5jby8=">Hugging Face<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>我使用了两个热门的模型：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Anything4.5 <code>anything-v4.5-pruned.safetensors</code></p>
</li>
<li class="lvl-2">
<p>chilloutmix <code>chilloutmix_NiPrunedFp32Fix.safetensors</code></p>
</li>
</ul>
<h3 id="Lora">Lora</h3>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIxMDYuMDk2ODU=">LoRA: Low-Rank Adaptation of Large Language Models<i class="fa fa-external-link-alt"></i></span>：大语言模型的低秩适应是微软研究人员为处理微调大语言模型的问题而引入的一项新技术。具有数十亿个参数的强大模型（例如 GPT-3）为了适应特定任务或领域而进行微调的成本非常高。LoRA 建议冻结预先训练的模型权重并注入可训练层 （秩分解矩阵） 在每个变压器块中.这大大减少了可训练参数的数量和 GPU 内存要求，因为不需要为大多数模型权重计算梯度。研究人员发现，通过专注于大语言模型的Transformer注意力块，LoRA的微调质量与完整模型微调相当，同时速度更快，需要的计算更少。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>cuteGirlMix4_v10.safetensors</code></p>
</li>
<li class="lvl-2">
<p><code>daili_v20.safetensors</code></p>
</li>
<li class="lvl-2">
<p><code>japaneseDollLikeness_v10.safetensors</code></p>
</li>
<li class="lvl-2">
<p><code>koreanDollLikeness_v10.safetensors</code></p>
</li>
<li class="lvl-2">
<p><code>yaeMikoRealistic_yaemikoMixed.safetensors</code></p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<h3 id="Extensions">Extensions</h3>
<p>我使用了</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pa3ViaWxsL3NkLXdlYnVpLWNvbnRyb2xuZXQ=">骨架分析插件ControlNet<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pa3ViaWxsL3NkLXdlYnVpLWNvbnRyb2xuZXQ=">Webui中文化插件<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p>etc.</p>
</li>
</ul>
<p>安装方法：打开SD-WebUI，在插件管理中，安装即可。</p>
<h2 id="使用">使用</h2>
<p>通常是使用文生图,一般流程是：选择模型，输入正向提示词，反向提示词，选择采样器，调整采样步数，调整分辨率，提示词引导系数等，然后点击生成图片。或者使用图生图，与文生图类似，只是输入的是图片，这里不再赘述。<br>
Stable-Diffusion还有很多功能，有兴趣的可以自行探索。</p>
<h2 id="欣赏">欣赏</h2>
<h3 id="我生成的图片">我生成的图片</h3>
<blockquote>
<p><strong>以下图片可能引起您的不适，请斟酌后点击展开</strong></p>
</blockquote>
<details>
<summary>点击展开</summary>
<br>
<del>赛博炼丹了属于是</del>
<p><img src="./The-AI-Drawing-Tool-Stable-Diffusion/images/00001-1949489537.png" alt><br>
<img src="./The-AI-Drawing-Tool-Stable-Diffusion/images/00042-3202830595.png" alt><br>
<img src="./The-AI-Drawing-Tool-Stable-Diffusion/images/00063-561642427.png" alt></p>
</details>
<style>
# box1 {
    width: 80%;
    height: 130px;
    background-color: white;
    border: 5px solid #00bcd4;
    border-radius: 50px;
    padding: 8px 12px;
    margin-bottom: 20px;
    text-align: center;
    line-height: 30px;
    margin: 0 auto;
    text-decoration: none;
}
# box2 {
    width: 20%;
    height: 20%;
    background-color: #f5f5f5;
    border: 2px solid #000000;
    border-radius: 50px;
    padding: 8px 12px;
    text-align: center;
    line-height: 50px;
    margin: 0 auto;
    position: relative;
    text-decoration: none;
}
# box2 a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    line-height: 35px;
    text-decoration: none;
}
# box2 a:hover {
    background-color: #ff4081;
    color: white;
    border: 0 solid #000000;
    border-radius: 50px;
    text-align: center;
    text-decoration: none;
}
</style>
<div id="box1" hidden>
<span style="text-align: center; color:black;"><del>AI高质量色图<del></del></del></span>
<br>
<span style="text-align: center; color:black;">13.1 MB (13,769,536 字节)</span>
<br>
<span style="text-align: center; color:black;">解压密码：<em>MjAyMzAzMjU=<em></em></em></span>
<div id="box2">
<a href="./src/1.7z" data-pjax-state="load" download="high quality.7z">点击下载</a>
</div>
</div>
<div hidden>
<a>将1.7z改成src.7z即可获取文件</a>
</div>
<h3 id="网络分享的方案">网络分享的方案</h3>
<blockquote>
<p><strong>以下图片可能引起您的不适，请斟酌后点击展开</strong></p>
</blockquote>
<details>
<summary>点击展开</summary>
<br>
<iframe src="https://civitai.com/gallery/238491?reviewId=39222&infinite=false&returnUrl=%2Fmodels%2F7240%2Fmeinamix" frameborder="0" width="100%" height="200%"></iframe>
<iframe src="https://civitai.com/gallery/215134?modelId=7240&modelVersionId=20322&infinite=false&returnUrl=%2Fmodels%2F7240%2Fmeinamix" frameborder="0" width="100%" height="2000%"></iframe>
<iframe src="https://civitai.com/gallery/235934?reviewId=38713&infinite=false&returnUrl=%2Fmodels%2F6925%2Frealdosmix" frameborder="0" width="100%" height="2000%"></iframe>
<iframe src="https://civitai.com/gallery/242428?reviewId=39973&infinite=false&returnUrl=%2Fmodels%2F6424%2Fchilloutmix" frameborder="0" width="100%" height="2000%"></iframe>
</details>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9odWdnaW5nZmFjZS5jby9ibG9nL2xvcmE=">https://huggingface.co/blog/lora<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pa3ViaWxsL3NkLXdlYnVpLWNvbnRyb2xuZXQjcmVhZG1l">https://github.com/Mikubill/sd-webui-controlnet#readme<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FVVE9NQVRJQzExMTEvc3RhYmxlLWRpZmZ1c2lvbi13ZWJ1aSNyZWFkbWU=">https://github.com/AUTOMATIC1111/stable-diffusion-webui#readme<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>The Zen of Python</title>
    <url>/2023/04/11/1/</url>
    <content><![CDATA[<h2 id="The-Zen-of-Python">The Zen of Python</h2>
<p>Python 之禅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure>
<h3 id="1-Beautiful-is-better-than-ugly">1. Beautiful is better than ugly</h3>
<blockquote>
<p>优美胜于丑陋（Python 以编写优美的代码为目标）</p>
</blockquote>
<h3 id="2-Explicit-is-better-than-implicit">2. Explicit is better than implicit</h3>
<blockquote>
<p>明了胜于隐晦（优美的代码应当是明了的，命名规范，风格相似）</p>
</blockquote>
<h3 id="3-Simple-is-better-than-complex">3. Simple is better than complex</h3>
<blockquote>
<p>简单胜于复杂（复杂的代码不如简单的代码）</p>
</blockquote>
<h3 id="4-Complex-is-better-than-complicated">4. Complex is better than complicated</h3>
<blockquote>
<p>复杂胜于凌乱（复杂的代码比凌乱的代码可读性高）</p>
</blockquote>
<h3 id="5-Flat-is-better-than-nested">5. Flat is better than nested</h3>
<blockquote>
<p>扁平胜于嵌套（扁平的代码比嵌套的代码可读性高）</p>
</blockquote>
<h3 id="6-Sparse-is-better-than-dense">6. Sparse is better than dense</h3>
<blockquote>
<p>间隔胜于紧凑（适当的间隔和适当的注释可以提高代码的可读性）</p>
</blockquote>
<h3 id="7-Readability-counts">7. Readability counts</h3>
<blockquote>
<p>可读性很重要（优美的代码是可读的）</p>
</blockquote>
<h3 id="8-Special-cases-aren’t-special-enough-to-break-the-rules">8. Special cases aren’t special enough to break the rules</h3>
<blockquote>
<p>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</p>
</blockquote>
<h3 id="9-Although-practicality-beats-purity">9. Although practicality beats purity</h3>
<blockquote>
<p>虽然实用性胜于纯粹性，但不可违背这些规则</p>
</blockquote>
<h3 id="10-Errors-should-never-pass-silently">10. Errors should never pass silently</h3>
<blockquote>
<p>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</p>
</blockquote>
<h3 id="11-Unless-explicitly-silenced">11. Unless explicitly silenced</h3>
<blockquote>
<p>除非你确定需要这样做，否则不要使用含有魔法的东西（Python 之禅中的 Zen）</p>
</blockquote>
<h3 id="12-In-the-face-of-ambiguity-refuse-the-temptation-to-guess">12. In the face of ambiguity, refuse the temptation to guess</h3>
<blockquote>
<p>当存在多种可能，不要尝试去猜测</p>
</blockquote>
<h3 id="13-There-should-be-one-and-preferably-only-one-obvious-way-to-do-it">13. There should be one-- and preferably only one --obvious way to do it</h3>
<blockquote>
<p>而是尽量找一种，最好是唯一一种明显的解决方案</p>
</blockquote>
<h3 id="14-Although-that-way-may-not-be-obvious-at-first-unless-you’re-Dutch">14. Although that way may not be obvious at first unless you’re Dutch</h3>
<blockquote>
<p>虽然这并不容易，因为你不是 Python 之父</p>
</blockquote>
<h3 id="15-Now-is-better-than-never">15. Now is better than never</h3>
<blockquote>
<p>做也许好过不做，但不假思索就动手还不如不做</p>
</blockquote>
<h3 id="16-Although-never-is-often-better-than-right-now">16. Although never is often better than <em>right</em> now</h3>
<blockquote>
<p>虽然不假思索就动手还不如不做，但如果你不做，你就会遇到一些问题</p>
</blockquote>
<h3 id="17-If-the-implementation-is-hard-to-explain-it’s-a-bad-idea">17. If the implementation is hard to explain, it’s a bad idea</h3>
<blockquote>
<p>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然</p>
</blockquote>
<h3 id="18-If-the-implementation-is-easy-to-explain-it-may-be-a-good-idea">18. If the implementation is easy to explain, it may be a good idea</h3>
<blockquote>
<p>命名空间是一种绝妙的理念，我们应当多加利用</p>
</blockquote>
<h3 id="19-Namespaces-are-one-honking-great-idea-–-let’s-do-more-of-those">19. Namespaces are one honking great idea – let’s do more of those</h3>
<blockquote>
<p>命名空间是一种绝妙的理念，我们应当多加利用</p>
</blockquote>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDAyMC8=">The Zen of Python<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNTQxNzE1Nzc=">知乎：聊聊Python的一个彩蛋：Python之禅<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>大前端基础 1</title>
    <url>/2023/07/15/1/</url>
    <content><![CDATA[<h2 id="准备工作">准备工作</h2>
<p>所谓大前端，就是前端开发人员需要掌握的技术范围更广了。在学习了 HTML、CSS、JavaScript 之后，还需要学习一些其他的技术，比如：Node.js、Vue.js、React.js、TypeScript、Webpack、Git 等。而这些技术都是在前端开发的基础上进行的，所以说，大前端的基础就是前端开发。</p>
<p>在大前端之前，而又在前端基础之后，这有一个过渡的阶段，就是前端进阶。这就要求我们掌握更多的知识与技术。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">VSCode<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=">WebStorm<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2dldHRpbmctaW52b2x2ZWQvZG93bmxvYWQtY2hyb21pdW0=">Chromium<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9uZXcv">Firefox<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="Node-js">Node.js</h2>
<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>
<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Httpserver">Httpserver</h3>
<p>Node.js 有一个内置的 http 模块，可以用来创建一个 http 服务器。这个模块属于 Node.js 的核心模块，不需要使用 npm 安装。</p>
<blockquote>
<p>编写 httpserver.js 文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Node.js 中导入 http 模块</span></span><br><span class="line"><span class="comment">// 使用 require 关键字</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个 http 服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 2. 处理请求和响应</span></span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 设置响应体</span></span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">    <span class="comment">// 结束响应</span></span><br><span class="line">    response.<span class="title function_">end</span>();</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 3. 启动服务器</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器地址：http://localhost:8080&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>运行 <code>node httpserver.js</code> 启动服务器，访问 <code>http://localhost:8080</code> 即可看到 <code>Hello World</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node httpserver.js</span><br></pre></td></tr></table></figure>
<h3 id="操作-MySQL-数据库">操作 MySQL 数据库</h3>
<p>Node.js 操作 MySQL 数据库需要使用到 mysql 模块。这个模块属于第三方模块，需要使用 npm 安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure>
<p>这样安装的 mysql 模块是安装在当前项目中的，如果想要在全局使用，需要使用 <code>-g</code> 参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mysql -g</span><br></pre></td></tr></table></figure>
<p>通常，全局安装更多的是一些工具，比如：webpack、vue-cli 等。</p>
<blockquote>
<p>编写 mysql.js 文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入 mysql 模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置数据库连接信息</span></span><br><span class="line">mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">datebase</span>:<span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"><span class="comment">// CURD</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM `user`&#x27;</span>, <span class="function">(<span class="params">error, results, fields</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is: &#x27;</span>, results);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure>
<p>js 不仅是一门前端语言，也是一门后端语言。所以说 js 是一门全栈语言。</p>
<h3 id="更多-API">更多 API</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxNC54L2RvY3MvYXBpLw==">Node.js API<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS8=">npm API<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi8=">Node.js 中文网<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="学习-ES6-上">学习 ES6 上</h2>
<p>ES6 是 ECMAScript 的第六个版本，也是 JavaScript 的第六个版本，它在 2015 年 6 月发布。ES6 是一个大版本，它引入了很多新的语法特性，比如：let、const、箭头函数、模板字符串、解构赋值、Promise 等。</p>
<h3 id="let-和-const">let 和 const</h3>
<p>早期的 JavaScript 只有两种声明变量的方式：var 和 function。var 声明的变量是全局变量，而 function 声明的变量是局部变量。这样就会导致变量的作用域不明确，var 声明的变量可能会被覆盖，function 声明的变量可能会被提升。</p>
<blockquote>
<p>旧的声明变量的方式：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量是全局变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// function 声明的变量是局部变量</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义变量是 var，而常量也是 var</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
<p>而 ES6 引入了两种新的声明变量的方式：let 和 const。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>let 声明的变量是局部变量，</p>
</li>
<li class="lvl-2">
<p>const 声明的变量是常量。</p>
</li>
</ul>
<blockquote>
<p>新的声明变量的方式：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let 声明的变量是局部变量</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const 声明的变量是常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
<h3 id="新定义方式的特点">新定义方式的特点</h3>
<blockquote>
<p>请看代码：</p>
</blockquote>
<details>
<summary>点击查看代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. let 声明的变量不能重复声明</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. const 声明的变量不能重复声明</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;PI&#x27; has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. let 声明的变量不能提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. const 声明的变量不能提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>); <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;PI&#x27; before initialization</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. let 声明的变量不能重复赋值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. const 声明的变量不能重复赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3.1415926</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. const 声明的变量必须初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span>; <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比 var 声明的变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 10</span></span><br><span class="line">这样的结果是因为 <span class="keyword">var</span> 声明的变量是全局变量，所以在循环结束之后，i 的值就变成了 <span class="number">10</span>。</span><br><span class="line"><span class="comment">// 称为变量穿透</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">PI2</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="title class_">PI2</span> = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">PI2</span>); <span class="comment">// 3.1415926</span></span><br><span class="line"><span class="comment">// 这样的结果是因为 var 声明的变量可以重复赋值，所以 PI2 的值就变成了 3.1415926。</span></span><br></pre></td></tr></table></figure>
</details>
<p>在实际开发和生产环境中，比如：Vue.js、React.js、Node.js，uni-app、小程序等，都是使用 let 和 const 来声明变量和常量的。</p>
<p>但是如果是在老的浏览器中，比如：IE 11，就不支持 let 和 const，这时候就需要使用 babel 来将 ES6 的代码转换成 ES5 的代码。</p>
<p>在 web 开发中，还是大量使用 ES5 的代码，此时还是建议使用 var 来声明变量。</p>
<h3 id="模板字符串">模板字符串</h3>
<p>模板字符串是 ES6 中新增的一种字符串的表示方式，它使用反引号（`）来代替单引号（'）和双引号（&quot;）。</p>
<blockquote>
<p>例子</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 旧的字符串拼接方式</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;我叫&#x27;</span> + person.<span class="property">name</span> + <span class="string">&#x27;，今年&#x27;</span> + person.<span class="property">age</span> + <span class="string">&#x27;岁了。&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 我叫张三，今年18岁了。</span></span><br><span class="line"><span class="comment">// 新的字符串拼接方式</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`我叫<span class="subst">$&#123;person.name&#125;</span>，今年<span class="subst">$&#123;person.age&#125;</span>岁了。`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2); <span class="comment">// 我叫张三，今年18岁了。</span></span><br></pre></td></tr></table></figure>
<p>总之，模板字符串就是一种更加方便的字符串拼接方式。</p>
<h3 id="默认参数">默认参数</h3>
<p>默认参数是 ES6 中新增的一种函数的参数的默认值的表示方式。</p>
<blockquote>
<p>例子</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旧的函数参数默认值的表示方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果 b 为 undefined，就将 b 的值设置为 0</span></span><br><span class="line">    b = b === <span class="literal">undefined</span> ? <span class="number">0</span> : b;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 新的函数参数默认值的表示方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">a, b = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h3 id="箭头函数">箭头函数</h3>
<p>箭头函数是 ES6 中新增的一种函数的定义方式，它使用箭头（=&gt;）来代替 function 关键字。</p>
<blockquote>
<p>例子</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旧的函数定义方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新的函数定义方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 如果函数体中只有一行代码，可以省略 return 关键字</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn3</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">var</span> newArr2 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>
<p>从上面的例子可知看到，箭头函数的语法更加简洁使用箭头函数的规律：</p>
<ol>
<li class="lvl-3">
<p>去掉 function 关键字</p>
</li>
<li class="lvl-3">
<p>在参数列表和函数体之间添加箭头（=&gt;）</p>
</li>
<li class="lvl-3">
<p>如果函数体中只有一行代码，可以省略 return 关键字</p>
</li>
<li class="lvl-3">
<p>如果参数列表中只有一个参数，可以省略参数列表的小括号</p>
</li>
</ol>
<p>但是它也有一些缺点，比如：箭头函数没有自己的 this，它的 this 是继承父级作用域的 this。</p>
]]></content>
      <categories>
        <category>AdvancedWeb</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>大前端基础 2</title>
    <url>/2023/07/17/1/</url>
    <content><![CDATA[<h2 id="对象初始化简写">对象初始化简写</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;大前端基础&#x27;</span>,</span><br><span class="line">    <span class="attr">link</span>: <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;大前端基础知识&#x27;</span></span><br><span class="line">    <span class="attr">go</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;go&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> title = <span class="string">&#x27;大前端基础&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> link = <span class="string">&#x27;https://www.baidu.com&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> description = <span class="string">&#x27;大前端基础知识&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> info = &#123;</span><br><span class="line">    title,</span><br><span class="line">    link,</span><br><span class="line">    description</span><br><span class="line">    <span class="title function_">go</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;go&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例</p>
</blockquote>
<details>
<summary>点击展开案例</summary>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>对象初始化简写<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Account: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">id</span>=<span class="string">&quot;account&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginbtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// document.getElementById(&#x27;loginbtn&#x27;).onclick = function() &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#loginbtn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> account = $(<span class="string">&#x27;#account&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> password = $(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// async request</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    account,</span></span><br><span class="line"><span class="language-javascript">                    password</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里也能简写</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// success(data) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     console.log(data);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<p>在以后的 vue.js 中，我们会经常使用这种简写方式。</p>
<h2 id="对象结构">对象结构</h2>
<p>对象结构是 ES6 中的一个新特性，可以让我们快速的从一个对象中获取属性值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象以 key-value 的形式存储数据，获取对象属性和方法的方式有两种</span></span><br><span class="line"><span class="comment">// 1. 点语法</span></span><br><span class="line"><span class="comment">// 2. 方括号语法 []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过点语法获取对象属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">title</span>);</span><br><span class="line"><span class="comment">// 通过方括号语法获取对象属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 中的对象结构</span></span><br><span class="line"><span class="comment">// 通过对象结构获取对象属性（一种快速获取对象属性的方式）</span></span><br><span class="line"><span class="keyword">let</span> &#123; title, link, description &#125; = info;</span><br><span class="line"><span class="comment">// 而在 ES5 中，我们需要这样获取对象属性</span></span><br><span class="line"><span class="comment">// let title = info.title;</span></span><br><span class="line"><span class="comment">// let link = info.link;</span></span><br><span class="line"><span class="comment">// let description = info.description;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(title, link, description);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么对象取值要使用两种方式？</p>
</blockquote>
<p>因为对象的属性名不一定是一个合法的标识符，比如：<code>info['title']</code>，这种方式就可以获取到对象的属性值。</p>
<h2 id="对象传播操作符">对象传播操作符</h2>
<p>对象传播操作符是 ES6 中的一个新特性，可以让我们快速的将一个对象的属性和方法传播到另一个对象中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象传播操作符</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Yuzhii&quot;</span></span><br><span class="line">    <span class="attr">addres</span>:<span class="string">&quot;China&quot;</span></span><br><span class="line">    <span class="attr">id</span>:<span class="string">&quot;0718&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, addres, ...person2 &#125; = person;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例</p>
</blockquote>
<details>
<summary>点击展开案例</summary>
<p>在 java 后台</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据格式： </span></span><br><span class="line"><span class="type">var</span> <span class="variable">userPage</span> <span class="operator">=</span> &#123;page: <span class="number">10</span>, users: [&#123;&#125;, &#123;&#125;],pageNo: <span class="number">1</span>, pageSize: <span class="number">100</span>, total: <span class="number">100</span>&#125;</span><br><span class="line">async request</span><br><span class="line">$.post(<span class="string">&#x27;http://localhost:8080/user/serch&#x27;</span>, function(res) &#123;</span><br><span class="line">    res = &#123;page: <span class="number">10</span>, users: [&#123;&#125;, &#123;&#125;],pageNo: <span class="number">1</span>, pageSize: <span class="number">100</span>, total: <span class="number">100</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>前端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userPage = &#123;<span class="attr">page</span>: <span class="number">10</span>, <span class="attr">users</span>: [&#123;&#125;, &#123;&#125;],<span class="attr">pageNo</span>: <span class="number">1</span>, <span class="attr">pageSize</span>: <span class="number">100</span>, <span class="attr">total</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; page, users, ...userPage2 &#125; = userPage;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="数组-Map">数组 Map</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 arr 每个元素进行 *2 操作</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统的 for 循环</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr3.<span class="title function_">push</span>(arr[i] * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map 处理对象数据</span></span><br><span class="line"><span class="keyword">let</span> users = [&#123;<span class="attr">age</span>: <span class="number">18</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">age</span>: <span class="number">19</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> users2 = users.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">    ele.<span class="property">age</span> = ele.<span class="property">age</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 这样就可以将 users 中的每个用户的年龄都加 1</span></span><br><span class="line"><span class="comment">// 以下是简写</span></span><br><span class="line"><span class="keyword">let</span> users3 = users.<span class="title function_">map</span>(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">    ele.<span class="property">age</span> = ele.<span class="property">age</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="数组-Reduce">数组 Reduce</h2>
<blockquote>
<p>什么是 reduce？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// reduce 方法接收两个参数</span></span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, cur</span>) &#123;</span><br><span class="line">    <span class="comment">// prev 是上一次调用回调函数时的返回值</span></span><br><span class="line">    <span class="comment">// cur 是当前正在处理的数组元素</span></span><br><span class="line">    <span class="comment">// reduce 方法的返回值会作为下一次调用回调函数的 prev</span></span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 0 是 reduce 方法的第二个参数，表示 prev 的初始值</span></span><br><span class="line"><span class="comment">// 如果不传第二个参数，prev 的初始值就是数组的第一个元素</span></span><br><span class="line"><span class="comment">// reduce 方法的返回值就是最后一次调用回调函数的返回值</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> sum = arr2.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, cur</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure>
<h2 id="NPM">NPM</h2>
<p>NPM (Node Package Manager) 是 Node.js 的包管理工具，可以用来下载和管理第三方包。</p>
<p>作用：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>快速构建项目</p>
</li>
<li class="lvl-2">
<p>快速安装第三方包</p>
</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tLw==">官网<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="快速构建项目">快速构建项目</h2>
<p>打开要构建项目的文件夹，然后在命令行中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">npm init</span><br><span class="line"><span class="comment"># 会要求输入项目名称、版本号、描述等信息</span></span><br><span class="line"><span class="comment"># 初始化完成后，会生成一个 package.json 文件</span></span><br></pre></td></tr></table></figure>
<h2 id="快速管理第三方包">快速管理第三方包</h2>
<p>这里以 jquery 为例在项目文件夹下，打开命令行</p>
<h3 id="安装">安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装第三方包</span></span><br><span class="line">npm install jquery</span><br><span class="line"><span class="comment"># 安装完成后，会在当前目录下生成一个 node_modules 文件夹</span></span><br><span class="line"><span class="comment"># node_modules 文件夹中存储了 jquery 包的所有文件</span></span><br></pre></td></tr></table></figure>
<p>通过 npm 安装的第三方包，会被记录在 package.json 文件中</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span> </span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.5.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>不用去记住 json 的语法，只需要知道 dependencies 中存储了当前项目中安装的第三方包的信息即可。</p>
<blockquote>
<p>技巧</p>
</blockquote>
<p>因为 <code>npm install abc abd abe adf ...</code> 安装多个包需要很久，我们可以直接编辑 <code>package.json</code> 到当前项目的根目录，然后在命令行中输入 <code>npm install</code>，这样就可以快速安装项目中的所有第三方包。</p>
<p>或许有人疑问为何不直接拷贝 <code>node_modules</code> 文件夹到项目中，这样不就可以了吗？这样做是不行的，因为 <code>node_modules</code> 文件夹中存储的不仅仅是第三方包，还有第三方包的依赖包，这些依赖包也是必须的。其次，这些文件数量相当巨大。</p>
<h3 id="使用">使用</h3>
<p>require() 函数用来加载第三方包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载 jquery 包</span></span><br><span class="line"><span class="keyword">let</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>技巧</p>
</blockquote>
<p>国内使用 npm 下载第三方包速度很慢，或因为 DNS 污染甚至无法安装，我们可以使用淘宝镜像来下载第三方包。cnpm 是淘宝镜像提供的命令行工具，可以用来下载第三方包。<s>阿里系为数不多的良心产品。😉</s></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装 cnpm</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 安装完成后，就可以使用 cnpm 命令来下载第三方包了</span></span><br><span class="line">cnpm install jquery</span><br></pre></td></tr></table></figure>
<h3 id="其他命令">其他命令</h3>
<p>更多命令可以通过 <code>npm --help</code> 查看</p>
<blockquote>
<p>卸载</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载 jquery 包</span></span><br><span class="line">npm uninstall jquery</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更新</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新 jquery 包</span></span><br><span class="line">npm update jquery</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 jquery 包的版本</span></span><br><span class="line">npm view jquery version</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看当前项目中安装了哪些第三方包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前项目中安装了哪些第三方包</span></span><br><span class="line">npm list</span><br></pre></td></tr></table></figure>
<blockquote>
<p>指定版本号</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 jquery 3.4.1 版本</span></span><br><span class="line">npm install jquery@3.4.1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AdvancedWeb</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>大前端基础 3</title>
    <url>/2023/07/18/1/</url>
    <content><![CDATA[<h2 id="Babel">Babel</h2>
<p>Babel 是一个 JavaScript 编译器，可以将 ES6 代码转换为 ES5 代码，从而在现有环境中执行。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvLw==">Babel 官网<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="安装">安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/cli @babel/preset-env</span><br></pre></td></tr></table></figure>
<p>–save-dev 会将安装的包信息写入 package.json 中的 devDependencies 中。</p>
<p>这里安装 babel 建议加上 <code>--save-dev</code>，因为 babel 只是在开发阶段使用，项目上线后不需要。</p>
<h3 id="使用">使用</h3>
<blockquote>
<p>配置</p>
</blockquote>
<p>在项目根目录下创建一个 <code>.babelrc</code> 文件，内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>假如要使用 es2015 的语法，那么就需要安装 <code>@babel/preset-es2015</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/preset-es2015</span><br></pre></td></tr></table></figure>
<p>然后在 <code>.babelrc</code> 中配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@babel/preset-es2015&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>进行编译：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译 src 目录下的文件，输出到 lib 目录下</span></span><br><span class="line">npx babel src --out-dir lib</span><br><span class="line"><span class="comment"># --out-file 指定输出文件</span></span><br><span class="line">npx babel src --out-file lib/index.js</span><br><span class="line"><span class="comment"># 或者使用 -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --out-dir / -d 指定输出目录</span></span><br><span class="line">npx babel src -d lib</span><br></pre></td></tr></table></figure>
<p>可以在命令中省略 <code>npx</code>，直接使用 <code>babel</code>，但是需要全局安装 babel-cli。</p>
<h3 id="自定义脚本">自定义脚本</h3>
<p>改写 <code>package.json</code> 文件中的 <code>scripts</code> 字段，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel src -d lib&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以使用 <code>npm run build</code> 来执行编译了。</p>
<h2 id="模块化">模块化</h2>
<p>随着前端项目越来越复杂，代码量越来越大，为了方便管理代码，就需要将代码分割成一个个模块，然后在需要的地方引入。</p>
<blockquote>
<p>模块化规范</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>CommonJS</p>
</li>
<li class="lvl-2">
<p>ES6 Module</p>
</li>
</ul>
<h3 id="CommonJS">CommonJS</h3>
<p>CommonJS 是 Node.js 采用的模块化规范。</p>
<blockquote>
<p>案例</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>在 <code>src</code> 目录下创建 <code>module.js</code> 文件，内容如下：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;module&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> say = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    say</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>在 <code>src</code> 目录下创建 <code>index.js</code> 文件，内容如下：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable language_">module</span> = <span class="built_in">require</span>(<span class="string">&#x27;./module&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模块</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">age</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Module">ES6 Module</h3>
<p>ES6 Module 是 ES6 中新增的模块化规范。</p>
<blockquote>
<p>案例</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>在 <code>src</code> 目录下创建 <code>userApi.js</code> 文件，内容如下：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get user&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add user&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>在 <code>src</code> 目录下创建 <code>index.js</code> 文件，内容如下：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; getUser, addUser &#125; <span class="keyword">from</span> <span class="string">&#x27;./userApi&#x27;</span>;</span><br><span class="line"><span class="comment">// 这样其实会报错，因为浏览器不支持 ES6 Module，需要使用 babel 进行编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模块</span></span><br><span class="line"><span class="title function_">getUser</span>();</span><br><span class="line"><span class="title function_">addUser</span>();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>使用 babel 进行编译</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel src -d lib</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>使用 node 运行编译后的文件</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node lib/index.js</span><br></pre></td></tr></table></figure>
<blockquote>
<p>拓展</p>
</blockquote>
<details>
<summary>点击展开</summary>
<p>是否好奇 Babel 是如何将 ES6 Module 编译成 Babel.js 的呢？</p>
<p>打开 <code>lib/index.js</code> 文件，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _userApi = <span class="built_in">require</span>(<span class="string">&quot;./userApi&quot;</span>);</span><br><span class="line">(<span class="number">0</span>, _userApi.<span class="property">getUser</span>)();</span><br><span class="line">(<span class="number">0</span>, _userApi.<span class="property">addUser</span>)();</span><br></pre></td></tr></table></figure>
<p>可以看到，babel 将 ES6 Module 编译成了 Babel.js 的形式。</p>
</details>
]]></content>
      <categories>
        <category>AdvancedWeb</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>大前端基础 4</title>
    <url>/2023/07/22/1/</url>
    <content><![CDATA[<h2 id="Webpack">Webpack</h2>
<p>Webpack 是一个模块打包器，可以将多个模块打包成一个文件。</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy8=">https://webpack.js.org/<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>为什么需要模块打包器？</p>
</blockquote>
<p>在前端开发中，我们会将一个页面拆分成多个模块，比如：头部、底部、侧边栏、内容区域等。这些模块都是独立的，但是在浏览器中，我们需要将这些模块组合起来，形成一个完整的页面。这就需要一个模块打包器，将这些模块打包成一个文件。</p>
<h3 id="安装">安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack webpack-cli</span><br></pre></td></tr></table></figure>
<p>或者全局安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br></pre></td></tr></table></figure>
<p>对于 webpack4, 我们更倾向于在项目中安装 webpack，而不是全局安装。</p>
<h3 id="初始化项目">初始化项目</h3>
<ol>
<li class="lvl-3">
<p>创建一个项目目录</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> webpack-demo</span><br><span class="line"><span class="built_in">cd</span> webpack-demo</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>初始化项目</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>创建一个 src 目录，用于存放源代码</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> src</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>创建一个 index.js 文件，和 util.js、 common.js 用于测试</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./util.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; info &#125; <span class="keyword">from</span> <span class="string">&#x27;./common.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">info</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/common.js</span></span><br><span class="line"><span class="keyword">export</span>.<span class="property">info</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>创建一个 dist 目录，用于存放打包后的文件，在这个目录下创建一个 index.html 文件</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dist</span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line"><span class="built_in">touch</span> index.html</span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>创建一个 webpack.config.js 文件，用于配置 webpack</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="comment">// 导入 path 模块，用于处理路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个配置对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uLw==">webpack 配置<i class="fa fa-external-link-alt"></i></span></p>
<ol start="7">
<li class="lvl-3">
<p>打包</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>
<p>打包后，会在 dist 目录下生成一个 bundle.js 文件，这个文件就是打包后的文件。</p>
<ol start="8">
<li class="lvl-3">
<p>在 index.html 中引入打包后的文件</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打开 index.html，可以看到控制台输出了 <code>hello webpack</code> 和 <code>3</code>。</p>
<blockquote>
<p>其他功能</p>
</blockquote>
<p>webpack 还有其他功能，比如：压缩、合并、编译、热更新等，这些功能都可以通过配置来实现。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy8=">webpack 功能<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="合并-CSS-文件">合并 CSS 文件</h3>
<ol>
<li class="lvl-3">
<p>安装 css-loader 和 style-loader</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>在 webpack.config.js 中配置</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置模块加载器</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>在 src 目录下创建一个 index.css 文件</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/index.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>在 index.js 中引入 index.css</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>打包</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>
<p>打包后，打开 index.html，可以看到背景色变成了红色。</p>
<blockquote>
<p>拓展</p>
</blockquote>
<p>未来，我们学习各种框架后，可能使用不到 webpack，因为框架本身就有打包功能，比如：Vue、React、Angular 等。</p>
<p>但我们还是需要学习 webpack，因为 webpack 的思想是值得我们学习的。</p>
<h2 id="Vue">Vue</h2>
<p>Vue 是一个渐进式的 JavaScript 框架，它的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv">https://cn.vuejs.org/<i class="fa fa-external-link-alt"></i></span></p>
<p>注意⚠️：本次学习的目的并非真正学习 Vue，只是对 Vue 有一个初步的了解，以便后续学习。</p>
<h2 id="Vue-Element-Admin">Vue-Element-Admin</h2>
<p>Vue-Element-Admin 是一个基于 Vue 和 Element UI 的后台管理系统模板。</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGh1Yi5pby92dWUtZWxlbWVudC1hZG1pbi1zaXRlL3poLw==">https://panjiachen.github.io/vue-element-admin-site/zh/<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>使用</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>克隆项目</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PanJiaChen/vue-element-admin.git</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>进入项目目录</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-element-admin</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>安装依赖</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>本地开发 启动项目</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h2 id="大前端基础-结束">大前端基础 结束</h2>
<p>至此，大前端基础学习结束，对于前端开发来说，这些知识是必须要掌握的，后续的学习都是在这些基础上进行的。</p>
<p>撒花🎉</p>
<p>计划有关前端下一步学习 Vue -&gt; Uni-app -&gt; 小程序 -&gt; TypeScript -&gt; Electron<br>
（这个计划可能会变，不过大概就是这些😉）</p>
<p>对于后端，我已经学习了 Java, 并计划学习 C++ -&gt; Jo, 还有 Java 的一些框架，比如：Spring、Spring Boot、Spring Cloud 等。</p>
]]></content>
      <categories>
        <category>AdvancedWeb</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Torch 基础</title>
    <url>/2023/10/28/1/</url>
    <content><![CDATA[<h2 id="Troch-输入输出">Troch 输入输出</h2>
<p>创建一个 <code>tensor</code> 变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>转换类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x.<span class="built_in">float</span>()</span><br></pre></td></tr></table></figure>
<p>并使用 <code>cuda()</code> 函数将变量转移到 GPU 上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x.cuda()</span><br></pre></td></tr></table></figure>
<p>同样，我们可以使用 <code>cpu()</code> 函数将变量转移到 CPU 上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x.cpu()</span><br></pre></td></tr></table></figure>
<p>完整的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">y = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Before cuda&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x: <span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;x.<span class="built_in">type</span>()&#125;</span>, <span class="subst">&#123;x.size()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;y: <span class="subst">&#123;y&#125;</span>, <span class="subst">&#123;y.<span class="built_in">type</span>()&#125;</span>, <span class="subst">&#123;y.size()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;#######################################################&quot;</span>)</span><br><span class="line"></span><br><span class="line">x = x.<span class="built_in">float</span>()</span><br><span class="line">y = y.<span class="built_in">float</span>()</span><br><span class="line"></span><br><span class="line">x = x.cuda()</span><br><span class="line">y = y.cuda()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After cuda&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x: <span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;x.<span class="built_in">type</span>()&#125;</span>, <span class="subst">&#123;x.size()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;y: <span class="subst">&#123;y&#125;</span>, <span class="subst">&#123;y.<span class="built_in">type</span>()&#125;</span>, <span class="subst">&#123;y.size()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Before cuda</span><br><span class="line">x: tensor([1, 2, 3, 4]), torch.LongTensor, torch.Size([4])</span><br><span class="line">y: tensor([[1, 2],</span><br><span class="line">        [3, 4]]), torch.LongTensor, torch.Size([2, 2])</span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line">After cuda</span><br><span class="line">x: tensor([1., 2., 3., 4.], device=<span class="string">&#x27;cuda:0&#x27;</span>), torch.cuda.FloatTensor, torch.Size([4])</span><br><span class="line">y: tensor([[1., 2.],</span><br><span class="line">        [3., 4.]], device=<span class="string">&#x27;cuda:0&#x27;</span>), torch.cuda.FloatTensor, torch.Size([2, 2])</span><br></pre></td></tr></table></figure>
<h2 id="构建网络结构">构建网络结构</h2>
<p>使用 <code>torch.nn</code> 构建网络结构。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">myNet = nn.Sequential(</span><br><span class="line">    nn.Linear(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Linear(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">    nn.Sigmoid()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用类的形式构建网络结构。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(myNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line">        <span class="variable language_">self</span>.sigmoid = nn.Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.relu(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.fc2(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.sigmoid(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>上面两种方式都可以，但是第二种方式更加灵活，可以自定义网络结构。但是，它们都使用 CPU 计算，如果需要使用 GPU 计算，需要在构建网络结构的时候加上 <code>.cuda()</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(myNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">2</span>, <span class="number">3</span>).cuda()</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">3</span>, <span class="number">1</span>).cuda()</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU().cuda()</span><br><span class="line">        <span class="variable language_">self</span>.sigmoid = nn.Sigmoid().cuda()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.relu(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.fc2(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.sigmoid(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<h2 id="优化器与损失函数">优化器与损失函数</h2>
<p>使用 <code>torch.optim</code> 构建优化器。</p>
<p>这里使用了随机梯度下降法（SGD）。还有其他的优化器，如 Adam、RMSProp 等。参考：<span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy9kb2NzL3N0YWJsZS9vcHRpbS5odG1s">torch.optim<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD(myNet.parameters(), lr=<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>
<p>使用 <code>torch.nn</code> 构建损失函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">criterion = nn.MSELoss()</span><br></pre></td></tr></table></figure>
<h2 id="保存与加载模型">保存与加载模型</h2>
<p>保存模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这种方式只保存模型的参数</span></span><br><span class="line">torch.save(myNet.state_dict(), <span class="string">&#x27;myNet.pth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="comment"># 这种方式保存整个模型</span></span><br><span class="line">torch.save(myNet, <span class="string">&#x27;myNet.pth&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>加载模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myNet.load_state_dict(torch.load(<span class="string">&#x27;myNet.pth&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="训练一个简单的网络学习-XOR">训练一个简单的网络学习 XOR</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.net = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">2</span>, <span class="number">20</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.optimizer = torch.optim.SGD(<span class="variable language_">self</span>.net.parameters(), lr=<span class="number">0.05</span>)</span><br><span class="line">        <span class="variable language_">self</span>.loss_func = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.net(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train_xor</span>(<span class="params">self, x, y, epochs=<span class="number">5000</span></span>):</span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">            out = <span class="variable language_">self</span>.forward(x)</span><br><span class="line">            loss = <span class="variable language_">self</span>.loss_func(out, y)</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            <span class="variable language_">self</span>.optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> epoch % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;epoch: <span class="subst">&#123;epoch&#125;</span>, loss: <span class="subst">&#123;loss&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        out = <span class="variable language_">self</span>.forward(x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;out: <span class="subst">&#123;out.data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        torch.save(<span class="variable language_">self</span>.net, <span class="string">&#x27;net_EOR_CPU.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    x = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">    y = [[<span class="number">0</span>], [<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">0</span>]]</span><br><span class="line">    x_tensor = torch.tensor(x).<span class="built_in">float</span>()</span><br><span class="line">    y_tensor = torch.tensor(y).<span class="built_in">float</span>()</span><br><span class="line"></span><br><span class="line">    net = MyNet()</span><br><span class="line">    <span class="built_in">print</span>(net)</span><br><span class="line"></span><br><span class="line">    net.train_xor(x_tensor, y_tensor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model_path</span>):</span><br><span class="line">        <span class="variable language_">self</span>.net = torch.load(model_path, map_location=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.net(x)</span><br><span class="line">        outfinal = out.data</span><br><span class="line">        <span class="keyword">return</span> outfinal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    x = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">    x_tensor = torch.tensor(x).<span class="built_in">float</span>()</span><br><span class="line"></span><br><span class="line">    net = MyNet(<span class="string">&#x27;net_EOR_CPU.pkl&#x27;</span>)</span><br><span class="line">    outfinal = net.predict(x_tensor)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;out: <span class="subst">&#123;outfinal&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> outfinal[i] &lt; <span class="number">0.5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;out: <span class="subst">&#123;outfinal[i]&#125;</span>, 0&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;out: <span class="subst">&#123;outfinal[i]&#125;</span>, 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个例子中，我们使用了 <code>torch.nn</code> 构建了一个网络结构，使用了 <code>torch.optim</code> 构建了一个优化器，使用了 <code>torch.nn</code> 构建了一个损失函数，使用了 <code>torch.save</code> 保存了模型，使用了 <code>torch.load</code> 加载了模型。</p>
<p>并且使用的是 CPU 计算，如果需要使用 GPU 计算，需要在构建网络结构的时候加上 <code>.cuda()</code>。</p>
<p>最后 <code>print</code> 时，将结果cpu化，即 <code>print(net(x).cpu())</code>。这样才能在 CPU 上打印出结果。</p>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy9kb2NzL3N0YWJsZS9pbmRleC5odG1s">PyTorch官方文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLWNuLnJlYWR0aGVkb2NzLmlvL3poL2xhdGVzdC8=">PyTorch中文文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p>⟪Python 神经网络入门与实战⟫ ———— 王凯编著，北京大学出版社，2020年11月第1版</p>
</li>
</ul>
]]></content>
      <categories>
        <category>ANNs</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-issue-and-typescript</title>
    <url>/2024/03/09/1/</url>
    <content><![CDATA[<h2 id="Vue-路由的坑和-SSR-的坑">Vue 路由的坑和 SSR 的坑</h2>
<p>因为我没有自己的服务器，所以我只能使用 github 提供的 pages 服务。</p>
<p>但是这个服务是静态的，所以我需要使用 vue SSG 渲染 SSR 的页面，使其成为静态页面。</p>
<p>但是这个过程中遇到了很多问题，唯独 router 和 SSR 的问题最为棘手。</p>
<h3 id="踩坑">踩坑</h3>
<p>在正常的 vue 项目中，我们可以使用 vue-router 来进行路由的管理。</p>
<p>这时我们使用官方的方法构造 main.ts 文件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./views/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这样很好，路由也可以正常工作。</p>
<p>但是我们在使用 SSR 的时候，我们需要使用 SSG 的方法构造 main.ts 文件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ViteSSG</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-ssg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">// 确保你已经创建了 router 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ID_INJECTION_KEY</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `export const createApp` is required instead of the original `createApp(App).mount(&#x27;#app&#x27;)`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createApp = <span class="title class_">ViteSSG</span>(</span><br><span class="line">    <span class="comment">// the root component</span></span><br><span class="line">    <span class="title class_">App</span>,</span><br><span class="line">    <span class="comment">// vue-router options</span></span><br><span class="line">    &#123; routes &#125;,</span><br><span class="line">    <span class="comment">// function to have custom setups</span></span><br><span class="line">    <span class="function">(<span class="params">&#123; app, router, routes, isClient, initialState &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// install plugins etc.</span></span><br><span class="line">        app.<span class="title function_">provide</span>(<span class="variable constant_">ID_INJECTION_KEY</span>, &#123;</span><br><span class="line">            <span class="attr">prefix</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">current</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个文件中，我使用了 <code>ID_INJECTION_KEY</code> 这个变量，这个变量是<code>element-plus</code>的一个插件，我在这里只是举例说明。</p>
</blockquote>
<p>并且，我们需要在 router 文件中不能使用 <code>createRouter</code> 方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// const router = createRouter(&#123;</span></span><br><span class="line"><span class="comment">//     history: createWebHistory(process.env.VUE_APP_BASE_URL),</span></span><br><span class="line"><span class="comment">//     routes</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const isServer = typeof window === &#x27;undefined&#x27;;</span></span><br><span class="line"><span class="comment">// const history = isServer</span></span><br><span class="line"><span class="comment">//     ? createMemoryHistory(import.meta.env.BASE_URL)</span></span><br><span class="line"><span class="comment">//     : createWebHistory(import.meta.env.BASE_URL);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// const routerOptions = &#123;</span></span><br><span class="line"><span class="comment">//     history: history,</span></span><br><span class="line"><span class="comment">//     routes,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// const router = createRouter(routerOptions);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>
<p>可以看到，直接 <code>export default routes</code></p>
<p>然后运行 <code>vue-ssg</code> 的命令 <code>vite-ssg build</code>，然后我们会发现，运行直接报错。</p>
<p>我们需要在 <code>vite.config.ts</code> 文件中添加一些配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;~/&#x27;</span>: <span class="string">`<span class="subst">$&#123;pathSrc&#125;</span>/`</span>,</span><br><span class="line">        <span class="comment">// 需要使用 ssg 编译时，要把 vue 的别名注释掉</span></span><br><span class="line">        <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm-bundler.js&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这样就可以解决这个问题。</p>
<h2 id="TypeScript">TypeScript</h2>
<p>很久之前，我就开始使用 TypeScript 了，现在开了一个新的项目，使用了 Vue3 和 TypeScript。</p>
<p>故复习一遍，做一些记录。</p>
<hr>
<p>TypeScript 是 JavaScript 的超集，它可以编译成纯 JavaScript。TypeScript 是一种由微软开发的自由和开源的编程语言。</p>
<blockquote>
<p>TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svaW50cm8uaHRtbA==">TypeScript 官方文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="使用">使用</h3>
<p>在 Vue3 中，我们可以直接使用 TypeScript，不需要额外的配置。</p>
<hr>
<p>本地安装 TypeScript：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>
<h3 id="类型推断">类型推断</h3>
<p>TypeScript 会根据你的代码，自动推断出类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span>; <span class="comment">// Error: Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>
<h3 id="类型注解">类型注解</h3>
<p>我们可以使用类型注解，来明确的告诉 TypeScript 变量的类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span>; <span class="comment">// Error: Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">number</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">number</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line">result * <span class="number">2</span>; <span class="comment">// Error: Object is possibly &#x27;undefined&#x27;.</span></span><br></pre></td></tr></table></figure>
<p>如果把第2行改成：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="built_in">number</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; <span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>
<p>这样就不会报错了。</p>
<h3 id="基础类型以及联合类型">基础类型以及联合类型</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v1</span>: <span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v2</span>: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v3</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v4</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v5</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v6</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v7</span>: <span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v8</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">v8 = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>
<h3 id="数组">数组</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br></pre></td></tr></table></figure>
<h4 id="元组">元组</h4>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<h3 id="枚举">枚举</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>[<span class="number">1</span>]); <span class="comment">// Green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>[<span class="string">&#x27;Green&#x27;</span>]); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h4 id="void">void</h4>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span></span><br></pre></td></tr></table></figure>
<p>void 表示没有任何类型，通常用于函数没有返回值。</p>
<h3 id="函数">函数</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口">接口</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printPerson</span>(<span class="params"><span class="attr">person</span>: <span class="title class_">Person</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>, person.<span class="property">age</span>);</span><br><span class="line">&#125;<span class="comment">// Tom 18</span></span><br></pre></td></tr></table></figure>
<h3 id="Type">Type</h3>
<p>type 是 TypeScript 的一个关键字，用来定义类型别名。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserName</span> = <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="title class_">UserName</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">name = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>
<h3 id="泛型">泛型</h3>
<p>泛型是 TypeScript 的一个重要特性，它可以让我们在定义函数、接口、类的时候，可以使用任意类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> myFn &lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = myFn&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 T 是一个占位符，可以是任意类型。这个例子中，我们使用了泛型来定义一个函数，这个函数接受一个参数，返回这个参数。</p>
</blockquote>
]]></content>
      <categories>
        <category>AdvancedWeb</category>
      </categories>
  </entry>
  <entry>
    <title>Vue3-01</title>
    <url>/2023/09/03/1/</url>
    <content><![CDATA[<h2 id="Vue3">Vue3</h2>
<p>Vue3 是 Vue.js 的下一个主要版本。Vue3 的目标是为了提升开发体验，同时也考虑了性能的提升。</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly92My5jbi52dWVqcy5vcmcv">https://v3.cn.vuejs.org/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Vue-API-风格">Vue API 风格</h2>
<p>Vue 有两种 API 风格，一种是 2.x 版本的 Options API，另一种是 3.x 版本的 Composition API。</p>
<p>2.x 的风格称为 Options API，因为我们是通过一个个的 Options 来描述组件的，比如 data、methods、props 等等。</p>
<blockquote>
<p>e.g. Options API</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3.x 的风格称为 Composition API，因为我们是通过组合的方式来描述组件的，比如 setup 函数、ref 函数等等。</p>
<blockquote>
<p>e.g. Composition API</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      count.<span class="property">value</span>++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      increment,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们该如何选择？</p>
</blockquote>
<p>在实际开发中，我们可以同时使用 Options API 和 Composition API，但是不建议在一个组件中同时使用 Options API 和 Composition API。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>当我们不需要使用构建工具时，或打算在低复杂度的场景下使用 Vue 时，我们可以使用 CDN 的方式引入 Vue，这种方式下我们推荐使用 Options API。</p>
</li>
<li class="lvl-2">
<p>当我们需要使用构建工具时，或打算在高复杂度的场景下使用 Vue 时，我们可以使用 npm 的方式引入 Vue，这种方式下我们推荐使用 Composition API。</p>
</li>
</ul>
<h2 id="开发前准备">开发前准备</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>Node.js</p>
</li>
<li class="lvl-2">
<p>ES6</p>
</li>
<li class="lvl-2">
<p>CLI</p>
</li>
</ul>
<blockquote>
<p>创建项目</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置</p>
</blockquote>
<p>鉴于我是初学者，目前用不到 vue 提供的这些功能，所以我选择了默认配置(即全部 NO)。</p>
<blockquote>
<p>安装依赖</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>由于国内网络原因，我们可以使用淘宝镜像来安装依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行项目</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>随后控制台会提示我们访问地址，我们在浏览器中打开即可。</p>
<h3 id="推荐开发环境">推荐开发环境</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>VSCode</p>
</li>
<li class="lvl-2">
<p>Vue Language Features (Volar) Extension</p>
</li>
<li class="lvl-2">
<p>[optional] TypeScript Vue Plugin (Volar) Extension</p>
</li>
</ul>
<p>以上是官方推荐的开发环境，我们可以在 VSCode 中安装 <code>Vue Language Features (Volar)</code> 插件，这样我们就可以使用 Vue3 的语法高亮、智能感知等功能了。</p>
<p>此外，我们还可以选择 jetbrains 的 WebStorm。</p>
<h2 id="Vue-项目目录结构">Vue 项目目录结构</h2>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">├─node_modules</span><br><span class="line">├─public</span><br><span class="line">└─src</span><br></pre></td></tr></table></figure>
<p>上面是一个精简的 Vue 项目目录结构，在这个目录中，<code>vite.config.js</code> 是 Vue 的配置文件。<code>index.html</code> 是 Vue 项目的入口文件，我们可以在这个文件中引入其他文件。<code>package.json</code> 是 Vue 项目的配置文件，我们可以在这个文件中配置 Vue 项目的依赖、脚本等等。</p>
<p>我们可以看到，Vue 项目的源码都在 src 目录下，public 目录下的内容是我们可以直接访问的。</p>
<p>src 目录下的内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">├─assets</span><br><span class="line">└─components</span><br></pre></td></tr></table></figure>
<p>这个目录还存在 <code>App.vue</code> 文件，这个文件是 Vue 项目的根组件，我们可以在这个文件中使用其他组件。<br>
<code>main.js</code> 是 Vue 项目的入口文件，我们可以在这个文件中创建 Vue 实例。</p>
<p>assets 目录下的内容是我们可以直接访问的，比如图片、字体等等。</p>
<p>components 目录下的内容是我们可以直接访问的，比如组件等等。</p>
<blockquote>
<p>初次使用 Vue，这个目录下存在一些文件，我们可以在这些文件中看到 Vue 的一些用法。所以推荐初学者可以先看一下这些文件。不用后直接删除即可，之后还要修改 App.vue 文件。</p>
</blockquote>
<p>App.vue 修改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="模板语法">模板语法</h2>
<p>Vue 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p>
<h3 id="文本插值">文本插值</h3>
<p>最基本的数据绑定是文本插值，使用“Mustache”语法（双大括号）的文本插值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Mustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。</p>
<details>
<summary>点击查看示例</summary>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>模板语法-插值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>Change Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; hello &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 这是一个组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data 是一个函数，返回一个对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&quot;Hello Vue! 你好，Vue！&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hello</span>: <span class="string">&quot;Hello! 你好！&quot;</span>, <span class="comment">// 这是新增的</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// methods 是一个对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeMsg</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;Hello World! 你好，世界！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<h3 id="使用-JavaScript-表达式">使用 JavaScript 表达式</h3>
<p>Vue.js 支持在插值中使用 JavaScript 表达式，但是每个绑定都只能包含单个表达式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>正确的实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">number</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">ok</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello World!&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用 JavaScript 表达式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们<strong>不推荐</strong>在模板中放入过多的逻辑，因为模板的目的是描述视图，而不是写入逻辑。</p>
<h3 id="原始-HTML">原始 HTML</h3>
<p>双大括号会将数据解释为纯文本，而非 HTML。为了输出真正的 HTML，我们需要使用 <code>v-html</code> 指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<details>
<summary>点击查看示例</summary>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>原始 HTML<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">rawHtml</span>: <span class="string">&quot;&lt;span style=&#x27;color: red;&#x27;&gt;This should be red.&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的例子中，<code>rawHtml</code> 的值最终会被渲染为红色，因为它使用了 <code>v-html</code> 指令。而使用双大括号的值 <code>&#123;&#123; rawhtml &#125;&#125;</code> 则不会被渲染为红色，因为浏览器会将其作为纯文本插入到 DOM 中。</p>
</details>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-02</title>
    <url>/2023/09/07/2/</url>
    <content><![CDATA[<h2 id="属性绑定">属性绑定</h2>
<h3 id="v-bind">v-bind</h3>
<p>双大括号不能在 HTML 属性中使用，因为它们不是有效的属性值。取而代之的是，我们可以使用 v-bind 指令，它允许我们动态地绑定一个或多个属性，或者一个组件 prop 到表达式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里，dynamicId 表达式的值会被作为 id 属性的值传递给 div 元素。这个表达式可以是任何返回字符串的合法 JavaScript 表达式，通常是一个 data 中的属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;dynamicClass&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>AppID<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dynamicClass</span>:<span class="string">&quot;appclass&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dynamicId</span>:<span class="string">&quot;appid&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.appclass</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>简写</p>
</blockquote>
<p>v-bind 十分常用，所以 Vue 提供了一个缩写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="bool-attribute">bool attribute</h3>
<p>bool 型的 HTML attribute，如果它的值是 false、null 或 undefined，则该 attribute 不会被包含在渲染出来的元素中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isButtonDisabled</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态绑定多个属性">动态绑定多个属性</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;dynamicClass&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isButtonDisabled</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dynamicClass</span>:<span class="string">&quot;appclass&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dynamicId</span>:<span class="string">&quot;appid&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="条件渲染">条件渲染</h2>
<p>在 Vue 中，我们可以使用 <code>v-if</code>、<code>v-else-if</code>、<code>v-else</code> 来创建条件块。这类似于 JavaScript 中的 if、else if 和 else。</p>
<blockquote>
<p>v-if</p>
</blockquote>
<p>v-if 是一个指令，它需要一个表达式作为参数。如果该表达式的值为真，则渲染元素，否则不渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;seen = !seen&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">seen</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<details>
<summary>展开另一个 e.g.</summary>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>现在你看不到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">seen</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;A&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<hr>
<blockquote>
<p>v-show</p>
</blockquote>
<p>另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;seen = !seen&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">seen</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。</p>
<p><code>v-if</code> 是真实的条件渲染，因为它会确保条件块在切换当中适当地销毁与重建条件块内的事件监听器和子组件。<br>
<code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做 - 在条件第一次变为真时才开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多 - 不管初始条件如何，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<h2 id="列表渲染">列表渲染</h2>
<p>我们可以使用 v-for 指令基于一个数组来渲染一个列表。</p>
<p>需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。</p>
<blockquote>
<p>v-for</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// item in items，中间的 in 是固定的，items 是数组，item 是数组中的每一项，item、items 可以随便取名</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;蔬菜&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;奶酪&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">&#x27;随便其它什么人吃的东西&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>item in items</code> 中间的 in 可以使用 of 替代。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>v-for index</p>
</blockquote>
<p><code>v-for</code> 还支持一个可选的第二个参数为当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;蔬菜&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;奶酪&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">&#x27;随便其它什么人吃的东西&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>v-for object</p>
</blockquote>
<p><code>v-for</code> 也可以遍历对象的属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in object&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; - &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">object</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">firstName</span>: <span class="string">&#x27;John&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lastName</span>: <span class="string">&#x27;Doe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">30</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>(value,key,index) in object</code> 中三个参数的顺序不能变，value 是属性值，key 是属性名，index 是索引。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-03</title>
    <url>/2023/09/08/1/</url>
    <content><![CDATA[<h2 id="通过-Key-管理状态">通过 Key 管理状态</h2>
<p>Vue 为了尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这样可以使 Vue 变得非常快。不过，这也意味着，你应该避免在模板中，通过 v-if 来切换元素的显示状态。</p>
<p>Key 是 Vue 用来追踪节点的一个特殊的属性，它可以用于强制替换元素/组件而不是重复使用它。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;show&quot;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示<br>
<code>key</code> 在这里是通过 <code>v-bind</code> 动态绑定的，因为静态的 <code>key</code> 会被作为一个属性传递给被渲染的元素，而动态绑定的 <code>key</code> 会基于每次更新的节点进行更新。推荐使用 <code>v-bind</code> 来绑定 <code>key</code>，因为它能提供更好的性能，同时也更符合 Vue 的风格指南。在任何可行的时候为 <code>v-for</code> 设置 <code>key</code>，除非迭代 DOM 内容足够简单，或者是刻意依赖默认行为以获取性能提升。</p>
</blockquote>
<h3 id="Key-的来源">Key 的来源</h3>
<p>Key 的值必须是唯一的，它可以是任何类型的值，但在不同的节点之间应该使用不同的值。</p>
<p>不要用索引作为 key，除非你的列表是静态的，且项目永远不会被重新排序或过滤。使用不唯一的值可能会导致状态错误或渲染错误。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;bar&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;baz&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，我们使用了每个 item 的 id 作为 key，这样就可以保证每个 key 都是唯一的。</p>
<h2 id="事件处理">事件处理</h2>
<blockquote>
<p>v-on 简写 @</p>
</blockquote>
<p>Vue 事件处理方法使用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>事件处理器可以是一个内联语句，或者是一个方法名。</p>
<blockquote>
<p>内联事件处理器</p>
</blockquote>
<p>通常用于处理非常简单的事件处理器。</p>
<p>在 components/EventDemo.vue 中添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>counter: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">say</span>(<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(msg);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>方法事件处理器</p>
</blockquote>
<p>通常用于处理复杂的事件处理器。</p>
<p>创建 EventDemo2.vue，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(1)&quot;</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(2)&quot;</span>&gt;</span>增加 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>counter: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">counter</span> += num;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上代码中，我们通过<code>methods</code>定义了一个add方法，然后在模板中通过<code>@click=&quot;add(1)&quot;</code>调用该方法。</p>
<h2 id="事件传参">事件传参</h2>
<p>在上面的例子中，我们通过<code>@click=&quot;add(1)&quot;</code>调用add方法，这样就可以实现增加1的功能。但是如果我们想要实现增加2的功能，就需要再定义一个add2方法，这样就会导致代码冗余。</p>
<p>我们可以通过事件传参的方式来解决这个问题。</p>
<p><code>方法事件处理器</code>中的<code>add</code>方法就是一个事件传参的例子。</p>
<p>下面这个例子是一个更加复杂的事件传参的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addzCount&quot;</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>counter: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// event 为事件对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addCount</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在 vue 中的 event 对象是原生 event 对象的包装</span></span></span><br><span class="line"><span class="language-javascript">      e.<span class="property">target</span>.<span class="property">innerText</span> = <span class="string">&#x27;增加 1&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">counter</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另一个事件传参的例子</p>
</blockquote>
<p>这个例子演示了 <code>$event</code> 传参的用法。<br>
<code>$event</code> 是 Vue 提供的一个特殊变量，它是原生 event 对象的包装。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;getNameHandler(item, $event)&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in names&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">names</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getNameHandler</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(name);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="事件修饰符">事件修饰符</h2>
<p>在处理事件时调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>
<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>.stop</code></p>
</li>
<li class="lvl-2">
<p><code>.prevent</code></p>
</li>
<li class="lvl-2">
<p><code>.capture</code></p>
</li>
<li class="lvl-2">
<p><code>.self</code></p>
</li>
<li class="lvl-2">
<p><code>.once</code></p>
</li>
<li class="lvl-2">
<p><code>.passive</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvZ3VpZGUvZXNzZW50aWFscy9ldmVudC1oYW5kbGluZy5odG1sI2V2ZW50LW1vZGlmaWVycw==">事件修饰符<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>阻止默认行为</p>
</blockquote>
<p>“默认行为”即事件的默认行为，比如点击a标签，会跳转到a标签的href属性指定的链接。</p>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickHandle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;yuzhii0718.github.io&quot;</span>&gt;</span>Yuzhii&#x27;s Blog</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">clickHandle</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 阻止默认行为</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// e.preventDefault();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将html中的a标签的 @click改为 @click.prevent 可以阻止默认行为</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>阻止事件冒泡</p>
</blockquote>
<p>“冒泡”即事件的传播，当一个元素上的事件被触发后，该事件会向父元素传播，直到根元素。</p>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">divClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;div click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;btn click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两个div中的按钮，点击第一个按钮，只会触发第一个div的点击事件，不会触发第二个div的点击事件。</p>
<p>因为第一个按钮的点击事件使用了<code>.stop</code>修饰符，阻止了事件冒泡。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-04</title>
    <url>/2023/09/19/1/</url>
    <content><![CDATA[<h2 id="数组变化检测">数组变化检测</h2>
<p>在 Vue3 中，Vue 会对数组的变化进行检测，但是并不是所有的变化都能被检测到。</p>
<p>数组的变化检测主要是通过重写数组的原型方法来实现的，所以只有通过这些方法改变数组才能被检测到。</p>
<blockquote>
<p>变更方法</p>
</blockquote>
<p>Vue 能侦听响应式数组的变化，并在被调用时触发视图更新。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>push()</p>
</li>
<li class="lvl-2">
<p>pop()</p>
</li>
<li class="lvl-2">
<p>shift()</p>
</li>
<li class="lvl-2">
<p>unshift()</p>
</li>
<li class="lvl-2">
<p>splice()</p>
</li>
<li class="lvl-2">
<p>sort()</p>
</li>
<li class="lvl-2">
<p>reverse()</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reverse&quot;</span>&gt;</span>reverse<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sort&quot;</span>&gt;</span>sort<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;splice&quot;</span>&gt;</span>splice<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;push&quot;</span>&gt;</span>push<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;pop&quot;</span>&gt;</span>pop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;shift&quot;</span>&gt;</span>shift<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unshift&quot;</span>&gt;</span>unshift<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;a&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;b&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;c&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;d&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">remove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">reverse</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">reverse</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sort</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">id</span> - b.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">splice</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>, &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;d&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">push</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;d&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">shift</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">unshift</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">unshift</span>(&#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;d&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>替换方法</p>
</blockquote>
<p>替换方法会用新数组替换原数组，vue 会对新数组进行响应式处理。</p>
<p>Vue 不能侦听以下变动的数组：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue</p>
</li>
<li class="lvl-2">
<p>当你修改数组的长度时，例如：vm.items.length = newLength</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;replace&quot;</span>&gt;</span>replace<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;length&quot;</span>&gt;</span>length<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;a&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;b&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;c&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">replace</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>] = &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;d&quot;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">length</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决方法</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>Vue.set()</p>
</li>
<li class="lvl-2">
<p>Array.prototype.splice()</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;replace&quot;</span>&gt;</span>replace<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;length&quot;</span>&gt;</span>length<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;a&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;b&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;c&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">replace</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.items[0] = &#123; id: 4, name: &quot;d&quot; &#125;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">items</span>, <span class="number">0</span>, &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;d&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">length</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.items.length = 2;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="计算属性">计算属性</h2>
<p>模板中放入太多的逻辑会让模板过重且难以维护，因此对于任何复杂逻辑，你都应当使用计算属性。</p>
<p>计算属性是基于它们的依赖进行缓存的，只有在相关依赖发生改变时，才会重新求值。</p>
<p>例如，下面的例子将演示一个模板中的逻辑：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; items.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; items.content.length &gt; 0 ? &#x27;Yes&#x27;: &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">items</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;Yuzhii&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>:[<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;Vue&quot;</span>,<span class="string">&quot;React&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>虽然这个例子很简单，但是模板中的逻辑会变得越来越复杂，这时候就需要使用计算属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">items</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;Yuzhii&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>:[<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;Vue&quot;</span>,<span class="string">&quot;React&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">name</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">content</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">content</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span>: <span class="string">&#x27;No&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看见，将模板中的逻辑放到了计算属性中，这样模板就变得简洁了。</p>
<blockquote>
<p>虽然 methods 也可以实现同样的效果，但是<strong>计算属性值会给予其响应式依赖被缓存</strong>，只有在相关依赖发生改变时，才会重新求值，而 methods <strong>每次</strong>都会重新计算。</p>
</blockquote>
<h2 id="Class-与-Style-绑定">Class 与 Style 绑定</h2>
<p>在 Vue3 中，可以使用 v-bind 指令绑定 class 和 style。</p>
<h3 id="Class-绑定">Class 绑定</h3>
<p>数据绑定的一个常见需求场景是操作元素的 class 列表和它的内联样式。因为它们都是属性，所以我们可以用 v-bind 处理它们：只需要计算出表达式最终的字符串。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span>classObject<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classArray&quot;</span>&gt;</span>classArray<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject2&quot;</span>&gt;</span>classObject2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classArray2&quot;</span>&gt;</span>classArray2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">error</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">classObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">active</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;text-danger&quot;</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">classArray</span>: [<span class="string">&quot;active&quot;</span>, <span class="string">&quot;text-danger&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">classObject2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;text-danger&quot;</span>: <span class="variable language_">this</span>.<span class="property">error</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">error</span>.<span class="property">type</span> === <span class="string">&quot;fatal&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">classArray2</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;text-danger&quot;</span>: <span class="variable language_">this</span>.<span class="property">error</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">error</span>.<span class="property">type</span> === <span class="string">&quot;fatal&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个例子中，classObject 和 classArray 的结果都是 active text-danger，但是 classObject2 和 classArray2 的结果是 active。</p>
<p><img src="./active.png" alt></p>
<p>可以增加一个 CSS 样式来验证一下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以用三元表达式来实现</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;isActive ? &#x27;active&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>isActive<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;error ? &#x27;text-danger&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">error</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>提醒</p>
</blockquote>
<p>数组与对象嵌套，只能是数组中的对象，不能是对象中的数组</p>
<h3 id="Style-绑定">Style 绑定</h3>
<p>v-bind:style 的对象语法十分直观——看着非常像 CSS，其实它是一个 JavaScript 对象。 CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span>styleObject<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject2&quot;</span>&gt;</span>styleObject2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&quot;30px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObject2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此外，还可以绑定数组语法来动态切换多个样式，但是<strong>数组语法只能用在元素的 style 属性上</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObject, styleObject2]&quot;</span>&gt;</span>styleObject<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&quot;30px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObject2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是通常情况下，应用场景比较少。且一般情况下，我们会使用计算属性来处理。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-05</title>
    <url>/2023/10/03/1/</url>
    <content><![CDATA[<h2 id="侦听器">侦听器</h2>
<p>我们可以通过 <code>watch</code> 选项来侦听一个特定的值，当被侦听的值发生变化时，就会执行回调函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">name</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个例子实现了一个简单的双向绑定，当输入框的值发生变化时，会触发 <code>watch</code> 中的回调函数。</p>
<h2 id="表单输入绑定">表单输入绑定</h2>
<p>在 Vue3 中，表单的绑定方式与 Vue2 中有所不同。</p>
<p>在 Vue2 中，我们可以通过 <code>v-model</code> 来实现表单的双向绑定，但是在 Vue3 中，<code>v-model</code> 只能用于组件上，不能用于原生的表单元素上。</p>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 Vue3 中，我们可以通过 <code>v-model</code> 的另一种写法来实现表单的双向绑定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;name = $event.target.value&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个例子实现了一个简单的双向绑定，当输入框的值发生变化时，会触发 <code>input</code> 事件，然后将输入框的值赋值给 <code>name</code>。</p>
<h2 id="模板引用">模板引用</h2>
<p>在 Vue3 中，我们可以通过 <code>ref</code> 来获取模板中的元素。</p>
<p>也就是说，虽然 Vue 中不推荐直接操作 DOM，但是我们可以通过 <code>ref</code> 来获取 DOM 元素，然后操作 DOM。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>获取输入框的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">input</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>挂载结束后，<code>this.$refs.input</code> 就是一个 DOM 元素，我们可以通过 <code>this.$refs.input.value</code> 来获取输入框的值。</p>
<p>没有特殊情况，我们不推荐直接操作 DOM，但是在某些情况下，我们不得不直接操作 DOM，比如在某些第三方库中，我们需要传入一个 DOM 元素，这时候我们就可以通过 <code>ref</code> 来获取 DOM 元素。</p>
<h2 id="组件组成">组件组成</h2>
<p>组件是 Vue 中最重要的概念之一，组件可以帮助我们将一个复杂的页面拆分成多个简单的组件，然后组合起来，这样就可以提高代码的可维护性。</p>
<p>当使用构建工具时，我们可以将组件拆分成多个文件(一个单独的 <code>.vue</code> 文件，这些被称为 SFC 单文件组件)，每个文件都包含三部分内容：<code>template</code>、<code>script</code> 和 <code>style</code>。</p>
<blockquote>
<p>组件组成结构如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件组成<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;ComponentComposition&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用时候 <code>&lt;style&gt;</code> 标签中的 <code>scoped</code> 属性，可以让样式只作用于当前组件。</p>
<blockquote>
<p>组件引用</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件引用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ComponentComposition</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentComposition</span> <span class="keyword">from</span> <span class="string">&quot;./ComponentComposition.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;ComponentComposition&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentComposition</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实例">实例</h3>
<blockquote>
<p>components1.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件引用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;components1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>App.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件引用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">components1</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> components1 <span class="keyword">from</span> <span class="string">&quot;.//components/components1.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    components1,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="组件嵌套关系">组件嵌套关系</h2>
<p>在 Vue 中，组件可以嵌套，也就是说，一个组件可以作为另一个组件的子组件。</p>
<p>创建 <code>pages</code> 文件夹，在 <code>pages</code> 文件夹中创建 <code>Header.vue</code>、<code>Main.vue</code>、<code>Aside.vue</code>、<code>Aeti.vue</code>、<code>Item.vue</code>五个组件。</p>
<p>通过组件间的嵌套，使得组件之间的关系更加清晰，通常形成的组件树如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">App</span><br><span class="line">├── Header</span><br><span class="line">├── Main</span><br><span class="line">│   ├── Article</span><br><span class="line">│   └── Article</span><br><span class="line">└── Aside</span><br><span class="line">    ├── Item</span><br><span class="line">    ├── Item</span><br><span class="line">    └── Item</span><br></pre></td></tr></table></figure>
<details>
<summary>代码-点击展开</summary>
<blockquote>
<p>Header.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Main.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Article</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Article</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Article</span> <span class="keyword">from</span> <span class="string">&quot;./Article.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Main&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Article</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Aside.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Aside<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Item</span> <span class="keyword">from</span> <span class="string">&quot;./Item.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Aside&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Item</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.aside</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Article.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Article<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.article</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Item.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>App.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Aside</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./pages/Header.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&quot;./pages/Main.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Aside</span> <span class="keyword">from</span> <span class="string">&quot;./pages/Aside.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Header</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Main</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Aside</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-06</title>
    <url>/2023/10/05/1/</url>
    <content><![CDATA[<h2 id="组件注册方式">组件注册方式</h2>
<p>一个组件在使用之前，必须先注册，否则会报错。而注册组件的方式有两种，分别是全局注册和局部注册。</p>
<p>在 Vue3 中，我们可以通过 <code>app.component</code> 方法来注册一个全局组件，该方法接收两个参数，第一个参数是组件的名称，第二个参数是组件的选项对象。</p>
<p>而局部注册则是通过 <code>components</code> 选项来实现的，该选项接收一个对象，对象的键是组件的名称，值是组件的选项对象。</p>
<h3 id="全局注册">全局注册</h3>
<p>通过修改 <code>main.js</code> 文件，我们可以在全局注册一个组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;my component&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="comment">// 注册的组件要在 `app.mount()` 之前。</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;my component&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)<span class="comment">// 这里的 my-component 就是组件的名称，可以自定义，但是不能使用驼峰命名法，而是要使用短横线分隔命名法。</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>全局注册的组件可以在任何组件中使用，但是如果组件过多，会导致全局变量过多，不利于维护。并且如果被注册的组件没有被使用，也会被打包到最终的代码中，增加了代码的体积。</p>
<h3 id="局部注册">局部注册</h3>
<p>局部注册的组件只能在当前组件中使用，但是不会污染全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, <span class="title class_">MyComponent</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="组件传递数据">组件传递数据</h2>
<p>组件与组件间并非孤立的，它们之间是可以相互通信的。</p>
<p>在 Vue3 中，组件之间的数据传递方式与 Vue2 中有所不同。</p>
<p>在 Vue2 中，我们可以通过 <code>props</code> 选项来实现父子组件之间的数据传递，而在 Vue3 中，我们同样可以通过 <code>props</code> 选项来实现父子组件之间的数据传递，但是 <code>props</code> 选项的使用方式与 Vue2 中有所不同。</p>
<h3 id="props-使用">props 使用</h3>
<p>我们在 <code>components</code> 文件夹中创建一个 <code>ParentComponent.vue</code> 文件，该文件是父组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在父组件中，我们通过 <code>data</code> 选项定义了一个 <code>name</code> 属性，并将其绑定到了模板中。</p>
<p>然后我们在 <code>components</code> 文件夹中创建一个 <code>ChildComponent.vue</code> 文件，该文件是子组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在子组件中，我们通过 <code>props</code> 选项定义了一个 <code>name</code> 属性，该属性的值是一个数组，数组中的元素就是我们要接收的数据的名称。</p>
<h3 id="组件传递多种类型数据">组件传递多种类型数据</h3>
<p>在上一节中，我们通过 <code>props</code> 选项实现了父子组件之间的数据传递，但是我们只传递了一个字符串类型的数据，那么如果我们要传递多种类型的数据，该怎么办呢？</p>
<p>我们在 <code>components</code> 文件夹中创建一个 <code>ParentComponent.vue</code> 文件，该文件是父组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; height &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; favorite &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span> <span class="attr">:favorite</span>=<span class="string">&quot;favorite&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">height</span>: <span class="number">1.88</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">favorite</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在父组件中，我们通过 <code>data</code> 选项定义了三个属性，并将其绑定到了模板中。</p>
<p>然后我们在 <code>components</code> 文件夹中创建一个 <code>ChildComponent.vue</code> 文件，该文件是子组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; height &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in favorite&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;height&#x27;</span>, <span class="string">&#x27;favorite&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在子组件中，我们通过 <code>props</code> 选项定义了四个属性，该属性的值是一个数组，数组中的元素就是我们要接收的数据的名称。</p>
<p>上面的例子中，我们传递了字符串、数字、浮点数和数组四种类型的数据，但是如果我们要传递对象类型的数据，该怎么办呢？</p>
<p>修改 <code>ParentComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:info</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">1.77</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改 <code>ChildComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info.height &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;info&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们还可以通过 <code>type</code> 选项来指定接收的数据的类型。</p>
<p>使用上面例子的 <code>ParentComponent.vue</code> 文件。修改 <code>ChildComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info.height &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Object</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>传递的数据类型不是对象，那么就会报错。</p>
<p>我们还可传递 boolean 类型的数据。</p>
<p>修改 <code>ParentComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; isShow &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:isShow</span>=<span class="string">&quot;isShow&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改 <code>ChildComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; isShow &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">isShow</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Boolean</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//default: false</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">default</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="comment">// 这里的 default 选项可以是一个函数，函数的返回值就是默认值。</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="props-验证">props 验证</h3>
<p>上面我们通过 <code>type</code> 选项来指定接收的数据的类型，其实可以用做简单的验证，但是还有更强大的验证方式。</p>
<p>我们可以通过 <code>required</code> 选项来指定接收的数据是否必须传递。</p>
<p>修改 <code>ParentComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改 <code>ChildComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加 <code>required: true</code> 选项后，如果父组件没有传递 <code>name</code> 属性，那么就会报错。</p>
<p><code>props</code> 是只读的，我们不能在子组件中修改 <code>props</code> 中的数据。</p>
<p>此外，我们还可以通过 <code>validator</code> 选项来指定自定义验证函数。</p>
<p>保持 <code>ParentComponent.vue</code> 文件不变。修改 <code>ChildComponent.vue</code> 文件，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="property">length</span> &gt; <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-07</title>
    <url>/2023/10/08/1/</url>
    <content><![CDATA[<h2 id="组件事件">组件事件</h2>
<p>在组件模板的表达式中，可以使用 <code>$emit</code> 方法来触发一个自定义事件。</p>
<p>目的是为了让父组件可以监听这个事件，并在事件回调中处理逻辑。</p>
<p>继续使用上一篇文章的 <code>ParentComponent.vue</code> 和 <code>ChildComponent.vue</code> 组件。</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ParentComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleMyEvent&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleMyEvent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handleMyEvent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ChildComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;my-event&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>ParentComponent.vue</code> 组件中，我们监听了 <code>ChildComponent.vue</code> 组件中触发的 <code>my-event</code> 事件，并在事件回调中打印了一句话。</p>
<p>在 <code>ChildComponent.vue</code> 组件中，我们在 <code>handleClick</code> 方法中调用了 <code>$emit</code> 方法，并传递了一个参数，该参数就是我们要触发的事件的名称。</p>
<h3 id="配合-v-model-使用">配合 v-model 使用</h3>
<p>在 Vue3 中，我们可以使用 <code>v-model</code> 指令来实现双向数据绑定。</p>
<p>例如，我们希望在用户输入的时候，实时的将用户输入的内容显示在页面上。</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ParentComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; search &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> @<span class="attr">searchEvent</span>=<span class="string">&quot;getSearch&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">search</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getSearch</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">search</span> = value</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ChildComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">search</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">search</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;searchEvent&#x27;</span>, newValue)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>ParentComponent.vue</code> 组件中，我们监听了 <code>ChildComponent.vue</code> 组件中触发的 <code>searchEvent</code> 事件，并在事件回调中将传递过来的参数赋值给了 <code>search</code> 属性。</p>
<p>在 <code>ChildComponent.vue</code> 组件中，我们在 <code>search</code> 属性上使用了 <code>v-model</code> 指令，这样就可以实现双向数据绑定。</p>
<h3 id="组件数据传递">组件数据传递</h3>
<p>利用 <code>props</code> 可以将数据从父组件传递到子组件。在这一小节主要是传递一个函数。</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ParentComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>父元素 &#123;&#123; massge &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">title</span>=<span class="string">&quot;子组件&quot;</span> <span class="attr">:onEvent</span>=<span class="string">&quot;dataFn&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">massge</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">dataFn</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">massge</span> = data</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ChildComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; onEvent(&#x27;数据传递&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">onEvent</span>: <span class="title class_">Function</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="透传-Attribute">透传 Attribute</h2>
<p>“透传” 是指将一个组件的属性应用在另一个元素上。</p>
<p>透传属性是指那些没有在 <code>props</code> / <code>emits</code> 中声明的属性或是 <code>v-on</code> 事件监听器。常见的透传属性有 <code>class</code>、<code>style</code>、<code>id</code> 等。</p>
<p>当组件的根元素是一个普通的 HTML 元素时，这些属性会被添加到根元素上。</p>
<p>当然，我们也可以通过 <code>inheritAttrs</code> 选项来关闭这个特性。</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ParentComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ChildComponent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-09</title>
    <url>/2023/10/12/1/</url>
    <content><![CDATA[<h2 id="组件生命周期">组件生命周期</h2>
<p>在 Vue2 中，我们可以通过在组件中定义一些特定的生命周期函数来实现在组件的不同阶段执行不同的操作，比如说在组件创建的时候执行一些操作，或者是在组件销毁的时候执行一些操作，这些操作都是通过生命周期函数来实现的。</p>
<p><img src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" alt></p>
<p>在 Vue3 中，组件的生命周期函数和 Vue2 中的生命周期函数是一样的，但是在 Vue3 中，组件的生命周期函数都是以 <code>on</code> 开头的，比如说在 Vue2 中的 <code>beforeCreate</code> 生命周期函数，在 Vue3 中就变成了 <code>onBeforeCreate</code>，在 Vue2 中的 <code>created</code> 生命周期函数，在 Vue3 中就变成了 <code>onCreated</code>，其他的生命周期函数也是一样的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvYXBpL29wdGlvbnMtbGlmZWN5Y2xlLmh0bWw=">选项式 API 生命周期选项<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvYXBpL2NvbXBvc2l0aW9uLWFwaS1saWZlY3ljbGUuaHRtbA==">组合式 API 生命周期钩子<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="组件的生命周期函数">组件的生命周期函数</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建期间的生命周期函数</p>
<ul class="lvl-2">
<li class="lvl-4"><code>onBeforeCreate</code>：在组件实例创建之前执行，此时组件的数据观测和事件机制都未初始化。</li>
<li class="lvl-4"><code>onCreated</code>：在组件实例创建之后执行，此时组件的数据观测和事件机制都已经初始化完成。</li>
</ul>
</li>
<li class="lvl-2">
<p>挂载期间的生命周期函数</p>
<ul class="lvl-2">
<li class="lvl-4"><code>onBeforeMount</code>：在组件挂载到 DOM 之前执行，此时组件的模板已经编译完成，但是还没有挂载到 DOM 中。</li>
<li class="lvl-4"><code>onMounted</code>：在组件挂载到 DOM 之后执行，此时组件已经挂载到 DOM 中。</li>
</ul>
</li>
<li class="lvl-2">
<p>更新期间的生命周期函数</p>
<ul class="lvl-2">
<li class="lvl-4"><code>onBeforeUpdate</code>：在组件更新之前执行，此时组件的数据已经更新完成，但是还没有更新到 DOM 中。</li>
<li class="lvl-4"><code>onUpdated</code>：在组件更新之后执行，此时组件的数据已经更新完成，DOM 也已经更新完成。</li>
</ul>
</li>
<li class="lvl-2">
<p>卸载期间的生命周期函数</p>
<ul class="lvl-2">
<li class="lvl-4"><code>onBeforeUnmount</code>：在组件卸载之前执行，此时组件还没有卸载，DOM 也还没有卸载。</li>
<li class="lvl-4"><code>onUnmounted</code>：在组件卸载之后执行，此时组件已经卸载，DOM 也已经卸载。</li>
</ul>
</li>
<li class="lvl-2">
<p>销毁期间的生命周期函数</p>
<ul class="lvl-2">
<li class="lvl-4"><code>onBeforeDestroy</code>：在组件销毁之前执行，此时组件还没有销毁，DOM 也还没有销毁。</li>
<li class="lvl-4"><code>onDestroyed</code>：在组件销毁之后执行，此时组件已经销毁，DOM 也已经销毁。</li>
</ul>
</li>
</ul>
<blockquote>
<p>Options API e.g.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>改变 message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Hello Vue3, I am BeforeCreate&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUnmount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unmounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;Hello Vue3, I am updated&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Composition API e.g.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>改变 message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello Vue3, I am BeforeCreate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>, message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>, message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>, message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUnmount&#x27;</span>, message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unmounted&#x27;</span>, message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">changeMessage</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            message.<span class="property">value</span> = <span class="string">&#x27;Hello Vue3, I am updated&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            message,</span></span><br><span class="line"><span class="language-javascript">            changeMessage,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对比可以发现，Options API 和 Composition API 的生命周期函数的使用方式是不一样的，Options API 中的生命周期函数是在组件的 <code>export default</code> 中定义的，而 Composition API 中的生命周期函数是在 <code>setup</code> 函数中定义的。但是不管是 Options API 还是 Composition API，它们的生命周期函数的执行顺序都是一样的。</p>
<h2 id="生命周期的应用">生命周期的应用</h2>
<p>生命周期的应用场景，常见的有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在组件创建的时候发送网络请求</p>
</li>
<li class="lvl-2">
<p>在组件销毁的时候清除定时器</p>
</li>
<li class="lvl-2">
<p>在组件更新的时候做一些特殊的处理</p>
</li>
</ul>
<h3 id="ref-获取-DOM-元素"><code>ref</code> 获取 DOM 元素</h3>
<p>在 Vue2 中，我们可以通过给元素添加 <code>ref</code> 属性来获取 DOM 元素，在四个时期中，只有在组件挂载到 DOM 之后，我们才能通过 <code>this.$refs</code> 来获取 DOM 元素，比如下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello Vue3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 Vue3 中，我们也可以通过给元素添加 <code>ref</code> 属性来获取 DOM 元素，但是在 Vue3 中，我们还可以通过 <code>ref</code> 函数来获取 DOM 元素，比如下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello Vue3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> title = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(title.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            title,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="模拟网络请求">模拟网络请求</h3>
<p>在 Vue2 中，我们可以在 <code>created</code> 生命周期函数中发送网络请求，比如下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [],</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span> = [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">content</span>: <span class="string">&#x27;内容1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">content</span>: <span class="string">&#x27;内容2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&#x27;标题3&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">content</span>: <span class="string">&#x27;内容3&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>分析代码，可以看到，我们选择了 <code>created</code> 生命周期函数来发送网络请求，因为在 <code>created</code> 生命周期函数中，组件的数据已经初始化完成，但是组件还没有挂载到 DOM 中，所以我们可以在 <code>created</code> 生命周期函数中发送网络请求，然后在网络请求成功之后，将数据保存到组件的数据中，这样就可以在组件挂载到 DOM 之后，直接从组件的数据中获取到数据，然后渲染到页面中。</p>
<p>在 <code>created</code> 阶段，我们拿到了数据，但数据还没有渲染到页面上，所以页面上是看不到数据的，这就会导致一个问题，就是在 <code>created</code> 阶段，我们无法获取到页面上的 DOM 元素，因为 DOM 元素还没有渲染到页面上。</p>
<p>先拿到数据，再渲染到页面上，这样的操作是有问题的，因为在 <code>created</code> 阶段，我们拿到的数据是一个空数组，这样的话，页面上就会出现一个空的列表，然后等到数据渲染到页面上之后，列表才会显示出来，这样的操作是不友好的。</p>
<p>在 Vue3 中，我们可以通过在 <code>setup</code> 函数中发送网络请求，然后将数据保存到 <code>ref</code> 中，这样的话，我们就可以在 <code>setup</code> 函数中直接使用数据，而不需要等到组件挂载到 DOM 之后才能使用数据，比如下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> list = <span class="title function_">ref</span>([])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                list.<span class="property">value</span> = [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">content</span>: <span class="string">&#x27;内容1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">content</span>: <span class="string">&#x27;内容2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: <span class="string">&#x27;标题3&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">content</span>: <span class="string">&#x27;内容3&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            list,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="动态组件">动态组件</h2>
<p>动态组件是指在一个组件中动态的切换另一个组件，比如说在一个页面中，我们有一个登录组件和一个注册组件，我们可以通过点击按钮来切换登录组件和注册组件，这样的组件就是动态组件。</p>
<p>先看一个例子：</p>
<p>先创建 <code>Login.vue</code> 组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再创建 <code>Register.vue</code> 组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Register&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后创建 <code>App.vue</code> 组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggleComponent&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;./Login.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Register</span> <span class="keyword">from</span> <span class="string">&#x27;./Register.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Login</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Register</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">currentComponent</span>: <span class="string">&#x27;Login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">toggleComponent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">currentComponent</span> = <span class="variable language_">this</span>.<span class="property">currentComponent</span> === <span class="string">&#x27;Login&#x27;</span> ? <span class="string">&#x27;Register&#x27;</span> : <span class="string">&#x27;Login&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击按钮，可以看到组件的切换效果。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-08</title>
    <url>/2023/10/10/1/</url>
    <content><![CDATA[<h2 id="插槽-Slot">插槽 Slot</h2>
<p>组件能够接受任意类型的 JavaScript 片段作为 props，包括基本类型、对象、数组、函数等等。但是在一些场景中要让组件接受的内容更加灵活，比如说我们想要在组件中插入一些 HTML 片段，或者是一些组件，这时候就需要用到插槽。</p>
<h3 id="插槽的基本使用">插槽的基本使用</h3>
<p>在 Vue2 中，我们可以通过在组件中使用 <code>&lt;slot&gt;</code> 标签来实现插槽的功能，比如下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们在组件中使用了 <code>&lt;slot&gt;</code> 标签，这个标签就是一个插槽，它的作用是在组件中插入一些内容，这些内容可以是 HTML 片段，也可以是其他的组件，比如下面这个例子：</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;ParentComponent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85YTdmOGFiMDdiZjg=">彻底搞懂slot插槽，图文详解<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="渲染作用域">渲染作用域</h3>
<p>插槽内容可以访问到父组件的数据作用域，这意味着我们可以在父组件中定义一些数据，然后在插槽中使用这些数据。</p>
<p>延用上一个例子的 <code>ChildComponent</code> 组件，我们在父组件中定义一个 <code>title</code> 数据，然后在插槽中使用这个数据，比如下面这个例子：</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;ParentComponent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&#x27;这是一个标题&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;slot&gt;</code> 标签中的内容可以访问到父组件的数据作用域，这意味着我们可以在父组件中定义一些数据，然后在插槽中使用这些数据。</p>
<h3 id="具名插槽">具名插槽</h3>
<p>在 Vue2 中，我们可以通过在 <code>&lt;slot&gt;</code> 标签上添加一个 <code>name</code> 属性来实现插槽的命名，比如下面这个例子：</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;ParentComponent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="默认内容">默认内容</h3>
<p>在 Vue2 中，我们可以在 <code>&lt;slot&gt;</code> 标签中添加一些默认的内容，这些内容会在父组件中没有提供插槽内容的时候显示出来，比如下面这个例子：</p>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>这是一个默认的内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="插槽中的数据传递">插槽中的数据传递</h3>
<p>某些场景下插槽内容可能要同时使用父组件中的数据和子组件中的数据，这时可以像对组件传递 props 一样，向插槽的出口添加 attribute 属性，比如下面这个例子：</p>
<blockquote>
<p>ParentComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; slotProps.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;ParentComponent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ChildComponent.vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;ChildComponent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&#x27;这是一个标题&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>v-slot</code> 指令可以接收一个参数，这个参数是一个对象，这个对象中包含了一些属性，其中 <code>slotProps</code> 属性是一个对象，这个对象中包含了插槽中的数据，我们可以通过这个对象来访问插槽中的数据。</p>
<p>此外，<code>v-slot</code> 指令可以使用缩写—<code>#</code> 来代替。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-10</title>
    <url>/2023/10/13/1/</url>
    <content><![CDATA[<h2 id="组件保持存活">组件保持存活</h2>
<p>使用 <code>&lt;component :is=&quot;xxx&quot;&gt;</code> 动态切换组件时，会导致组件的状态丢失，比如说在组件 A 中输入了一些内容，然后切换到组件 B，再切换回组件 A，此时组件 A 中的内容就会丢失。</p>
<p>为了解决这个问题，Vue3 提供了一个 <code>&lt;keep-alive&gt;</code> 组件，可以用来对组件进行缓存，从而保持组件的状态不丢失。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>改变 message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeComponentName&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentB</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentB.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ComponentA</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ComponentB</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Hello Vue3, I am BeforeCreate&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">componentName</span>: <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUnmount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unmounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;Hello Vue3, I am Updated&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeComponentName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">componentName</span> = <span class="variable language_">this</span>.<span class="property">componentName</span> === <span class="string">&#x27;ComponentA&#x27;</span> ? <span class="string">&#x27;ComponentB&#x27;</span> : <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>ComponentA.vue</code> &amp; <code>ComponentB.vue</code>是上一篇笔记中的组件(Login &amp; Register)，这里就不再赘述了。</p>
<h2 id="异步组件">异步组件</h2>
<p>大型项目中，可能会有很多组件，如果一次性把所有组件都加载进来，会导致首屏加载时间过长，影响用户体验。</p>
<p>Vue 提供了异步组件的功能，可以让我们把组件按需加载，从而提高首屏加载速度。使用<code>defineAsyncComponent</code>函数来定义异步组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>改变 message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeComponentName&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;asyncComponentName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeAsyncComponentName&quot;</span>&gt;</span>切换异步组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import ComponentB from &#x27;./ComponentB.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const AsyncComponentA = defineAsyncComponent(() =&gt; import(&#x27;./ComponentA.vue&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">AsyncComponentB</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./ComponentB.vue&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ComponentA</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ComponentB,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// AsyncComponentA,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">AsyncComponentB</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Hello Vue3, I am BeforeCreate&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">componentName</span>: <span class="string">&#x27;ComponentA&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">asyncComponentName</span>: <span class="string">&#x27;AsyncComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUnmount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unmounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;Hello Vue3, I am Updated&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeComponentName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">componentName</span> = <span class="variable language_">this</span>.<span class="property">componentName</span> === <span class="string">&#x27;ComponentA&#x27;</span> ? <span class="string">&#x27;ComponentB&#x27;</span> : <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeAsyncComponentName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">asyncComponentName</span> = <span class="variable language_">this</span>.<span class="property">asyncComponentName</span> === <span class="string">&#x27;AsyncComponentA&#x27;</span> ? <span class="string">&#x27;AsyncComponentB&#x27;</span> : <span class="string">&#x27;AsyncComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器中打开页面，点击<code>切换异步组件</code>按钮，可以看到开发者工具中的<code>Network</code>面板，会发出一个<code>chunk-vendors.js</code>的请求，这个请求就是异步组件的代码。</p>
<h2 id="依赖注入">依赖注入</h2>
<p>依赖注入是一种设计模式，它的目的是为了提高代码的可复用性。</p>
<p>通常，我们要从父组件向子组件传递数据，需要使用<code>props</code>，但是如果父组件和子组件之间的层级很深，那么就需要一层一层的传递<code>props</code>，这样会导致代码的可维护性变差。</p>
<p>这一问题被称为<code>prop drilling</code>，Vue3 提供了依赖注入的功能，可以解决这一问题。</p>
<p><code>provide</code>和<code>inject</code>是成对使用的，<code>provide</code>用来提供数据，<code>inject</code>用来注入数据。一个父组件相对其所有后代组件，会作为一个<code>provide</code>的来源，而所有的子组件都可以使用<code>inject</code>来注入数据。</p>
<p>新建一个<code>components</code>文件夹，然后在里面新建一个<code>Grandson.vue</code>、<code>Son.vue</code>和<code>Father.vue</code>，代码如下：</p>
<p><code>Grandson.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Grandson<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Grandson&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inject</span>: [<span class="string">&#x27;message&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>Son.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Son<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grandson</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Grandson</span> <span class="keyword">from</span> <span class="string">&#x27;./Grandson.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Son&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Grandson</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inject</span>: [<span class="string">&#x27;message&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>Father.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Father<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Father&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Son</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Hello Vue3, I am provide&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>Father.vue</code>中，我们使用<code>provide</code>来提供数据，然后在<code>Son.vue</code>和<code>Grandson.vue</code>中使用<code>inject</code>来注入数据。</p>
<p><code>Father</code> 的 <code>message</code> 没有显示出来，控制台提示 <code>[Vue warn]: Property &quot;message&quot; was accessed during render but is not defined on instance.</code>，这是因为<code>provide</code>提供的数据，只能在后代组件中使用，不能在自己组件中使用。</p>
<p>并且，<code>provide</code>提供的数据，只能在后代组件中使用，不能在兄弟组件中使用。也就是从上到下的单向数据流。</p>
<p>如果想要一个全局的数据，可以在<code>main.js</code>中使用<code>app.provide</code>来提供数据，然后在组件中使用<code>inject</code>来注入数据。</p>
<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;Hello Vue3, I am provide&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Vue-应用">Vue 应用</h2>
<p><code>main.js</code>中的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app 是一个应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="comment">// 应用选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载应用实例</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>应用实例</p>
</blockquote>
<p>每个 Vue 应用都需要通过 <code>createApp</code> 函数来创建一个应用实例，然后通过 <code>mount</code> 函数来挂载应用实例。</p>
<blockquote>
<p>根组件</p>
</blockquote>
<p>在 Vue 应用中，我们需要定义一个根组件，这个根组件会被挂载到 <code>#app</code> 元素中，这个根组件可以包含其他的子组件。</p>
<blockquote>
<p>挂载点</p>
</blockquote>
<p>在 Vue 应用中，我们需要一个挂载点，这个挂载点是一个 DOM 元素，我们可以通过这个挂载点来把根组件挂载到 DOM 中。</p>
<h2 id="🎉结束这一段学习">🎉结束这一段学习</h2>
<p>Vue3 的学习到此结束。Vue3 的学习笔记就到这里！</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ZTE光猫开启telnet·备份固件·记录</title>
    <url>/2024/11/10/1/</url>
    <content><![CDATA[<h2 id="下载工具">下载工具</h2>
<ul class="lvl-0">
<li class="lvl-2"><span class="exturl" data-url="aHR0cHM6Ly9naXRjb2RlLmNvbS9vcGVuLXNvdXJjZS10b29sa2l0LzE3ZjA5L292ZXJ2aWV3P3V0bV9zb3VyY2U9dG9vbHNfZ2l0Y29kZSZpbmRleD10b3AmdHlwZT1ocmVmJg==">factorymode_crack<i class="fa fa-external-link-alt"></i></span></li>
<li class="lvl-2"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NlcHRydW0xMDEvenRlT251">zteOnu<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="前提">前提</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>你的光猫是中兴的</p>
</li>
<li class="lvl-2">
<p>运营商还没有下发配置（意味着你需要reset）</p>
</li>
<li class="lvl-2">
<p>factorymode_crack 适用老款光猫</p>
</li>
<li class="lvl-2">
<p>zteOnu 兼容新款光猫</p>
</li>
<li class="lvl-2">
<p>在中兴F653GV9上测试通过</p>
</li>
</ul>
<h2 id="factorymode-crack-使用方法">factorymode_crack 使用方法</h2>
<ol>
<li class="lvl-3">
<p>cd 到 factorymode_crack 目录</p>
</li>
<li class="lvl-3">
<p>运行相关命令</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./factorymode_crack.exe -l xxx open -i 192.168.1.1 -u CMCCAdmin -pw aDm8H%MdA -p 80</span><br></pre></td></tr></table></figure>
<p>如果不行可以将80端口改为8080端口</p>
<h2 id="zteOnu-使用方法">zteOnu 使用方法</h2>
<ol>
<li class="lvl-3">
<p>cd 到 zteOnu 目录</p>
</li>
<li class="lvl-3">
<p>运行相关命令</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./zteOnu --ip 192.168.1.1 --user CMCCAdmin --pass aDm8H%MdA --port 80</span><br></pre></td></tr></table></figure>
<p>加上 --telnet 参数可以固化telnet，但在我这台机器上不行，所以我就不加了</p>
<h2 id="telnet">telnet</h2>
<p>使用windows自带的telnet工具可能会出现无法打开23端口的情况，可以使用putty工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 192.168.1.1</span><br></pre></td></tr></table></figure>
<p>可以看一下路由器的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /proc/capability/</span><br></pre></td></tr></table></figure>
<p>然后 <code>cat</code> 里面的文件，可以看到一些配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把光猫背面的普通用户提升为超级管理员</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> DevAuthInfo 1 Level 1</span><br><span class="line"><span class="comment"># 设置修改超级管理员的用户名和密码</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> DevAuthInfo 0 User xxxxxxxx</span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> DevAuthInfo 0 Pass yyyyyyyy</span><br></pre></td></tr></table></figure>
<hr>
<p>本人的光猫是移动版中兴 F653GV9</p>
<p>在此记录具体信息</p>
<p>通过命令，可以得知以下信息：</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>型号</th>
</tr>
</thead>
<tbody>
<tr>
<td>处理器</td>
<td>ARMv7 Processor rev 1 (v7l)</td>
</tr>
<tr>
<td>内存</td>
<td>512MB</td>
</tr>
<tr>
<td>内核版本</td>
<td>4.1.25</td>
</tr>
<tr>
<td>芯片</td>
<td>ZX279127S</td>
</tr>
<tr>
<td>核心数</td>
<td>1</td>
</tr>
<tr>
<td>芯片厂商</td>
<td>ZXIC</td>
</tr>
<tr>
<td>固件大小</td>
<td>256M</td>
</tr>
<tr>
<td>设备树</td>
<td>ZTE ZX27912X</td>
</tr>
<tr>
<td>BogoMIPS</td>
<td>1987.37</td>
</tr>
<tr>
<td>主频（推测）</td>
<td>993.7MHz</td>
</tr>
</tbody>
</table>
<p>这个光猫还是不错的，虽然单核A9的处理器配512MB内存很难绷得住，但是全千兆端口、无Wifi、稳定性很好，不过没有源码，只能充当光电转换的角色。</p>
<summary>点击查看具体信息</summary>
<details>
<div class="note info"><p>固件和芯片</p>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ # uname -a</span><br><span class="line">Linux F653GV9 4.1.25 #1 SMP Fri Jul 22 10:26:33 CST 2022 armv7l GNU/Linux</span><br><span class="line">/ # cat /proc/version</span><br><span class="line">Linux version 4.1.25 (dubaoshan@localhost.localdomain) (gcc version 4.9.4 (Buildroot 2017.05-svn2186) ) #72 SMP Sun Jun 06 21:16:58 CST 2021</span><br><span class="line">/ # cat /proc/cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">model name      : cortex-a9 (arm v7l)</span><br><span class="line">BogoMIPS        : 1987.37</span><br><span class="line">Features        : half fastmult edsp tls</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x4</span><br><span class="line">CPU part        : 0xc09</span><br><span class="line">CPU revision    : 1</span><br><span class="line"></span><br><span class="line">Hardware        : ZTE ZX27912X (Device Tree)</span><br><span class="line">Revision        : 0000</span><br><span class="line">Serial          : 0000000000000000</span><br><span class="line">/ # cat /proc/capability/boardtype</span><br><span class="line">type       : F653GV9</span><br><span class="line">flag       : 1</span><br><span class="line">vid        : 167</span><br><span class="line">optype     : 0</span><br><span class="line">optname    : DF</span><br><span class="line">tmtype     : 0</span><br><span class="line">cpuname    : ZX279127S</span><br><span class="line">cpuid      : 4</span><br><span class="line">chipvendor : ZXIC</span><br><span class="line">/ # cat /proc/capability/ethernetmac</span><br><span class="line">IfName EMAC Mode Speed    Duplex   AutoNeg CurMode Port</span><br><span class="line">eth0   0    1    1000Mbps full     1       GMII    3</span><br><span class="line">eth1   0    1    1000Mbps full     1       GMII    2</span><br><span class="line">eth2   0    1    1000Mbps full     1       GMII    1</span><br><span class="line">eth3   0    1    1000Mbps full     1       GMII    0</span><br><span class="line">wan_lport: 3</span><br><span class="line">/ # free</span><br><span class="line">              total         used         free       shared      buffers</span><br><span class="line">  Mem:       524288       208224       316064         1144         3432</span><br><span class="line"> Swap:            0            0            0</span><br><span class="line">Total:       524288       208224       316064</span><br><span class="line">/ # cat /proc/stat</span><br><span class="line">cpu  21685 0 30484 4788950 5442 0 6943 0 0 0</span><br><span class="line">cpu0 21685 0 30484 4788950 5442 0 6943 0 0 0</span><br><span class="line">intr 16666950 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4853504 0 0 644176 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 55191 0 0 0 0 1353694 0 0 7 7 2 7 0 0 0 0 9706974 0 0 0 0 0 0 0 53388</span><br><span class="line">ctxt 52842244</span><br><span class="line">btime 4294967295</span><br><span class="line">processes 2134</span><br><span class="line">procs_running 1</span><br><span class="line">procs_blocked 0</span><br><span class="line">softirq 17183364 9706467 4853357 19422 1354886 3090 0 61 0 0 1246081</span><br><span class="line">/ # cat sys/bus/cpu/devices/cpu0/uevent</span><br><span class="line">OF_NAME=cpu</span><br><span class="line">OF_FULLNAME=/cpus/cpu@0</span><br><span class="line">OF_TYPE=cpu</span><br><span class="line">OF_COMPATIBLE_0=arm,cortex-a9</span><br><span class="line">OF_COMPATIBLE_N=1</span><br></pre></td></tr></table></figure>
<div class="note info"><p>分区和挂载</p>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ # fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/loop0: 20 MB, 20418560 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/loop0 doesn&#x27;t contain a valid partition table</span><br><span class="line"></span><br><span class="line">Disk /dev/mtdblock0: 268 MB, 268435456 bytes</span><br><span class="line">255 heads, 63 sectors/track, 32 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/mtdblock0 doesn&#x27;t contain a valid partition table</span><br><span class="line"></span><br><span class="line">Disk /dev/mtdblock10: 52 MB, 52428800 bytes</span><br><span class="line">255 heads, 63 sectors/track, 6 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/mtdblock10 doesn&#x27;t contain a valid partition table</span><br><span class="line">/ # df</span><br><span class="line">Filesystem           1024-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/root                32640     27332      5308  84% /</span><br><span class="line">/dev/loop0               19968     19968         0 100% /kmodule</span><br><span class="line">/dev/mtdblock3            4096       456      3640  11% /tagparam</span><br><span class="line">tmpfs                    20480       252     20228   1% /var</span><br><span class="line">tmpfs                    25600         0     25600   0% /vasdocker</span><br><span class="line">tmpfs                    81920         0     81920   0% /upgtempfile</span><br><span class="line">tmpfs                     2048         0      2048   0% /var/osstmp</span><br><span class="line">tmpfs                     2048         0      2048   0% /mnt</span><br><span class="line">tmpfs                    16384        24     16360   0% /var/felix-temp</span><br><span class="line">tmpfs                    15360        32     15328   0% /tmp</span><br><span class="line">/dev/mtdblock5            8192       640      7552   8% /userconfig</span><br><span class="line">/dev/mtdblock6            4096       384      3712   9% /kmodule/usr/local/ct</span><br><span class="line">ubi0_0                   41628     25872     15756  62% /kmodule/usr/tmp</span><br><span class="line">/dev/loop1               26624     26624         0 100% /kmodule/usr/java</span><br><span class="line">ubi1_0                   55508      9788     42852  19% /kmodule/usr/plugin</span><br><span class="line">/dev/mtdblock4            4096       404      3692  10% /wlan</span><br><span class="line">cgroup_root             222696         0    222696   0% /sys/fs/cgroup</span><br><span class="line">/ # cat /etc/fstab</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;    &lt;dump&gt; &lt;pass&gt;</span><br><span class="line"></span><br><span class="line"># The syntax of busybox&#x27;s fstab entry&#x27;s a little different than traditional</span><br><span class="line"># mount, and doesn&#x27;t work with the usual &#x27;rootfs / rootfs rw 0 0&#x27; entry.</span><br><span class="line"># Actually, it&#x27;s not needed unless you&#x27;re mounting from a non-nfs device,</span><br><span class="line"># like a hard disk.  In that case, you probably need something like the</span><br><span class="line"># following:</span><br><span class="line"></span><br><span class="line"># /dev/hda1       /               ext3    rw           1      1</span><br><span class="line"></span><br><span class="line">proc            /proc           proc    defaults     0      0</span><br><span class="line">sysfs           /sys            sysfs   defaults     0      0</span><br><span class="line">#devpts          /dev/pts        devpts  defaults     0      0</span><br><span class="line">#tmpfs           /var            tmpfs   rw     0      0</span><br><span class="line">/ # cat /proc/mtd</span><br><span class="line">dev:    size   erasesize  name</span><br><span class="line">mtd0: 10000000 00020000 &quot;whole flash&quot;</span><br><span class="line">mtd1: 00200000 00020000 &quot;u-boot&quot;</span><br><span class="line">mtd2: 00400000 00020000 &quot;others&quot;</span><br><span class="line">mtd3: 00400000 00020000 &quot;parameter tags&quot;</span><br><span class="line">mtd4: 00400000 00020000 &quot;wlan&quot;</span><br><span class="line">mtd5: 00800000 00020000 &quot;usercfg&quot;</span><br><span class="line">mtd6: 00400000 00020000 &quot;middleware&quot;</span><br><span class="line">mtd7: 02000000 00020000 &quot;kernel1&quot;</span><br><span class="line">mtd8: 02000000 00020000 &quot;kernel2&quot;</span><br><span class="line">mtd9: 03200000 00020000 &quot;osgi1&quot;</span><br><span class="line">mtd10: 03200000 00020000 &quot;osgi2&quot;</span><br><span class="line">mtd11: 04100000 00020000 &quot;plugin_data&quot;</span><br><span class="line">mtd12: 01fe0000 00020000 &quot;rootfs&quot;</span><br></pre></td></tr></table></figure>
<div class="note info"><p>备份固件</p>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ # mtd_debug read /dev/mtd0 0 0x10000000 /mnt/usb1_1/mtd0</span><br><span class="line">/ # tftp -p -l mtd0 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd1 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd2 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd3 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd4 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd5 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd6 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd7 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd8 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd9 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd10 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd11 192.168.1.2</span><br><span class="line">/ # tftp -p -l mtd12 192.168.1.2</span><br></pre></td></tr></table></figure>
<div class="note info"><p>分区具体信息</p>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/ # cd /dev/</span><br><span class="line">/ # mtd_debug info mtd0</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 268435456 (256M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd1</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 2097152 (2M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd2</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 4194304 (4M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd3</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 4194304 (4M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd4</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 4194304 (4M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd5</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 8388608 (8M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd6</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 4194304 (4M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd7</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 33554432 (32M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd8</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 33554432 (32M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd9</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 52428800 (50M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd10</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 52428800 (50M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd11</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 68157440 (65M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br><span class="line"></span><br><span class="line">/ # mtd_debug info mtd12</span><br><span class="line">mtd.type = MTD_NANDFLASH</span><br><span class="line">mtd.flags =</span><br><span class="line">mtd.size = 33423360 (31M)</span><br><span class="line">mtd.erasesize = 131072 (128K)</span><br><span class="line">mtd.oobblock = 2048 (2K)</span><br><span class="line">mtd.oobsize = 64</span><br><span class="line">mtd.ecctype = MTD_ECC_NONE</span><br><span class="line">regions = 0</span><br></pre></td></tr></table></figure>
</details>
<h2 id="常用-telnet-命令">常用 telnet 命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有配置</span></span><br><span class="line">sendcmd 1 DB p all <span class="comment"># 有些版本不现实</span></span><br><span class="line"><span class="comment">#超密查询</span></span><br><span class="line">sendcmd 1 DB p DevAuthInfo</span><br><span class="line"><span class="comment">#telnet密码查询</span></span><br><span class="line">sendcmd 1 DB p TelnetCfg</span><br><span class="line"><span class="comment">#pppoe密码查询</span></span><br><span class="line">sendcmd 1 DB p WANCPPP</span><br><span class="line"><span class="comment">#wifi密码查询</span></span><br><span class="line">sendcmd 1 DB p WLANPSK</span><br><span class="line"> </span><br><span class="line"><span class="comment">#1指的是APPID，对应进程cspd，可通过命令sendcmd -pc show 查看进程列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭运营商远程操作</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> MgtServer 0 Tr069Enable 0</span><br></pre></td></tr></table></figure>
<h2 id="配置分析">配置分析</h2>
<p>超级管理员账号为CMCCAdmin，密码变成了CMCCAdmin+8位随机字符串（数字/字母/特殊字符）这个基本上是随机的没有规律</p>
<p>pppoe拨号的账号为手机号@net，密码为12345678</p>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kbW0uaW5rLzIwMjQvMDYvMDEvenh0ZWxuZXR0ZWxuZXQxLw==">中兴光猫开临时telnet-修改超管密码-固化开启telnet—-第一期<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MTYzMDg3LTEtMS5odG1s">【天翼天邑】 中兴电信光猫天翼4.0破解获取超级密码教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hpcGhlbGwuY29tL2ZvcnVtLnBocD9tb2Q9dmlld3RocmVhZCZ0aWQ9MjU5ODM5Mg==">【网络】 简单分享F7015TV3新款光猫详细参数及分享个人光猫修改经验<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MjY2NDA1LTEtMS5odG1s">F653GV9 成功开启telnet 备份固件<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC00NTM2MTgtMS0xLmh0bWw=">光猫破解教程二：固件备份（小白升级篇，同样适用于路由器）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRjb2RlLmNzZG4ubmV0LzY1ZTkzYmJhMWE4MzY4MjVlZDc4ZTU1Mi5odG1s">移动光猫固件备份、刷机、改sn和mac等<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL29wdXMvOTU4ODQ1NzAyMTg5ODc1MjIw">中兴7015TV3 开启telnet 换光猫 折腾记录<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MzA4NTcxLTEtMS5odG1s">【中兴】 中兴光猫 ZXHNTelnet设置代码大全<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dzbHMyMDA4MDgvYXJ0aWNsZS9kZXRhaWxzLzEzMjgwNTg1Nw==">移动中兴ZXHN F6610M光猫拨号密码查询<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="后续-挂在-OpenWrt-上的-Python-脚本">后续 挂在 OpenWrt 上的 Python 脚本</h2>
<p>这光猫的系统是 Linux，并且有 BusyBox，理论可以通过 BusyBox 的一些命令来实现一些高级操作</p>
<p>然而还是我想多了，这个光猫的 BusyBox 版本太低，而且有大量的命令被删除了，所以只能用来做一些简单的操作</p>
<p>比如 iptables，可以通过 iptables 命令来设置防火墙规则，然而并不生效</p>
<p>又比如 tc，可以通过 tc 命令来设置网络带宽，然而 qdisc 的算法都被删除了</p>
<p>或许你可以想到使用 shell 脚本来实现一些功能，然而这个光猫的固件使用了 UBI 文件系统，ROOTFS 是只读的，以及没有任何文本编辑器（vi、vim、nano、emacs 都没有），即使是 sh 也是 not found。</p>
<p>只有 ifconfig 还算正常，可以通过 ifconfig 命令来设置网络接口</p>
<p>故此，只能另辟蹊径了，比如使用 Python 来实现一些功能</p>
<p>可以利用上述脚本模拟延迟</p>
<p>把它添加应用到 bash 脚本中，再使用路由器的定时任务中，可以实现某时段的延迟</p>
<p>至于限速，目前则是无能为力了。</p>
<p>由于一些原因，不能直接从外网访问到该路由（并非是没有 IPv6），故，通过挂在其下的 OpenWrt 来实现</p>
<h3 id="功能">功能</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">命令执行</label></p>
</li>
</ul>
<p>我用于执行 ifconfig 命令，可以指定延迟和随机延迟，以及执行次数</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox1" checked="true"><label for="checkbox1">计划任务脚本生成</label></p>
</li>
</ul>
<p>一个 Python 脚本来生成一个计划任务列表，追加到 crontab 中</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox2" checked="true"><label for="checkbox2">通过 git 从外网获取实时 IP</label></p>
</li>
</ul>
<p>没有自己的服务器，我们要怎么把 IP 传递到外网呢？</p>
<p>可以通过 git 来实现，git 有一个功能，就是可以通过 <code>git push</code> 命令，把本地的文件推送到远程仓库</p>
<p>在 openwrt 上，安装 git、openssh-keygen、openssh-client、python3</p>
<p>搭配默认的 crontab 计划任务，每隔一段时间执行一次脚本，把 IP 写入到一个文件中，然后通过 git 推送到远程仓库</p>
<p>那么就可以实现通过 git 来获取 IP 了</p>
<p>在 openwrt 上执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/net/arp <span class="comment"># 可以得到 ipv4 mac 连接的硬件接口</span></span><br><span class="line">iwinfo phy1-ap0 info <span class="comment"># 可以得到无线接口的信息</span></span><br><span class="line">iwinfo phy1-ap0 assoclist <span class="comment"># 可以得到无线接口连接的设备信息</span></span><br><span class="line">iw dev phy1-ap0 station dump  <span class="comment"># 可以得到无线接口详细参数</span></span><br><span class="line"><span class="built_in">cat</span> /tmp/dhcp.leases <span class="comment"># 可以得到 dhcp 信息（ipv4 mac 以及设备名）</span></span><br><span class="line"><span class="built_in">cat</span> /tmp/hosts/odhcpd <span class="comment"># 可以得到 dhcp 信息（ipv6 以及设备名）</span></span><br><span class="line">ifconfig <span class="comment"># 可以得到所有接口的信息</span></span><br><span class="line">ip addr <span class="comment"># 可以得到所有接口的信息</span></span><br></pre></td></tr></table></figure>
<p>结合以上命令，可以得到当前连接到路由器的设备的 IP 地址</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">检测 log 文件的大小</label></p>
</li>
</ul>
<p>一个 Python 脚本来检测 /tmp/python-script/ 目录下的所有 .log 文件的大小，当大小达到 1MB 时，删除前半段内容</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox4"><label for="checkbox4">通过 git 读取配置文件、</label></p>
</li>
</ul>
<p>同理，可以通过 git 来读取配置文件，然后执行相应的操作</p>
<h3 id="使用方法">使用方法</h3>
<div id="downloadcard">
    <div class="card">
        <h2>脚本文件</h2>
        <a href="./pyscript.zip" download="pyscript.zip" class="download-btn" target="_blank" data-pjax-state="load">下载</a>
    </div>
</div>
<style>
    #downloadcard {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0;
    }

    .card {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .card h2 {
        margin-bottom: 20px;
    }

    .download-btn {
        display: block;
        margin: 10px 0;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .download-btn:hover {
        background-color: #0056b3;
    }
</style>
<p>将脚本文件解压到 openwrt 的 /usr/bin/ 目录下</p>
<p>然后在 openwrt 上执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/bin/pyscript.py</span><br></pre></td></tr></table></figure>
<p>然后编辑 cron 计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/crontabs/root</span><br></pre></td></tr></table></figure>
<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 每天 0 点执行一次</span><br><span class="line">0 0 * * * /usr/bin/python3 /usr/bin/pyscript.py</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我将一些路径设定在了 /tmp/python-script/ 目录下，你可以根据自己的需要修改这个路径重启后会清空，可以改到 /root/ 目录下，这个目录是可以持久化的</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>ARMITAGE III - 奥美蒂 III</title>
    <url>/2025/04/15/1/</url>
    <content><![CDATA[<p>最近看推刷到一个贴子，review 了一款叫做 Armitage III 的日本动漫</p>
<p><img src="https://imgcn4.bgmbk.tv/file/bk/6108/881cdc9694866b3c9f9ef20e0860ee01.webp" alt></p>
<h2 id="1-作品介绍">1. 作品介绍</h2>
<p>罗斯·西利巴斯是一位芝加哥警察，他的搭档在与一个机器人的战斗中丧生。他刚刚被调往火星，成为一名机器人专家。然而，在离开太空港之前，他发现了一群形迹可疑的人，原来是一个带着机器人保镖的疯子。在候机楼等待他的即将成为搭档的娜奥米·奥美蒂的帮助下，他阻止了这些机器人，但他们的头目却逃脱了。</p>
<p>当他们发现这群人抬着一个机器人的尸体时，剧情变得更加扑朔迷离。这名机器人是一位非常受欢迎的乡村歌手，正在冒充人类。在火星警察局，罗斯和奥美蒂搭档调查这起不寻常的案件。事实证明，有人正在谋杀机器人——一种罕见且非法的第三类机器人，它们几乎与人类难以区分——而这些机器人一直以人类的身份生活，却未被发现。</p>
<p>罗斯对调查早已感到不安，当他发现奥美蒂本人也是第三代机器人时，他更是不知所措。在与机器人刺客的对峙中，他身负重伤，不得不用机械装置替换大部分身体，这让情况变得更加复杂。</p>
<p>与此同时，与地球的战争威胁始终笼罩着罗斯，而这些罪行似乎都与他息息相关。奥美蒂成为了一名被通缉的机器人，罗斯必须在她和他的偏见之间做出选择。</p>
<p>…</p>
<h2 id="2-感想">2. 感想</h2>
<p>90 年代的日本动画，画风和剧情都很不错，日本黄金时代结束后保持惯性的产品，可惜同时代有太多优秀的作品了，比如《攻壳机动队》，导致她的存在感不高。</p>
<p>不过这部作品的设定和剧情都很不错，值得一看。</p>
<h2 id="3-相关链接">3. 相关链接</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9ueWFhLmxhbmQvdmlldy83NzE4Nzk=">【1995-2002】 ARMITAGE III_奥美蒂(アミテージ・ザ・サード)_OVA.MOVIE<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9hbmlkYi5uZXQvYW5pbWUvNDIw">Anime: Armitage III<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9tb2V2aWxsYWdlLmNvbS8lRTUlQTUlQTUlRTclQkUlOEUlRTglOTIlODJJSUk=">奥美蒂III<i class="fa fa-external-link-alt"></i></span></p>
<p>在线流媒体可以去 bilibili 用户 @起名费劲太郎 进行观看。</p>
<h2 id="4-疑惑">4. 疑惑</h2>
<p>找资源的时候，发现无论如何都没有 Armitage III Poly Matrix 的日语声带，只有英文配音的版本。</p>
<p>后面发现了这段话</p>
<blockquote>
<p>Armitage III is shown in 2 versions: a 4-episode OAV version of Armitage III, and The Armitage III Polymatrix DVD. The DVD is only in English (with optional Japanese subtitles) The 4-episode OAV version is in Japanese with optional English subtitles and/or dubbing. Other aspects of the movie have also been changed.</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>BOSS直聘 爬虫·数据分析·数据可视化</title>
    <url>/2024/12/22/1/</url>
    <content><![CDATA[<h2 id="BOSS直聘-爬虫·数据分析·数据可视化">BOSS直聘 爬虫·数据分析·数据可视化</h2>
<p>做了一个项目，爬取了BOSS直聘上的数据分析岗位的招聘信息，进行了数据分析和数据可视化。</p>
<h3 id="项目背景">项目背景</h3>
<p>期末了，正好有一个爬虫课的实习，于是就想到了爬取BOSS直聘上的数据分析岗位的招聘信息，进行数据分析和数据可视化。</p>
<p>采用了Selenium + Mysql + Flask + Echarts + Bootstrap 的技术栈。</p>
<h3 id="项目目标">项目目标</h3>
<p><input type="checkbox" id="checkbox7" checked="true"><label for="checkbox7">爬取BOSS直聘上的数据分析岗位的招聘信息</label><br>
<input type="checkbox" id="checkbox6" checked="true"><label for="checkbox6">对爬取的数据进行数据分析</label><br>
<input type="checkbox" id="checkbox5" checked="true"><label for="checkbox5">对数据进行数据可视化</label></p>
<h3 id="成果">成果</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvYm9venAtbmVv">boss-selenium and web-page - GitHub<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><a href="https://yuzhii0718.eu.org/boozp-neo/">在线演示：BOSS直聘 互联网/AI 岗位分析可视化</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepseek R1 本地部署</title>
    <url>/2025/03/05/1/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近国产的大模型很火，所以想到搞一个玩一玩。</p>
<p>我使用了 Deepseek R1，Ollama，Open WebUI进行了本地部署。</p>
<p>不过我的电脑配置有限，使用了8b参数的版本。</p>
<h2 id="准备工作">准备工作</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>Ollama 0.5.13</p>
</li>
<li class="lvl-2">
<p>Docker version 27.2.0, build 3ab4256</p>
</li>
</ul>
<h2 id="部署">部署</h2>
<h3 id="安装-Ollama">安装 Ollama</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OllamaSetup.exe /DIR=D:\Ollama</span><br></pre></td></tr></table></figure>
<blockquote>
<p>指定安装目录</p>
</blockquote>
<p>环境变量 -&gt; 系统变量 -&gt; Path -&gt; 添加 <code>D:\Ollama</code><br>
环境变量 -&gt; 系统变量 -&gt; 新建 <code>OLLAMA_MODELS</code> -&gt; 值 <code>D:\Ollama\models</code></p>
<blockquote>
<p>配置环境变量，然后重启电脑</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ollama run deepseek-r1:8b</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行 Deepseek R1</p>
</blockquote>
<h3 id="安装-Open-WebUI-docker-ver">安装 Open WebUI docker ver</h3>
<p>这里是使用了 Docker 进行部署，版本 <code>v0.5.19</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --gpus all --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个是使用了显卡的版本，如果没有英伟达显卡，运行 <code>docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</code></p>
</blockquote>
<h3 id="访问">访问</h3>
<p>打开浏览器，输入 <code>http://localhost:3000</code>，初始化账号密码，然后就可以使用了。</p>
<h2 id="quickstart">quickstart</h2>
<p>为了快速使用，我提供了一个快速使用的脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> CONTAINER_ID=319bd612c784</span><br><span class="line">title 本地AI快捷启动脚本</span><br><span class="line">color 0a</span><br><span class="line">mode con cols=80 lines=30</span><br><span class="line">:menu</span><br><span class="line">cls</span><br><span class="line"><span class="built_in">echo</span> ==================================================================</span><br><span class="line"><span class="built_in">echo</span>                       本地 AI 快捷启动脚本</span><br><span class="line"><span class="built_in">echo</span> ==================================================================</span><br><span class="line"><span class="built_in">echo</span> 1. 运行 Deepseek7B                Ⅱ     5. 停止 Deepseek7B</span><br><span class="line"><span class="built_in">echo</span> 2. 运行 Deepseek8B                Ⅱ     6. 停止 Deepseek8B</span><br><span class="line"><span class="built_in">echo</span> 3. 运行 Open-WebUI Docker         Ⅱ     7. 停止 Open-WebUI Docker</span><br><span class="line"><span class="built_in">echo</span> 4. 打开浏览器访问 Open-WebUI      Ⅱ     8. 停止 Ollama</span><br><span class="line"><span class="built_in">echo</span> ==================================================================</span><br><span class="line"><span class="built_in">echo</span> a. 查看显卡状态                   Ⅱ</span><br><span class="line"><span class="built_in">echo</span> b. 查看 Ollama 模型状态           Ⅱ     d. 启动 Ollama</span><br><span class="line"><span class="built_in">echo</span> c. 查看 Docker 容器状态           Ⅱ     e. 启动 Docker</span><br><span class="line"><span class="built_in">echo</span> ==================================================================</span><br><span class="line"><span class="built_in">echo</span> 0. 退出</span><br><span class="line"><span class="built_in">echo</span>. </span><br><span class="line"><span class="built_in">set</span> /p choice=请选择一个选项:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;&quot;</span> (</span><br><span class="line">    <span class="built_in">echo</span> 未选择任何选项，请重新选择。</span><br><span class="line">    pause</span><br><span class="line">    goto menu</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;1&quot;</span> goto runDeepseek7B</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;2&quot;</span> goto runDeepseek8B</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;3&quot;</span> goto runOpenWebUI</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;4&quot;</span> goto openBrowser</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;5&quot;</span> goto stopDeepseek7B</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;6&quot;</span> goto stopDeepseek8B</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;7&quot;</span> goto stopOpenWebUI</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;8&quot;</span> goto stopOllama</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;0&quot;</span> goto <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;a&quot;</span> goto nvidia-smi</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;b&quot;</span> goto model-status</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;c&quot;</span> goto docker-ps</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;d&quot;</span> goto startOllama</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%choice%&quot;</span>==<span class="string">&quot;e&quot;</span> goto startDocker</span><br><span class="line"></span><br><span class="line">:runDeepseek7B</span><br><span class="line">start cmd /c <span class="string">&quot;ollama run deepseek-r1:7b&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 新窗口 Ctrl + D 退出 </span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:runDeepseek8B</span><br><span class="line">start cmd /c <span class="string">&quot;ollama run deepseek-r1:8b&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 新窗口 Ctrl + D 退出 </span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:runOpenWebUI</span><br><span class="line">start cmd /c <span class="string">&quot;docker start %CONTAINER_ID%&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 打开浏览器并访问 http://localhost:3000</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:openBrowser</span><br><span class="line">start cmd /c <span class="string">&quot;start http://localhost:3000&quot;</span></span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:stopDeepseek7B</span><br><span class="line">start cmd /c <span class="string">&quot;ollama stop deepseek-r1:7b&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 停止 Deepseek7B</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:stopDeepseek8B</span><br><span class="line">start cmd /c <span class="string">&quot;ollama stop deepseek-r1:8b&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 停止 Deepseek8B</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:stopOpenWebUI</span><br><span class="line">start cmd /c <span class="string">&quot;docker kill %CONTAINER_ID%&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 停止 Open-WebUI</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:stopOllama</span><br><span class="line">start cmd /c <span class="string">&quot;taskkill /f /t /im &quot;</span>ollama app.exe<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 停止 Ollama</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:<span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">:nvidia-smi</span><br><span class="line">nvidia-smi</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:model-status</span><br><span class="line">ollama ps</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:docker-ps</span><br><span class="line">docker ps -a</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:startOllama</span><br><span class="line">start cmd /c <span class="string">&quot;D:\Ollama\ollama app.exe&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 启动 Ollama</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:startDocker</span><br><span class="line">start cmd /c <span class="string">&quot;C:\Program Files\Docker\Docker\Docker Desktop.exe&quot;</span></span><br><span class="line"><span class="built_in">echo</span> 启动 Docker</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br></pre></td></tr></table></figure>
<p>根据 Docker 容器 ID 修改 <code>CONTAINER_ID</code> 的值。</p>
<h2 id="结语">结语</h2>
<p>大家都说 Deepseek R1 很强，但是在我这里并没有体现出来，可能是我的电脑配置太低了。</p>
<h2 id="参考">参考</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9vbGxhbWEuY29tL2xpYnJhcnkvZGVlcHNlZWstcjE=">Ollama<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW4td2VidWkvb3Blbi13ZWJ1aQ==">Open WebUI<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
  </entry>
  <entry>
    <title>破解富士通平板电脑的UEFI密码</title>
    <url>/2024/09/22/1/</url>
    <content><![CDATA[<p>这台设备是 Fujitsu Tablet Stylistic V727 的用于日本医疗行业的定制版本 V727/V</p>
<p>采用 Intel 公司的 m3y30 处理器，8G LPDDR3 内存，128G SSD，1920x1280 分辨率的屏幕，支持触控和笔触，内置 4G LTE 模块，支持 Feli-Ca，支持 USB Type-C，支持 802.11ac Wi-Fi，支持蓝牙 4.1，支持 GPS，使用 Windows 10 Pro 操作系统。</p>
<p><img src="./screen.jpg" alt></p>
<p>以往我都会把密码存储在密码管理器中，这次想要重装系统，但是忘记了UEFI密码。</p>
<p>尝试了许多可能的密码，但是都没有成功。最后我找到了一个方法，可以重置UEFI密码。</p>
<h2 id="重置UEFI密码">重置UEFI密码</h2>
<p>解密工作需要输入密码时请直接回车3次，一般会出现多位溢出码部分不出溢出码的机器请按照以下方法操作。提示密码时输入下列：</p>
<p>第一次输入3hqgo3按确定报错之后第二次输入jqw534报错之后输入0qww294e按确定之后出一串字符码。第一个密码33是数字  第二个534是数字 第三个0294是数字。其它都是小写字母</p>
<p>把溢出的代码 在这个网站输入</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iaW9zLXB3Lm9yZy8=">BIOS Master Password Generator for Laptops<i class="fa fa-external-link-alt"></i></span></p>
<p>然后会得到一个解锁密码，输入即可解锁。</p>
<p>然后进入UEFI设置，重置密码即可。</p>
<h2 id="参考">参考</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hpbmFmaXguY29tL3RocmVhZC0xMDcwOTU3LTEtMS5odG1s">【维修经验】我自己总结的几种笔记本BIOS密码超级密码不拆机解密方法<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhY2hlcjA5L3B3Z2VuLWZvci1iaW9z">Password generator for BIOS<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="烂电池">烂电池</h2>
<p>去年的冬天（24年末），那天晚上使用完，放在桌子上，第二天早，无法开机，电池没电了，插上电源，开机，显示电池电量为0%，过了一段时间，充满了电，我没有太在意，继续使用，但是发现电池很快就没电了，使用软件查看电池健康状态，发现电池健康状态为损耗97%，耗电如流水。</p>
<p><img src="./battery.PNG" alt></p>
<p>故去购物网查看电池价格，发现电池价格为 300 元，然而这台设备二手价才 500~600 元，所以我决定不换电池，继续使用。</p>
<p>我想到了三个解决方案：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>这台设备支持 USB Type-C，我可以使用移动电源继续使用（PD 12V）。</p>
</li>
<li class="lvl-2">
<p>电源插口是 DC 19V的，可以制作一个UPS供电。</p>
</li>
<li class="lvl-2">
<p>维修电池。</p>
</li>
</ul>
<p>第一个方案最简单，但是我放弃了，因为这与第二个方案相似，而且由于技术原因，Type-C 电源供电是先充电池，再从电池供电，那为何不直接用第二个方案呢？</p>
<p>第二个方案挺好的，我可以使用 18650 电池制作一个 UPS，这样可以保证设备不会因为断电而关机，但是这个方案需要我购买一些电子元件，而且我需要设计一个电路板，这个方案需要时间。</p>
<p>第三个方案需要拆开电池，更换其中的电芯，但是我不知道这样是否会锁定电池，但是这样最省钱，而且美观。我拆开发现，它的主控芯片是 fm30xy 844s7b，电芯是索尼 383396 3.7V 聚合物锂电池，容量 1510mAh，3串2并，总共6个，11.1V。关于这个保护芯片，在网上没有任何资料，我只能自己研究。</p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO 插件重置</title>
    <url>/2024/11/22/1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c36b5f1d20d3b035cf9b2878f85d46a466cf74879722f7b88eace3436af5e0fe">269e7d5347b7159857e2b73e7f7f62c059b1279b43e1175d87d1a505941affef6fa60bd3a1d1a7f81a128a5f5893bc7e87b6af68c73321e0bdcd7af1b9262f5ad49e25cf5d3878a289aa097b13bee65a7d2143d0fe11a125ba94d8b27e44f4603ac5899dcc88441daa79b3260d2f7428c5e183de0ee119f2b81e5ee1514ecb31fe2afbd2d31a9db0d7b96539862265cab648ad3c541a21f086d8f78f7c2212840070bb63bd05351e61287cd24b3b1b351aefa692c28814e9e76c8846308415bb15d3619cbea8d79269d9b0c5d3c5ce7ca407ff84aeaa6b3b24faa24144fd8fbbee2f20268208222adf87640fc95a67450bf7ca802993390c00a0465efe50dbb6eb3313528eb1efe0d8c4a4b5a80be434d5194a455ef27abfebfca25e352d8de8609e30ffdaf9b60763f953ddd274ff1be0a24383769097bf4b3ccb571673134b1ba1d1305411126c4a27c24fddb61155e3f0bc89acadf0fba4acd5f4404b993873e865c0892a1bb45600fac55529363f2bd6b0abaded14e339c6e21b81787675459b30c041c824d6539d46b359ee2c6130d4cd4867d3035fb4294c9f22c9a6dd960308b662a8ebc308c837d345627f1d5b42971ddfa63c56981cc4b0c2ce26298dfce69f084a9f3387c1e1ddd8f4184a826b7c76aa4541574e139a95c2b4ac41aeec646a92762685f18db2d8e8def317dd6511467a7bde05456b69ab205805e1a31c600ca3545bb5c1d92a9af04c5c10a9ca808fdbd3c13210f9c84ccec15daa4b2e1d15cd5fac5a361962d586104171c1b8f6efa9037809f1e7f3a501a40d978f0fee0611f7d47144855ede2600ffc21b8a668efaecd7dc56a4f125ef9b1a72f4d22985ba539238b8a31adb113b9493d4218269452213d5580974698148b0dfbda8d2ff68a539c3163ee0c7c1b765548e17e58c8f92d3175ffe92a2cb0a385e4acf1e35bda20dda8b6b0c37624118292414258f357c8f4aeecc5c5ce9444d499c21675abd75cdbeef2eb3adb8b452ed2125e303f23478d5c60629a72a5deb409511d83596b68dae940aad7577a79db6135c297a8c5838d081eee77eedf6c62397848dee45bbf51f81f8b4a14319a051328817b369dcf29d6776ebc9ea7babd933d0a3344cd23bed409313b85597b27328ebf118ef4c78cb9835f4c82e90c0e2e76dd4fd2b4d2f1eeb804693c3b5681843ec93449df670d46e089fc89cb6e95dbd55888a1b18c5c52ee520e06b0f101cd73cacc917f308e16909881275d3e9cdac65f3a413a4970565412ac622995009b42736c65306aa5eecf70fd01ceb04437232acf5d474f24c70731499ea9c4eac6bf4a3f8cc3b3eda2d73f0694a230b8017476dacc8eb343009b871705ff40d27c006e98030083c9efe3d805bc50fd9b44321f727ac9f3d107fa269976bd981522659b85cb1384d81a31b1e7ccb577872a54655a1eb76d2e7b2b866db6abe7ab10e107988137f24389aaed09721f7822e1add45a8534bfd5e6bc3eb26f4a511f6e52bde8271b4f1ad844ef3707f07f39a5b5a6bdb14c54bdf1139acef96470848752a010f86cb634dc0c3befd7e25ab3b50e861fe6b50f81d39a915bc86c7d3af2eea5bb9137eacfe89c37dc63b0662d90e3fac5165389b2a1df257ecca7f5b493ab0f8e71ebbcb361fc50b3df3511a89fb6b092be5082783b0a4fe6b938238eceb8937c0b815d998ee3ef416228c030c627b13c6d6d6132b4d73746e7f158c9924776474f95824290b55aff534b18b60808bf6d9110c5ad8f4c90d00a100ba281864dcca71843f102b30e6a7a07290bee70a925f84d6c3b1f8fff1d9bbdbdd7eff07c1fa822e1f0ec0a46ffe23d62a729b32fc709561865a2bed9859cb5b05d533e7abae1fbfb1c9feb5fde84b82a7a8e0f3d978296d17a13e477b95b043466eba4b23d8920967b03c99c6d926340d20a06a7f31be1508946a80630ce4bedf71798d6381c076101f510b4967df7fe900334cc486e58e2fe68dafa1d17487ca813c11c99294044ca30841bd5b0cda50d97e8158dbc2d61d9ef029a9d247c04edb41e7ef9e85bc441802fb70fb83408cadd40acc54b04d4e2a1a54732ba65917daa5e3d54babc357673ae2d5befc77562e3585fcf7ac3700f0c6db6ad50e181a740c92113f8a4cba9c5640661fba1914cfacdce97d4fdcd7f42779c349d88338f5e78ea2acf5b8ef6098f8c7828de88366963fb0d901372299e0e362d4889fedc8f385bd9f5db73ceaf191a6082dcb854ef647fae31690f9c2d050f74a42d8182159c631cc455af6e627ec4d6eed796995091c891b15c837c2ad011fc635cef2f65135170b2ce02b5de686d43c624c58958a7e1b15abb1109d63f0aa1896ca7773b1440c562a6b9022519a4785cd3adf72dd54462843777d905fa2cac4af71a5c4c5427ee12c1b44351ea19f1f1b3b77220924e5ee6317f745d56a1ec8d748ea29390dc5a1fc02477e56e1ccd0d997c67c5e263cf590f20db0b9158b35b476c27858182431343b83975eb717f24d4157654be64938078c7714681ccbdbe87d45901d3b3e5aa8f4337f32ac3b9f1277747d0dad6547a64380b9f02f2e94ab14ffb8b5ecc7fc7583b03ac093213d1d28f48debd8a71d398eb06eae232b855c1d5c3041a875a0b9b342baaa76a9c07042afaee57ae116c746646b756b2b10c199cba7b954df1528eba1d10020675c2d6b5f22ee35ae86735d35c9c2826a47e81bcf51fe2edb1cae69974f5ae97a2d39e07d89c73845cdcb136833920f64bf29af53cfb9b6153ffa9003f33ea174300da020de38b481ade4447f3a4f68613107fabd939ae7a38555192ab9e5eda18f7ba61e7512618ce9381865d444c02e54591a7392693e0fdea2f6611c625722b0fb73b9057bcfffbae3b2b8cffe556a0c974d103974c969b3d49b4990533785f4b3d52898d205405f70d2df2b2cf2e8dc7e970d1c191634800474c73c75b567d0df1355f2d4fc5a309fced65198bdfa1d5c7cb4a18b1a8441990dfda3a40a30f2bcc1174b4099c44de0bac7342bd111bcd89f75053a58c010d8465bf46585a539ff70c5e79c561bee94748a772cd5badba62abb077859fcfe13c2500202227e8ff7828fdebd9eb09e2f9b5b0e51fa56861ae285188587b1c263be3b524f4edd56c3ff69c6b6de3fdb42fb467d92c2b5cc5f7d43ef8746453528b8d7f8bb59dbd328a25c3369b7836cef7bc8acc86bb17c2fa08d9d0f61f347f35be542bf68fae4f7ddb4890fcfd36d377c6719893e8dc870d5cf6b8c6ff9ccd4059e6ae416876e2002ab01b7f64c480f5cac1c1dde2ff7ce2a432105d9a427bd0648f9b846f4d51889aeceba8ba17caa8a57a06d5e78fb766a20660e65941c5523040cf0557a37f107add8e5b8d78e0160cd7a260e8a4c3ee1cb4e5d32b157523d1f365c1bbe7bc24d8b41ed268654e5f24f94c52ce98157aad50bc82e4489fa4a0363ef6606692aba3309b7025129dcaf7ce4423cda313dcea1279ecc277c928450a901f5900677731519304028fe48e5d0fd659c97b433a0fb170d863941d09196d04eeca549913a55988a2a1aba7bd1c367abe55b931330cdd23c6675b2c2ab66e8c75b1f8292bab1ca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入访问密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>HEXO Next SEO 添加 Description 和 Keywords</title>
    <url>/2025/04/15/2/</url>
    <content><![CDATA[<p>目前我使用 HEXO 搭配 Next 主题，最近我的网页优化建议中，总是提醒我缺少 Description 和 Keywords。</p>
<p>我在网上找了很多资料，发现 Next 主题的配置文件中并没有提供这两个字段的配置项。</p>
<p>而 Description 的配置项在主题的 <code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="1-修改-scaffolds">1. 修改 scaffolds</h2>
<p>在 <code>scaffolds</code> 目录下，找到 <code>post.md</code> 文件，添加如下代码：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">&lt;!-- existed code --&gt;</span><br><span class="line">description: none</span><br><span class="line">keywords:</span><br><span class="line"><span class="section">&lt;!-- existed code --&gt;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>这样在你新建文章的时候，就会有这两个字段了。</p>
<h2 id="2-修改布局文件">2. 修改布局文件</h2>
<p>在 <code>layout</code> 目录下，找到 <code>layout/layout.njk</code> 文件，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/head/head.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- existed code --&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% if page.description %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; page.description &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; theme.description &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% if page.keywords %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; page.keywords &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; theme.keywords &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- existed code --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于 description，某些版本是支持 SEO 的，支持的话就不需要添加了。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>hexo 简繁体转换</title>
    <url>/2024/12/31/2/</url>
    <content><![CDATA[<h2 id="hexo-简繁体转换">hexo 简繁体转换</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWlsaW5pbmcuZ2l0aHViLmlvLzI2Ni5odG1s">Hexo NexT 支持简体繁体一键切换<i class="fa fa-external-link-alt"></i></span></p>
<p>参考上面的链接，实现简繁体转换功能。</p>
<p>但是我要补充一点，如果开启了 PJAX 功能，需要在 <code>footer.njk</code> 的 <code>&lt;script&gt;</code> 标签中末尾添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&quot;pjax:complete&quot;, function() &#123;</span><br><span class="line">    translateInitilization();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这样就可以在 PJAX 切换页面时，重新初始化简繁体转换功能。</p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>一流的练习打字的网站</title>
    <url>/2023/03/02/2/</url>
    <content><![CDATA[<p>目前学习计算机专业，需要经常打字，使用键盘操作，所以需要练习打字，这里推荐两个好的练习打字的网站。</p>
<h2 id="1-Typing-com">1. <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwaW5nLmNvbQ==">Typing.com<i class="fa fa-external-link-alt"></i></span></h2>
<p>Typing.com是一个练习打字的网站，可以练习打字，UI精美，指导性很强，非常适合初学者。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL1R5cGluZy5jb20=">Typing.com<i class="fa fa-external-link-alt"></i></span> is a free online typing tutor. Learn touch typing, practice your keyboarding skills, take typing tests and find your true typing speed.</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>适合初学者</p>
</li>
</ul>
<p><img src="./typing%20the%20home.png" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>指导性强</p>
</li>
</ul>
<p><img src="./typing%20tips.png" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>按键指导</p>
</li>
</ul>
<p><img src="./typing%20keyboard%20guide.png" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>打字练习</p>
</li>
</ul>
<p><img src="./typing%20pracice.png" alt></p>
<h2 id="2-qwerty-kaiyi-cool">2. <span class="exturl" data-url="aHR0cHM6Ly9xd2VydHkua2FpeWkuY29vbC8=">qwerty.kaiyi.cool<i class="fa fa-external-link-alt"></i></span></h2>
<p>qwerty.kaiyi.cool是一个练习打字的网站，可以练习打字，UI简洁，指导性不强，适合熟悉打字的人。</p>
<blockquote>
<p>但其内容实用性强，有CET4/6，GMAT，GRE，TOEFL，雅思，托福，SAT，ACT，英语专四，英八，PTE，计算机代码练习，甚至日语罗马音······等</p>
</blockquote>
<p>在其中，你能在熟练打字的同时，学习到你需要的知识。</p>
<p><img src="./qwert1.png" alt></p>
<p><img src="./qwert2.png" alt></p>
<p><img src="./qwert3.png" alt></p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>飞利浦 幻域3000 philips hy3000 探索</title>
    <url>/2025/04/07/1/</url>
    <content><![CDATA[<p>其实这台机器很早就有 Openwrt 固件和 UBoot 了，只是奸商们不愿意放出来（特指某黄鱼上卖100-200的垃圾价格）。</p>
<p>所以只能重复造轮子了。</p>
<p>然后我从本地代理免费拿了一台。</p>
<p><a href="#%E5%90%8E%E7%BB%AD">翻车！！！</a></p>
<h2 id="配置信息">配置信息</h2>
<p>CPU: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWRhbHRlY2guY29tL3Byb2R1Y3RzL21lZGlhdGVrL210Nzk4MWJhLWEuaHRtbA==">MT7981BA<i class="fa fa-external-link-alt"></i></span><br>
RAM: <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hpY2h1YW5neWkuY29tL0RSQU1uYWN1bm1venUvMjEuaHRtbA==">1GB DDR4 SCY DP4DQ8C16FJB<i class="fa fa-external-link-alt"></i></span><br>
ROM: <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hpY2h1YW5neWkuY29tL3FpYW5ydXNoaWN1bmNodXhpbnBpYW4vNy5odG1s">128GB eMMC SCY E128CYMT2ABE00<i class="fa fa-external-link-alt"></i></span><br>
Switch: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWRhbHRlY2guY29tL3Byb2R1Y3RzL21lZGlhdGVrL210NzUzMWFlLmh0bWw=">MT7531AE<i class="fa fa-external-link-alt"></i></span><br>
RF: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWRhbHRlY2guY29tL3Byb2R1Y3RzL21lZGlhdGVrL210Nzk3NmNuLWIuaHRtbA==">MT7976CN<i class="fa fa-external-link-alt"></i></span></p>
<p>参考 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9mbGJvb2suY29tLmNuL3YvSmVXd1Ztek1jRQ==">飞利浦幻域3000路由器项目白皮书<i class="fa fa-external-link-alt"></i></span></p>
<p>2.4G和5G天线都是2个3DBi的单频PCB天线</p>
<p>PCB 图</p>
<p><img src="./PCB_DETAIL.png" alt></p>
<p>有几个空焊盘，其中有USB的、FLASH的、ETH的</p>
<p>USB2.0 的空焊盘，可以补焊一个 90度弯角测查式USB2.0母座，补两个数据线补0欧的电阻，但是因为是USB2.0的，速率低，干扰小，所以也不补什么电阻电容了，直接一坨锡焊上去就行了。</p>
<p><img src="./usb.png" alt></p>
<p>空的8脚焊盘疑似是 FLASH 的。</p>
<p>空的 60 PIN QFN 焊盘疑似是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWlyb2hhLmNvbS9wcm9kdWN0cy9wL3RLa203RFBYaTVtNndZMkQ=">EN8811H<i class="fa fa-external-link-alt"></i></span>，在香蕉派 BPI R3迷你开发板上也有类似的芯片。就算知道了，但是没什么用。。。</p>
<h2 id="原版固件过滤-PCDN">原版固件过滤 PCDN</h2>
<p>将其链接再另一台具备 ADGUARD 的设备上，添加以下规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data-video.71edge.^$important</span><br><span class="line">ipes-gin.iqiyi.com^$important</span><br><span class="line">msg.71edge.com^$important</span><br><span class="line">app. jinyudalu.com^$important</span><br><span class="line">flux-sec.71edge.com$important</span><br><span class="line">udp-app.jinyudalu.com^$important</span><br><span class="line">www.taobao.com^$client=&#x27;192.168.10.116&#x27;</span><br><span class="line">www.baidu.com^$client=&#x27;192.168.10.116&#x27;</span><br><span class="line">policy-video.71edge.com^$important</span><br><span class="line">flux.hcdn.71edge.com^$important </span><br></pre></td></tr></table></figure>
<h2 id="原版固件开启-SSH-Telnet">原版固件开启 SSH Telnet</h2>
<p>有人反映新版固件里面 <code>sshd</code> 和 <code>telnetd</code> 被删除了，导致无法开启 SSH 和 Telnet。</p>
<p>解包发现 <code>bin\start_cdn.sh</code> 里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">random_char</span></span> () &#123;</span><br><span class="line">  <span class="built_in">local</span> char_set=<span class="string">&quot;<span class="variable">$&#123;1:-0-9a-zA-Z&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">local</span> random_num</span><br><span class="line">  random_num=<span class="string">&quot;<span class="subst">$(head /dev/urandom | LC_ALL=C tr -dc <span class="string">&quot;<span class="variable">$char_set</span>&quot;</span> | head -c 1)</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$random_num</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">password=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..12&#125;; <span class="keyword">do</span></span><br><span class="line">  password=<span class="string">&quot;<span class="variable">$&#123;password&#125;</span><span class="subst">$(random_char)</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cus=`factory_hm info | grep telnet | <span class="built_in">cut</span> -d <span class="string">&#x27;=&#x27;</span> -f 2`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;1&quot;</span> == <span class="string">&quot;<span class="variable">$cus</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   killall -9 telnetd</span><br><span class="line">   <span class="built_in">mv</span> /usr/sbin/telnetd /usr/sbin/tn</span><br><span class="line">    p_file=<span class="string">&quot;/lib/pwd_cfg&quot;</span></span><br><span class="line">    p_s=<span class="variable">$&#123;password&#125;</span><span class="string">&quot;-7RU-&quot;</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$p_file</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">   (<span class="built_in">echo</span> <span class="variable">$p_s</span>;<span class="built_in">sleep</span> 1;<span class="built_in">echo</span> <span class="variable">$p_s</span>) | passwd &gt; /dev/null</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>这个是随机生成一个密码，然后使用 <code>passwd</code> 命令设置密码。以及将 <code>telnetd</code> 重命名为 <code>tn</code>，然后杀掉 <code>telnetd</code> 进程。</p>
<p>但是 <code>openwrt</code> 有一个 <code>ubus</code> 机制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">================= FAILSAFE MODE active ================</span><br><span class="line">special commands:</span><br><span class="line">* firstboot      reset settings to factory defaults</span><br><span class="line">* mount_root  mount root-partition with config files</span><br><span class="line"></span><br><span class="line">after mount_root:</span><br><span class="line">* passwd    change root&#x27;s password</span><br><span class="line">* /etc/config      directory with config files</span><br><span class="line"></span><br><span class="line">for more help see:</span><br><span class="line">https://openwrt.org/docs/guide-user/troubleshooting/</span><br><span class="line">- failsafe_and_factory_reset</span><br><span class="line">- root_password_reset</span><br><span class="line">=======================================================</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以进入 <code>failsafe</code> 模式，使用 <code>passwd</code> 命令修改密码</p>
<p>然后使用 ubus 修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubus call luci setPassword <span class="string">&#x27;&#123; &quot;username&quot;: &quot;root&quot;, &quot;password&quot;: &quot;test&quot; &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvdHJvdWJsZXNob290aW5nL2ZhaWxzYWZlX2FuZF9mYWN0b3J5X3Jlc2V0">Failsafe mode, factory reset, and recovery mode<i class="fa fa-external-link-alt"></i></span></p>
<p>重设密码后，使用 <code>root</code> 用户登录，将 <code>tn</code> 重命名为 <code>telnetd</code>，然后启用。</p>
<p>参考 <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<h2 id="下载文件">下载文件</h2>
<div id="downloadcard">
    <div class="card">
        <p>下载文件</p>
        <a href="./files/all.zip" download="philips-hy3000.zip" class="download-btn" target="_blank" data-pjax-state="load">暂未提供</a>
    </div>
</div>
<style>
    #downloadcard {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0;
    }

    .card {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .card p {
        margin-bottom: 20px;
    }

    .download-btn {
        display: block;
        margin: 10px 0;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .download-btn:hover {
        background-color: #0056b3;
    }
</style>
<p>个人技术力有限，还在探索中，故暂时不提供某些文件。</p>
<hr>
<details>
<p>以下是我自行制作的固件和 UBoot</p>
<p><strong>但是没有经过测试，可能会导致设备变砖，请谨慎使用</strong>。</p>
<summary>固件和 UBoot</summary>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvYmwtbXQ3OTh4LXBoaWxpcHMtaHkzMDAwL3JlbGVhc2Vz">fip-uboot<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvaW1tb3J0YWx3cnQtbXQ3OTh4LXBoaWxpcHMtaHkzMDAwL3JlbGVhc2Vz">immortalwrt<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvQWN0aW9ucy1PcGVuV3J0L3JlbGVhc2Vz">autoBuild<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>如果有什么问题，邮件联系我，或者在 GitHub 上提 issue。</p>
</details>
<h2 id="TTL-连接">TTL 连接</h2>
<p>拆机，找到主板上的串口，连接 RX TX GND（可能需要焊接）。</p>
<p>以 CH340G 为例</p>
<ol>
<li class="lvl-3">
<p>安装驱动</p>
</li>
<li class="lvl-3">
<p>连接 RX TX GND</p>
</li>
<li class="lvl-3">
<p>打开设备管理器，查看 COM 口号（假设串口号是COM9）</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start devmgmt.msc</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>关闭防火墙以及安全软件，使用 Putty、Xbash 或者 HyperTerminal 等串口调试助手</p>
</li>
<li class="lvl-3">
<p>打开串口调试助手，设置波特率115200，数据位8，停止位1，无校验位，串口COM9</p>
</li>
<li class="lvl-3">
<p>选择对应的 COM 口，点击打开串口</p>
</li>
<li class="lvl-3">
<p>连接成功后，打开路由器电源</p>
</li>
</ol>
<h2 id="备份固件">备份固件</h2>
<p>暂未完成… 因为有人已经做了，我就不做了，只是说一下大致的步骤</p>
<p>参考<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看分区信息</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># emmc 分区</span></span><br><span class="line"><span class="built_in">cat</span> /proc/partitions</span><br><span class="line"><span class="comment"># nand 分区</span></span><br><span class="line"><span class="built_in">cat</span> /proc/mtd</span><br></pre></td></tr></table></figure>
<p>使用 <code>dd</code> 命令备份分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dd if=/dev/mmcblk0boot0 of=/mnt/mmcblk0p8/mmcblk0boot0_bl2.bin conv=fsync</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0p1 of=/mnt/mmcblk0p8/mmcblk0p1_PMBR.bin conv=fsync</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0p2 of=/mnt/mmcblk0p8/mmcblk0p2_u-boot-env.bin conv=fsync</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0p3 of=/mnt/mmcblk0p8/mmcblk0p3_factory.bin conv=fsync</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0p4 of=/mnt/mmcblk0p8/mmcblk0p4_fip.bin conv=fsync</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0p5 of=/mnt/mmcblk0p8/mmcblk0p5_kernel.bin conv=fsync</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0p6 of=/mnt/mmcblk0p8/mmcblk0p6_rootfs.bin conv=fsync</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0p7 of=/mnt/mmcblk0p8/mmcblk0p7.bin conv=fsync</span><br></pre></td></tr></table></figure>
<p>用命令或者 <code>winscp</code>、<code>xshell</code> 等工具传输到本地</p>
<h3 id="分区信息">分区信息</h3>
<p>原厂分区信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=0 size=34 name=gpt</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=8192 size=1024 name=u-boot-env</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=9216 size=4096 name=factory</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=13312 size=4096 name=fip</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=17408 size=65536 name=kernel</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=82944 size=1024001 name=rootfs</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=1107968 size=20480 name=</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=1128448 size=8388608 name=</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=9517056 size=230686720 name=</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=240203776 size=20480 name=</span><br><span class="line">guid/type=PartitionTypes.LinuxFilesystem first-block=240224256 size=4028383 name=</span><br></pre></td></tr></table></figure>
<h3 id="提取-dts">提取 dts</h3>
<p>先取得 <code>kernel.bin</code>，</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhYmxvQ2FzdGVsbGFuby9leHRyYWN0LWR0Yg==">extract-dtb<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PabloCastellano/extract-dtb.git</span><br><span class="line"><span class="built_in">cd</span> extract-dtb</span><br></pre></td></tr></table></figure>
<p>转换 bin 到 dtb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./extract-dtb/extract-dtb.py kernel.bin</span><br><span class="line"><span class="built_in">cd</span> dtb</span><br></pre></td></tr></table></figure>
<p>得到的较大的文件就是需要的 dtb 文件（02_xxx.dtb）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install device-tree-compiler</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dtc -I dtb -O dts -o mt7981-ph-hy3000.dts <span class="string">&#x27;./mt7981-ph-hy3000.dtb&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>原厂的参数基本是16进制的，但是要适配 Openwrt 的话，必须是10进制的，所以需要转换一下</p>
</blockquote>
<p>参考 <sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p>
<h3 id="制作好的-dts">制作好的 dts</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvQWN0aW9ucy1IWTMwMDAvdHJlZS9tYWluL0hZMzAwMF9EVFM=">HY3000_DTS<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="刷写-UBOOT">刷写 UBOOT</h2>
<p>参考 <sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> <sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> <sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p>
<p><code>fip.bin</code> 为某个机子的 uboot;<br>
<code>mtk_uartboot</code> 是一个通过ttl接口，把uboot通过ttl传入，ram的一种启动方式，通过mtk_uartboot启动7981设备的时候除了需要uboot还需要BL2，这个BL2和刷机用的BL2不一样，这个是ram管理用的BL2，刷机是Flash用的BL2，请不要搞混。<br>
<code>BL2</code> 是用于关闭安全引导的，<code>gpt.bin</code> 是分区表。</p>
<p>这个设备没有安全引导，所以无需刷写 <code>BL2</code>，直接刷 <code>fip.bin</code> 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\mtk_uartboot\mtk_uartboot.exe -s COM9 -p .\mtk_uartboot\mt7981\mt7981-ddr4-bl2-ram-boot.bin -a -f .\fip\mt7981_philips_hy3000-fip.bin --brom-load-baudrate 115200 --bl2-load-baudrate 115200</span><br></pre></td></tr></table></figure>
<p>或者使用脚本 <code>ph-hy3000.bat</code></p>
<h3 id="1-运行命令后会出现等待握手信息">1.运行命令后会出现等待握手信息</h3>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Using serial port: COM9</span><br><span class="line">Handshake...</span><br></pre></td></tr></table></figure>
<h3 id="2-然后路由器上电开机，握手成功CMD会输出sending-payload信息开始发送bl2">2.然后路由器上电开机，握手成功CMD会输出sending payload信息开始发送bl2</h3>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hw code: <span class="number">0</span>x7981</span><br><span class="line">hw sub code: <span class="number">0</span>x8a00</span><br><span class="line">hw <span class="built_in">ver</span>: <span class="number">0</span>xca00</span><br><span class="line">sw <span class="built_in">ver</span>: <span class="number">0</span>x1</span><br><span class="line">Baud rate <span class="built_in">set</span> to <span class="number">115200</span></span><br><span class="line">sending payload to <span class="number">0</span>x201000...</span><br></pre></td></tr></table></figure>
<h3 id="3-发送完成加载bl2会输出信息同时开始发送fip">3.发送完成加载bl2会输出信息同时开始发送fip</h3>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">Checksum: 0<span class="title">x3c82</span></span></span><br><span class="line"><span class="function"><span class="title">Setting</span> <span class="title">baudrate</span> <span class="title">back</span> <span class="title">to</span> 115200</span></span><br><span class="line"><span class="function"><span class="title">Jumping</span> <span class="title">to</span> 0<span class="title">x201000</span> <span class="title">in</span> <span class="title">aarch64</span>...</span></span><br><span class="line"><span class="function"><span class="title">Waiting</span> <span class="title">for</span> <span class="title">BL2</span>. <span class="title">Message</span> <span class="title">below</span>:</span></span><br><span class="line"><span class="function">==================================</span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">BL2</span>: <span class="title">v2</span>.10.0   (<span class="title">release</span>):<span class="title">v2</span>.4-<span class="title">rc0</span>-5845-<span class="title">gbacca82a8</span>-<span class="title">dirty</span></span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">BL2</span>: <span class="title">Built</span> : 20:30:05, <span class="title">Feb</span>  2 2024</span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">WDT</span>: <span class="title">Cold</span> <span class="title">boot</span></span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">WDT</span>: <span class="title">disabled</span></span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">CPU</span>: <span class="title">MT7981</span> (1300<span class="title">MHz</span>)</span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">EMI</span>: <span class="title">Using</span> <span class="title">DDR4</span> <span class="title">settings</span></span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">EMI</span>: <span class="title">Detected</span> <span class="title">DRAM</span> <span class="title">size</span>: 1024<span class="title">MB</span></span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">EMI</span>: <span class="title">complex</span> <span class="title">R</span>/<span class="title">W</span> <span class="title">mem</span> <span class="title">test</span> <span class="title">passed</span></span></span><br><span class="line"><span class="function"><span class="title">NOTICE</span>:  <span class="title">Starting</span> <span class="title">UART</span> <span class="title">download</span> <span class="title">handshake</span> ...</span></span><br><span class="line"><span class="function">==================================</span></span><br><span class="line"><span class="function"><span class="title">BL2</span> <span class="title">UART</span> <span class="title">DL</span> <span class="title">version</span>: 0<span class="title">x10</span></span></span><br><span class="line"><span class="function"><span class="title">Baudrate</span> <span class="title">set</span> <span class="title">to</span>: 115200</span></span><br></pre></td></tr></table></figure>
<p>此时在上传fip，600KB的fip使用1500000波特率只需要几秒钟，低波特率则大概45秒。此时如果需要进入uboot webui可以直接按住reset按键不放，等待uboot指示灯闪烁并进入uboot。如果没有按reset会直接启动固件，进入固件再恢复刷砖的分区也行。</p>
<h3 id="4-fip加载完后输出">4.fip加载完后输出</h3>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">FIP sent.</span><br><span class="line">==================================</span><br><span class="line"><span class="function">NOTICE:  <span class="title">Received</span> <span class="title">FIP</span> 0<span class="title">x90b59</span> @ 0<span class="title">x40400000</span> ...</span></span><br><span class="line"><span class="function">==================================</span></span><br></pre></td></tr></table></figure>
<p>此时程序已经执行完，已经加载uboot，如果不进行打断将会直接启动固件。</p>
<p>参考 <sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup></p>
<p>所以需要立即关闭cmd窗口，同时其他ssh工具连接串口(比如 putty,XShell)，进入后使用键盘上下键移动光标</p>
<p>晚了打断启动，可以试试按路由复位键，重复以上步骤</p>
<blockquote>
<p>注意:ttl加载uboot，可能有个问题，就是你来不及打开com口，uboot就跳去引导固件了，启动不成功又去加载你闪存的uboot,这就成了个环，你又不能提前打开com口。你又不知道。所以试试安住reset键，再给路由器上电。</p>
</blockquote>
<p>此时输出</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">MT7981&gt;</span><br></pre></td></tr></table></figure>
<p>表示已经进入uboot命令行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">MT7981&gt; bootmenu</span><br></pre></td></tr></table></figure>
<p>进入uboot菜单</p>
<h3 id="5-进入uboot-webui">5.进入uboot webui</h3>
<p>进入路由器进入uboot后，电脑设置IP为<code>192.168.1.254</code>，子网掩码为<code>255.255.255.0</code></p>
<p>先ping一下路由器，确认连接正常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 192.168.1.1</span><br></pre></td></tr></table></figure>
<p>如果ping不通，检查网线是否连接好，或者路由器是否正常工作。</p>
<p>先刷写 uboot</p>
<p><code>192.168.1.1/uboot.html</code> 上传 <code>mt7981_philips_hy3000-fip.bin</code></p>
<p>然后刷 gpt（可选）</p>
<p><code>192.168.1.1/gpt.html</code> 上传 <code>Philips hy3000-PMBR-gpt.bin</code></p>
<h2 id="刷新固件">刷新固件</h2>
<p>uboot 下，进入 <code>192.168.1.1</code> 上传固件</p>
<h2 id="恢复原厂固件">恢复原厂固件</h2>
<p>暂未完成…</p>
<p>参考 <sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup></p>
<p>使用 <code>dd</code> 命令</p>
<p>暂时没有回到原厂的想法，毕竟一个PCDN，没什么用。</p>
<h2 id="定制环境搭建">定制环境搭建</h2>
<p>使用 VirtualBox 搭建 Ubuntu 64 位虚拟机</p>
<p>推荐使用 2204，其他版本也可以</p>
<p>其他虚拟机也可以，VMware 也可以</p>
<p>跳过自动安装，选择 <code>Try Ubuntu</code> 进入系统</p>
<p>一切默认即可，最小安装</p>
<blockquote>
<p>可以先试用系统，更改分辨率，然后再安装系统，这样比较好操作</p>
</blockquote>
<p>安装完重启虚拟机，安装增强功能。</p>
<p>共享剪切板与拖放改为双向，共享文件夹改为一个方便的目录，挂载点改为 <code>/home/username/shareDir</code>，自动挂载，固定分配</p>
<p>关闭屏保、息屏以及省电相关设置</p>
<p>apt 升级（非必须）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure>
<p>恢复默认源（非必须）</p>
<p>参考 <sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>，有时候系统会默认只有国内源，然而有一些包没有，就需要恢复默认源（追加即可），完成后进行上一步 apt 升级。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>安装软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install curl</span><br></pre></td></tr></table></figure>
<p>配置环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> bash -c <span class="string">&#x27;bash &lt;(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="定制-immortalwrt-固件">定制 immortalwrt 固件</h2>
<p>参考 <sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> <sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> <sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup></p>
<ol>
<li class="lvl-3">
<p>克隆仓库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/hanwckf/immortalwrt-mt798x.git</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>进入目录</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> immortalwrt-mt798x</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>获取最新 feed</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果出现报错（即有error或者xx停止等字样） 参考 <sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup></p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Build dependency: Please install ncurses. (Missing libncurses.so or ncurses.h)</span><br><span class="line"></span><br><span class="line">Build dependency: Please install a static zlib. (Missing libz.a or zlib.h)</span><br><span class="line"></span><br><span class="line">Build dependency: Please install the openssl library (with development headers)</span><br><span class="line"></span><br><span class="line">Build dependency: Please install GNU &#x27;awk&#x27;</span><br><span class="line"></span><br><span class="line">Build dependency: Please install the Subversion client</span><br></pre></td></tr></table></figure>
<p>当前编译环境缺少依赖组件</p>
<p>（可选，出现问题后使用）可一次性全部安装所需依赖组件，输入:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils subversion libncurses5-dev ncurses-term zlib1g-dev subversion git-core gawk asciidoc libz-dev zlib1g-dev libssl-dev</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>链接 feed</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>选择配置</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -f defconfig/mt7981-ax3000.config .config</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>使用 <code>make menuconfig</code> 选择编译选项</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>配置选项</p>
<ul class="lvl-2">
<li class="lvl-6">Target System 选择 <code>MediaTek Ralink ARM</code></li>
<li class="lvl-6">Subtarget 选择 <code>MT7981</code></li>
<li class="lvl-6">Target Profile 选择 <code>philips-hy3000</code>，但是目前没有这个选项，查看 <code>### 适配 philips-hy3000</code></li>
<li class="lvl-6">Kernel module -&gt; File systems -&gt; 添加 ext4、f2fs、brtfs 支持</li>
<li class="lvl-6">其他选项根据需要选择</li>
<li class="lvl-6"><code>&lt;save&gt;</code> 保存配置</li>
<li class="lvl-6"><code>&lt;exit&gt;</code> 退出配置</li>
</ul>
</li>
<li class="lvl-3">
<p>编译固件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>) V=s</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-j$(nproc)</code> 表示使用所有 CPU 核心进行编译<br>
<code>-j1</code> 表示使用单核编译<br>
<code>-j8</code> 表示使用八核编译<br>
<code>V=s</code> 表示显示详细编译信息<br>
<code>V=sc</code> 表示显示编译信息和警告<br>
<code>V=99</code> 表示显示所有编译信息</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>如果编译过程中出现错误，或者使用 Ctrl+C 中断编译，可以使用 <code>make clean</code> 清理编译缓存，然后重新编译。参考 <sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup><br>
linux 工具 quilt 可能会执行相当长时间，不要以为卡住了，不要中断编译，耐心等待。</p>
</blockquote>
<p>编译完成后，固件文件在 <code>bin</code> 目录下</p>
<h3 id="适配-philips-hy3000">适配 philips-hy3000</h3>
<p>对于没有配置的情况，我们需要手动添加配置文件</p>
<p>所以需要拆机，查看具体的硬件信息，可以查看 <code>## 配置信息</code> 中的配置</p>
<blockquote>
<p>区分单臂路由，看 <code>dts</code> 中的 <code>gmac</code>，单臂路由器只有一个 <code>gmac</code>，其他路由器有两个 <code>gmac</code>。或者拆开看主板上的PCB布局</p>
</blockquote>
<p>所以寻找一个类似的路由器，在其基础上进行修改，比如 SL-3000 这款机型就比较接近</p>
<p>有关 dts 的部分在前文中已经提到过了，这里就不再赘述了</p>
<ol>
<li class="lvl-3">
<p>进入 <code>target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/</code> 目录创建<code>mt7981-philips-hy3000.dts</code>以 <a href="https://github.com/kiddin9/Kwrt/blob/master/devices/mediatek_filogic/diy/target/linux/mediatek/dts/mt7981-sl-3000-emmc.dts"><code>mt7981-sl3000.dts</code></a> 为基础，进行修改</p>
<p>需要修改的地方有：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>key、leds、gsw、eth、hnat</p>
</li>
<li class="lvl-6">
<p>这个设备只有红、绿两种灯</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>gpio</th>
<th>address(10)</th>
<th>level</th>
</tr>
</thead>
<tbody>
<tr>
<td>led:red</td>
<td>8</td>
<td>high</td>
</tr>
<tr>
<td>led:green</td>
<td>13</td>
<td>low</td>
</tr>
<tr>
<td>key:reset</td>
<td>1</td>
<td>low</td>
</tr>
<tr>
<td>key:mesh</td>
<td>0</td>
<td>high</td>
</tr>
</tbody>
</table>
<p>这里没有用原厂的网络接口配置方法，使用了 <code>mt7981-360t7-base.dtsi</code> 的配置方法</p>
<p>参考 <sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup></p>
<p>还有就是 USB，即xhci，出场主板上就没有焊接，可以不需要，需要配的话就照着2.0的来就行了</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@xhci &#123;</span><br><span class="line">    status = &quot;okay&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>打开 <code>target\linux\mediatek\mt7981\base-files\etc\board.d\02_network</code> 文件</p>
<p>根据 factory 里面的信息</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label=wan=E0:FF:FF:FF:FF:3C</span><br><span class="line">ra0=E0:FF:FF:FF:FF:3D</span><br><span class="line">rax0=E0:FF:FF:FF:FF:3E</span><br><span class="line">eth1=E0:FF:FF:FF:FF:3F</span><br><span class="line">eth2=E0:FF:FF:FF:FF:40</span><br><span class="line">eth3=E0:FF:FF:FF:FF:3B</span><br><span class="line">eth4=E0:FF:FF:FF:FF:3C</span><br><span class="line"></span><br><span class="line">sn=PH0XXXXXXXXX9</span><br><span class="line"></span><br><span class="line">0x74 = E0:FF:FF:FF:FF:3D</span><br><span class="line">0x10000 = PH0XXXXXXXXX9</span><br></pre></td></tr></table></figure>
<p>适配的接口信息 <code>02_network</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">philips,hy3000)</span><br><span class="line">ucidef_set_interfaces_lan_wan &quot;eth0&quot; &quot;eth1&quot;</span><br><span class="line">ucidef_add_switch &quot;switch0&quot; \</span><br><span class="line">&quot;1:lan&quot; &quot;2:lan&quot; &quot;3:lan&quot; &quot;0:wan&quot; &quot;6u@eth0&quot; &quot;5u@eth1&quot;</span><br><span class="line">;;</span><br></pre></td></tr></table></figure>
<p>所以添加网络mac信息</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">philips,hy3000)</span><br><span class="line">lan_mac=$(mmc_get_mac_binary factory 0x74)</span><br><span class="line">wan_mac=$(macaddr factory $lan_mac 1)</span><br><span class="line">label_mac=$wan_mac</span><br><span class="line">;;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>打开 <code>target\linux\mediatek\mt7981\base-files\lib\preinit\90_extract_caldata</code> 文件函数 <code>do_extract_caldata()</code>中添加 <code>philips-hy3000</code> 的信息</p>
</li>
<li class="lvl-3">
<p>打开 <code>target\linux\mediatek\mt7981\base-files\lib\upgrade\platform.sh</code> 文件函数 <code>platform_do_upgrade()</code>、<code>platform_check_image()</code> 中添加 <code>philips-hy3000</code> 的信息</p>
</li>
<li class="lvl-3">
<p>打开 <code>target\linux\mediatek\image\mt7981.mk</code> 文件添加适配信息 参考<sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup></p>
 <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">define</span> Device/philips_hy3000</span><br><span class="line">    DEVICE_VENDOR := Philips</span><br><span class="line">    DEVICE_MODEL := HY3000</span><br><span class="line">    DEVICE_DTS := mt7981-philips-hy3000</span><br><span class="line">    DEVICE_DTS_DIR := <span class="variable">$(DTS_DIR)</span>/mediatek</span><br><span class="line">    SUPPORTED_DEVICES := philips,hy3000</span><br><span class="line">    DEVICE_PACKAGES := <span class="variable">$(MT7981_USB_PKGS)</span> f2fsck losetup mkf2fs kmod-fs-f2fs kmod-mmc \</span><br><span class="line">        luci-app-samba4</span><br><span class="line">    IMAGE/sysupgrade.bin := sysupgrade-tar | append-metadata</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line">TARGET_DEVICES += philips_hy3000</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>打开 <code>defconfig\mt7981-ax3000.config</code> 文件添加 <code>philips-hy3000</code> 的信息</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_philips_hy3000</span>=y</span><br><span class="line"><span class="attr">CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_philips_hy3000</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="定制-uboot">定制 uboot</h2>
<p>参考 <sup class="footnote-ref"><a href="#fn14" id="fnref14:1">[14:1]</a></sup> <sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup> <sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git <span class="built_in">clone</span> https://github.com/hanwckf/bl-mt798x.git</span><br><span class="line"><span class="built_in">cd</span> bl-mt798x</span><br></pre></td></tr></table></figure>
<p>UBoot 有 2022 与 2023 版本，根据自己的需求选择</p>
<p>以相近设备的配置为基础进行修改</p>
<p><code>atf-20220606-637ba581b\configs\mt7981_philips_hy3000__defconfig</code><br>
<code>uboot-mtk-20220606\configs\mt7981_philips_hy3000_defconfig</code></p>
<p>修改 <code>uboot-mtk-time/arch/arm/dts</code> 中的类似机型 dts 文件</p>
<p>参照 openwrt 的 dts 文件进行修改</p>
<p><code>build.sh</code> 中修改相关信息，比如需要编译的版本 22/23，如果编译22版，则把23版注释掉</p>
<p>然后编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SOC=mt7981 BOARD=philips_hy3000 ./build.sh</span><br></pre></td></tr></table></figure>
<p>编译后的文件在 <code>output</code> 目录下</p>
<h2 id="GPT-BL2">GPT&amp;BL2</h2>
<p>参考 <sup class="footnote-ref"><a href="#fn21" id="fnref21">[21]</a></sup> <sup class="footnote-ref"><a href="#fn22" id="fnref22">[22]</a></sup> <sup class="footnote-ref"><a href="#fn23" id="fnref23">[23]</a></sup> <sup class="footnote-ref"><a href="#fn24" id="fnref24">[24]</a></sup> <sup class="footnote-ref"><a href="#fn25" id="fnref25">[25]</a></sup> <sup class="footnote-ref"><a href="#fn26" id="fnref26">[26]</a></sup></p>
<p>bl-mt798x 项目中</p>
<p>在 <code>atf/tools/dev/gpt_editor</code> 目录下存在 <code>mtk_gpt.py</code> 脚本文件</p>
<p>编写相应的 <code>gpt.json</code> 分区表</p>
<p>参考  <sup class="footnote-ref"><a href="#fn10" id="fnref10:1">[10:1]</a></sup></p>
<p>使用该脚本即可生成对应的 <code>gpt.bin</code> 文件</p>
<p>在对应设备的 <code>deconfig</code> 文件中添加 <code>CONFIG_TARGET_ALL_NO_SEC_BOOT=y</code></p>
<p>然后编译 <code>bl-mt798x</code> 项目，生成的 <code>bl2.bin</code> 文件在 <code>output</code> 目录下</p>
<p>这台设备不需要 BL2。</p>
<p>新的 ATF <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21lZGlhdGVrLW9wZW53cnQvYXJtLXRydXN0ZWQtZmlybXdhcmUvdHJlZS9tdGtzb2M=">arm-trusted-firmware<i class="fa fa-external-link-alt"></i></span></p>
<p>这是复刻自 ARM-software 仓库的一个分支</p>
<h2 id="主线-FIT">主线 FIT</h2>
<p>暂未完成…</p>
<p>参考 <sup class="footnote-ref"><a href="#fn24" id="fnref24:1">[24:1]</a></sup> <sup class="footnote-ref"><a href="#fn27" id="fnref27">[27]</a></sup> <sup class="footnote-ref"><a href="#fn28" id="fnref28">[28]</a></sup> <sup class="footnote-ref"><a href="#fn29" id="fnref29">[29]</a></sup> <sup class="footnote-ref"><a href="#fn30" id="fnref30">[30]</a></sup> <sup class="footnote-ref"><a href="#fn31" id="fnref31">[31]</a></sup></p>
<p>在 oss 项目 <sup class="footnote-ref"><a href="#fn31" id="fnref31:1">[31:1]</a></sup> 观察到 dts 文件中有 mtd 相关的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mtd-layout &#123;</span><br><span class="line"> layout@0 &#123;</span><br><span class="line">  label = &quot;default&quot;;</span><br><span class="line">  cmdline = &quot;console=ttyS0,115200n8 earlycon=uart8250,mmio32,0x11002000&quot;;</span><br><span class="line">  mtdids = &quot;nmbm0=nmbm0&quot;;</span><br><span class="line">  mtdparts = &quot;nmbm0:1024k(bl2),512k(u-boot-env),2048k(Factory),2048k(fip),512k(product_info),512k(kdump),64512k(ubi)&quot;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> layout@1 &#123;</span><br><span class="line">  label = &quot;ubi-107m&quot;;</span><br><span class="line">  mtdids = &quot;nmbm0=nmbm0&quot;;</span><br><span class="line">  mtdparts = &quot;nmbm0:1024k(bl2),512k(u-boot-env),2048k(Factory),2048k(fip),512k(product_info),512k(kdump),109568k(ubi)&quot;;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>但是很显然，这是 nand 的配置</p>
<p>同时观察到 atf deconfig 文件中</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- CONFIG_TARGET_FIP_NO_SEC_BOOT=y</span></span><br><span class="line"><span class="addition">+ CONFIG_TARGET_ALL_NO_SEC_BOOT=y</span></span><br></pre></td></tr></table></figure>
<p>随后，我在 openwrt 项目的github页面找到了一个设备的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW53cnQvb3BlbndydC9ibG9iL21haW4vdGFyZ2V0L2xpbnV4L21lZGlhdGVrL2R0cy9tdDc5ODFiLXVuaWVsZWMtdTc5ODEtMDEtZW1tYy5kdHM=">dts mt7981b-unielec-u7981-01-emmc.dts<i class="fa fa-external-link-alt"></i></span></p>
<p>里面关于 emmc 的处理是这样的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&amp;mmc0 &#123;</span><br><span class="line"> pinctrl-names = &quot;default&quot;, &quot;state_uhs&quot;;</span><br><span class="line"> pinctrl-0 = &lt;&amp;mmc0_pins_default&gt;;</span><br><span class="line"> pinctrl-1 = &lt;&amp;mmc0_pins_uhs&gt;;</span><br><span class="line"> bus-width = &lt;8&gt;;</span><br><span class="line"> max-frequency = &lt;52000000&gt;;</span><br><span class="line"> cap-mmc-highspeed;</span><br><span class="line"> vmmc-supply = &lt;&amp;reg_3p3v&gt;;</span><br><span class="line"> non-removable;</span><br><span class="line"> status = &quot;okay&quot;;</span><br><span class="line"></span><br><span class="line"> card@0 &#123;</span><br><span class="line">  compatible = &quot;mmc-card&quot;;</span><br><span class="line">  reg = &lt;0&gt;;</span><br><span class="line"></span><br><span class="line">  block &#123;</span><br><span class="line">   compatible = &quot;block-device&quot;;</span><br><span class="line">   partitions &#123;</span><br><span class="line">    block-partition-env &#123;</span><br><span class="line">     partname = &quot;u-boot-env&quot;;</span><br><span class="line"></span><br><span class="line">     nvmem-layout &#123;</span><br><span class="line">      compatible = &quot;u-boot,env&quot;;</span><br><span class="line">     &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    block-partition-factory &#123;</span><br><span class="line">     partname = &quot;factory&quot;;</span><br><span class="line"></span><br><span class="line">     nvmem-layout &#123;</span><br><span class="line">      compatible = &quot;fixed-layout&quot;;</span><br><span class="line">      #address-cells = &lt;1&gt;;</span><br><span class="line">      #size-cells = &lt;1&gt;;</span><br><span class="line"></span><br><span class="line">      eeprom_factory_0: eeprom@0 &#123;</span><br><span class="line">       reg = &lt;0x0 0x1000&gt;;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      macaddr_factory_4: macaddr@4 &#123;</span><br><span class="line">       compatible = &quot;mac-base&quot;;</span><br><span class="line">       reg = &lt;0x4 0x6&gt;;</span><br><span class="line">       #nvmem-cell-cells = &lt;1&gt;;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      macaddr_factory_1000: macaddr@1000 &#123;</span><br><span class="line">       compatible = &quot;mac-base&quot;;</span><br><span class="line">       reg = &lt;0x1000 0x6&gt;;</span><br><span class="line">       #nvmem-cell-cells = &lt;1&gt;;</span><br><span class="line">      &#125;;</span><br><span class="line">     &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">   &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我不能确定这是否就是 emmc 主线 FIT 的处理方式，然后我找到了 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW53cnQvb3BlbndydC9ibG9iL21haW4vdGFyZ2V0L2xpbnV4L21lZGlhdGVrL2R0cy9tdDc5ODFiLWNtY2MtcmF4MzAwMG0tZW1tYy5kdHNv">mt7981b-cmcc-rax3000m-emmc.dtso<i class="fa fa-external-link-alt"></i></span></p>
<p>进行了确认，这种写法确实是 emmc 的处理方式。</p>
<p>参考 <sup class="footnote-ref"><a href="#fn32" id="fnref32">[32]</a></sup> <sup class="footnote-ref"><a href="#fn33" id="fnref33">[33]</a></sup></p>
<p>可以确定，即便编写了相关 dts，仍然不能够支持主线 FIT 的 ibt 固件，需要刷下对应 preloader</p>
<p>在 openwrt 的下载页面 <span class="exturl" data-url="aHR0cDovL2Rvd25sb2Fkcy5vcGVud3J0Lm9yZy9yZWxlYXNlcy8yNC4xMC4wL3RhcmdldHMvbWVkaWF0ZWsvZmlsb2dpYy8=">Index of (root) / releases / 24.10.0 / targets / mediatek / filogic /<i class="fa fa-external-link-alt"></i></span> 可以找到很多 preloader 的固件</p>
<p>我不太确定是否使用支持 FIT 的 dts 进行编译，就可以自动生成 preloader 的固件</p>
<p>我在openwrt官方仓库里找到了该提交 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW53cnQvb3BlbndydC9jb21taXQvNDIzMTg2ZDdkOGI0ZjIzYWVlOTFmY2E0ZjE3NzRhMTk1ZWJhMDBkOA==">423186d<i class="fa fa-external-link-alt"></i></span></p>
<p>该提交详细展示了如何适配 FIT</p>
<p>以及 immortalwrt 的仓库找到了该提交</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltbW9ydGFsd3J0L2ltbW9ydGFsd3J0L2NvbW1pdC83NmJjODIwMGNjM2Q3MzU3ZWJmN2Y4MzJlZTc1YzU5ODhiNDliZDRl">76bc820 mediatek: add CMCC RAX3000M eMMC custom U-Boot layout<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltbW9ydGFsd3J0L2ltbW9ydGFsd3J0L2NvbW1pdC8zOGU4NzYyMWU4MTEyNTk2Y2U4ZTI2NmRkM2JlOTRjZGMyNjk1MzBl">38e8762 mediatek: add ubootenv support for cmcc rax3000m emmc/nand version<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltbW9ydGFsd3J0L2ltbW9ydGFsd3J0L2NvbW1pdC9kMTdlYjM2NTc4ZDM5ZGE0YTdjZDE1YjFiMTkwMjFkY2UwMjU0ZjE1">d17eb36 arm-trusted-firmware-mediatek: add emmc/spim-nand ddr4 build for mt7981<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltbW9ydGFsd3J0L2ltbW9ydGFsd3J0L2NvbW1pdC9lYjEwNWU1ZGRlOWY4OTc2YmJiYzkyNGY0NDVlMzZiMTFmZmFkMTgw">eb105e5 mediatek: convert eeprom/macaddr to nvmem format for cmcc rax3000m<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltbW9ydGFsd3J0L2ltbW9ydGFsd3J0L2NvbW1pdC8zOGU4NzYyMWU4MTEyNTk2Y2U4ZTI2NmRkM2JlOTRjZGMyNjk1MzBl">38e8762 mediatek: add ubootenv support for cmcc rax3000m emmc/nand version<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>可以推测，进入主线 FIT 的设备将会在编译的时候自动生成 bl31-uboot,preloader</p>
<p>不过好像这个 FIT 也没什么用，懒得研究了。</p>
<h2 id="自动化">自动化</h2>
<p>参考 <sup class="footnote-ref"><a href="#fn34" id="fnref34">[34]</a></sup></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvYmwtbXQ3OTh4LXBoaWxpcHMtaHkzMDAwL3JlbGVhc2Vz">fip-uboot<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvQWN0aW9ucy1PcGVuV3J0">Actions-OpenWrt<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>复刻到自己的 GitHub 上，运行 Actions 即可。</p>
<h2 id="超频">超频</h2>
<p>暂未完成…</p>
<p>参考 <sup class="footnote-ref"><a href="#fn35" id="fnref35">[35]</a></sup> <sup class="footnote-ref"><a href="#fn36" id="fnref36">[36]</a></sup></p>
<p>据说这颗芯片具有较大的超频潜力。</p>
<p>就是制作超频 BL2。</p>
<p>需要给 Openwrt 源码打 patch</p>
<p>参考 <sup class="footnote-ref"><a href="#fn37" id="fnref37">[37]</a></sup> <sup class="footnote-ref"><a href="#fn38" id="fnref38">[38]</a></sup> <sup class="footnote-ref"><a href="#fn39" id="fnref39">[39]</a></sup></p>
<p>工程量较大，暂时搁置。。。</p>
<h2 id="梅林的研究">梅林的研究</h2>
<p>在该项目中 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JNZXJsL2FzdXN3cnQtbWVybGluLm5n">asuswrt-merlin.ng<i class="fa fa-external-link-alt"></i></span></p>
<p>看到支持了 AX57_Go，这也是一款 mt7981 的路由器</p>
<p>但是由于 hy3000 这台设备是 emmc 的</p>
<p>梅林好像也没有适配 emmc 的相关代码</p>
<p>所以暂时不考虑</p>
<blockquote>
<p>其实我挺喜欢梅林的，以前一直用的博通的路由器，买了几台华硕，组 mesh 很方便，配合梅林固件使用很省心，不用一直折腾，直到 WIFI6 时代，我也买了一台 RAX80，但是翻车了，现在博通的路由器也不行了，又贵又发热，还不开源。</p>
</blockquote>
<h2 id="后续">后续</h2>
<p>翻车了，后来怎么了，就是他们搞 PCDN 的要收回去升级，然后不给我了。。。</p>
<blockquote>
<p>有小道消息说是 PCDN 的程序写的太烂，跑不起来，赚不到钱，我看了一下，原厂固件里有一个 <code>start_yh</code> 的二进制，估计就是这个程序了，确实看起来很简陋</p>
</blockquote>
<p>故此无限期暂停对此的研究。</p>
<h2 id="参考">参考</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL2ZvcnVtLnBocD9tb2Q9dmlld3RocmVhZCZ0aWQ9ODQxNzg4OQ==">飞利浦幻域3000首拆？？？？<i class="fa fa-external-link-alt"></i></span> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC00MDQ5NzUzLTEtMS5odG1s">微加云（以及其他openwrt的设备）破解后台密码<i class="fa fa-external-link-alt"></i></span> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MjcyNjMwLTEtMS5odG1s">360T7官方固件分区备份及刷回官方固件教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9jbWkuaGFud2NrZi50b3AvcC8zNjB0Ny10ZWxuZXQtdWJvb3QtY29uc29sZS8=">360 T7 路由器 开启telnet及uboot控制台方法<i class="fa fa-external-link-alt"></i></span> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9taW50cmFiYml0cGx1cy5jb20vMjAyNC8wMy8yMS9tdDc5ODYlRTQlQkQlQkYlRTclOTQlQThtdDc1MzEtc3dpdGNoLSVFNyU5QSU4NGRldmljZS10cmVlLSVFNiU4RSVBMiVFOCVBOCU4RS8=">MT7986使用MT7531 Switch 的Device Tree 探討<i class="fa fa-external-link-alt"></i></span> <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04NDIzMDMyLTEtMS5odG1s">飞利浦 幻域 3000 Philips hy3000 TTL刷机 救砖教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MzY4NjE1LTEtMS5odG1s">JCG Q30 PRO救砖教程，MTK mt798x 系列基本通用<i class="fa fa-external-link-alt"></i></span> <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcDEyMy9wLzE4MDQ2Njc5">MediaTek Filogic 系列路由器串口救砖教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MzcyNDM3LTEtMS5odG1s">诺基亚贝尔EA0326GMP (AX3000) TTL救砖时TFTP无效U-Boot console用loady模式刷回uboot<i class="fa fa-external-link-alt"></i></span> <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9nb2RzdW4ucHJvL2Jsb2cvamRjJTIwQVg2MDAwLXVwZGF0ZS10dGw=">京东云 AX6000 百里单分区刷机 + 回原厂 + TTL 救砖教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref10" class="footnote-backref">↩︎</a> <a href="#fnref10:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWxlYWRpbmcuY29tL2FydGljbGUvMTYzOTUzNzIxNTIv">Ubuntu18.04 默认源 恢复默认源 恢复备份源<i class="fa fa-external-link-alt"></i></span> <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhbndja2YvaW1tb3J0YWx3cnQtbXQ3OTh4">immortalwrt-mt798x<i class="fa fa-external-link-alt"></i></span> <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9jbWkuaGFud2NrZi50b3AvcC9pbW1vcnRhbHdydC1tdDc5OHgv">immortalwrt-mt798x项目介绍<i class="fa fa-external-link-alt"></i></span> <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTAyNzg3NDc3">ZhuanyiOp的个人空间-ZhuanyiOp个人主页-哔哩哔哩视频<i class="fa fa-external-link-alt"></i></span> <a href="#fnref14" class="footnote-backref">↩︎</a> <a href="#fnref14:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucGlhbnNoZW4uY29tL2FydGljbGUvNDc2MzY2NDA0Ny8=">OpenWRT下载与编译<i class="fa fa-external-link-alt"></i></span> <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC00Njk0MDAtMS0xLmh0bWw=">openwrt编译笔记，有些技巧是自己试验出来的，很多人死也不肯说<i class="fa fa-external-link-alt"></i></span> <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL0ZPUlVNL3RocmVhZC04MzI3NjQ5LTEtMS5odG1s">讨论市售MT7981/MT7986/MT7988方案的GMAC到LAN连接的差异<i class="fa fa-external-link-alt"></i></span> <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn18" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9vcGVud3J0Lm9yZy9kb2NzL2d1aWRlLXVzZXIvbmV0d29yay9uZXR3b3JrX2NvbmZpZ3VyYXRpb24=">Network configuration /etc/config/network<i class="fa fa-external-link-alt"></i></span> <a href="#fnref18" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn19" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhbndja2YvYmwtbXQ3OTh4">bl-mt798x<i class="fa fa-external-link-alt"></i></span> <a href="#fnref19" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn20" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9jbWkuaGFud2NrZi50b3AvcC9tdDc5OHgtdWJvb3QtdXNhZ2Uv">mt798x uboot 功能介绍<i class="fa fa-external-link-alt"></i></span> <a href="#fnref20" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn21" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3BlbndydC5wcm8vcG9zdC02NDAuaHRtbA==">mtk 开源U-Boot ATF配置和编译教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref21" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn22" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FSTS1zb2Z0d2FyZS9hcm0tdHJ1c3RlZC1maXJtd2FyZQ==">arm-trusted-firmware<i class="fa fa-external-link-alt"></i></span> <a href="#fnref22" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn23" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04NDE2NzUwLTEtMS5odG1s">【求助】关于刷入支持主线的u-boot的问题<i class="fa fa-external-link-alt"></i></span> <a href="#fnref23" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn24" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04NDAwMzA2LTEtMS5odG1s">MT798x 支持主线 OpenWrt 的 U-Boot<i class="fa fa-external-link-alt"></i></span> <a href="#fnref24" class="footnote-backref">↩︎</a> <a href="#fnref24:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn25" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MzExMzgwLTEtMS5odG1s">【2023-11-07】CMCC RAX3000M EMMC 64G mt7981 算力版 固件+ubootshu小白防砖教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref25" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn26" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9wb3N0LnNtemRtLmNvbS9wL2F3bzdxenpwLw==">【教程】rax3000m emmc刷机 支持硬件QOS MT7981到底值不值<i class="fa fa-external-link-alt"></i></span> <a href="#fnref26" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn27" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hpcGhlbGwuY29tL3RocmVhZC0yNjM2NjI1LTEtMS5odG1s">【网络】 bpi-r4, sd卡uboot，支持web刷写openwrt主线以及237固件！<i class="fa fa-external-link-alt"></i></span> <a href="#fnref27" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn28" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzE3MTUxNzMzMjkvYmwtbXQ3OTh4LW9zcy90cmVlL2ZpdC1leGFtcGxl">bl-mt798x-oss<i class="fa fa-external-link-alt"></i></span> <a href="#fnref28" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn29" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MzA4MjgxLTEtMS5odG1s">移动RAX3000M 64G EMMC 算力版开启ssh以及刷uboot和刷机教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref29" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn30" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MzExMzgwLTEtMS5odG1s">【2023-11-07】CMCC RAX3000M EMMC 64G mt7981 算力版 固件+ubootshu小白防砖教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref30" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn31" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzE3MTUxNzMzMjkvYmwtbXQ3OTh4LW9zcy90cmVlL2ZpdC1leGFtcGxl">bl-mt798x-oss<i class="fa fa-external-link-alt"></i></span> <a href="#fnref31" class="footnote-backref">↩︎</a> <a href="#fnref31:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn32" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yZGJhMjNjODI2YTE=">U-Boot/Linux设备树简明使用手册<i class="fa fa-external-link-alt"></i></span> <a href="#fnref32" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn33" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1Nzc3NTU3LzEzNzczMzM2I0RUU0RUU09EVEJPX18z">DTS、DTSO、DTBO三种文件的关系及编译流程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref33" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn34" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xnczIwMDdtL0FjdGlvbnMtT3BlbldydC90cmVlL21haW4=">Actions-OpenWrt<i class="fa fa-external-link-alt"></i></span> <a href="#fnref34" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn35" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93dXNpeXUubWUvb3BlbndydC1vbmUtbXQ3OTgxLWJsMi1vdmVyY2xvY2tpbmctY29tcGlsZS1ndWlkZS8=">OpenWrt One 路由器（MT7981，主线op）超频bl2编译教程<i class="fa fa-external-link-alt"></i></span> <a href="#fnref35" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn36" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL2ZvcnVtLnBocD9tb2Q9dmlld3RocmVhZCZ0aWQ9ODM4Nzk3OQ==">T798X CPU超频1.65G/一键修改无线最大功率方法<i class="fa fa-external-link-alt"></i></span> <a href="#fnref36" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn37" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9mamtmd3ouZ2l0aHViLmlvLzIwMTQvMTIvMDQvT3BlbndydC1QYXRjaGVzLw==">Openwrt Patch 制作及打补丁<i class="fa fa-external-link-alt"></i></span> <a href="#fnref37" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn38" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWRhbS1tYS9wLzE3NzEyOTQwLmh0bWwjJUU3JUJCJTk5a2VybmVsJUU2JTg5JTkzcGF0Y2g=">如何给OpenWrt的源码打patch<i class="fa fa-external-link-alt"></i></span> <a href="#fnref38" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn39" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dVQTgxMjJIT1UvYXJ0aWNsZS9kZXRhaWxzLzEzMzAyMDAxOQ==">【openwrt学习笔记】新patch的制作和旧patch的修改<i class="fa fa-external-link-alt"></i></span> <a href="#fnref39" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
  </entry>
</search>
