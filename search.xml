<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的Debain设备与Linux</title>
    <url>/2023/03/06/1/</url>
    <content><![CDATA[<h2 id="我的Debain设备">我的Debain设备</h2>
<h3 id="设备介绍">设备介绍</h3>
<blockquote>
<p>这个东西其实就是随身wifi，但他的硬件很有趣，所以被开发出来了许多玩法</p>
</blockquote>
<p><img src="./A-DebainDeviceAndLinux/images/(1).jpg" alt><br>
<img src="./A-DebainDeviceAndLinux/images/(2).jpg" alt></p>
<h3 id="为什么要用这个设备学习linux">为什么要用这个设备学习linux</h3>
<blockquote>
<p>因为这个学期有linux的课程，所以我就把这个东西拿来学习linux，因为这个东西的硬件比较好，所以我就把他当作我的开发板来学习linux<br>
开始上linux课的时候，要求我们用虚拟机来学习，但是我觉得这样不太好</p>
<ul class="lvl-1">
<li class="lvl-2">一是因为我的电脑是游戏本，很厚重，上课带来带去很麻烦</li>
<li class="lvl-2">二是目前学习linux并不需要很高的性能，这个设备已经有足够的性能来学习linux了</li>
</ul>
</blockquote>
<h3 id="为什么不用安卓手机呢">为什么不用安卓手机呢</h3>
<blockquote>
<p>众所周知安卓手机也使用了linux内核</p>
<ul class="lvl-1">
<li class="lvl-2">安卓手机通常无法获取root权限，这样就无法学习linux内核，即使手机支持root，也需要折腾很久，我不想在主力机上root，因为我的数据都在里面</li>
<li class="lvl-2">安卓的Linux内核经过了修改，所以学习起来会比较麻烦</li>
</ul>
</blockquote>
<h2 id="学习Linux">学习Linux</h2>
<p><img src="./A-DebainDeviceAndLinux/images/(3).png" alt></p>
<blockquote>
<p>其实linux只是个操作系统而已，只是其Gui界面较少，操作通常使用命令行，所以学习linux并不难，只要学会一些基本的命令就可以了</p>
</blockquote>
<h3 id="基本命令">基本命令</h3>
<p>ls:列出当前目录下的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l:列出详细信息</span><br><span class="line"><span class="built_in">ls</span> -a:列出所有文件</span><br><span class="line"><span class="built_in">ls</span> -al:列出所有文件的详细信息</span><br></pre></td></tr></table></figure>
<p>cd:切换目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..:返回上一级目录</span><br><span class="line"><span class="built_in">cd</span> ~:返回根目录</span><br></pre></td></tr></table></figure>
<p>pwd:显示当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> -P:显示真实路径</span><br></pre></td></tr></table></figure>
<p>mkdir:创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p:创建多级目录</span><br></pre></td></tr></table></figure>
<p>rm:删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r:删除目录</span><br><span class="line"><span class="built_in">rm</span> -f:强制删除</span><br></pre></td></tr></table></figure>
<p>rmdir:删除目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> -p:删除多级目录</span><br></pre></td></tr></table></figure>
<p>cp:复制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r:复制目录</span><br><span class="line"><span class="built_in">cp</span> -a:复制目录并保留属性</span><br></pre></td></tr></table></figure>
<p>mv:移动文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> -f:强制移动</span><br></pre></td></tr></table></figure>
<p>cat:显示文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> -n:显示行号</span><br></pre></td></tr></table></figure>
<p>touch:创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> -a:修改文件的访问时间</span><br><span class="line"><span class="built_in">touch</span> -m:修改文件的修改时间</span><br><span class="line"><span class="built_in">touch</span> -c:不创建文件，只修改文件的时间</span><br></pre></td></tr></table></figure>
<p>echo:输出内容到文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt; hello.txt:输出内容到文件</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt;&gt; hello.txt:输出内容到文件末尾</span><br></pre></td></tr></table></figure>
<p>find:查找文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span>:查找当前目录下的hello.txt文件</span><br><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span> -<span class="built_in">type</span> f:查找当前目录下的hello.txt文件并且是文件</span><br><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span> -<span class="built_in">type</span> d:查找当前目录下的hello.txt文件并且是目录</span><br><span class="line">find . -name <span class="string">&quot;hello.txt&quot;</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;:查找当前目录下的hello.txt文件并且是文件并且删除</span><br></pre></td></tr></table></figure>
<p>grep:查找文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;hello&quot;</span> hello.txt:查找hello.txt文件中的hello</span><br><span class="line">grep -i <span class="string">&quot;hello&quot;</span> hello.txt:忽略大小写</span><br><span class="line">grep -v <span class="string">&quot;hello&quot;</span> hello.txt:查找不包含hello的行</span><br><span class="line">grep -n <span class="string">&quot;hello&quot;</span> hello.txt:查找包含hello的行并且显示行号</span><br><span class="line">grep -c <span class="string">&quot;hello&quot;</span> hello.txt:查找包含hello的行并且显示行数</span><br><span class="line">grep -r <span class="string">&quot;hello&quot;</span> .:查找当前目录下的所有文件中包含hello的行</span><br></pre></td></tr></table></figure>
<p>wc:统计文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> -l hello.txt:统计hello.txt文件的行数</span><br><span class="line"><span class="built_in">wc</span> -w hello.txt:统计hello.txt文件的单词数</span><br><span class="line"><span class="built_in">wc</span> -c hello.txt:统计hello.txt文件的字符数</span><br></pre></td></tr></table></figure>
<p>sort:排序文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> hello.txt:对hello.txt文件进行排序</span><br><span class="line"><span class="built_in">sort</span> -r hello.txt:对hello.txt文件进行倒序排序</span><br><span class="line"><span class="built_in">sort</span> -n hello.txt:对hello.txt文件进行数字排序</span><br><span class="line"><span class="built_in">sort</span> -u hello.txt:对hello.txt文件进行去重排序</span><br></pre></td></tr></table></figure>
<p>uniq:去重文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uniq</span> hello.txt:去重hello.txt文件</span><br><span class="line"><span class="built_in">uniq</span> -c hello.txt:去重并且统计重复次数</span><br></pre></td></tr></table></figure>
<p>head:显示文件头部内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 10 hello.txt:显示hello.txt文件的前10行</span><br></pre></td></tr></table></figure>
<p>tail:显示文件尾部内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 10 hello.txt:显示hello.txt文件的后10行</span><br></pre></td></tr></table></figure>
<p>diff:比较文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff example1.txt example2.txt 比较文件差异</span><br></pre></td></tr></table></figure>
<h3 id="vim">vim</h3>
<p>vim是linux下的文本编辑器，其操作方式与windows下的记事本类似，但是vim的功能更加强大，所以学习vim是学习linux的必备技能</p>
<p>vim的操作方式有两种，一种是命令模式，一种是编辑模式，命令模式下可以进行一些操作，比如复制粘贴，编辑模式下可以进行编辑。vim有多个模式，分别是</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>正常模式(normal mode),默认模式,可以进行复制粘贴等操作</p>
</li>
<li class="lvl-2">
<p>插入模式(insert mode),可以进行编辑</p>
</li>
<li class="lvl-2">
<p>命令行模式(command mode),可以执行一些命令</p>
</li>
<li class="lvl-2">
<p>可视模式(visual mode),可以进行选择</p>
</li>
</ul>
<h4 id="新建保存和退出">新建保存和退出</h4>
<p>新建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim hello.txt</span><br></pre></td></tr></table></figure>
<p>保存文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:w</span><br></pre></td></tr></table></figure>
<p>退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:q</span><br></pre></td></tr></table></figure>
<p>强制退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:q!</span><br></pre></td></tr></table></figure>
<p>保存并退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>
<p>进入编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i</span><br></pre></td></tr></table></figure>
<p>退出编辑模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">esc</span><br></pre></td></tr></table></figure>
<h4 id="初步导航和编辑">初步导航和编辑</h4>
<p>通常vim移动光标的方式是使用方向键，但是vim也提供了一些快捷键，可以使用快捷键来移动光标</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>h:左移</p>
</li>
<li class="lvl-2">
<p>j:下移</p>
</li>
<li class="lvl-2">
<p>k:上移</p>
</li>
<li class="lvl-2">
<p>l:右移</p>
</li>
<li class="lvl-2">
<p>i:插入，插入到当前光标的前面</p>
</li>
<li class="lvl-2">
<p>shift+a或A:追加，追加到当前光标的后面</p>
</li>
</ul>
<p>新建一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">o 新建下一行或者</span><br><span class="line"><span class="built_in">shift</span>+o 新建下一行</span><br></pre></td></tr></table></figure>
<h4 id="进阶导航和编辑">进阶导航和编辑</h4>
<p>行号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure>
<p>移动到最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">shift</span>+g</span><br><span class="line">G</span><br></pre></td></tr></table></figure>
<p>移动到顶部</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gg</span><br></pre></td></tr></table></figure>
<p>相对行号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> rnu</span><br></pre></td></tr></table></figure>
<p>复制粘贴</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yy 复制一行</span><br><span class="line">p 粘贴</span><br></pre></td></tr></table></figure>
<p>删除一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span></span><br></pre></td></tr></table></figure>
<p>重复上一次操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br></pre></td></tr></table></figure>
<p>撤销</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">u</span><br></pre></td></tr></table></figure>
<p>返回上一次操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+r</span><br></pre></td></tr></table></figure>
<p>删除一个单词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dw</span><br></pre></td></tr></table></figure>
<p>改变一个单词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cw</span><br></pre></td></tr></table></figure>
<p>按单词移动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">w 向后移动一个单词</span><br><span class="line">b 向前移动一个单词</span><br></pre></td></tr></table></figure>
<p>跳到单词最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e</span><br></pre></td></tr></table></figure>
<p>跳到单词最前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<h4 id="搜索替换和视觉模式">搜索替换和视觉模式</h4>
<p>搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/word</span><br></pre></td></tr></table></figure>
<p>替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:%s/old/new/g 最后的g是全局的意思</span><br></pre></td></tr></table></figure>
<p>复制一个单词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yw</span><br></pre></td></tr></table></figure>
<p>粘贴3次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3p</span><br></pre></td></tr></table></figure>
<p>删除大括号内的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ci&#123;</span><br><span class="line">ci&#125;</span><br></pre></td></tr></table></figure>
<p>视觉模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+v</span><br></pre></td></tr></table></figure>
<p>其他的快捷键</p>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>:set nu:显示行号</p>
</li>
<li class="lvl-2">
<p>:set nonu:不显示行号</p>
</li>
<li class="lvl-2">
<p>:set ai:自动缩进</p>
</li>
<li class="lvl-2">
<p>:set noai:不自动缩进</p>
</li>
<li class="lvl-2">
<p>:set si:智能缩进</p>
</li>
<li class="lvl-2">
<p>:set nosi:不智能缩进</p>
</li>
<li class="lvl-2">
<p>:set ts=4:设置缩进为4个空格</p>
</li>
<li class="lvl-2">
<p>:set ts=8:设置缩进为8个空格</p>
</li>
<li class="lvl-2">
<p>:set ts=tab:设置缩进为tab</p>
</li>
</ul>
</blockquote>
<p>参考：</p>
<iframe class="video-frame" src="//player.bilibili.com/player.html?aid=983519439&cid=775999565&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>关于电子书</title>
    <url>/2023/05/22/1/</url>
    <content><![CDATA[<h2 id="关于电子书">关于电子书</h2>
<p>我喜欢看电子书，我看过的多数课外书籍基本是电子书。中国有很多电子书平台，如著名的起点中文网。但是，这些平台的电子书都是有版权的，而且有些电子书的版权是很贵的。</p>
<h3 id="ZLibrary">ZLibrary</h3>
<p>ZLibrary是一个免费的电子书网站，上面有很多免费的电子书，还有论文。前些时间，Zlib被美国相关部门封锁了，但是现在（2023-05）又可以访问了。但我看见Zlib给我发的邮件时，我非常感动······</p>
<p>Zlib是互联网精神的一部分，它是一个免费的电子书网站，它的存在是为了让更多的人能够阅读更多的书籍，而不是为了盈利。<br>
<img src="./img/zlib.png" alt></p>
<h3 id="知轩藏书（zxcs-me）">知轩藏书（<span class="exturl" data-url="aHR0cDovL3p4Y3MubWU=">zxcs.me<i class="fa fa-external-link-alt"></i></span>）</h3>
<p>不知道什么时候开始，我就使用知轩藏书来下载电子书了。它上面有很多精校版的电子书，而且是免费的。但是如今，它停止运营了，我感觉很可惜。不知道它的运营者为什么要停止运营，我猜测可能是因为版权问题吧。也不知道能否和Zlib一样，能够重新上线。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">关于“知轩藏书”站点的临时说明</span><br><span class="line">从 2023 年 4 月 5 日开始，用户无法访问知轩藏书站点。笔者通过对网站的基本信息进行分析后，初步判断是站长未续费网站服务器所导致的问题。</span><br><span class="line">后续网站是否能够恢复，取决于站长有没有备份网站数据，以及其是否还有意愿维护网站。</span><br><span class="line"></span><br><span class="line">不复存在的“知轩藏书”站点</span><br><span class="line">当你看到这个页面，说明“知轩藏书”的站长没有续费 92.242.62.123 服务器，并且没有更改域名解析记录。</span><br><span class="line">想了解更多信息请访问“知轩藏书”站点情况说明站点，</span><br><span class="line">因为笔者不打算长期续费此服务器，笔者没有“知轩藏书”站点的网站数据，这是个“重新安装”的服务器。</span><br><span class="line"></span><br><span class="line">过渡方案</span><br><span class="line">在百度贴吧知轩藏书吧内，网友“Anonymous般若”分享了其抓取的“知轩藏书”站点资源。</span><br><span class="line">而网友“鸣庚◎点墨”则根据这些资源，结合 AList 这个文件列表程序，建立了一个知轩藏书备份站。</span><br><span class="line"></span><br><span class="line">ZXCS | 百度网盘（已失效；压缩包密码：@123123）</span><br><span class="line">知轩藏书备份站（由于被攻击，即将关闭。）</span><br><span class="line">阿里云盘（由网友“筒蠹”提供，将文件类型“exe”重命名为“rar”即可解压）</span><br><span class="line">OneDrive for Business 国际版（由网友“神龙氏少主”提供，其同时运营着一个流媒体网站必达影视）</span><br><span class="line">天翼云盘（由网友“贴吧用户_0XN9bX5”提供）</span><br><span class="line">知轩藏书备份站（由网友“Sukanka”提供）</span><br><span class="line">请注意，zxcs.info 或 zxcstxt.com 等绝不是所谓的新站点，站长没有理由放弃运营 zxcs.me，转而运营一个不如其知名的站点。</span><br><span class="line"></span><br><span class="line">如果朋友们知道其他精校小说网站，也欢迎向我反馈，我会在“知轩藏书”站点情况说明站点中分享。</span><br><span class="line"></span><br><span class="line">笔者的电子邮件地址：webmaster@zxcs.wiki（受限于服务商，笔者无法回复邮件，敬请见谅）</span><br><span class="line">笔者不赞同访问 zxcs.info 或 zxcstxt.com 等盗用他人名称的站点，因为这是一种为了不良竞争以及快速获取知名度的手段。</span><br><span class="line">笔者认为如果网站真的足够优秀，那么使用自己原创的站点名称一样能够成功，使用他人名称更多是一种“浑水摸鱼”的做法。</span><br><span class="line"></span><br><span class="line">© 2023 zxcs.me (zxcs.wiki) - 关于“知轩藏书”站点的临时说明</span><br></pre></td></tr></table></figure>
<iframe src="https://www.zxcs.me/"></iframe>
<blockquote>
<p>如果上面的iframe无法显示，或者显示出无关内容，说明知轩藏书已经彻底停止运营了。</p>
</blockquote>
<div itemprop="text">
          <p>
            在百度贴吧<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vZj9pZT11dGYtOCZrdz0lRTclOUYlQTUlRTglQkQlQTklRTglOTclOEYlRTQlQjklQTY=" title="知轩藏书吧-百度贴吧">知轩藏书吧<i class="fa fa-external-link-alt"></i></span>内，网友“Anonymous般若”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">分享了其抓取的“知轩藏书”站点资源<i class="fa fa-external-link-alt"></i></span>。
            <br>
            而网友“鸣庚◎点墨”则根据这些资源，结合 AList 这个文件列表程序，<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84Mzc5NjU0OTgy" title="知轩藏书备份资源下载站来了（地址看2楼）_知轩藏书吧_百度贴吧">建立了一个知轩藏书备份站<i class="fa fa-external-link-alt"></i></span>。
          </p>
          <ul>
            <li><del><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMW1wU2lzTlFXekhLQlI1LTNCZDdYbUE/cHdkPWFqMmo=" title="ZXCS_免费高速下载|百度网盘-分享无限制">ZXCS |
                  百度网盘<i class="fa fa-external-link-alt"></i></span></del><i>（<strong>已失效</strong>；压缩包密码：@123123）</i>
            </li>
            <li><span class="exturl" data-url="aHR0cHM6Ly96eGNzLmRtbmIuY2Yv" title="主页 | 知轩藏书（备份）">知轩藏书备份站<i class="fa fa-external-link-alt"></i></span><i>（由于<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84NDE4OTU3NTQyP2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3NjQxNDIxMDU5IzE0NzY0MTQyMTA1OQ==" title="郑重声明：本站仅提供单文件下载，要下整个库的你直接下anonymous打包的书库去，你别从我这刷！我这里一天只有十万的访问额度【知轩藏书吧】_百度贴吧">被攻击<i class="fa fa-external-link-alt"></i></span>，即将关闭。）</i></li>
            <li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvTEdFaWtpeXNpOEs=" title="阿里云盘分享">阿里云盘<i class="fa fa-external-link-alt"></i></span><i>（由网友“筒蠹”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3P2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3MzI0MTM0MDU0JmNpZD0xNDczMzY3Mzc4MjYjMTQ3MzM2NzM3ODI2" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">提供<i class="fa fa-external-link-alt"></i></span>，将文件类型“exe”重命名为“rar”即可解压）</i></li>
            <li><span class="exturl" data-url="aHR0cHM6Ly9kbC4xNGJpZGEubWUvMTRiaWRhL0Jvb2svJUU3JTlGJUE1JUU4JUJEJUE5JUU4JTk3JThGJUU0JUI5JUE2JUU1JUE0JTg3JUU0JUJCJUJE" title="必达影视下载站 | 知轩藏书备份">OneDrive for Business
                国际版<i class="fa fa-external-link-alt"></i></span><i>（由网友“神龙氏少主”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3P2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3MzI0MTM0MDU0JmNpZD0xNDc0NjU5NjY1MjYjMTQ3NDY1OTY2NTI2" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">提供<i class="fa fa-external-link-alt"></i></span>，其同时运营着一个流媒体网站<span class="exturl" data-url="aHR0cHM6Ly8xNGJpZGEubWUv" title="必达影视">必达影视<i class="fa fa-external-link-alt"></i></span></i>）
            </li>
            <li><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC4xODkuY24vdC9CVmJ5ZW1KRlZWbm0=" title="知轩藏书 全站小说（7681本） 免费高速下载 | 天翼云盘 珍藏美好生活 家庭云|网盘|文件备份|资源分享">天翼云盘<i class="fa fa-external-link-alt"></i></span><i>（由网友“贴吧用户_0XN9bX5”<span class="exturl" data-url="aHR0cHM6Ly90aWViYS5iYWlkdS5jb20vcC84MzQ5OTQ5MTE3P2ZpZD0xNzY5MzQ3OSZwaWQ9MTQ3MzI0MTM0MDU0JmNpZD0xNDc1MzkwMDc3NzUjMTQ3NTM5MDA3Nzc1" title="建站至今所有数据分享，另附2022年8月仙毒草数据【知轩藏书吧】_百度贴吧">提供<i class="fa fa-external-link-alt"></i></span>）</i></li>
            <li><span class="exturl" data-url="aHR0cHM6Ly9kbC5hc2trLmNjL2NtY2Mv" title="cmcc | Sukanka 的仓库">知轩藏书备份站<i class="fa fa-external-link-alt"></i></span><i>（由<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmFza2suY2Mv" title="sukanka 的博客 - sukanka 的博客">网友“Sukanka”<i class="fa fa-external-link-alt"></i></span>提供）</i></li>
          </ul>
</div>
<h2 id="我的希望"><s>我的希望</s></h2>
<p><s>如果可以，我希望我以后可以自组一台NAS，将Zlib的所有书籍都备份</s></p>
]]></content>
  </entry>
  <entry>
    <title>四月杂谈</title>
    <url>/2024/05/07/1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="15fc5d372789ce2f94dba5e6e763af5325c5651aa63a4c382d715089df412b0e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入访问密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>屎山代码艺术</title>
    <url>/2023/07/06/1/</url>
    <content><![CDATA[<p>每一个进一步了解了编程的人，都会有这样的感觉：编程是一门艺术，而且是一门非常有趣的艺术。编程的艺术，就像是一座座屎山，😅<br>
每当我们想要写出一段优雅的代码时，就会发现自己的代码又多了一座屎山。😉<br>
而每当看到他人写的代码时，会发现自己的代码又是一座屎山。🥴<br>
往往与他人合作写代码时，我眉头微蹙，他人也是眉头微蹙，我们都在看着对方的屎山。🤗</p>
<p>著名的互联网公司 谷歌，出品的著名的浏览器 Chrome，<s>就是一座屎山</s>就是一件伟大的作品。而编写了<s>这座屎山</s>这个作品的人，就是一位艺术家。所以我们有了 <span class="exturl" data-url="aHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL3N0eWxlZ3VpZGUvanNndWlkZS5odG1s">谷歌 JavaScript 风格<i class="fa fa-external-link-alt"></i></span>.👽</p>
<details>
<summary>谷歌 JavaScript 风格</summary>
<iframe src="https://google.github.io/styleguide/jsguide.html" width="100%" height="600px"></iframe>
</details>
<p><s>这样我们就可以写出优美的代码了。</s>下面我要介绍的，就是一位艺术家的作品。<s>一种优美的代码风格。(bushi)</s></p>
<details>
<summary>💩点击展开💩</summary>
<h2 id="垃圾代码书写准则">垃圾代码书写准则</h2>
<p><a href="https://github.com/trekhleb/state-of-the-art-shitcode"><img src="https://img.shields.io/static/v1?label=State-of-the-art&amp;message=Shitcode&amp;color=7B5804" alt></a></p>
<p>这是一个你的项目应该遵循的垃圾代码书写准则的列表，把称为适当的垃圾代码。</p>
<p><em>Read this in other languages:</em><br>
<a href="https://github.com/trekhleb/state-of-the-art-shitcode/blob/master/README.md"><em>English</em></a>,<br>
<a href="https://github.com/trekhleb/state-of-the-art-shitcode/blob/master/README.ko-KR.md"><em>한국어</em></a></p>
<h2 id="获取徽章">获取徽章</h2>
<p>如果你的仓库遵循垃圾代码书写准则，你应该用下面的&quot;state-of-the-art shitcode&quot; 徽章：</p>
<p><a href="https://github.com/trekhleb/state-of-the-art-shitcode"><img src="https://img.shields.io/static/v1?label=State-of-the-art&amp;message=Shitcode&amp;color=7B5804" alt></a></p>
<p>标记徽章的源代码:</p>
<p><a href="https://github.com/trekhleb/state-of-the-art-shitcode"><img src="https://img.shields.io/static/v1?label=State-of-the-art&amp;message=Shitcode&amp;color=7B5804" alt></a></p>
<h2 id="准则">准则</h2>
<h3 id="💩-以一种代码已经被混淆的方式命名变量">💩 以一种代码已经被混淆的方式命名变量</h3>
<p>如果我们键入的东西越少，那么就有越多的时间去思考代码逻辑等问题。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<h3 id="💩-变量-函数混合命名风格">💩 变量/函数混合命名风格</h3>
<p>为不同庆祝一下。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wWidth = <span class="number">640</span>;</span><br><span class="line"><span class="keyword">let</span> w_height = <span class="number">480</span>;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> windowWidth = <span class="number">640</span>;</span><br><span class="line"><span class="keyword">let</span> windowHeight = <span class="number">480</span>;</span><br></pre></td></tr></table></figure>
<h3 id="💩-不要写注释">💩 不要写注释</h3>
<p>反正没人会读你的代码。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cdr = <span class="number">700</span>;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<p>更多时候，评论应该包含一些“为什么”，而不是一些“是什么”。如果“什么”在代码中不清楚，那么代码可能太混乱了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 700ms的数量是根据UX A/B测试结果进行经验计算的。</span></span><br><span class="line"><span class="comment">// @查看: &lt;详细解释700的一个链接&gt;</span></span><br><span class="line"><span class="keyword">const</span> callbackDebounceRate = <span class="number">700</span>;</span><br></pre></td></tr></table></figure>
<h3 id="💩-使用母语写注释">💩 使用母语写注释</h3>
<p>如果您违反了“无注释”原则，那么至少尝试用一种不同于您用来编写代码的语言来编写注释。如果你的母语是英语，你可能会违反这个原则。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Закриваємо модальне віконечко при виникненні помилки.</span></span><br><span class="line"><span class="title function_">toggleModal</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐藏错误弹窗</span></span><br><span class="line"><span class="title function_">toggleModal</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="💩-尽可能混合不同的格式">💩 尽可能混合不同的格式</h3>
<p>为不同庆祝一下。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = [<span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;onion&#x27;</span>, <span class="string">&#x27;mushrooms&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> d = [ <span class="string">&quot;ketchup&quot;</span>, <span class="string">&quot;mayonnaise&quot;</span> ];</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ingredients = [<span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;onion&#x27;</span>, <span class="string">&#x27;mushrooms&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> dressings = [<span class="string">&#x27;ketchup&#x27;</span>, <span class="string">&#x27;mayonnaise&#x27;</span>];</span><br></pre></td></tr></table></figure>
<h3 id="💩-尽可能把代码写成一行">💩 尽可能把代码写成一行</h3>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="regexp">/(^\?)/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>).<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">o,n</span>)&#123;n=n.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);o[n[<span class="number">0</span>]]=n[<span class="number">1</span>];<span class="keyword">return</span> o&#125;,&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">search</span></span><br><span class="line">  .<span class="title function_">replace</span>(<span class="regexp">/(^\?)/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">searchParams, keyValuePair</span>) =&gt;</span> &#123;</span><br><span class="line">    keyValuePair = keyValuePair.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    searchParams[keyValuePair[<span class="number">0</span>]] = keyValuePair[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> searchParams;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="💩-不要处理错误">💩 不要处理错误</h3>
<p>无论何时发现错误，都没有必要让任何人知道它。没有日志，没有错误弹框。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 意料之外的情况。</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// tss... 🤫</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 意料之外的情况。</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="title function_">setErrorMessage</span>(error.<span class="property">message</span>);</span><br><span class="line">  <span class="comment">// and/or</span></span><br><span class="line">  <span class="title function_">logError</span>(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-广泛使用全局变量">💩 广泛使用全局变量</h3>
<p>全球化的原则。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params"></span>) &#123;</span><br><span class="line">  x = x ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">square</span>(); <span class="comment">// 现在x是25</span></span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="title function_">square</span>(x); <span class="comment">// 现在x是25</span></span><br></pre></td></tr></table></figure>
<h3 id="💩-创建你不会使用的变量">💩 创建你不会使用的变量</h3>
<p>以防万一。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> timeout = <span class="number">1300</span>;</span><br><span class="line">  <span class="keyword">const</span> result = a + b;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-如果语言允许，不要指定类型和-或不执行类型检查">💩 如果语言允许，不要指定类型和/或不执行类型检查</h3>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里享受没有注释的快乐</span></span><br><span class="line"><span class="keyword">const</span> guessWhat = <span class="title function_">sum</span>([], &#123;&#125;); <span class="comment">// -&gt; &quot;[object Object]&quot;</span></span><br><span class="line"><span class="keyword">const</span> guessWhatAgain = <span class="title function_">sum</span>(&#123;&#125;, []); <span class="comment">// -&gt; 0</span></span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: number, b: number</span>): ?number &#123;</span><br><span class="line">  <span class="comment">// 当我们在JS中不做置换和/或流类型检查时，覆盖这种情况。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> b !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个应该在转换/编译期间失败。</span></span><br><span class="line"><span class="keyword">const</span> guessWhat = <span class="title function_">sum</span>([], &#123;&#125;); <span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="💩-你应该有不能到达的代码">💩 你应该有不能到达的代码</h3>
<p>这是你的 “Plan B”.</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 这就是我的&quot;Plan B&quot;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-三角法则">💩 三角法则</h3>
<p>就像鸟巢，鸟巢，鸟巢。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">      <span class="title function_">asyncFunction</span>(params, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition1 || !condition2) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncFunction</span>(params);</span><br><span class="line">  <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="💩-混合缩进">💩 混合缩进</h3>
<p>避免缩进，因为它们会使复杂的代码在编辑器中占用更多的空间。如果你不喜欢回避他们，那就和他们捣乱。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> toppings = [<span class="string">&#x27;syrup&#x27;</span>, <span class="string">&#x27;cream&#x27;</span>, </span><br><span class="line">                    <span class="string">&#x27;jam&#x27;</span>, </span><br><span class="line">                    <span class="string">&#x27;chocolate&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> desserts = [];</span><br><span class="line">fruits.<span class="title function_">forEach</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> &#123;</span><br><span class="line">toppings.<span class="title function_">forEach</span>(<span class="function"><span class="params">topping</span> =&gt;</span> &#123;</span><br><span class="line">    desserts.<span class="title function_">push</span>([</span><br><span class="line">fruit,topping]);</span><br><span class="line">    &#125;);&#125;)</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> toppings = [<span class="string">&#x27;syrup&#x27;</span>, <span class="string">&#x27;cream&#x27;</span>, <span class="string">&#x27;jam&#x27;</span>, <span class="string">&#x27;chocolate&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> desserts = [];</span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">forEach</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> &#123;</span><br><span class="line">  toppings.<span class="title function_">forEach</span>(<span class="function"><span class="params">topping</span> =&gt;</span> &#123;</span><br><span class="line">    desserts.<span class="title function_">push</span>([fruit, topping]); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="💩-不要锁住你的依赖项">💩 不要锁住你的依赖项</h3>
<p>以非受控方式更新每个新安装的依赖项。为什么坚持使用过去的版本，让我们使用最先进的库版本。</p>
<p><strong><em>Good 👍🏻</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line"></span><br><span class="line">package.json</span><br></pre></td></tr></table></figure>
<p><strong><em>Bad 👎🏻</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -la</span><br><span class="line"></span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>
<h3 id="💩-函数长的比短的好">💩 函数长的比短的好</h3>
<p>不要把程序逻辑分成可读的部分。如果IDE的搜索停止，而您无法找到所需的文件或函数，该怎么办?</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一个文件中10000行代码是OK的。</p>
</li>
<li class="lvl-2">
<p>一个函数体有1000行代码是OK的。</p>
</li>
<li class="lvl-2">
<p>在一个’ service.js ’ 中处理许多服务(第三方库和内部库、一些工具、手写的数据库ORM和jQuery滑块)? 这是OK的。</p>
</li>
</ul>
<h3 id="💩-不要测试你的代码">💩 不要测试你的代码</h3>
<p>这是重复且不需要的工作。</p>
<h3 id="💩-避免代码风格统一">💩 避免代码风格统一</h3>
<p>编写您想要的代码，特别是在一个团队中有多个开发人员的情况下。这是“自由”原则。</p>
<h3 id="💩-构建新项目不需要-README-文档">💩 构建新项目不需要 README 文档</h3>
<p>一开始我们就应该保持。</p>
<h3 id="💩-保存不必要的代码">💩 保存不必要的代码</h3>
<p>不要删除不用的代码，最多注释掉。</p>
</details>
<hr>
<p>参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RyZWtobGViL3N0YXRlLW9mLXRoZS1hcnQtc2hpdGNvZGU=">state-of-the-art-shitcode<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 2</title>
    <url>/2023/03/12/1/</url>
    <content><![CDATA[<h2 id="层次选择器">层次选择器</h2>
<p>层次选择器是用来选择文档树中的某个元素的，它们可以用来选择父元素、子元素、后代元素、相邻兄弟元素和通用兄弟元素。层次选择器的作用是为了更精确的选择元素，从而减少样式的冗余，提高样式的可维护性。</p>
<h3 id="后代选择器">后代选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子代选择器">子代选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="相邻兄弟选择器">相邻兄弟选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><s>其实就是弟弟选择器</s></p>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> + <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通用兄弟选择器">通用兄弟选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> ~ <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用示例">应用示例</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> &gt; <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> + <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent</span> ~ <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> + <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> ~ <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结构伪类选择器">结构伪类选择器</h2>
<p>伪类: 用来选择文档树中的某个元素的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="属性选择器（Attribute-Selector）">属性选择器（Attribute Selector）</h2>
<p>属性选择器用来选择具有某个属性的元素，或者具有某个属性值的元素，是一种常用的选择器。</p>
<h3 id="属性选择器的语法">属性选择器的语法</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line">[attr]</span><br><span class="line">[attr=value]</span><br><span class="line">[attr~=value]</span><br><span class="line">[attr|=value]</span><br><span class="line">[attr^=value]</span><br><span class="line">[attr$=value]</span><br><span class="line">[attr*=value]</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-attr">[attr]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<style>
  [attr] {
      color: red;
    }
[attr=value] {
      color: blue;
    }
    [attr~=value] {
      color: green;
    }
    [attr|=value] {
      color: yellow;
    }
    [attr^=value] {
      color: pink;
    }
    [attr$=value] {
      color: orange;
    }
    [attr*=value] {
      color: purple;
    }
</style>
<div class="parent">
  <p class="child" attr="value">child</p>
  <p class="child" attr="value1 value2">child</p>
  <p class="child" attr="value1-value2">child</p>
  <p class="child" attr="value1value2">child</p>
  <p class="child" attr="value1value2value3">child</p>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr~=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr|=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr^=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr$=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[attr*=value]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1 value2&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1-value2&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1value2&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">attr</span>=<span class="string">&quot;value1value2value3&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-attr">[attr]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr~=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr|=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr^=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr$=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[attr*=value]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>属性选择器中的属性值是大小写敏感的，如果要忽略大小写，可以使用 i 修饰符。并且，属性选择器中的属性值必须用双引号或单引号括起来。常常使用正则表达式来匹配属性值。例如，要选择所有具有 href 属性的 a 元素，可以使用 [href] 选择器；要选择所有具有 href 属性且属性值以 http:// 开头的 a 元素，可以使用 [href^=“http://”] 选择器。</p>
</blockquote>
<p>属性选择器常常是id选择器和class选择器的补充，因为id和class选择器只能选择具有id或class属性的元素，而属性选择器可以选择具有任意属性的元素。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>BASH sh script</title>
    <url>/2023/03/24/1/</url>
    <content><![CDATA[<h2 id="利用sh脚本计算1到100的和">利用sh脚本计算1到100的和</h2>
<ol>
<li class="lvl-3">利用while循环计算1到100的和</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 100 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line">    i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>利用for…do…done计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>利用for…do…done计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>利用until循环计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -gt 100 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line">    i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>利用awk计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;sum=0;for(i=1;i&lt;=100;i++)sum+=i;print sum&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>利用expr计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=`<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$i</span>`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li class="lvl-3">
<p>利用bc计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=`<span class="built_in">echo</span> <span class="variable">$sum</span>+<span class="variable">$i</span>|bc`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li class="lvl-3">
<p>利用python计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">python -c <span class="string">&quot;print(sum(range(1,101)))&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li class="lvl-3">
<p>利用perl计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">perl -e <span class="string">&#x27;print 100*101/2&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li class="lvl-4">
<p>利用ruby计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ruby -e <span class="string">&#x27;puts (1..100).inject(:+)&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="11">
<li class="lvl-4">
<p>利用sed计算1到100的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sed -n <span class="string">&#x27;1,100p&#x27;</span> | awk <span class="string">&#x27;&#123;sum+=$1&#125;END&#123;print sum&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="让用户输入一个数字，然后计算1到这个数字的和">让用户输入一个数字，然后计算1到这个数字的和</h2>
<ol>
<li class="lvl-3">
<p>利用while循环计算1到用户输入数字的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Please input a number: &quot;</span> num</span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le <span class="variable">$num</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line">    i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>利用for…do…done计算1到用户输入数字的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Please input a number: &quot;</span> num</span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 <span class="variable">$num</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>调用python计算1到用户输入数字的和</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Please input a number: &quot;</span> num</span><br><span class="line">python -c <span class="string">&quot;print(sum(range(1,<span class="variable">$num</span>+1)))&quot;</span></span><br></pre></td></tr></table></figure>
<p>etc.</p>
<h2 id="利用for循环嵌套，输出九九乘法表">利用for循环嵌套，输出九九乘法表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 9`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> `<span class="built_in">seq</span> 1 <span class="variable">$i</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$j</span>*<span class="variable">$i</span>=<span class="subst">$(($i*$j)</span>) &quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>调用python</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">python -c <span class="string">&quot;for i in range(1,10):print(&#x27; &#x27;.join([&#x27;%s*%s=%s&#x27;%(j,i,i*j) for j in range(1,i+1)]))&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 4</title>
    <url>/2023/03/19/1/</url>
    <content><![CDATA[<h2 id="背景图像应用及渐变">背景图像应用及渐变</h2>
<h3 id="背景图像">背景图像</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>背景样式</p>
</li>
<li class="lvl-2">
<p>背景图像</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bgtest1</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/00050-1042470473.png</span>); <span class="comment">/* 默认平铺 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/* 不平铺 可以设置repeat-x repeat-y */</span></span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><h4 id="e-g">e.g</h4>
<p>背景图像</p>
</div>
<style>
    .bgtest1{
        background-image: url("./2023/03/19/1/images/00050-1042470473.png"); /* 默认平铺 */
        background-repeat: no-repeat; /* 不平铺 可以设置repeat-x repeat-y */
        background-position: center;
        background-size: 100%;
        border: 1px solid #000;
    }
</style>
<div class="bgtest1" style="width: 200px; height: 200px;"></div>
<h3 id="背景渐变">背景渐变</h3>
<p>使用CSS3的渐变，可以实现更加丰富的背景效果。这里有一个网站帮助你生成渐变代码：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29sb3J6aWxsYS5jb20vZ3JhZGllbnQtZWRpdG9yLw==">https://www.colorzilla.com/gradient-editor/<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JhYmllbnQuY29tLw==">https://www.grabient.com/<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#FF9A8B</span> <span class="number">0%</span>, <span class="number">#FF6A88</span> <span class="number">55%</span>, <span class="number">#FF99AC</span> <span class="number">100%</span>);</span><br></pre></td></tr></table></figure>
<div class="note success"><h4 id="e-g">e.g</h4>
<p>渐变效果</p>
</div>
<div id="navtest">
<style>
    .titletest {
    font-size: 20px;
    font-weight: bold;
    color: #FFFFFF;
    text-indent: 1em;
    line-height: 35px;
    background-color: #FF9A8B;
background-image: linear-gradient(90deg, #FF9A8B 0%, #FF6A88 55%, #FF99AC 100%);
}
/* a:hover {
    color: orange;
    text-decoration: underline;
} */
# navtest {
    width: 200px;
    height: 200px;
}
# treeicon {
    /* width: 15px;
    height: 15px; */
    background: url(./images/ysepan.svg) ;
    background-repeat: no-repeat;
    background-position: 100px 2px;
}
</style>
<h4 class="titletest">网页导航</h4>
<ul style="background-color: #FFDEE9;
background-image: linear-gradient(0deg, #FFDEE9 0%, #B5FFFC 100%);">
    <li id="treeicon" style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20=">视频<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cucGl4aXYubmV0Lw==">插画<i class="fa fa-external-link-alt"></i></span></li>
    <li id="treeicon" style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0ZmxpeC5jb20=">剧集<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cubmljb3ZpZGVvLmpw">动漫<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</div>
<h2 id="盒子模型及边框使用">盒子模型及边框使用</h2>
<h3 id="盒子模型">盒子模型</h3>
<p><img src="https://www.runoob.com/images/box-model.gif" alt title="盒子模型"></p>
<div class="note info"><h4 id="什么是盒子模型">什么是盒子模型</h4>
<ul class="lvl-0">
<li class="lvl-2">margin: 外边距</li>
<li class="lvl-2">border: 边框</li>
<li class="lvl-2">padding: 内边距</li>
<li class="lvl-2">content: 内容</li>
</ul>
</div>
<div class="note info no-icon"><h4 id="边框">边框</h4>
<ul class="lvl-0">
<li class="lvl-2">border-width: 边框宽度</li>
<li class="lvl-2">border-style: 边框样式</li>
<li class="lvl-2">border-color: 边框颜色</li>
</ul>
</div>
<h3 id="边框的使用">边框的使用</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.boxtest1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><p>e.g.<br>
盒子模型及边框使用</p>
</div>
<div class="boxtest1">
<style>
    .boxtest1{
        width: 300px;
        height: 200px;
        border: 1px solid #000;
        background-color: #4158D0;
        background-image: linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%);
        margin: 0 auto;
        padding: 10px;
    }
    #textp{
        color: #fff;
        text-align: center;
    }
    #submittest{
        background-color: #fff;
        color: #000;
        border: 1px solid #000;
        border-radius: 5px;
        width: 100px;
        height: 30px;
        margin: 0 auto;
        align-items: center;
        justify-content: center;
        display: flex;
    }
</style>
<p id="textp">登陆</p>
<form action="/404">
<div>
<span style="color: #fff;line-height:50px">姓名：</span>
<input type="text" name="username" placeholder="请输入姓名" required pattern="[a-zA-Z0-9]{6,12}">
</div>
<div>
<span style="color: #fff;line-height:50px">密码：</span>
<input type="password" name="password" placeholder="请输入密码" required pattern="[a-zA-Z0-9]{6,12}">
</div>
<div>
<input id="submittest" type="submit" value="登陆">
</div>
</form>
</div>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 5</title>
    <url>/2023/03/23/1/</url>
    <content><![CDATA[<h2 id="内外边距以及div居中">内外边距以及div居中</h2>
<p>外边距是元素的外部边界与外部边界之间的距离。外边距是透明的，不会影响元素的背景色。</p>
<p>内边距是元素的边界与内容之间的距离。内边距是透明的，不会影响元素的背景色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>; <span class="comment">/* 上下左右都是10px margin: 0 auto; 可以实现居中*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>; <span class="comment">/* 上右下左 顺时针*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="盒子模型的计算方式">盒子模型的计算方式</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>width = content + padding-left + padding-right + border-left + border-right</p>
</li>
<li class="lvl-2">
<p>height = content + padding-top + padding-bottom + border-top + border-bottom</p>
</li>
<li class="lvl-2">
<p>盒子的实际大小 = content</p>
</li>
<li class="lvl-2">
<p>盒子占据的空间 = 外边距 + content</p>
</li>
</ul>
<hr>
<h2 id="圆角边框">圆角边框</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4081</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>; <span class="comment">/* 圆角 */</span></span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>; <span class="comment">/* 左上角 */</span></span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>; <span class="comment">/* 右上角 */</span></span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>; <span class="comment">/* 左下角 */</span></span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>; <span class="comment">/* 右下角 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g">e.g</h3>
<style>
    #box2 {
        width: 100px;
        height: 100px;
        background-color: #ff4081;
        border: 1px solid #000;
        border-radius: 10px 20px 30px 40px; /* 圆角 */
    }
</style>
<div id="box2" style="color: #fff"><span>hello</span></div>
<hr>
<h3 id="应用场景">应用场景</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>圆形头像</p>
</li>
</ul>
<style>
    #radius-avatar1 {
        width: 100px;
        height: 100px;
        border-radius: 50%;
    }
    #radius-avatar2 {
        width: 100px;
        height: 100px;
        border-radius: 30%;
    }
</style>
<img id="radius-avatar1" src="./CSS-Journey-5/images/avatar.png" alt="avatar border-radius: 50%">
<img id="radius-avatar2" src="./CSS-Journey-5/images/avatar.png" alt="avatar border-radius: 30%">
<h2 id="盒子阴影">盒子阴影</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#009688</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#000</span>; <span class="comment">/* 水平偏移量 垂直偏移量 模糊半径 阴影颜色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g-2">e.g</h3>
<style>
    #box3 {
        width: 100px;
        height: 100px;
        background-color: #009688;
        box-shadow: 10px 10px 5px #000; /* 水平偏移量 垂直偏移量 模糊半径 阴影颜色 */
    }
</style>
<div id="box3"><span style="color: #fff">hello</span></div>
<h3 id="应用场景-2">应用场景</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>3D效果</p>
</li>
</ul>
<style>
    #box4 {
        width: 100px;
        height: 100px;
        background-color: #009688;
        box-shadow: 5px 5px 50px yellow; /* 水平偏移量 垂直偏移量 模糊半径 阴影颜色 */
        border-radius: 50%;
    }
</style>
<img id="box4" src="./CSS-Journey-5/images/avatar.png" alt="avatar border-radius: 50%">
<hr>
<p>推荐网站：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9pY2Uud29yay8=">飞冰<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04=">Element<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2luZGV4LWNu">Ant Design<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv">Vue<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="display和浮动">display和浮动</h2>
<h3 id="display">display</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box5</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4081</span>;</span><br><span class="line">    <span class="attribute">display</span>: none; <span class="comment">/* 隐藏元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block; <span class="comment">/* 块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: inline; <span class="comment">/* 行内元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block; <span class="comment">/* 行内块级元素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浮动">浮动</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box6</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4081</span>;</span><br><span class="line">    <span class="attribute">float</span>: left; <span class="comment">/* 左浮动 */</span></span><br><span class="line">    <span class="attribute">float</span>: right; <span class="comment">/* 右浮动 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="e-g-3">e.g</h4>
<style>
    #box5 {
        width: 100px;
        height: 100px;
        background-color: #ff4081;
        display: inline-block;
    }
    #box6 {
        width: 100px;
        height: 100px;
        background-color: #ff4081;
        float: right;
    }
</style>
<div id="box5"><span style="color: #fff">hello</span></div>
<div id="box6"><span style="color: #fff">world</span></div>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 3</title>
    <url>/2023/03/15/1/</url>
    <content><![CDATA[<h2 id="CSS的作用及字体样式">CSS的作用及字体样式</h2>
<h3 id="为什么美化网页">为什么美化网页</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>美化网页的目的是为了让用户更好的阅读网页内容</p>
</li>
<li class="lvl-2">
<p>有效传递信息</p>
</li>
<li class="lvl-2">
<p>吸引用户</p>
</li>
<li class="lvl-2">
<p>凸显主题</p>
</li>
<li class="lvl-2">
<p>提高用户体验</p>
</li>
</ul>
<h3 id="字体样式">字体样式</h3>
<p>字体的属性</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">font-family</td>
<td style="text-align:left">字体</td>
</tr>
<tr>
<td style="text-align:left">font-size</td>
<td style="text-align:left">字号</td>
</tr>
<tr>
<td style="text-align:left">font-weight</td>
<td style="text-align:left">字体粗细</td>
</tr>
<tr>
<td style="text-align:left">font-style</td>
<td style="text-align:left">字体样式</td>
</tr>
<tr>
<td style="text-align:left">font-variant</td>
<td style="text-align:left">字体变体</td>
</tr>
<tr>
<td style="text-align:left">font</td>
<td style="text-align:left">字体属性的简写</td>
</tr>
</tbody>
</table>
<hr>
<p>可以利用font属性简写字体样式，但是font属性的顺序必须是font-style、font-variant、font-weight、font-size/line-height、font-family。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: italic small-caps bold <span class="number">16px</span> <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br></pre></td></tr></table></figure>
<h2 id="文本样式">文本样式</h2>
<ol>
<li class="lvl-3">
<p>颜色</p>
</li>
<li class="lvl-3">
<p>文本对齐方式</p>
</li>
<li class="lvl-3">
<p>首行缩进</p>
</li>
<li class="lvl-3">
<p>行高</p>
</li>
<li class="lvl-3">
<p>装饰</p>
</li>
</ol>
<p>文本的属性</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left">字体颜色</td>
</tr>
<tr>
<td style="text-align:left">text-align</td>
<td style="text-align:left">文本对齐方式</td>
</tr>
<tr>
<td style="text-align:left">text-indent</td>
<td style="text-align:left">首行缩进</td>
</tr>
<tr>
<td style="text-align:left">text-decoration</td>
<td style="text-align:left">文本修饰</td>
</tr>
<tr>
<td style="text-align:left">text-transform</td>
<td style="text-align:left">文本转换</td>
</tr>
<tr>
<td style="text-align:left">letter-spacing</td>
<td style="text-align:left">字符间距</td>
</tr>
<tr>
<td style="text-align:left">word-spacing</td>
<td style="text-align:left">单词间距</td>
</tr>
<tr>
<td style="text-align:left">line-height</td>
<td style="text-align:left">行高</td>
</tr>
</tbody>
</table>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">    <span class="attribute">font</span>: italic small-caps bold <span class="number">16px</span> <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<style>
.p1 {
    font-family: "Times New Roman", Times, serif;
    font-size: 16px;
    font-weight: bold;
    font-style: italic;
    font-variant: small-caps;
    font: italic small-caps bold 16px "Times New Roman", Times, serif;
    color: #ff0000;
    text-align: center;
    text-indent: 2em;
    text-decoration: underline;
    text-transform: uppercase;
    letter-spacing: 2px;
    word-spacing: 2px;
    line-height: 2em;
}
</style>
<p class="p1">I can eat glass, it does not hurt me.</p>
<h2 id="超链接伪类">超链接伪类</h2>
<h3 id="链接伪类">链接伪类</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>;&#125; <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>;&#125; <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>;&#125; <span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>;&#125; <span class="comment">/* 选定的链接 */</span></span><br></pre></td></tr></table></figure>
<h3 id="列表样式">列表样式</h3>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navtest&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;titletest&quot;</span>&gt;</span>网页导航<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.taobao.com&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jd.com&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.tmall.com&quot;</span>&gt;</span>天猫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.titletest</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none; <span class="comment">/* none 去掉圆点/circle 圆点/square 方块/decimal 数字 */</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#navtest</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a0a0a0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div id="navtest">
<style>
    .titletest {
    font-size: 20px;
    font-weight: bold;
    color: #00ff00;
    text-indent: 1em;
    line-height: 35px;
    background: red;
}
/* a:hover {
    color: orange;
    text-decoration: underline;
} */
# navtest {
    width: 200px;
    height: 200px;
    background: #a0a0a0;
}
</style>
<h4 class="titletest">网页导航</h4>
<ul style="background: #a0a0a0;">
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29t">百度<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvYmFvLmNvbQ==">淘宝<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cuamQuY29t">京东<i class="fa fa-external-link-alt"></i></span></li>
    <li style="height: 30px;list-style: none;text-indent: 1em;"><span class="exturl" data-url="aHR0cHM6Ly93d3cudG1hbGwuY29t">天猫<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</div>
<hr>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅 6</title>
    <url>/2023/03/26/1/</url>
    <content><![CDATA[<h2 id="overflow以及父级边框塌陷问题">overflow以及父级边框塌陷问题</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clear</span>: both; //清除浮动</span><br><span class="line"><span class="attribute">clear</span>: left; //清除左浮动</span><br><span class="line"><span class="attribute">clear</span>: right; //清除右浮动</span><br><span class="line"><span class="attribute">clear</span>: none; //默认值，不清除浮动</span><br><span class="line"><span class="attribute">overflow</span>: hidden; //隐藏溢出的内容</span><br><span class="line"><span class="attribute">overflow</span>: auto; //自动出现滚动条</span><br><span class="line"><span class="attribute">overflow</span>: scroll; //强制出现滚动条</span><br><span class="line"><span class="attribute">overflow</span>: visible; //默认值，内容不会被修剪，会呈现在元素框之外</span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span>: inline-block; //使元素呈现为行内块元素</span><br><span class="line"><span class="attribute">display</span>: block; //使元素呈现为块级元素</span><br><span class="line"><span class="attribute">display</span>: inline; //使元素呈现为行内元素</span><br><span class="line"><span class="attribute">display</span>: none; //使元素不可见</span><br><span class="line"></span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>; //用于生成内容</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>浮动元素后加空div清除浮动</p>
</li>
<li class="lvl-3">
<p>父级元素加overflow(不推荐)</p>
</li>
<li class="lvl-3">
<p>设置父级元素的高度</p>
</li>
<li class="lvl-3">
<p>父级元素加伪元素(推荐)</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="定位">定位</h2>
<h3 id="相对定位">相对定位</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: relative; //相对定位</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>; //向下偏移<span class="number">10px</span></span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">10px</span>; //向上偏移<span class="number">10px</span></span><br><span class="line"><span class="attribute">left</span>: <span class="number">10px</span>; //向右偏移<span class="number">10px</span></span><br><span class="line"><span class="attribute">right</span>: <span class="number">10px</span>; //向左偏移<span class="number">10px</span></span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#first</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#second</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#third</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>third<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<style>
# boxtest1 {
    width: 100px;
    height: 100px;
    background-color: black;
    position: relative;
    top: 10px;
    left: 10px;
    margin: 10px;
    padding: 5px;
    line-height: 25px;
    color: white;
    text-align: center;
}
# first {
    border: 1px solid red;
}
# second {
    border: 1px solid blue;
}
# third {
    border: 1px solid green;
}
</style>
<div id="boxtest1">
<div id="first">first</div>
<div id="second">second</div>
<div id="third">third</div>
</div>
<hr>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest2</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ffa1f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa2</span>,<span class="selector-class">.testa4</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa5</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa2&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.taobao.com&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa3&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jd.com&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa4&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.tmall.com&quot;</span>&gt;</span>天猫<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa5&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div hidden>hexo会错误加载带链接a标签的style，故用图片展示</div>
<div style="margin: 0 auto">
<img src="./CSS-Journey-6/images/01.png" alt="效果图" width="30%">
</div>
<hr>
<h3 id="绝对定位">绝对定位</h3>
<p>没有设置定位的元素，相对于浏览器的左上角进行定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute; //绝对定位</span><br></pre></td></tr></table></figure>
<h3 id="固定定位">固定定位</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: fixed; //固定定位</span><br></pre></td></tr></table></figure>
<h3 id="层叠定位">层叠定位</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: static; //层叠定位</span><br></pre></td></tr></table></figure>
<h3 id="Z-index">Z-index</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>; //<span class="attribute">z-index</span>值越大，层级越高</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest3</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ffa1f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest3</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa15</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.testa16</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: -<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;testa15&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">&quot;testa16&quot;</span> &gt;</span>ACG<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<style>
# boxtest3 {
    width: 100px;
    height: 100px;
    border: 2px solid red;
    background-color: white;
    position: relative;
    top: 10px;
    left: 10px;
    margin: 10px;
    padding: 5px;
    line-height: 30px;
    color: white;
    text-align: center;
}
# boxtest3 a {
    display: block;
    width: 100px;
    height: 100px;
    background-color: #ffa1f2;
    line-height: 100px;
    text-align: center;
    text-decoration: none;
    color: white;
}
# boxtest3 a:hover {
    background-color: #47a4ff;
}
.testa15 {
    position: relative;
}
.testa16 {
    position: relative;
    top: -30px;
    z-index: 1;
    color: white;
    background-color: #47a4ff;
}
</style>
<div id="boxtest3">
    <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29t">哔哩哔哩<i class="fa fa-external-link-alt"></i></span>
    <dt class="testa16">ACG</dt>
</div>
<hr>
<h3 id="透明度">透明度</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: <span class="number">0.5</span>; //透明度</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest4</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest4</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ffa1f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#boxtest4</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#47a4ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxtest4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<style>
# boxtest4 {
    width: 100px;
    height: 100px;
    border: 2px solid red;
    background-color: white;
    position: relative;
    top: 10px;
    left: 10px;
    margin: 10px;
    padding: 5px;
    line-height: 30px;
    color: white;
    text-align: center;
}
# boxtest4 a {
    display: block;
    width: 100px;
    height: 100px;
    background-color: #ffa1f2;
    line-height: 100px;
    text-align: center;
    text-decoration: none;
    color: white;
}
# boxtest4 a:hover {
    background-color: #47a4ff;
    opacity: 0.5;
}
</style>
<div id="boxtest4">
    <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29t">哔哩哔哩<i class="fa fa-external-link-alt"></i></span>
</div>
<hr>
<h2 id="CSS-动画">CSS 动画</h2>
<p>对于CSS动画，我们更倾向于使用JavaScript来实现，但是CSS动画也是有其优势的，比如说，当我们需要实现一个简单的动画效果，而且不需要太多的交互，那么CSS动画就是一个不错的选择。<br>对于初学者而言，我们一般会选择使用现成的css动画库，比如说animate.css，这个库里面包含了很多常用的动画效果，我们可以直接使用，而不需要自己去写css动画。</p>
<h2 id="CSS之旅到此结束">CSS之旅到此结束</h2>
<p>CSS之旅到此结束，我们已经学习了CSS的基础知识，以及CSS的一些高级知识，希望大家能够坚持下去，继续学习JavaScript，加油！</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之旅</title>
    <url>/2023/03/11/1/</url>
    <content><![CDATA[<h2 id="什么是CSS">什么是CSS</h2>
<p>CSS （Cascading Style Sheets，层叠样式表）是一种用来描述HTML元素样式的语言，它可以控制元素的字体、颜色、大小、位置等等。CSS是一种层叠样式表，它可以对同一个元素设置多个样式，而且后面的样式会覆盖前面的样式。CSS的样式可以通过内联、内部和外部三种方式来设置。</p>
<h2 id="CSS的发展史">CSS的发展史</h2>
<p>CSS的发展史可以分为三个阶段：CSS1、CSS2和CSS3。CSS1。1996年发布的，CSS2。1998年发布的，CSS3。2007年发布的。CSS3的发展速度比CSS1和CSS2都要快，CSS3的标准还在不断的更新中。CSS3的标准分为CSS3模块、CSS3选择器、CSS3背景和边框、CSS3文本效果、CSS3字体、CSS3颜色、CSS3盒模型、CSS3多列布局、CSS3视觉效果、CSS3动画、CSS3媒体查询、CSS3用户界面等模块。</p>
<blockquote>
<p>CSS1.0 1996年发布。<br>
CSS2.0 DIV+CSS布局的兼容性问题,HTML与CSS结构分离的优点，网页变得简。<br>
CSS2.1 添加了浮动、定位等。<br>
CSS3.0 3D转换、多列布局、多背景、边框图片、圆角、阴影、渐变、过渡、动画、媒体查询等</p>
</blockquote>
<h2 id="CSS快速入">CSS快速入</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 规范。&lt;style&gt;标签可以编写CSS样式，每一个声明都是由一个属性和一个值组成，属性和值之间用冒号分隔，每个声明之间用分号分隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择器 &#123; 属性: 值; &#125; */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="存在于HTML文档中的CSS样式称为内联样式">存在于HTML文档中的CSS样式称为内联样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内联样式，通过style属性来设置元素的样。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Style标签内是CSS样式,CSS使用/**/注释</p>
</blockquote>
<p>e.g.</p>
<h4 style="color: red;">Hello World</h4>
<hr>
<h3 id="单独引入CSS文件-通过link标签来引入外部的CSS文件">单独引入CSS文件,通过link标签来引入外部的CSS文件</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部样式，通过link标签来引入外部的CSS文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单独引入CSS文件的优">单独引入CSS文件的优</h4>
<ol>
<li class="lvl-3">
<p>可以让HTML文档和CSS样式分离，让HTML文档更加简洁。</p>
</li>
<li class="lvl-3">
<p>可以让多个HTML文档共享同一个CSS样式文件。</p>
</li>
<li class="lvl-3">
<p>可以让CSS样式文件在不同的HTML文档中重复使用。</p>
</li>
</ol>
<h2 id="4种导入CSS样式的方">4种导入CSS样式的方</h2>
<h3 id="1-行内样式">1. 行内样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>行内样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>行内样式比较方便，但是不推荐使用，因为它会让HTML文档变得臃肿，不利于维护。</p>
</blockquote>
<h3 id="2-内部样式">2. 内部样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>内部样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-外部样式">3. 外部样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-导入样式">4. 导入样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>导入样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@import</span> url(<span class="string">&quot;style.css&quot;</span>);</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>导入样式的优点是可以让多个HTML文档共享同一个CSS样式文件，由CSS2.1引入，但是它的缺点是不支持IE5和IE5以下的浏览器。并且不利于网页渲染。</p>
</blockquote>
<h3 id="4种导入CSS样式的优先级">4种导入CSS样式的优先级</h3>
<p>行内样式 &gt; 内部样式 &gt; 外部样式 &gt; 导入样式</p>
<p>CSS优先级遵循就近原则，如果有多个样式同时作用于同一个元素，那么就近原则会决定哪个样式生效。</p>
<h2 id="CSS选择器">CSS选择器</h2>
<p>CSS选择器是用来选择HTML元素的，CSS选择器可以通过元素名称、类名、ID来选择HTML元素。CSS选择器可以通过标签选择器、类选择器、ID选择器、通配符选择器、后代选择器、子选择器、相邻兄弟选择器、通用兄弟选择器等来选择HTML元素。</p>
<h3 id="标签选择器">标签选择器</h3>
<blockquote>
<p>标签选择器是最常用的选择器，它可以通过标签名称来选择HTML元素。</p>
</blockquote>
<p>标签选择器会匹配所有的这个标签的HTML元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="类选择器">类选择器</h3>
<blockquote>
<p>类选择器是通过class属性来选择HTML元素的，类选择器可以通过一个或多个类名来选择HTML元素。</p>
</blockquote>
<p>类选择器会匹配所有的这个类名的HTML元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ID选择器">ID选择器</h3>
<blockquote>
<p>ID选择器是通过id属性来选择HTML元素的，ID选择器只能通过一个ID名来选择HTML元素。</p>
</blockquote>
<p>ID选择器只会匹配这个ID名的HTML元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>ID选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="选择器的优先">选择器的优先</h3>
<p>ID选择器 &gt; 类选择器 &gt; 标签选择器</p>
<p>参考视频：</p>
<iframe class="video-frame" src="//player.bilibili.com/player.html?aid=81109044&cid=138808880&autoplay=0&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 动画专题(上)</title>
    <url>/2023/10/19/1/</url>
    <content><![CDATA[<div class="note warning"><p>如果看不见内嵌网页或者连接错误，请刷新。</p>
</div>
<h2 id="浏览器私有前缀">浏览器私有前缀</h2>
<p>CSS3 新特性在实现时，由于不同浏览器的实现方式不同，所以会出现兼容性问题。为了解决这个问题，浏览器厂商会在实现新特性时，加上浏览器私有前缀，以示区别。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-webkit-：谷歌、Safari、iOS、Android</p>
</li>
<li class="lvl-2">
<p>-moz-：Firefox</p>
</li>
<li class="lvl-2">
<p>-ms-：IE</p>
</li>
<li class="lvl-2">
<p>-o-：Opera</p>
</li>
</ul>
<p>要使用一些实验性质的 CSS3 属性，需要加上浏览器私有前缀，比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个只是为了演示，实际上如今的浏览器都已经支持 <code>border-radius</code> 属性了，所以不需要加上浏览器私有前缀。</p>
<p>为了用户体验与兼容性，有时我们会使用上面这种写法，即先写上浏览器私有前缀，再写上标准写法，这样即使浏览器支持标准写法，也会优先使用标准写法，而不是浏览器私有前缀。</p>
<p>如果需要查询某个属性是否需要加上浏览器私有前缀，可以访问 <span class="exturl" data-url="aHR0cHM6Ly9jYW5pdXNlLmNvbS8=">caniuse<i class="fa fa-external-link-alt"></i></span> 网站。</p>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="selector-tag">text</span>-<span class="attribute">stroke</span>: <span class="number">1px</span> pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Soyo sann ❤️ Love!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div style="font-size: 25px; -webkit-text-stroke: 1px pink;">Soyo sann ❤️ Love!</div>
<p hidden>使用行内样式是不优雅的，但是这是为了 markdown 方便书写</p>
---
<h2 id="圆角边框">圆角边框</h2>
<p><code>border-radius</code> 属性用于设置元素的圆角边框。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>; // 设置四个角的圆角半径</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span>; // 设置左上角和右下角的圆角半径</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>; // 设置左上角、右上角和右下角的圆角半径</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>; // 设置左上角、右上角、右下角和左下角的圆角半径</span><br></pre></td></tr></table></figure>
<p>规律：顺时针方向，左上角开始，分别设置四个角的圆角半径。</p>
<h2 id="阴影">阴影</h2>
<blockquote>
<p>盒子阴影</p>
</blockquote>
<p><code>box-shadow</code> 属性用于设置元素的阴影。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>h-shadow：必需，水平阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>v-shadow：必需，垂直阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>blur：可选，模糊距离</p>
</li>
<li class="lvl-2">
<p>spread：可选，阴影的尺寸</p>
</li>
<li class="lvl-2">
<p>color：可选，阴影的颜色</p>
</li>
<li class="lvl-2">
<p>inset：可选，将外部阴影（outset）改为内部阴影</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="width: 200px; height: 200px; background-color: pink; box-shadow: 10px 10px 10px 10px #000;"></div>
<hr>
<blockquote>
<p>文本阴影</p>
</blockquote>
<p><code>text-shadow</code> 属性用于设置文本的阴影。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>h-shadow：必需，水平阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>v-shadow：必需，垂直阴影的位置，允许负值</p>
</li>
<li class="lvl-2">
<p>blur：可选，模糊距离</p>
</li>
<li class="lvl-2">
<p>color：可选，阴影的颜色</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="font-size: 25px; text-shadow: 10px 10px 10px brown;">Soyo sann ❤️ Love!</div>
<p>文本阴影可以多次叠加，实现更加丰富的效果。具体使用时使用逗号分隔即可。</p>
<h2 id="渐变-Gradients">渐变 Gradients</h2>
<blockquote>
<p>线性渐变</p>
</blockquote>
<p><code>linear-gradient()</code> 函数用于设置线性渐变。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">linear-gradient(<span class="attribute">direction</span>, <span class="attribute">color</span>-stop1, <span class="attribute">color</span>-stop2, ...);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>direction：必需，渐变的方向，可以是角度值或者关键字，比如 <code>to left</code>、<code>to right</code>、<code>to top</code>、<code>to bottom</code>、<code>to left top</code>、<code>to right bottom</code> 等等</p>
</li>
<li class="lvl-2">
<p>color-stop：必需，渐变的起始颜色和结束颜色，可以是颜色值或者关键字，比如 <code>red</code>、<code>#000</code>、<code>rgb(0, 0, 0)</code>、<code>transparent</code> 等等</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, red, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="width: 200px; height: 200px; background-image: linear-gradient(to right, red, yellow);"></div>
<hr>
<blockquote>
<p>径向渐变</p>
</blockquote>
<p><code>radial-gradient()</code> 函数用于设置径向渐变。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">radial-gradient(shape size at <span class="attribute">position</span>, start-<span class="attribute">color</span>, ..., last-<span class="attribute">color</span>);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>shape：可选，渐变的形状，可以是 <code>circle</code> 或者 <code>ellipse</code>，默认是 <code>ellipse</code></p>
</li>
<li class="lvl-2">
<p>size：可选，渐变的大小，可以是 <code>closest-side</code>、<code>closest-corner</code>、<code>farthest-side</code>、<code>farthest-corner</code>，默认是 <code>farthest-corner</code></p>
</li>
<li class="lvl-2">
<p>at position：可选，渐变的位置，可以是 <code>center</code>、<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>，也可以是像素值或者百分比值，比如 <code>10px 20px</code>、<code>10% 20%</code> 等等</p>
</li>
<li class="lvl-2">
<p>start-color：必需，渐变的起始颜色</p>
</li>
<li class="lvl-2">
<p>last-color：可选，渐变的结束颜色</p>
</li>
</ul>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle, red, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="width: 200px; height: 200px; background-image: radial-gradient(circle, red, yellow);"></div>
<hr>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3JhYmllbnQuY29tLw==">Grabient<i class="fa fa-external-link-alt"></i></span> 网站可以在线生成渐变色。</p>
<h2 id="价格选项卡">价格选项卡</h2>
<details>
<summary>点击查看代码</summary>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span> <span class="selector-tag">li</span><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content active&quot;</span>&gt;</span>Content1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;---&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// $(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     $(&#x27;.tab li&#x27;).click(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         $(this).addClass(&#x27;active&#x27;).siblings().removeClass(&#x27;active&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         var index = $(this).index();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         $(&#x27;.content&#x27;).eq(index).addClass(&#x27;active&#x27;).siblings().removeClass(&#x27;active&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#125;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tabs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.tab li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> contents = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            tabs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">tab, index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                tab.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    tabs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">tab</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        tab.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    contents.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">content</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        content.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    contents[index].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="100%" height="300px" frameborder="0" scrolling="0" src="./html/optionalTab.html"></iframe>
</details>
<hr>
<h2 id="transform2D">transform2D</h2>
<blockquote>
<p>位移</p>
</blockquote>
<p><code>translate()</code> 函数用于设置元素的位移。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">translate</span>(<span class="attribute">x</span>, <span class="attribute">y</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>旋转</p>
</blockquote>
<p><code>rotate()</code> 函数用于设置元素的旋转。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rotate</span>(angle);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缩放</p>
</blockquote>
<p><code>scale()</code> 函数用于设置元素的缩放。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scale</span>(<span class="attribute">x</span>, <span class="attribute">y</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>倾斜</p>
</blockquote>
<p><code>skew()</code> 函数用于设置元素的倾斜。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">skew(<span class="attribute">x</span>-angle, <span class="attribute">y</span>-angle);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>矩阵</p>
</blockquote>
<p><code>matrix()</code> 函数用于设置元素的变形。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">matrix(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c, d, e, f);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>a：必需，水平缩放</p>
</li>
<li class="lvl-2">
<p>b：必需，水平倾斜</p>
</li>
<li class="lvl-2">
<p>c：必需，垂直倾斜</p>
</li>
<li class="lvl-2">
<p>d：必需，垂直缩放</p>
</li>
<li class="lvl-2">
<p>e：必需，水平位移</p>
</li>
<li class="lvl-2">
<p>f：必需，垂直位移</p>
</li>
</ul>
<hr>
<p>e.g. 1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform2D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.translate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.rotate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.scale</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.skew</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>, <span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.matrix</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">matrix</span>(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;translate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rotate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scale&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skew&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;matrix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g. 2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform2D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: brown solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 放大 1.5 倍 */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*内容旋转 1 周*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>Soyo sann ❤️ Love!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="300px" height="350px" frameborder="0" scrolling="0" src="./html/transform2d.html"></iframe>
<p><code>rotate</code> 和 <code>scale</code> 会覆盖 <code>translate</code>。并且，它们不能在同一个 <code>transform</code> 中，需要分开写。所以上面这个例子中，在第一个 <code>&lt;div id=&quot;box1&quot;&gt;</code> 中，使用了 <code>scale</code>;<br>
在第二个 <code>&lt;div id=&quot;box2&quot;&gt;</code> 中，使用了 <code>rotate</code>。这样就能实现鼠标悬停时，放大 1.5 倍，且旋转 1 周的效果了。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 动画专题(下)</title>
    <url>/2023/10/19/2/</url>
    <content><![CDATA[<div class="note warning"><p>如果看不见内嵌网页或者连接错误，请刷新。</p>
</div>
<h2 id="transform3D">transform3D</h2>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1mdW5jdGlvbi90cmFuc2xhdGUzZA==">translate3d()<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>常用函数</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>translate3d(x, y, z)</td>
<td>定义 3D 转换，元素从当前位置移动到 (x,y,z)。</td>
</tr>
<tr>
<td>translateX(x)</td>
<td>定义 3D 转换，元素从当前位置水平移动到 x。</td>
</tr>
<tr>
<td>translateY(y)</td>
<td>定义 3D 转换，元素从当前位置垂直移动到 y。</td>
</tr>
<tr>
<td>translateZ(z)</td>
<td>定义 3D 转换，元素从当前位置移动到 z。</td>
</tr>
<tr>
<td>rotate3d(x, y, z, angle)</td>
<td>定义 3D 转换，元素围绕 (x,y,z) 轴移动到 angle。</td>
</tr>
<tr>
<td>rotateX(angle)</td>
<td>定义 3D 转换，元素围绕 x 轴移动到 angle。</td>
</tr>
<tr>
<td>rotateY(angle)</td>
<td>定义 3D 转换，元素围绕 y 轴移动到 angle。</td>
</tr>
<tr>
<td>rotateZ(angle)</td>
<td>定义 3D 转换，元素围绕 z 轴移动到 angle。</td>
</tr>
<tr>
<td>scale3d(x, y, z)</td>
<td>定义 3D 缩放转换，元素从当前尺寸缩放到 (x,y,z)。</td>
</tr>
<tr>
<td>scaleX(x)</td>
<td>定义 3D 缩放转换，元素从当前尺寸水平缩放到 x。</td>
</tr>
<tr>
<td>scaleY(y)</td>
<td>定义 3D 缩放转换，元素从当前尺寸垂直缩放到 y。</td>
</tr>
<tr>
<td>scaleZ(z)</td>
<td>定义 3D 缩放转换，元素从当前尺寸缩放到 z。</td>
</tr>
<tr>
<td>perspective(n)</td>
<td>为 3D 转换元素定义透视视图。</td>
</tr>
</tbody>
</table>
<p>从上表可以看出，3D 转换的函数和 2D 转换的函数是一样的，只是多了一个 z 轴的参数。<br>
<code>transform3D</code> 主要是 3 个参数：<code>translate3d</code>、<code>rotate3d</code>、<code>scale3d</code>。</p>
<p>e.g. 1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform3D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.translate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.rotate</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.scale</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;translate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rotate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scale&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>e.g. 2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transform3D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: brown solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 放大 1.5 倍 */</span></span></span><br><span class="line"><span class="language-css">                <span class="comment">/*transform: scale3d(1.5, 1.5, 1.5);*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">100px</span>) <span class="built_in">scale3d</span>(<span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*在这里添加一个过渡效果*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*内容旋转 1 周*/</span></span></span><br><span class="line"><span class="language-css">                <span class="comment">/*transform: rotate3d(1, 1, 1, 360deg);*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">100px</span>) <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>Soyo sann ❤️ Love!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="300px" height="350px" frameborder="0" scrolling="0" src="./html/transform3d.html"></iframe>
<p style="color: red">warn:<span style="color: white">如果看不见内嵌网页或者连接错误，请刷新。</span></p>
<p>通过上面这个例子，可以看出，3D 转换的函数和 2D 转换的函数是一样的，只是多了一个 z 轴的参数。</p>
<hr>
<h2 id="过渡属性">过渡属性</h2>
<p>过渡是元素从一种样式逐渐改变为另一种样式的效果。</p>
<ol>
<li class="lvl-3">
<p>指定四个要素</p>
<ol>
<li class="lvl-7">过渡属性，如 <code>background</code>、<code>width</code>、<code>height</code>、<code>color</code> 等等</li>
<li class="lvl-7">过渡时间，如 <code>1s</code>、<code>2s</code> 等等</li>
<li class="lvl-7">过渡函数，如 <code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code>、<code>ease-in-out</code> 等等</li>
<li class="lvl-7">延迟时间，如 <code>1s</code>、<code>2s</code> 等等</li>
</ol>
</li>
<li class="lvl-3">
<p>触发过渡通过用户的行为触发过渡，如 <code>:hover</code>、<code>:active</code>、<code>:focus</code> 等等</p>
</li>
</ol>
<blockquote>
<p>transition-property</p>
</blockquote>
<p><code>transition-property</code> 属性用于设置过渡效果的 CSS 属性的名称。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>: none|all|property;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>none：默认值，没有属性会获得过渡效果</p>
</li>
<li class="lvl-2">
<p>all：所有属性都将获得过渡效果</p>
</li>
<li class="lvl-2">
<p>property：定义应用过渡效果的 CSS 属性的名称列表</p>
</li>
</ul>
<blockquote>
<p>transition-duration</p>
</blockquote>
<p><code>transition-duration</code> 属性用于设置过渡效果的持续时间。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-duration</span>: time;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>time：必需，规定完成过渡效果需要花费的时间，以秒或毫秒计</p>
</li>
</ul>
<blockquote>
<p>transition-timing-function</p>
</blockquote>
<p><code>transition-timing-function</code> 属性用于设置过渡效果的速度曲线。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-timing-function</span>: linear|ease|ease-in|ease-out|ease-in-out|<span class="built_in">cubic-bezier</span>(n,n,n,n)|step-start|step-end|<span class="built_in">steps</span>(int,start|end)|initial|inherit;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>linear：默认值，规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）</p>
</li>
<li class="lvl-2">
<p>ease：规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）</p>
</li>
<li class="lvl-2">
<p>ease-in：规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）</p>
</li>
<li class="lvl-2">
<p>ease-out：规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）</p>
</li>
<li class="lvl-2">
<p>ease-in-out：规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）</p>
</li>
<li class="lvl-2">
<p>cubic-bezier(n,n,n,n)：在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值</p>
</li>
<li class="lvl-2">
<p>step-start：规定在开始时立即过渡到目标值，没有过渡效果（等于 steps(1,start)）</p>
</li>
<li class="lvl-2">
<p>step-end：规定在结束时立即过渡到目标值，没有过渡效果（等于 steps(1,end)）</p>
</li>
<li class="lvl-2">
<p>steps(int,start|end)：规定在指定的百分比处发生指定的过渡效果。可能的值是 0 至 1 之间的数值，以及 start 和 end</p>
</li>
<li class="lvl-2">
<p>initial：设置该属性为它的默认值</p>
</li>
<li class="lvl-2">
<p>inherit：从父元素继承该属性</p>
</li>
</ul>
<blockquote>
<p>transition-delay</p>
</blockquote>
<p><code>transition-delay</code> 属性用于设置过渡效果的延迟时间。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-delay</span>: time;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>time：必需，规定过渡效果何时开始，以秒或毫秒计</p>
</li>
</ul>
<hr>
<p>e.g.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Transition<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*transition: all 1s;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡属性*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-property</span>: width, height, background-color, font-size, color;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡时间*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡函数*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-timing-function</span>: ease-in-out;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*过渡延迟*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: royalblue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Soyo sann ❤️ Love!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe width="100%" height="400px" frameborder="0" scrolling="0" src="./html/transition.html"></iframe>
<p style="color: red">warn:<span style="color: white">如果看不见内嵌网页或者连接错误，请刷新。</span></p>
<hr>
<p>我们还可以使用 <code>transition</code> 属性来简写上面的代码。</p>
<p>比如<code>transition: width 1s ease-in-out 1s, height 1s ease-in-out 1s, background-color 1s ease-in-out 1s, font-size 1s ease-in-out 1s, color 1s ease-in-out 1s;</code>。</p>
<p>如果不需要精准控制，可以使用 <code>all</code> 来简写，比如 <code>transition: all 1s ease-in-out 1s;</code>。</p>
<h2 id="动画-Animation">动画 Animation</h2>
<p>过渡属性只能实现简单的动画效果，如果需要实现复杂的动画效果，就需要使用动画属性了。</p>
<p><code>animation</code> 属性用于设置动画效果。通过<mark>关键帧</mark>控制动画的每一步，通过<mark>动画属性</mark>控制动画的播放方式。</p>
<blockquote>
<p>@keyframes</p>
</blockquote>
<p><code>@keyframes</code> 规则用于创建动画。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> animationname &#123;</span><br><span class="line">    keyframes-selector &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name &#123;</span><br><span class="line">    <span class="selector-tag">from</span>|<span class="number">0%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">75%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>|<span class="number">100%</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>animation 属性</p>
</blockquote>
<p><code>animation</code> 属性用于设置动画效果。</p>
<p>调用 <code>@keyframes</code> 规则中定义的动画。设置动画的持续时间、速度曲线、延迟等等。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: name duration timing-function delay iteration-count direction;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>name：必需，规定需要绑定到选择器的 keyframe 名称</p>
</li>
<li class="lvl-2">
<p>duration：必需，规定完成动画所花费的时间，以秒或毫秒计</p>
</li>
<li class="lvl-2">
<p>timing-function：可选，规定动画的速度曲线，默认是 <code>ease</code></p>
</li>
<li class="lvl-2">
<p>delay：可选，规定在动画开始之前的延迟，默认是 <code>0</code></p>
</li>
<li class="lvl-2">
<p>iteration-count：可选，规定动画应该播放的次数，默认是 <code>1</code></p>
</li>
<li class="lvl-2">
<p>direction：可选，规定是否应该轮流反向播放动画，默认是 <code>normal</code></p>
</li>
</ul>
<hr>
<p>e.g. banner 轮播图</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Banner<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#banner</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*display: flex;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: center;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*align-items: center;*/</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: move <span class="number">12s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: move <span class="number">12s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">6s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">8s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">20%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">80%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_tomori.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tomori&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_anon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;anon&quot;</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_rana.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;rana&quot;</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_soyo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;soyo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://anime.bang-dream.com/mygo/wordpress/wp-content/themes/mygo_v1/assets/images/common/character/img_taki.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;taki&quot;</span> <span class="attr">id</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="./html/animation.html" target="_blank">点击查看效果</a></p>
<p style="color: red">warn:<span style="color: white">如果看不见内嵌网页或者连接错误，请刷新。</span></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>⟪天使な小生意気⟫ 专题现已推出！</title>
    <url>/2024/03/26/1/</url>
    <content><![CDATA[<h2 id="专题现已推出">专题现已推出</h2>
<p>这部让我感触颇深的作品，我为此专门开设了一个专题！</p>
<div class="note default"><p><a href="/html/application/a-cheeky-angel/">点击这里查看专题</a></p>
</div>
<p><img src="./Tenshinakonamaiki.webp" alt></p>
<hr>
<h2 id="更新">更新</h2>
<p>3.15 更新</p>
<p>基本路由和页面的搭建资源页面的搭建</p>
<p>3.18 更新</p>
<p>Markdown 查看实现</p>
<p>3.22 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>概要</p>
</li>
<li class="lvl-2">
<p>问题</p>
</li>
</ul>
<p>3.23 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>关于</p>
</li>
<li class="lvl-2">
<p>评论01</p>
</li>
<li class="lvl-2">
<p>评论03</p>
</li>
</ul>
<p>更新 Markdown 的查看</p>
<p>3.26 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>评论02</p>
</li>
<li class="lvl-2">
<p>名场面以及伏笔01</p>
</li>
</ul>
<p>恢复暗色模式下 Markdown 的查看不正常的问题</p>
<p>3.31 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔02</p>
</li>
</ul>
<p>更新 MarkdownView 的实现</p>
<p>6.23 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔05</p>
</li>
</ul>
<p>6.24 更新</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔06</p>
</li>
</ul>
<p>11.6 更新</p>
<p>上个月去看的时候，发现这个专题的页面有问题，banner 图片加载不出来，因为这个是从日本一个同人社区直接取的图片，然而那个社区已经关闭了，所以这个图片也就加载不出来了。今天写博客记起这件事，就说明一下。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ほんとにごめんなさい！🥲</p>
</li>
</ul>
<p>24年 终了</p>
<p>25年</p>
<p>1.1 更新</p>
<p>今天想去再翻译几篇文章，结果发现原作者的网站炸了，好在有互联网档案馆，可以找到一些文章的备份</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>名场面以及伏笔07</p>
</li>
<li class="lvl-2">
<p>名场面以及伏笔08</p>
</li>
<li class="lvl-2">
<p>名场面以及伏笔09</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Cisco Packet Tracer 进行组网实验 1</title>
    <url>/2024/11/10/2/</url>
    <content><![CDATA[<h2 id="安装和汉化">安装和汉化</h2>
<ol>
<li class="lvl-3">下载安装包官网下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0YWNhZC5jb20vemgtY24vYWJvdXQvY29udGFjdC11cy9wYWNrZXQtdHJhY2Vy">Cisco Packet Tracer<i class="fa fa-external-link-alt"></i></span></li>
<li class="lvl-3">安装</li>
<li class="lvl-3">汉化</li>
</ol>
<p><img alt="Network Knowledge" src="https://www.netacad.com/sfa-assets/images/svg/netacad_logo_black.svg" decoding="async" width="128" height="128"></p>这个思科的模拟器，我制作了相关汉化<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1emhpaTA3MTgvQ2lzY28tUGFja2V0LVRyYWNlci1DaGluZXNl">Cisco-Packet-Tracer-Chinese<i class="fa fa-external-link-alt"></i></span>
<p>遵循项目中的 <code>README.md</code> 进行操作即可。</p>
<h2 id="组建对等网">组建对等网</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>2950-24</code> 交换机，两台 <code>PT-PC</code><br>
使用铜直通线连接交换机和电脑</p>
<p><img src="./%E7%BB%84%E5%BB%BA%E5%AF%B9%E7%AD%89%E7%BD%91.png" alt></p>
</li>
<li class="lvl-2">
<p>在配置页面配置 PC IP 地址</p>
<p>分别为192.168.2.1/192.168.2.2/192.168.2.3</p>
</li>
<li class="lvl-2">
<p>ping 测试</p>
<p>在 PC1 中 ping PC2 和 PC3，查看是否能够通信</p>
</li>
</ul>
<p>常见思科交换机命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span> <span class="comment"># 进入特权模式</span></span><br><span class="line">config -t <span class="comment"># 进入全局配置模式 -t 表示进入特定模式</span></span><br><span class="line">int f0/1 <span class="comment"># 进入接口配置模式</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出当前模式</span></span><br></pre></td></tr></table></figure>
<h2 id="跨交换机VLAN通信">跨交换机VLAN通信</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>2950-24</code> 交换机，4台 <code>PT-PC</code><br>
<code>PC1</code> 和 <code>PC2</code> 连接到 <code>Switch0</code>，<code>PC3</code> 和 <code>PC4</code> 连接到 <code>Switch1</code><br>
<code>PC</code> 与 <code>Switch</code> 之间使用铜直通线连接<br>
<code>Switch</code> 之间使用交叉线连接</p>
<p><img src="./%E8%B7%A8%E4%BA%A4%E6%8D%A2%E6%9C%BAVLAN%E9%80%9A%E4%BF%A1.png" alt></p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p><code>PC0</code> 为 <code>192.168.2.1</code><br>
<code>PC1</code> 为 <code>192.168.3.1</code><br>
<code>PC2</code> 为 <code>192.168.2.2</code><br>
<code>PC3</code> 为 <code>192.168.3.2</code></p>
</li>
<li class="lvl-2">
<p>ping 测试</p>
<p>在 <code>PC0</code> 中 ping <code>PC1</code> 和 <code>PC2</code>，查看是否能够通信</p>
</li>
<li class="lvl-2">
<p>配置 <code>VLAN</code></p>
<p>两台交换机分别配置 <code>VLAN</code>，并将 <code>PC</code> 分配到不同的 <code>VLAN</code> 中</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access <span class="comment"># 设置端口模式为访问模式</span></span><br><span class="line">switchport access vlan 10 <span class="comment"># 设置端口所属的 VLAN</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置 <code>Trunk</code> 端口</p>
<p>两台交换机之间的连接端口配置为 <code>Trunk</code> 端口</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有没有配置成功可以在图形界面上查看端口</p>
</blockquote>
</li>
<li class="lvl-2">
<p>ping 测试</p>
<p>在 <code>PC0</code> 中 ping <code>PC2</code>，查看是否能够通信在 <code>PC1</code> 中 ping <code>PC3</code>，查看是否能够通信</p>
</li>
<li class="lvl-2">
<p>模拟测试</p>
<p>在 <code>PC0</code> 中使用 <code>ping</code> 命令，在模拟器中查看数据包的传输过程（仅查看 ICMP 以提升效率）</p>
</li>
</ul>
<blockquote>
<p>trunk 端口是用来连接两台交换机的，可以传输多个 VLAN 的数据，而 access 端口只能传输一个 VLAN 的数据。</p>
</blockquote>
<h2 id="路由器和网关">路由器和网关</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置1台 <code>1841-Router</code>，2台 <code>PT-PC</code><br>
<code>PC0</code> 和 <code>PC1</code> 使用铜交叉线连接到 <code>Router</code></p>
<p><img src="./%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E5%85%B3.png" alt></p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
<p>FastEthernet0/0 为 <code>192.168.2.1</code><br>
FastEthernet0/1 为 <code>192.168.3.1</code></p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p><code>PC0</code> 为 <code>192.168.2.2</code><br>
<code>PC1</code> 为 <code>192.168.3.2</code></p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 网关</p>
<p><code>PC0</code> 的网关为 <code>192.168.2.1</code><br>
<code>PC1</code> 的网关为 <code>192.168.3.1</code></p>
</li>
<li class="lvl-2">
<p>ping 测试在 <code>PC0</code> 中 ping <code>PC1</code>，查看是否能够通信</p>
</li>
</ul>
<blockquote>
<p>路由器是用来连接不同网络的设备，可以实现不同网络之间的通信。网关(Gateway)是用来连接不同网络的设备，可以实现不同网络之间的通信。</p>
</blockquote>
<h2 id="单臂路由">单臂路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>2950-24</code> 交换机，两台 <code>PT-PC</code><br>
使用铜直通线连接交换机和电脑</p>
<p><img src="./%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>Switch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
<code>Switch0</code> 的 <code>f0/3</code> 端口连接到 <code>Router0</code> 的 <code>f0/0</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 192.168.1.1/24 网关 192.168.1.2<br>
PC1: 192.168.2.1/24 网关 192.168.2.2</p>
</li>
<li class="lvl-2">
<p>交换机划分 VLAN</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.1</span><br><span class="line">encapsulation dot1Q 10</span><br><span class="line">ip address 192.168.1.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.2</span><br><span class="line">encapsulation dot1Q 20</span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br><span class="line">show ip route</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping</p>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
</li>
</ul>
<h2 id="多层交换机路由">多层交换机路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置两台 <code>PT-PC</code>，1台 <code>3560-24PS</code> 多层交换机使用铜直通线连接交换机和电脑</p>
<p><img src="./%E5%A4%9A%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>MultilayerSwitch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>MultilayerSwitch0</code> 的 <code>f0/2</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 192.168.1.1/24 网关 192.168.1.2<br>
PC1: 192.168.2.1/24 网关 192.168.2.2</p>
</li>
<li class="lvl-2">
<p><code>MultilayerSwitch0</code> 配置</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/1</span><br><span class="line">no switchport</span><br><span class="line">ip address 192.168.1.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">no switchport</span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">show ip route</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping</p>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
</li>
</ul>
<h2 id="静态NAT配置">静态NAT配置</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>1841</code> 路由器，3台 <code>PT-PC</code>，1台 <code>2950-24</code> 交换机使用铜交叉线连接 <code>Router0</code> 和 <code>PC0</code><br>
使用铜直通线连接 <code>Switch0</code> 和 <code>PC1</code>, <code>PC2</code></p>
<p><img src="./%E9%9D%99%E6%80%81NAT%E9%85%8D%E7%BD%AE.png" alt></p>
<p>PC0 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/3</code> 端口<br>
<code>Switch0</code> 的 <code>f0/1</code> 端口连接到 <code>Router0</code> 的 <code>f0/1</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 20.20.20.1 网关 20.20.20.2<br>
PC1: 192.168.2.1 网关 192.168.2.2<br>
PC2: 192.168.3.1 网关 192.168.3.2</p>
</li>
<li class="lvl-2">
<p>交换机划分 VLAN</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode trunk</span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line">int f0/3</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 20.20.20.2</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.1</span><br><span class="line">encapsulation dot1Q 10</span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.2</span><br><span class="line">encapsulation dot1Q 20</span><br><span class="line">ip address 192.168.3.2 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在路由器配置静态NAT</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int f0/0</span><br><span class="line">ip nat outside</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">ip nat inside</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip nat inside <span class="built_in">source</span> static 192.168.2.1 20.20.20.3</span><br><span class="line">ip nat inside <span class="built_in">source</span> static 192.168.3.1 20.20.20.4</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">show ip nat translations</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>测试</p>
<p>在内网任意一台 <code>PC</code> 上 ping 外网 <code>PC0</code></p>
</li>
</ul>
<h2 id="注意事项1">注意事项1</h2>
<ol>
<li class="lvl-3">
<p>交换机的 <code>Trunk</code> 端口用于连接两台交换机，可以传输多个 <code>VLAN</code> 的数据。</p>
</li>
<li class="lvl-3">
<p>交换机的 <code>Access</code> 端口用于连接 <code>PC</code>，只能传输一个 <code>VLAN</code> 的数据。</p>
</li>
<li class="lvl-3">
<p>通常，路由器的端口默认是关闭的，需要手动打开。</p>
</li>
<li class="lvl-3">
<p>静态路由是在路由器上手动配置的路由，用于指定到达目的网络的下一跳地址。</p>
</li>
<li class="lvl-3">
<p>NAT 配置时，<code>inside</code> 表示内网，<code>outside</code> 表示外网</p>
</li>
<li class="lvl-3">
<p>配置 <code>NAT</code> 时，<code>inside</code> 的 <code>IP</code> 地址是内网 <code>IP</code> 地址，<code>outside</code> 的 <code>IP</code> 地址是外网 <code>IP</code> 地址</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>利用 Cisco Packet Tracer 进行组网实验 2</title>
    <url>/2024/12/21/1/</url>
    <content><![CDATA[<p><a href="/2024/11/10/2/">上文</a></p>
<p>前两个是设计题，后几个是应用题。</p>
<h2 id="配置Serial静态路由">配置Serial静态路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>Router-PT</code>，2台 <code>PT-PC</code><br>
<code>PC0</code> 和 <code>PC1</code> 使用铜交叉线连接到 <code>Router0</code><br>
<code>Router0</code> 和 <code>Router1</code> 使用<code>串行DCE</code>线连接</p>
<p><img src="./%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.png" alt></p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address [IP] [MASK]</span><br><span class="line">no shutdown</span><br></pre></td></tr></table></figure>
<p>路由器0左边配置为192.168.1.0网段</p>
<p>路由器0至路由器1配置为192.168.2.0网段</p>
<p>路由器1右边配置为192.168.3.0网段</p>
<p>路由器0 f0/0 为 <code>192.168.1.1/24</code><br>
路由器0 s2/0 为 <code>192.168.2.1/24</code><br>
路由器1 f0/0 为 <code>192.168.3.1/24</code><br>
路由器1 s2/0 为 <code>192.168.2.2/24</code></p>
</li>
<li class="lvl-2">
<p>使用IP配置工具分别配置PC0和PC1的IP和网关</p>
<p><code>PC0</code> 为 <code>192.168.1.2/24</code> 网关为 <code>192.168.1.1</code><br>
<code>PC1</code> 为 <code>192.168.3.2/24</code> 网关为 <code>192.168.3.1</code></p>
</li>
<li class="lvl-2">
<p>同步串行DCE线的时钟</p>
<p>在路由器与路由器之间使用串行DCE线连接时，需要同步时钟</p>
<p>鼠标指向线两端的三角形，会浮出时钟图标，则该路由器需要配置时钟</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int s2/0</span><br><span class="line">clock rate 64000</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置静态路由</p>
<p>在路由器中配置到达下一跳的路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route [目标网段] [子网掩码] [下一跳地址]</span><br></pre></td></tr></table></figure>
<p>路由器0</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip route 192.168.3.0 255.255.255.0 192.168.2.2</span><br></pre></td></tr></table></figure>
<p>路由器1</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip route 192.168.1.0 255.255.255.0 192.168.2.1</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟通信</p>
<p>在 <code>PC0</code> 中 ping <code>PC1</code>，查看是否能够通信</p>
<p>在模拟器中查看数据包的传输过程</p>
</li>
</ul>
<blockquote>
<p>静态路由是在路由器上手动配置的路由，用于指定到达目的网络的下一跳地址。</p>
</blockquote>
<h2 id="两层交换机路由">两层交换机路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>2960-24</code> 交换机，4台 <code>PT-PC</code>，1台 <code>1841</code> 路由器使用铜直通线连接交换机和电脑以及路由器</p>
<p><img src="./%E4%B8%A4%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>Switch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
PC2 连接到 <code>Switch1</code> 的 <code>f0/1</code> 端口<br>
PC3 连接到 <code>Switch1</code> 的 <code>f0/2</code> 端口<br>
<code>Switch0</code> 的 <code>f0/3</code> 端口连接到 <code>Router0</code> 的 <code>f0/0</code> 端口<br>
<code>Switch1</code> 的 <code>f0/3</code> 端口连接到 <code>Router0</code> 的 <code>f0/1</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 10.0.0.2/8 网关 10.0.0.1<br>
PC1: 20.0.0.2/8 网关 20.0.0.1<br>
PC2: 30.0.0.2/8 网关 30.0.0.1<br>
PC3: 40.0.0.2/8 网关 40.0.0.1</p>
</li>
<li class="lvl-2">
<p><code>Switch0</code> 和 <code>Switch1</code> 划分 VLAN</p>
<p><code>Switch0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
<p><code>Switch1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 30</span><br><span class="line">name vlan30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 40</span><br><span class="line">name vlan40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.1</span><br><span class="line">encapsulation dot1Q 10</span><br><span class="line">ip address 10.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0.2</span><br><span class="line">encapsulation dot1Q 20</span><br><span class="line">ip address 20.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.3</span><br><span class="line">encapsulation dot1Q 30</span><br><span class="line">ip address 30.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1.4</span><br><span class="line">encapsulation dot1Q 40</span><br><span class="line">ip address 40.0.0.1 255.0.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping<br>
PC2 ping<br>
PC3 ping</p>
</li>
</ul>
<h2 id="三层交换机双臂路由">三层交换机双臂路由</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>2960-24</code> 交换机，4台 <code>PT-PC</code>，1台 <code>3560-24PS</code> 三层交换机使用铜直通线连接交换机和电脑</p>
<p><img src="./%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%8F%8C%E8%87%82%E8%B7%AF%E7%94%B1.png" alt></p>
<p>PC0 连接到 <code>Switch0</code> 的 <code>f0/1</code> 端口<br>
PC1 连接到 <code>Switch0</code> 的 <code>f0/2</code> 端口<br>
PC2 连接到 <code>Switch1</code> 的 <code>f0/1</code> 端口<br>
PC3 连接到 <code>Switch1</code> 的 <code>f0/2</code> 端口<br>
<code>Switch0</code> 的 <code>f0/3</code> 端口连接到 <code>MultilayerSwitch0</code> 的 <code>f0/1</code> 端口<br>
<code>Switch1</code> 的 <code>f0/3</code> 端口连接到 <code>MultilayerSwitch0</code> 的 <code>f0/2</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 10.0.0.2/8 网关 10.0.0.1<br>
PC1: 20.0.0.2/8 网关 20.0.0.1<br>
PC2: 30.0.0.2/8 网关 30.0.0.1<br>
PC3: 40.0.0.2/8 网关 40.0.0.1</p>
</li>
<li class="lvl-2">
<p><code>MultilayerSwitch0</code> 划分 VLAN</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 10</span><br><span class="line">ip address 10.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 20</span><br><span class="line">ip address 20.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 30</span><br><span class="line">ip address 30.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 40</span><br><span class="line">ip address 40.0.0.1 255.0.0.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip routing</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p><code>Switch0</code> 和 <code>Switch1</code> 划分 VLAN</p>
<p><code>Switch0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line">name vlan10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line">name vlan20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>
<p><code>Switch1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 30</span><br><span class="line">name vlan30</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 40</span><br><span class="line">name vlan40</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/2</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/3</span><br><span class="line">switchport mode trunk</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>模拟模式中使用 IMCP 协议进行 ping 测试</p>
<p>PC0 ping<br>
PC1 ping<br>
PC2 ping<br>
PC3 ping</p>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
</li>
</ul>
<h2 id="自动-DHCP-配置">自动 DHCP 配置</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>PT-Router</code> 路由器，2台 <code>PT-PC</code><br>
使用铜交叉线连接 <code>Router</code> 和 <code>PC</code><br>
使用串行DCE线连接两台 <code>Router</code></p>
<p><img src="./%E8%87%AA%E5%8A%A8DHCP%E9%85%8D%E7%BD%AE.png" alt></p>
<p>PC0 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口<br>
PC1 连接到 <code>Router1</code> 的 <code>f0/0</code> 端口<br>
<code>Router0</code> 的 <code>s2/0</code> 连接到 <code>Router1</code> 的 <code>s2/0</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 172.16.0.1 255.255.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.2 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>DCE 线配置</p>
<p>找到有时钟标记的 <code>Router</code>，在该 <code>Router</code> 上配置 <code>DCE</code> 线</p>
<p><code>Router</code> :</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int s2/0</span><br><span class="line">clock rate 64000</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 之间的路由</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 172.16.0.0 255.255.0.0 192.168.20.2</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 192.168.1.0 255.255.255.0 192.168.20.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip dhcp pool LAN1</span><br><span class="line">network 192.168.1.0 255.255.255.0</span><br><span class="line">default-router 192.168.1.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router1</code> 上配置 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip dhcp pool LAN2</span><br><span class="line">network 172.16.0.0 255.255.0.0</span><br><span class="line">default-router 172.16.0.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>PC 配置</p>
<p>PC0: <code>DHCP</code><br>
PC1: <code>DHCP</code></p>
</li>
<li class="lvl-2">
<p>测试</p>
<p>PC0 ping PC1</p>
</li>
</ul>
<h2 id="中继代理-DHCP-配置">中继代理 DHCP 配置</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置2台 <code>PT-Router</code> 路由器，2台 <code>PT-PC</code><br>
使用铜交叉线连接 <code>Router</code> 和 <code>PC</code><br>
使用串行DCE线连接两台 <code>Router</code></p>
<p><img src="./%E4%B8%AD%E7%BB%A7%E4%BB%A3%E7%90%86DHCP.png" alt></p>
<p>PC0 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口 网段 192.168.1.0<br>
PC1 连接到 <code>Router1</code> 的 <code>f0/0</code> 端口 网段 172.16.0.0<br>
<code>Router0</code> 的 <code>s2/0</code> 连接到 <code>Router1</code> 的 <code>s2/0</code> 端口 网段 192.168.20.0</p>
<p><code>Router0</code> 自动 DHCP 服务，<code>Router1</code> 中继代理 DHCP 服务</p>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 的 <code>IP</code> 地址</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip address 172.16.0.1 255.255.0.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.20.2 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>DCE 线配置</p>
<p>找到有时钟标记的 <code>Router</code>，在该 <code>Router</code> 上配置 <code>DCE</code> 线</p>
<p><code>Router</code> :</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int s2/0</span><br><span class="line">clock rate 64000</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>配置 <code>Router</code> 之间的路由</p>
<p><code>Router0</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 172.16.0.0 255.255.0.0 192.168.20.2</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>Router1</code>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip route 192.168.1.0 255.255.255.0 192.168.20.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">ip dhcp pool LAN1</span><br><span class="line">network 192.168.1.0 255.255.255.0</span><br><span class="line">default-router 192.168.1.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ip dhcp pool LAN2</span><br><span class="line">network 172.16.0.0 255.255.0.0</span><br><span class="line">default-router 172.16.0.1</span><br><span class="line">dns-server 1.1.1.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router1</code> 上配置 中继代理 <code>DHCP</code> 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">service dhcp</span><br><span class="line">int f0/0</span><br><span class="line">ip helper-address 192.168.20.1</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p><code>ip helper-address</code> 用于将广播的 DHCP 请求转发到指定的 DHCP 服务器</p>
</li>
<li class="lvl-2">
<p>测试</p>
<p>PC0 ping PC1</p>
</li>
</ul>
<h2 id="访问控制列表">访问控制列表</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>画出基本的网络拓扑，然后进行配置。</p>
<p>放置一台 <code>1841</code> 路由器，两台 <code>PT-PC</code>，1台 <code>Server-PT</code> 服务器使用铜交叉线连接交换机和电脑以及服务器</p>
<p><img src="./%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8.png" alt><br>
对 <code>Router0</code> 进行改装，增加2个 <code>WIC-1NET</code> 模块，或者 <code>WIC-4ESW</code> 模块，本次使用 <code>WIC-4ESW</code> 模块<br>
PC0 连接到 <code>Router0</code> 的 <code>fa0/0/0</code> 端口<br>
PC1 连接到 <code>Router0</code> 的 <code>fa0/0/1</code> 端口<br>
<code>Server0</code> 连接到 <code>Router0</code> 的 <code>f0/0</code> 端口</p>
</li>
<li class="lvl-2">
<p>配置 <code>PC</code> 的 <code>IP</code> 地址</p>
<p>PC0: 192.168.2.2/24 网关 192.168.2.1<br>
PC1: 192.168.3.2/24 网关 192.168.3.1<br>
Server0: 192.168.4.2/24 网关 192.168.4.1</p>
</li>
<li class="lvl-2">
<p>配置路由</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">vlan 10</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vlan 20</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0/0</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 10</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0/1</span><br><span class="line">switchport mode access</span><br><span class="line">switchport access vlan 20</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 10</span><br><span class="line">ip address 192.168.2.1 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int vlan 20</span><br><span class="line">ip address 192.168.3.1 255.255.255.0</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">int f0/0</span><br><span class="line">ip address 192.168.4.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置拒绝192.168.2.0网段的机子访问服务器。(ftp ping web-server 都不通)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">configure terminal</span><br><span class="line">access-list 101 deny ip 192.168.2.0 0.0.0.255 host 192.168.4.2</span><br><span class="line">access-list 101 permit ip any any</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 上配置禁止192.168.3.0网段的机子访问服务器的HTTP服务(<code>http://192.168.4.2</code>)，其他服务正常(可以 ftp ping)。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">access-list 102 deny tcp 192.168.3.0 0.0.0.255 host 192.168.4.2 eq www</span><br><span class="line">access-list 102 permit ip any any</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>Router0</code> 启用访问控制列表</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">config -t</span><br><span class="line">int f0/0</span><br><span class="line">ip access-group 101 out</span><br><span class="line">ip access-group 102 out</span><br></pre></td></tr></table></figure>
<blockquote>
<p>in 表示进入接口，out 表示出接口，服务器在 f0/0 端口，是出接口，是外部访问，所以使用 out</p>
</blockquote>
</li>
<li class="lvl-2">
<p>查看访问控制列表</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show access-list</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>实体环境中测试</p>
<p>PC0 ping<br>
PC1 ping<br>
PC1 访问 <code>Server0</code> 的 <code>HTTP</code> 服务（使用 Web 浏览器访问 <code>192.168.4.2</code>）</p>
</li>
</ul>
<h2 id="注意事项">注意事项</h2>
<ol>
<li class="lvl-3">
<p>相同设备用交叉线连接，不同设备用直通线连接。比如 <code>PC</code> 和 <code>Router</code> 之间用交叉线连接，<code>Router</code> 之间用直通线连接。PC 和交换机之间用直通线连接。</p>
</li>
<li class="lvl-3">
<p>访问控制列表时，<code>permit</code> 表示允许，<code>deny</code> 表示拒绝</p>
</li>
<li class="lvl-3">
<p>访问控制列表时，<code>in</code> 表示进入接口，<code>out</code> 表示出接口</p>
</li>
<li class="lvl-3">
<p>访问控制列表时，<code>access-list</code> 后面的数字表示访问控制列表的编号</p>
</li>
<li class="lvl-3">
<p>多层交换机路由时，<code>no switchport</code> 表示将端口转换为路由端口</p>
</li>
<li class="lvl-3">
<p>三层交换机双臂路由时，<code>ip routing</code> 表示开启路由功能</p>
</li>
<li class="lvl-3">
<p>路由器的 <code>FastEthernet</code> 端口用于连接 <code>PC</code>，<code>Serial</code> 端口用于连接其他路由器。</p>
</li>
<li class="lvl-3">
<p>在连接两台路由器时，需要使用 <code>DCE</code> 线连接，并且需要配置时钟。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络杂记-01</title>
    <url>/2023/10/26/1/</url>
    <content><![CDATA[<h2 id="三种交换方式">三种交换方式</h2>
<ol>
<li class="lvl-3">电路交换</li>
<li class="lvl-3">报文交换</li>
<li class="lvl-3">分组交换</li>
</ol>
<h3 id="电路交换">电路交换</h3>
<p>电路交换是在通信双方通信之前，先建立一条物理通路，然后通信双方就可以通过这条物理通路进行通信。通信结束后，再释放这条物理通路。</p>
<p>电路交换的优点是通信质量高，缺点是通信双方独占物理通路，通信效率低。</p>
<h3 id="报文交换">报文交换</h3>
<p>报文交换是在通信双方通信之前，先建立一条逻辑通路，然后通信双方就可以通过这条逻辑通路进行通信。通信结束后，再释放这条逻辑通路。</p>
<p>报文交换的优点是通信效率高，缺点是通信质量低。</p>
<h3 id="分组交换">分组交换</h3>
<p>分组交换是在通信双方通信之前，先建立一条逻辑通路，然后通信双方就可以通过这条逻辑通路进行通信。通信结束后，再释放这条逻辑通路。</p>
<p>分组交换的优点是通信效率高，缺点是通信质量低。</p>
<h3 id="电路交换与报文交换的区别">电路交换与报文交换的区别</h3>
<p>电路交换与报文交换的区别在于，电路交换是在通信双方通信之前，先建立一条物理通路，然后通信双方就可以通过这条物理通路进行通信。通信结束后，再释放这条物理通路。而报文交换是在通信双方通信之前，先建立一条逻辑通路，然后通信双方就可以通过这条逻辑通路进行通信。通信结束后，再释放这条逻辑通路。</p>
<h2 id="计算机网络的定义">计算机网络的定义</h2>
<p>首先，计算机网络的定义并未统一。计算机网络的最简单的定义是：计算机网络是互连的、自治的计算机集合。这个定义的缺点是：计算机网络的定义过于简单，没有体现计算机网络的特点。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>互联：计算机网络是由若干计算机互联而成的。</p>
</li>
<li class="lvl-2">
<p>自治：计算机网络中的每台计算机都是自治的，即每台计算机都有自己的操作系统、软件、硬件等。</p>
</li>
<li class="lvl-2">
<p>集合：计算机网络中的每台计算机都是相互联系的，没有一台计算机是孤立的。</p>
</li>
</ul>
<p>还有一种较好的定义是：计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，而这些硬件并非专门为某个特定的目的而设计的。这些可编程的硬件能够用来传送多种不同类型的数据，并且能够<strong>支持广泛的和不断变化的应用</strong>。</p>
<h2 id="计算机网络的分类">计算机网络的分类</h2>
<p>按交换技术分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>电路交换</p>
</li>
<li class="lvl-2">
<p>报文交换</p>
</li>
<li class="lvl-2">
<p>分组交换</p>
</li>
</ul>
<p>按使用者分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>公用网</p>
</li>
<li class="lvl-2">
<p>专用网</p>
</li>
</ul>
<p>按传输介质分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>有线网络</p>
</li>
<li class="lvl-2">
<p>无线网络</p>
</li>
</ul>
<p>按网络的作用范围分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>广域网 WAN</p>
</li>
<li class="lvl-2">
<p>城域网 MAN</p>
</li>
<li class="lvl-2">
<p>局域网 LAN</p>
</li>
<li class="lvl-2">
<p>个域网 PAN</p>
</li>
</ul>
<p>按拓扑结构分类：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>总线型</p>
</li>
<li class="lvl-2">
<p>星型</p>
</li>
<li class="lvl-2">
<p>环型</p>
</li>
<li class="lvl-2">
<p>网状型</p>
</li>
</ul>
<h2 id="计算机网络性能指标">计算机网络性能指标</h2>
<table>
<thead>
<tr>
<th style="text-align:center">指标</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">速率</td>
<td style="text-align:left">传输数据的速率</td>
</tr>
<tr>
<td style="text-align:center">带宽</td>
<td style="text-align:left">传输数据的最高速率</td>
</tr>
<tr>
<td style="text-align:center">吞吐量</td>
<td style="text-align:left">单位时间内通过某个网络的数据量</td>
</tr>
<tr>
<td style="text-align:center">时延</td>
<td style="text-align:left">数据从网络的一端传送到另一端所需的时间</td>
</tr>
<tr>
<td style="text-align:center">时延带宽积</td>
<td style="text-align:left">传输数据的长度与带宽的乘积</td>
</tr>
<tr>
<td style="text-align:center">往返时间 RTT</td>
<td style="text-align:left">从发送方发送数据开始，到发送方收到来自接收方的确认总共经历的时间</td>
</tr>
<tr>
<td style="text-align:center">利用率</td>
<td style="text-align:left">信道有百分之多少时间是被利用的</td>
</tr>
<tr>
<td style="text-align:center">误码率</td>
<td style="text-align:left">传输错误的比特数与传输总比特数的比值</td>
</tr>
<tr>
<td style="text-align:center">丢包率</td>
<td style="text-align:left">传输丢失的数据包的比率</td>
</tr>
</tbody>
</table>
<blockquote>
<p>有关<strong>比特</strong>的相关知识</p>
</blockquote>
<p>8 bit = 1 Byte<br>
KB = 2^10 Byte<br>
MB = K<em>KB = 2^20 Byte<br>
GB = K</em>MB = 2^30 Byte<br>
TB = K<em>GB = 2^40 Byte<br>
PB = K</em>TB = 2^50 Byte</p>
<blockquote>
<p>有关<strong>速率</strong>的相关知识</p>
</blockquote>
<p>bit/s = bps<br>
kb/s = Kbps = 10^3 bps<br>
Mb/s = Mbps = 10^6 bps<br>
Gb/s = Gbps = 10^9 bps<br>
Tb/s = Tbps = 10^12 bps</p>
<p>注意，<code>b</code> 与 <code>B</code> 的区别，<code>b</code> 表示比特，<code>B</code> 表示字节。</p>
<blockquote>
<p>有关<strong>带宽</strong>的相关知识</p>
</blockquote>
<p>在模拟信号中，带宽是指信号的频带宽度，即信号的最高频率与最低频率之差。在数字信号中，带宽是指数字信号的速率，即单位时间内传送的比特数。(一般单位是Hz)</p>
<p>在计算机网络中，带宽是指网络中某一信道所能传送的<em>最高数据率</em>。带宽的单位是 bps。</p>
<p>上面的两种说法其实也存在密切联系。一条通信线路的带宽越大，它所能传送的信号频带宽度就越大，从而它所能传送的数字信号的速率也就越大。</p>
<blockquote>
<p>有关<strong>吞吐量</strong>的相关知识</p>
</blockquote>
<p>吞吐量常用于对网络的性能进行描述，它是指单位时间内通过某个网络的数据量。吞吐量的单位是 bps。</p>
<p>吞吐量受到网络带宽的限制，但是吞吐量与带宽并不相等。吞吐量是指单位时间内通过某个网络的数据量，而带宽是指网络中某一信道所能传送的最高数据率。</p>
<blockquote>
<p>有关<strong>时延</strong>的相关知识</p>
</blockquote>
<p>时延是指数据从网络的一端传送到另一端所需的时间。时延的单位是 s。</p>
<p>时延可以分为以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送时延：指从分组的第一个比特开始进入链路的传输所需的时间。</p>
</li>
<li class="lvl-2">
<p>传播时延：指从分组的第一个比特开始进入链路到该比特全部到达接收端所需的时间。</p>
</li>
<li class="lvl-2">
<p>处理时延：指分组在路由器或者主机中进行处理所需的时间。</p>
</li>
<li class="lvl-2">
<p>排队时延：指分组在经过路由器进行排队等待处理所需的时间。</p>
</li>
</ul>
<p>其中，发送时延、传播时延和处理时延是固定的，而排队时延是不固定的。</p>
<p>比如，数据块长度为 100 MB，信道宽度为 1 Mb/s，传送距离为 1000 km，计算出发送时延和传播时延。</p>
<p>发送时延：100 <em>2^20 b / 10^6 bps = 838.86 s<br>
传播时延：1000</em> 10^3 m / 2 * 10^8 m/s = 5 s</p>
<p>另一个例子，数据快长度为 1 B，信道宽度为 1 Mb/s，传送距离为 1000 km，计算出发送时延和传播时延。</p>
<p>发送时延：1 <em>8 b / 10^6 bps = 8</em> 10^-6 s<br>
传播时延：1000 <em>10^3 m / 2</em> 10^8 m/s = 0.005 s</p>
<p>所以，可以得出：发送时延 = 分组长度（bit）/ 信道带宽（bps）；传播时延 = 传输距离（m）/ 传播速率（m/s）。</p>
<blockquote>
<p>有关<strong>时延带宽积</strong>的相关知识</p>
</blockquote>
<p>时延带宽积是指传输数据的长度与带宽的乘积。时延带宽积的单位是 b。</p>
<p>链路的时延带宽积又称为<strong>以比特为单位的链路长度</strong>。</p>
<blockquote>
<p>有关往返时间<strong>RTT</strong>的相关知识</p>
</blockquote>
<p>RTT 是 Round Trip Time 的缩写，<br>
RTT 是指从发送方发送数据开始，到发送方收到来自接收方的确认总共经历的时间。RTT 的单位是 s。</p>
<p>在卫星链路中，RTT 通常是几百毫秒，而在光纤链路中，RTT 通常是几十毫秒。</p>
<blockquote>
<p>有关<strong>利用率</strong>的相关知识</p>
</blockquote>
<p>利用率是指信道有百分之多少时间是被利用的。利用率的单位是 %。</p>
<p>利用率分为两种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>信道利用率：指信道有百分之多少时间是被利用的。</p>
</li>
<li class="lvl-2">
<p>网络利用率：指网络有百分之多少时间是被利用的。</p>
</li>
</ul>
<p>某信道的利用率增大，意味着该信道的吞吐量增大，该信道引起的时延也就增大。所以，信道利用率并非越大越好。</p>
<p>用 D0 表示网络空闲时的时延，D 表示网络当前的时延，利用率 U 的计算公式为：</p>
<p>D = D0 / (1 - U)<br>
U = D0 / (D0 + D)</p>
<p>所以，当网络利用率 U 为 50% 时，D = 2 <em>D0。之后，当网络利用率 U 为 90% 时，D = 10</em> D0。所以不能让网络利用率过高。应该让网络利用率在合理的范围内。</p>
<blockquote>
<p>有关<strong>丢包率</strong>的相关知识</p>
</blockquote>
<p>丢包率是指传输丢失的数据包的比率。丢包率的单位是 %。</p>
<p>分组交换网络中，分组在传输过程中可能会丢失。丢包率是指传输丢失的数据包的比率。通常存在两种丢包的原因：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>信道出错：信道出错是指信道中的比特发生了错误，这种错误是由于信道噪声引起的。</p>
</li>
<li class="lvl-2">
<p>缓存溢出：缓存溢出是指路由器的缓存队列已满，而又有新的分组到达，这时就会发生缓存溢出。</p>
</li>
</ul>
<p>丢包率反映了网络的拥塞程度。丢包率越大，说明网络的拥塞程度越大。无拥塞时，丢包率为 0%；轻度拥塞可能在 1% ~ 4%；中度拥塞可能在 10% ~ 20%；重度拥塞可能在 50% ~ 100%。</p>
<h2 id="计算机网络的体系结构">计算机网络的体系结构</h2>
<h3 id="常见的体系结构">常见的体系结构</h3>
<p>为了使得不同体系结构的网络都能够互联，国际标准化组织 ISO 制定了一个通用的体系结构，即 OSI 体系结构。</p>
<h4 id="OSI-体系结构">OSI 体系结构</h4>
<p>包括了 7 层，分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用层</p>
</li>
<li class="lvl-2">
<p>表示层</p>
</li>
<li class="lvl-2">
<p>会话层</p>
</li>
<li class="lvl-2">
<p>传输层</p>
</li>
<li class="lvl-2">
<p>网络层</p>
</li>
<li class="lvl-2">
<p>数据链路层</p>
</li>
<li class="lvl-2">
<p>物理层</p>
</li>
</ul>
<h4 id="TCP-IP-体系结构">TCP/IP 体系结构</h4>
<p>包括了 4 层，分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用层</p>
</li>
<li class="lvl-2">
<p>传输层</p>
</li>
<li class="lvl-2">
<p>网络层（也称为网际层）</p>
</li>
<li class="lvl-2">
<p>网络接口层</p>
</li>
</ul>
<p>TCP/IP 是一个四层的体系结构，而 OSI 是一个七层的体系结构。TCP/IP 体系结构中的网络接口层相当于 OSI 体系结构中的数据链路层和物理层。</p>
<h4 id="原理体系结构">原理体系结构</h4>
<p>通常，为了方便学习，我们将 TCP/IP 体系结构中的网络接口层拆分为两层，分别是数据链路层和物理层。这样，TCP/IP 体系结构就变成了一个五层的体系结构，分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用层</p>
</li>
<li class="lvl-2">
<p>传输层</p>
</li>
<li class="lvl-2">
<p>网络层</p>
</li>
<li class="lvl-2">
<p>数据链路层</p>
</li>
<li class="lvl-2">
<p>物理层</p>
</li>
</ul>
<p>这是适用于教学的体系结构。</p>
<h3 id="分层的必要性">分层的必要性</h3>
<p><strong>分层</strong>可以将庞大而复杂的问题分解为若干个较小的问题，从而简化问题的解决过程。</p>
<p>我们面对的问题:</p>
<ol>
<li class="lvl-3">
<p>物理层：解决使用何种信号来传输比特的问题</p>
<ul class="lvl-2">
<li class="lvl-6">采用什么样的传输介质？</li>
<li class="lvl-6">采用什么样的编码方式？</li>
<li class="lvl-6">采用什么样的物理接口？</li>
</ul>
</li>
<li class="lvl-3">
<p>数据链路层：解决分组在一条链路上的传输问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何标识网络上的主机？</li>
<li class="lvl-6">如何将数据组织成帧？</li>
<li class="lvl-6">如何协调各主机争用信道的使用？</li>
</ul>
</li>
<li class="lvl-3">
<p>网络层：解决分组在多个网络上的传输问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何标识各网络以及主机？</li>
<li class="lvl-6">路由器如何转发分组？</li>
</ul>
</li>
<li class="lvl-3">
<p>传输层：解决进程之间的通信问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何保证端到端的可靠传输？</li>
<li class="lvl-6">如何保证端到端的流量控制？</li>
</ul>
</li>
<li class="lvl-3">
<p>应用层：解决应用进程之间的通信问题</p>
<ul class="lvl-2">
<li class="lvl-6">如何标识应用进程？</li>
<li class="lvl-6">如何实现不同主机上的应用进程之间的通信？</li>
</ul>
</li>
</ol>
<h3 id="专用术语解释">专用术语解释</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>实体：一个实体是指一个功能上相对独立的部分，它可以是一个硬件设备，也可以是一个软件模块。</p>
</li>
<li class="lvl-2">
<p>对等实体：两个相互通信的实体在同一层，它们之间的通信是水平的，也就是说，它们在通信时所起的作用是完全相同的。</p>
</li>
<li class="lvl-2">
<p>协议：协议是指通信双方就通信中要采取的步骤达成的一种约定。协议是对等实体间通信的规则的集合。</p>
</li>
<li class="lvl-2">
<p>协议三要素：语法、语义、协议</p>
<ul class="lvl-2">
<li class="lvl-4">语法：语法是指数据与控制信息的结构或格式。</li>
<li class="lvl-4">语义：语义是指需要发出何种控制信息以及完成何种动作。</li>
<li class="lvl-4">协议：协议是指在何种情况下发出何种控制信息以及完成何种动作。</li>
</ul>
</li>
<li class="lvl-2">
<p>协议是水平的，服务是垂直的。</p>
</li>
<li class="lvl-2">
<p>实体是看得见相邻下层所提供的服务的，看不见相邻上层所提供的服务的。也就是说，下面协议对上面协议是透明的，上面协议对下面协议是不透明的。</p>
</li>
<li class="lvl-2">
<p>服务访问点 SAP：服务访问点是指一个实体向协议栈中的某一层提出的服务请求的接口。</p>
<ul class="lvl-2">
<li class="lvl-4">数据链路层的服务访问点为帧的类型字段。</li>
<li class="lvl-4">网络层的服务访问点为 IP 地址。</li>
<li class="lvl-4">传输层的服务访问点为端口号。</li>
</ul>
</li>
<li class="lvl-2">
<p>协议数据单元 PDU：协议数据单元是指在协议的某一层中，信息的组成单位。</p>
<ul class="lvl-2">
<li class="lvl-4">数据链路层的协议数据单元为帧。</li>
<li class="lvl-4">网络层的协议数据单元为数据报。</li>
<li class="lvl-4">传输层的协议数据单元为报文段。</li>
</ul>
</li>
<li class="lvl-2">
<p>服务：服务是指一个实体向协议栈中的某一层提供的服务的接口。</p>
</li>
<li class="lvl-2">
<p>服务原语：服务原语是指一个实体向协议栈中的某一层提供的服务的接口。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-02</title>
    <url>/2023/10/30/1/</url>
    <content><![CDATA[<h2 id="网络体系中的物理层">网络体系中的物理层</h2>
<p>物理层的作用是：通过物理媒体传输比特流。</p>
<p>物理层协议的主要任务</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>机械特性：规定了物理连接器的形状、引脚数目、引脚的用途、固定器件的位置等。</p>
</li>
<li class="lvl-2">
<p>电气特性：规定了电压的高低、电平的定义、接口的电流等。</p>
</li>
<li class="lvl-2">
<p>功能特性：规定了接口的功能，如何检测和控制数据的流动，如何检测和控制数据的流动，如何检测和控制错误，如何同步等。</p>
</li>
<li class="lvl-2">
<p>过程特性：规定了通信的建立和拆除的步骤，如何管理通信线路等。</p>
</li>
</ul>
<h3 id="传输媒体">传输媒体</h3>
<p>传输媒体分为两大类：导引型传输媒体和非导引型传输媒体。</p>
<blockquote>
<p>导引型传输媒体</p>
</blockquote>
<p>又称为有线传输媒体，是指能够传输电磁波的传输媒体。如双绞线、同轴电缆、光纤等。</p>
<ol>
<li class="lvl-3">
<p>双绞线双绞线是一种双股绝缘导线，两股导线以一定的规则绞合在一起，用来传输信号。</p>
</li>
<li class="lvl-3">
<p>同轴电缆同轴电缆是一种中心导线被绝缘层包围，绝缘层外面又有一层金属网的传输媒体。</p>
</li>
<li class="lvl-3">
<p>光纤光纤是一种以光的形式传输信号的传输媒体。</p>
</li>
</ol>
<blockquote>
<p>非导引型传输媒体</p>
</blockquote>
<p>又称为无线传输媒体，是指能够传输电磁波的传输媒体。如无线电波、微波、红外线等。</p>
<h3 id="传输方式">传输方式</h3>
<p>传输方式分为两大类：串行传输和并行传输。</p>
<blockquote>
<p>串行传输</p>
</blockquote>
<p>串行传输是指在传输数据时，每次只传输一位数据。串行传输的优点是：传输距离远，传输速率高，传输线路简单。</p>
<blockquote>
<p>并行传输</p>
</blockquote>
<p>并行传输是指在传输数据时，每次传输多位数据。并行传输的优点是：传输速率高，传输效率高。</p>
<p>此外，还有同步传输和异步传输。</p>
<blockquote>
<p>同步传输</p>
</blockquote>
<p>同步传输是指在传输数据时，发送方和接收方的时钟信号是同步的。</p>
<blockquote>
<p>异步传输</p>
</blockquote>
<p>异步传输是指在传输数据时，发送方和接收方的时钟信号是异步的。</p>
<p>单工传输、半双工传输和全双工传输。</p>
<p>这些传输方式的区别在于：传输方向、传输速率、传输效率、传输距离、传输线路复杂程度。</p>
<p>单工传输是指在传输数据时，数据只能单向传输。如广播电台。</p>
<p>半双工传输是指在传输数据时，数据可以双向传输，但是不能同时双向传输。如对讲机。</p>
<p>全双工传输是指在传输数据时，数据可以双向传输，而且可以同时双向传输。如电话机。</p>
<h3 id="编码与调制">编码与调制</h3>
<p>编码是指将数字信号转换为模拟信号的过程。</p>
<p>调制是指将数字信号转换为模拟信号的过程。</p>
<p>我们使用一个树状图来表示编码和调制的过程。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">消息</span><br><span class="line">↓ 运送消息的实体</span><br><span class="line">数据</span><br><span class="line">↓ 数据的电磁形式</span><br><span class="line">信号</span><br><span class="line">↓ 信源发出的原始电信号</span><br><span class="line">基带信号</span><br><span class="line">|-------------------|</span><br><span class="line">↓                   ↓</span><br><span class="line">数字信号            模拟信号</span><br><span class="line">|-----|            |-----|</span><br><span class="line">↓     ↓            ↓     ↓</span><br><span class="line">编码  调制          编码  调制</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>码元：是指数字信号中的一个离散值。</p>
</li>
</ul>
<p>传输媒体与信道不能直接划等号，信道是指传输媒体的一部分。</p>
<blockquote>
<p>常用编码</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>非归零编码非归零编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平。</p>
</li>
<li class="lvl-2">
<p>归零编码归零编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平，但是每个码元的电平都会回到基准电平。</p>
</li>
<li class="lvl-2">
<p>曼彻斯特编码曼彻斯特编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平，但是每个码元的电平都会回到基准电平，而且每个码元的中间都会有一个电平跳变。</p>
</li>
<li class="lvl-2">
<p>差分曼彻斯特编码差分曼彻斯特编码是指在传输数据时，每个码元的电平都有一个基准电平，码元的电平要么是高于基准电平，要么是低于基准电平，但是每个码元的电平都会回到基准电平，而且每个码元的中间都会有一个电平跳变，而且每个码元的中间都会有一个电平跳变，而且每个码元的中间都会有一个电平跳变，而且每个码元的中间都会有一个电平跳变。</p>
</li>
</ul>
<blockquote>
<p>基本调制方法</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>调幅 AM<br>
调幅是指在传输数据时，通过改变信号的幅度来传输数据。</p>
</li>
<li class="lvl-2">
<p>调频 FM<br>
调频是指在传输数据时，通过改变信号的频率来传输数据。</p>
</li>
<li class="lvl-2">
<p>调相 PM<br>
调相是指在传输数据时，通过改变信号的相位来传输数据。</p>
</li>
<li class="lvl-2">
<p>数字基带调制数字基带调制是指在传输数据时，通过改变信号的幅度、频率、相位来传输数据。</p>
</li>
</ul>
<blockquote>
<p>混合调制</p>
</blockquote>
<p>混合调制是指在传输数据时，通过改变信号的幅度、频率、相位来传输数据。</p>
<p>通常情况下，相位和振幅可以结合在一起，称为正交相幅调制 QAM。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>QAM-16</p>
<ul class="lvl-2">
<li class="lvl-4">12种相位</li>
<li class="lvl-4">每种相位有 1/2 种振幅</li>
<li class="lvl-4">可以调出 16 种码元，每种码元可以表示 4 个比特</li>
<li class="lvl-4">码元与 4 个比特的对应关系采用格雷码</li>
<li class="lvl-4">任意两个相邻码元只有一个比特不同</li>
</ul>
</li>
</ul>
<h3 id="信道的极限容量">信道的极限容量</h3>
<p>信道的极限容量是指在单位时间内，信道所能传输的最大数据量。</p>
<p>码间串扰是指在传输数据时，由于信号的干扰，导致接收方无法正确识别发送方发送的信号。</p>
<p>失真的因素</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>码元传输速率</p>
</li>
<li class="lvl-2">
<p>信号传输距离</p>
</li>
<li class="lvl-2">
<p>噪声干扰</p>
</li>
<li class="lvl-2">
<p>传输媒体质量</p>
</li>
</ul>
<blockquote>
<p>奈氏准则</p>
</blockquote>
<p>奈氏准则是指在传输数据时，信道的极限容量与信道的带宽和信噪比有关。</p>
<p>理想低通信道的最高码元传输速率 = <code>2 * 带宽 * log2V</code><br>
理想带通信道的最高码元传输速率 = <code>带宽 * log2V</code></p>
<blockquote>
<p>香农定理</p>
</blockquote>
<p>香农定理是指在传输数据时，信道的极限容量与信道的带宽和信噪比有关。</p>
<p><code>c = W * log2(1 + S/N)</code>单位：比特/秒</p>
<p>其中，c 是信道的极限容量，W 是信道的带宽，S 是信道的信号功率，N 是信道的噪声功率。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-03</title>
    <url>/2023/11/02/1/</url>
    <content><![CDATA[<h2 id="数据链路层">数据链路层</h2>
<p>数据链路层的作用是：将网络层传下来的IP数据报组装成帧，然后在通信的两个结点之间传送帧。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>帧：数据链路层的数据单位。</p>
</li>
<li class="lvl-2">
<p>数据链路：两个相邻结点之间的传输介质。</p>
</li>
</ul>
<blockquote>
<p>数据链路层的三个基本问题</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>封装成帧</p>
</li>
<li class="lvl-3">
<p>可靠传输</p>
</li>
<li class="lvl-3">
<p>差错检测</p>
</li>
</ol>
<h3 id="封装成帧">封装成帧</h3>
<p>封装成帧是指在数据报前后添加首部和尾部，组成帧。</p>
<blockquote>
<p>帧的结构</p>
</blockquote>
<p>以太网V2的MAC帧格式如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>帧头：7个字段，共14个字节</p>
<ul class="lvl-2">
<li class="lvl-4">目的MAC地址：6个字节</li>
<li class="lvl-4">源地址：6个字节</li>
<li class="lvl-4">类型：2个字节，表示上层协议类型</li>
</ul>
</li>
<li class="lvl-2">
<p>数据：46~1500个字节</p>
</li>
<li class="lvl-2">
<p>帧尾：4个字节，表示帧的结束</p>
</li>
</ul>
<p>每个结构的作用</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>帧头和帧尾中包含了帧的定界符，用于标识帧的开始和结束；以及重要的控制信息。</p>
</li>
<li class="lvl-2">
<p>透明传输是指数据链路对上层交付的数据不加以解释和修改，即不对数据进行任何处理。</p>
</li>
<li class="lvl-2">
<p>为了提高帧的传输效率，应当使帧的数据部分的长度尽可能大些；数据链路层采用了帧的填充技术。</p>
</li>
<li class="lvl-2">
<p>帧的填充技术是指在数据中出现特定字符时，数据链路层自动在该字符前面插入一个转义字符，以免与帧的定界符混淆。</p>
</li>
<li class="lvl-2">
<p>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的最大长度，即最大传送单元MTU（Maximum Transmission Unit）。</p>
</li>
</ul>
<h3 id="差错检测">差错检测</h3>
<p>实际的通信链路都是不可靠的，比特在传输过程中可能会出错：1变为0，0变为1，这种错误称为比特差错。</p>
<p>在一段时间内，传输错误的比特的个数称为比特差错率。</p>
<p>使用差错检测码可以检测出数据在传输过程中是否出错。</p>
<h4 id="奇偶校验码">奇偶校验码</h4>
<p>奇偶校验码是一种最简单的差错检测码，它的原理是：在每一帧的数据后面添加一个附加位，使得每一帧的数据加上附加位中1的个数为奇数或者偶数。</p>
<p>在奇校验中，如果传输过程产生 1 位差错，那么接收方检测到的附加位中1的个数就是奇数，就知道数据出错了。但是如果传输过程产生 2 位差错，那么接收方检测到的附加位中1的个数就是偶数，就无法检测出数据出错了。</p>
<p>偶校验与奇校验相反。</p>
<h4 id="循环冗余检测码-CRC（Cyclic-Redundancy-Check）">循环冗余检测码 CRC（Cyclic Redundancy Check）</h4>
<p>CRC码是一种最常用的差错检测码，它的原理是：将数据看成是二进制数，用一个除数去除这个二进制数，得到的余数作为附加位。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>收发双方事先约定好除数，这个除数称为生成多项式 G(x)。</p>
</li>
<li class="lvl-2">
<p>发送方将数据看成是二进制数，用生成多项式 G(x) 去除这个二进制数，得到的余数作为附加位。</p>
</li>
<li class="lvl-2">
<p>接收方将接收到的数据看成是二进制数，用生成多项式 G(x) 去除这个二进制数，得到的余数如果为0，说明数据没有出错；如果不为0，说明数据出错了。</p>
</li>
</ul>
<p>e.g. 生成多项式 G(x) = x^4 + x^2 + x + 1，求生成多项式各项系数构成的比特串。</p>
<p>G(x) = <strong>1</strong> x^4 + <strong>0</strong> x^3 + <strong>1</strong> x^2 + <strong>1</strong> x + <strong>1</strong> x^0 = 10111</p>
<p>e.g. 生成多项式 G(x) = x^3 + x^2 + 1，数据 101001，计算过程如下：</p>
<p>1、构造被除数；待发送信息后面添加生成式最高次数个0，即 101001<strong>000</strong>。<br>
2、构造除数；生成式各项系数构成的比特串，1101。<br>
3、进行除法运算；将被除数与除数进行异或运算，得到的结果再与除数进行异或运算，直到被除数的位数小于除数的位数为止。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sign      110101</span><br><span class="line">      ————————————</span><br><span class="line">1101 / 101001000</span><br><span class="line">     ⊕ 1101</span><br><span class="line">    ——————</span><br><span class="line">       01110</span><br><span class="line">      ⊕ 1101</span><br><span class="line">      ——————</span><br><span class="line">        001110</span><br><span class="line">        ⊕ 1101</span><br><span class="line">        ——————</span><br><span class="line">          001100</span><br><span class="line">          ⊕ 1101</span><br><span class="line">          ——————</span><br><span class="line">            0001</span><br></pre></td></tr></table></figure>
<p>其中，sign 表示此时是否够除，如果够除，sign 为 1，否则为 0。sign的作用是：当被除数的位数小于除数的位数时，将被除数的最高位补 0，使得被除数的位数大于除数的位数，这样才能进行异或运算。</p>
<p>4、得到的余数即为 CRC 码。余数的位数与生成式的最高次数相同，即 3 位，如果不够 3 位，前面补 0。<br>
5、将余数添加到待发送信息后面，得到的结果即为发送的信息。即 101001<strong>000</strong> + 001 = 101001<strong>001</strong>。</p>
<blockquote>
<p>说明</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>检错码只能检测出数据在传输过程中是否出错，不能纠正数据出错。</p>
</li>
<li class="lvl-2">
<p>CRC 码的检错能力与生成多项式的次数有关，生成多项式的次数越高，检错能力越强。</p>
</li>
<li class="lvl-2">
<p>想要纠正数据出错，需要使用纠错码。但是纠错码的计算量很大，一般不用于数据链路层。</p>
</li>
</ul>
<h2 id="可靠传输">可靠传输</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>利用差错检测技术，可以检测出数据在传输过程中是否出错，但是无法纠正数据出错。</p>
</li>
<li class="lvl-2">
<p>数据链路层向上层提供的服务类型</p>
<ul class="lvl-2">
<li class="lvl-4">不可靠服务：数据链路层不对数据进行检错和重发，只是简单地将数据从一端传送到另一端。仅仅丢弃出错的帧，不进行重发。</li>
<li class="lvl-4">可靠服务：数据链路层对数据进行检错和重发，确保数据从一端传送到另一端的正确性。</li>
</ul>
</li>
<li class="lvl-2">
<p>有线链路误码率一般在 10^-9 ~ 10^-12 之间，无线链路误码率一般在 10^-3 ~ 10^-6 之间。所以，有线链路一般不需要可靠传输，而无线链路一般需要可靠传输。</p>
</li>
<li class="lvl-2">
<p>比特差错只是数据链路层可能出现的差错之一，还有很多其他的差错，如：丢帧、重复帧、帧失序等。</p>
</li>
<li class="lvl-2">
<p>从整个网络体系结构来看，传输差错还包括：分组丢失、分组失序、分组重复等。</p>
</li>
<li class="lvl-2">
<p>可靠传输服务并不局限于数据链路层，网络层也可以提供可靠传输服务。</p>
</li>
</ul>
<p>下面，我们将记录一些可靠传输协议。这些协议并不局限于数据链路层，也可以应用于网络层。</p>
<h3 id="停止等待协议-SW（Stop-and-Wait）">停止等待协议 SW（Stop-and-Wait）</h3>
<p>停止等待协议是一种最简单的可靠传输协议，它的原理是：发送方发送一帧后，停止发送，等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
<p>确认与否定</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">  |   DATA     |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  |  DATA(误码) |</span><br><span class="line">  |  -------&gt;  | 丢</span><br><span class="line">  |            |</span><br><span class="line">  |   NCK      |</span><br><span class="line">重|  &lt;-------  | 弃</span><br><span class="line">  |            |</span><br><span class="line">  |   DATA     |</span><br><span class="line">传|  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<p>ACK：肯定确认帧，表示接收方正确收到了帧。<br>
NCK：否定确认帧，表示接收方没有正确收到帧。</p>
<blockquote>
<p>说明</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送方发送一帧后，停止发送，等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
</li>
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的 NCK，就认为帧没有出错，不需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就认为帧出错，需要重发。</p>
</li>
</ul>
<p>超时重传：发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
<blockquote>
<p>为什么需要超时重传？</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
</ul>
<p>超时重传</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">  |   DATA     |</span><br><span class="line">——|  -----丢失  |</span><br><span class="line">等|            |</span><br><span class="line">待|   DATA     |</span><br><span class="line">——|  -------&gt;  |</span><br><span class="line">重|            |</span><br><span class="line">传|   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  |   DATA     |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>如果接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
</ul>
<p>确认丢失</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">——|   DATA     |</span><br><span class="line">等|  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">待|   ACK      |</span><br><span class="line">——|  丢失-----  |</span><br><span class="line">重|            |</span><br><span class="line">传|   DATA     |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<p>上面的情况，ACK 丢失，发送方会重发，接收方会丢弃重复的帧。为了避免这种情况，需要在 ACK 中添加序号，这样接收方就可以检测出重复的帧。用1个比特来编号，就可以表示 0 和 1 两种状态，这种编号方式称为<strong>停止等待协议的可靠传输</strong>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      互联网</span><br><span class="line">发送方--------接收方</span><br><span class="line">——|   DATA0    |</span><br><span class="line">等|  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">待|   ACK      |</span><br><span class="line">——|  丢失-----  |</span><br><span class="line">重|            |</span><br><span class="line">传|   DATA0    |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  |   DATA1    |</span><br><span class="line">  |  -------&gt;  |</span><br><span class="line">  |            |</span><br><span class="line">  |   ACK      |</span><br><span class="line">  |  &lt;-------  |</span><br><span class="line">  |            |</span><br><span class="line">  ↓            ↓</span><br></pre></td></tr></table></figure>
<p>如果因为某些原因，接收方收到了重复的帧，就丢弃重复的帧，不发送 ACK。</p>
<p>确认迟到</p>
<p>ACK 因为某些原因，没有及时发送，而是延迟发送，这种情况称为<strong>确认迟到</strong>。</p>
<p>这时，我们在 ACK 中添加序号，这样发送方就可以检测出重复的帧。</p>
<p>在数据链路层中，通常不用给ACK编号，因为数据链路层的传输速率很高，一般不会出现确认迟到的情况。</p>
<blockquote>
<p>SW 协议的信道利用率</p>
</blockquote>
<p>信道利用率是指信道中有用的时间与总时间的比值。</p>
<p>U = TD / (TD + RTT + TA)</p>
<p>U 是信道利用率，TD 是数据传输时间，RTT 是往返时间，TA 是确认时间。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据传输时间 TD = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
<li class="lvl-2">
<p>往返时间 RTT = 2 * d / v，d 是信道的长度，v 是信号的传播速率。</p>
</li>
<li class="lvl-2">
<p>确认时间 TA = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
</ul>
<p>U = L / (L + 2 * d / v + L / R)</p>
<blockquote>
<p>说明</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>信道利用率是指信道中有用的时间与总时间的比值。</p>
</li>
<li class="lvl-2">
<p>数据传输时间 TD = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
<li class="lvl-2">
<p>往返时间 RTT = 2 * d / v，d 是信道的长度，v 是信号的传播速率。</p>
</li>
<li class="lvl-2">
<p>确认时间 TA = L / R，L 是帧的长度，R 是信道的传输速率。</p>
</li>
</ul>
<p>通过上面的公式可以看出，信道利用率与帧的长度有关，帧的长度越大，信道利用率越高。所以，这暴露了 SW 协议的一个缺点：帧的长度不能太小，否则信道利用率会很低。所以，因为 SW 协议的信道利用率低，所以 SW 协议一般不用于数据链路层，而是用于网络层。</p>
<h3 id="回退-N-帧协议-ARQ（Automatic-Repeat-Request）">回退 N 帧协议 ARQ（Automatic Repeat Request）</h3>
<p>SW 协议的信道利用率低，而且只能发送一帧，所以，我们可以将 SW 协议扩展成回退 N 帧协议 ARQ。</p>
<p>该协议也叫 Go-Back-N 协议，它的原理是：发送方连续发送 N 帧，而不需要等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
<p>该协议采用流水线技术，发送方可以连续发送多帧，而不需要等待接收方的确认帧。</p>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnlmeGllLmNvbS9jb21wYXJpc29uLW9mLW5ldHdvcmstZ2JuLXNyLWFuZC10Y3Av">計算機網路概論 GBN、SR、TCP 比較<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR28tQmFjay1OX0FSUQ==">Go-Back-N ARQ – Wikipedia<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<blockquote>
<p>发送方</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送窗口尺寸 WT 取值范围为 1 &lt; WT &lt;= 2^n - 1，其中 n 为比特数。</p>
<ul class="lvl-2">
<li class="lvl-4">WT = 1 时，退化为 SW 协议。</li>
<li class="lvl-4">WT = 2^n - 1 时，退化为 SR 协议。</li>
</ul>
</li>
<li class="lvl-2">
<p>发送方可在未收到确认帧的情况下，将序号为 SN ~ SN + WT - 1 的帧连续发送出去。</p>
</li>
<li class="lvl-2">
<p>发送方收到确认帧后，将窗口向前滑动，即 SN = SN + 1，然后发送 SN + WT - 1 帧。</p>
</li>
<li class="lvl-2">
<p>发送方在规定的时间内没有收到接收方的确认帧，就认为帧出错，需要重发。</p>
</li>
<li class="lvl-2">
<p>发送方在规定的时间内没有收到接收方的 NCK，就认为帧没有出错，不需要重发。</p>
</li>
</ul>
<blockquote>
<p>接收方</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>接收窗口尺寸 WR 取值范围为 WR = 1。因此，接收方只能接收序号为 RN 的帧。</p>
</li>
<li class="lvl-2">
<p>接收方收到序号为 RN 的帧后，发送确认帧，然后接收下一帧。</p>
</li>
<li class="lvl-2">
<p>接收方在规定的时间内没有收到发送方的帧，就发送 NCK，要求发送方重发。</p>
</li>
</ul>
<h3 id="选择重传协议-SR（Selective-Repeat）">选择重传协议 SR（Selective Repeat）</h3>
<p>SR 协议也是一种流水线协议，它的原理是：发送方连续发送 N 帧，而不需要等待接收方的确认帧；接收方收到帧后，发送确认帧，然后等待发送方的下一帧。</p>
<blockquote>
<p>发送方</p>
</blockquote>
<p>发送方的发送窗口尺寸 WT 取值范围为 1 &lt; WT &lt;= 2^(n-1)，其中 n 为比特数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>WT = 1 时，退化为 SW 协议。</p>
</li>
<li class="lvl-2">
<p>WT &gt; 2^(n-1) 时，发送方的发送窗口尺寸超过了接收方的接收窗口尺寸，这种情况下，接收方无法接收所有的帧，所以，这种情况下，发送方的发送窗口尺寸应该等于接收方的接收窗口尺寸。</p>
</li>
</ul>
<blockquote>
<p>接收方</p>
</blockquote>
<p>接收方的接收窗口尺寸 WR 取值范围为 1 &lt; WR &lt;= WT = 2^(n-1)，其中 n 为比特数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>WR = 1 时，退化为 SW 协议。</p>
</li>
<li class="lvl-2">
<p>WR &gt; 2^(n-1) 时，无意义。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-04</title>
    <url>/2023/11/07/1/</url>
    <content><![CDATA[<h2 id="点对点协议PPP-Point-to-Point-Protocol">点对点协议PPP Point-to-Point Protocol</h2>
<p>PPP是一种数据链路层协议，它规定了点对点通信的协议标准。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>PPP 为在点对点通信链路上传输网络层数据报提供了一种标准方法。</p>
<ul class="lvl-2">
<li class="lvl-4">PPP 为多种网络层协议提供了一种通用的封装方法。（封装成帧）</li>
<li class="lvl-4">PPP 为在两数据链路层提供了<code>链路控制协议LCP</code>，用于建立、配置和测试数据链路连接。</li>
<li class="lvl-4">PPP 为在两数据链路层提供了<code>网络控制协议NCP</code>，用于在两个节点之间传输网络层协议的数据包。</li>
</ul>
</li>
</ul>
<blockquote>
<p>帧格式</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">帧的首部                            |     数据     | 帧的尾部</span><br><span class="line">|   F   |   A    |   C    |   P    |    DATA     |   FSC  |   F    |</span><br><span class="line">| 1 byte| 1 byte | 1 byte | 2 byte | 0~1500 byte | 2 byte | 1 byte |</span><br></pre></td></tr></table></figure>
<p>标志 Flag 字段 F：标志字段是一个字节，它的值为 0x7E，表示帧的开始和结束。地址 Address 字段 A：地址字段是一个字节，它的值为 0xFF，表示广播地址。预留，但目前没有使用。控制 Control 字段 C：控制字段是一个字节，它的值为 0x03，表示无控制信息。预留，但目前没有使用。协议 Protocol 字段 P：协议字段是两个字节，指明上层协议类型。如 0x0021 表示 IP 协议、0xC021 表示 LCP 协议、0x8021 表示 IPX 协议、0x8023 表示 IPX 协议。数据 Data 字段：数据字段是 0~1500 个字节，表示上层协议的数据。帧检验序列 FCS 字段：帧检验序列字段是两个字节，用于差错检测。</p>
<blockquote>
<p>透明传输</p>
</blockquote>
<p>如果在帧的数据部分出现了和帧首部相同的字符，数据链路层就会误认为帧结束，因此，数据链路层必须对数据进行处理，以免出现这种情况。</p>
<p>数据链路层对数据进行处理的方法是：在数据中出现特定字符时，数据链路层自动在该字符前面插入一个转义字符，以免与帧的定界符混淆。</p>
<p>发送方的处理：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>出现的每一个 0x7E 字符，都用 0x7D 0x5E 代替。</p>
</li>
<li class="lvl-2">
<p>出现的每一个 0x7D 字符，都用 0x7D 0x5D 代替。</p>
</li>
<li class="lvl-2">
<p>出现每一个 ASCII 码小于 0x20 的字符，都用 0x7D 加上该字符的 ASCII 码的值加上 0x20 代替。</p>
</li>
</ul>
<p>接收方的处理：只需要将 0x7D 0x5E 转换为 0x7E，将 0x7D 0x5D 转换为 0x7D，将 0x7D 加上 0x20 的值转换为原来的字符即可。</p>
<blockquote>
<p>面向比特的同步链路采用插入比特0的比特填充方法</p>
</blockquote>
<p>对发送方的处理:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在数据中出现 5 个连续的 1 时，就在后面插入一个 0。</p>
</li>
</ul>
<p>对接收方的处理:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在接收到 5 个连续的 1 时，就删除后面的 0。</p>
</li>
</ul>
<blockquote>
<p>差错侦测</p>
</blockquote>
<p>在FCS字段中使用CRC-CCITT差错检测码。</p>
<p>CRC-CCITT生成多项式为：$x<sup>{16}+x</sup>{12}+x^5+1$</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmMxNjYyI2FwcGVuZGl4LUMuMg==">RFC 1662<i class="fa fa-external-link-alt"></i></span></p>
<p>接收方在接收到帧后，对帧进行差错检测，如果发现差错，则丢弃该帧。</p>
<blockquote>
<p>PPP 的工作状态</p>
</blockquote>
<p><img src="./ppp_status.png" alt></p>
<h2 id="媒体接入控制">媒体接入控制</h2>
<p>由于多路访问信道是由多个节点共享的，因此，必须对多路访问信道进行管理，以便在多个节点同时发送数据时，不会发生冲突。</p>
<p>这时，就需要使用媒体接入控制（MAC Media Access Control）子层。</p>
<p>媒体接入控制分为两种类型：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>静态媒体接入控制</p>
<ul class="lvl-2">
<li class="lvl-4">频分多址</li>
<li class="lvl-4">时分多址</li>
<li class="lvl-4">码分多址</li>
</ul>
</li>
<li class="lvl-2">
<p>动态媒体接入控制</p>
<ul class="lvl-2">
<li class="lvl-4">受控接入
<ul class="lvl-4">
<li class="lvl-6">集中控制</li>
<li class="lvl-6">分布控制</li>
</ul>
</li>
</ul>
</li>
<li class="lvl-2">
<p>随机接入</p>
</li>
</ul>
<p>预先固定分配好信道的使用权，这类方法非常不灵活，对于突发性的数据传输，效率很低。通常在无线网络物理层使用。</p>
<p>在动态接入控制中的集中控制，有一个主站以循环的方式向各个节点询问是否有数据要发送，如果有，则允许发送，否则，就询问下一个节点。缺点是主站成为了系统的瓶颈，如果主站出现故障，整个系统就无法工作。</p>
<p>而分布控制则是将主站的功能分散到各个节点，各个节点之间通过协商的方式来决定谁有权利发送数据。这种方法的缺点是，如果各个节点之间的协商出现问题，就会导致系统无法工作。</p>
<p>以上两种方式现在竞争中被淘汰了。</p>
<p>随机接入是一种分布式的媒体接入控制方法，它不需要主站，各个节点之间也不需要协商，而是通过一定的算法来决定谁有权利发送数据。</p>
<h3 id="静态划分信道">静态划分信道</h3>
<blockquote>
<p>信道复用</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>复用 Multiplexing：将多个信号合成一个信号的过程。</p>
</li>
<li class="lvl-2">
<p>分用 Demultiplexing：将复用后的信号分解成多个信号的过程。</p>
</li>
<li class="lvl-2">
<p>当网络传输媒体的带宽有限时，就需要对带宽进行复用，以便多个用户共享带宽。</p>
</li>
</ul>
<blockquote>
<p>常见复用技术</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>频分复用 FDM Frequency Division Multiplexing</p>
</li>
<li class="lvl-2">
<p>时分复用 TDM Time Division Multiplexing</p>
</li>
<li class="lvl-2">
<p>波分复用 WDM Wave Division Multiplexing</p>
</li>
<li class="lvl-2">
<p>码分复用 CDM Code Division Multiplexing</p>
</li>
</ul>
<p>码片 Chip：在 CDMA 中，每一个比特时间被分为多个小的时间间隔，每一个小的时间间隔称为一个码片，每一个码片都有一个唯一的码片序列，每一个用户都有一个唯一的码片序列，用户的数据就是通过这个码片序列来进行传输的。</p>
<p>使用 CDMA 时，每一个用户都有一个唯一的码片序列，这样，即使多个用户同时发送数据，也不会发生冲突。这个叫 m bit 的码片序列（Chip Sequence）。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一个站如果发送比特1，则发送它自己的 m 个码片序列。</p>
</li>
<li class="lvl-2">
<p>一个站如果发送比特0，则发送它自己的 m 个码片序列的二进制反码。</p>
</li>
</ul>
<p>上面这种通讯方式叫做直接序列扩频通讯（DS-CDMA Direct Sequence Code Division Multiple Access）。</p>
<p>码片的挑选规则：</p>
<ol>
<li class="lvl-3">
<p>分配给每个用户的码片序列必须是正交的。（规格化内积为0）</p>
</li>
<li class="lvl-3">
<p>分配给每个用户的码片序列必须各不相同。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-05</title>
    <url>/2023/11/14/1/</url>
    <content><![CDATA[<h2 id="随机接入-CSMA-CD-协议">随机接入 CSMA/CD 协议</h2>
<p>Carrier Sense Multiple Access with Collision Detection 载波监听多路访问/碰撞检测</p>
<p>在早期的以太网中，采用的是随机接入的方式，即任何一个站点都可以在任何时刻发送数据帧，但是由于多个站点同时发送数据帧会造成碰撞，因此需要进行碰撞检测，如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。</p>
<p><strong>MA 多址接入</strong>，即多个站点共享同一个信道，每个站点都有机会发送数据帧。</p>
<p><strong>CS 载波监听</strong>，即在发送数据帧之前，先监听信道，如果信道空闲，就发送数据帧，否则等待一段时间后再次监听。（先听后说）</p>
<p><strong>CD 碰撞检测</strong>，即在发送数据帧的过程中，如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。（边说边听）</p>
<blockquote>
<p>争用期</p>
</blockquote>
<p>争用期是指在发送数据帧之前，先监听信道，如果信道空闲，就发送数据帧，否则等待一段时间后再次监听。</p>
<blockquote>
<p>最小帧长</p>
</blockquote>
<p>最小帧长是指发送数据帧的最小长度，如果发送的数据帧长度小于最小帧长，就会出现碰撞检测失效的情况。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>以太网的最小帧长是 64 字节，如果发送的数据帧长度小于 64 字节，就会出现碰撞检测失效的情况。</p>
</li>
<li class="lvl-2">
<p>最小帧长的目的是为了保证在发送数据帧的过程中，能够检测到碰撞。</p>
</li>
<li class="lvl-2">
<p>在争用期内，没有检测到碰撞，就可以认为发送的数据帧没有发生碰撞。如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。所以但凡长度小于 64 字节的数据帧都是由于碰撞而异常终止的无效帧。</p>
</li>
</ul>
<blockquote>
<p>最大帧长</p>
</blockquote>
<p>最大帧长是指发送数据帧的最大长度，如果发送的数据帧长度大于最大帧长，就会出现碰撞检测失效的情况。最大帧长为 1518 字节。</p>
<blockquote>
<p>二进制指数退避算法</p>
</blockquote>
<p>二进制指数退避算法是指在发送数据帧的过程中，如果检测到碰撞，就立即停止发送数据帧，然后等待一段随机的时间后再次发送。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>若连续发生 k 次碰撞，就等待一个 0 到 2^k-1 之间的随机数，然后再次发送数据帧。</p>
</li>
<li class="lvl-2">
<p>若连续发生 16 次碰撞，就等待一个 0 到 2^16-1 之间的随机数，然后再次发送数据帧。 2^16-1 = 65535，即最大等待时间为 65535 微秒，即 65.535 毫秒。16 次仍不成功，就放弃发送数据帧，并向上层报告发送失败。</p>
</li>
</ul>
<blockquote>
<p>信道利用率</p>
</blockquote>
<p>信道利用率是指在发送数据帧的过程中，信道被利用的时间与总时间的比值。</p>
<p>应考虑以下这种理想情况</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>各个主机发送帧不发生碰撞</p>
</li>
<li class="lvl-2">
<p>总线一旦空闲，就立即有主机发送帧</p>
</li>
<li class="lvl-2">
<p>发送一帧的时间为 t + T0，其中 t 为传播时延，T0 为帧长</p>
</li>
</ul>
<p>S(max) = 1 / (1 + a)</p>
<p>a = t / T0</p>
<h2 id="随机接入-CSMA-CA-协议">随机接入 CSMA/CA 协议</h2>
<p>在无线局域网中，仍然可以使用随机接入的方式，但是由于无线信道的特殊性，无法进行碰撞检测，因此需要采用其他的方式来避免碰撞。</p>
<blockquote>
<p>为何无线网路不能使用 碰撞检测</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>对硬件要求高，需要在发送数据帧的过程中，能够检测到碰撞。</p>
</li>
<li class="lvl-2">
<p>存在隐藏终端问题，即 A 与 B 之间存在 C，A 与 C 之间存在 B，A 与 B 之间无法检测到碰撞，但是 A 与 C 之间存在碰撞。</p>
</li>
</ul>
<blockquote>
<p>Carrier Sense Multiple Access with Collision Avoidance 载波监听多路访问/碰撞避免</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>802.11 无线局域网采用的是随机接入的方式，但是由于无线信道的特殊性，无法进行碰撞检测，因此需要采用其他的方式来<strong>避免碰撞</strong>。</p>
</li>
<li class="lvl-2">
<p>由于不可能避免所有碰撞，并且无线信道误码率较高，802.11 标准使用了<strong>数据链路层的 ARQ 机制</strong>来保证可靠传输。</p>
</li>
<li class="lvl-2">
<p>802.11 的 MAC 层定义了两种基本的协议，即 DCF 分布式协调函数和 PCF 点对点协调函数。</p>
<ul class="lvl-2">
<li class="lvl-4">Distributed Coordination Function 分布式协调函数: 采用的是随机接入的方式，即任何一个站点都可以在任何时刻发送数据帧。</li>
<li class="lvl-4">Point Coordination Function 点对点协调函数: 采用的是集中控制的方式，即只有一个站点可以在任何时刻发送数据帧。</li>
</ul>
</li>
</ul>
<blockquote>
<p>InterFrame Space 帧间间隔</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>IFS 是指在发送数据帧的过程中，需要等待的时间。</p>
</li>
<li class="lvl-2">
<p>IFS 的长度与发送的数据帧的类型有关，即发送的数据帧的类型不同，IFS 的长度也不同。</p>
</li>
<li class="lvl-2">
<p>IFS 的长度越长，优先级越高，即发送的数据帧的类型越重要。</p>
</li>
<li class="lvl-2">
<p>常用的 IFS 有以下几种类型</p>
<ul class="lvl-2">
<li class="lvl-4"><strong>SIFS</strong> Short InterFrame Space 短帧间间隔；GitHub Copilot: SIFS是Short InterFrame Space的缩写，是一种短帧间间隔。在802.11协议中，SIFS是指在发送数据帧的过程中，需要等待的最短时间。SIFS的长度比PIFS和DIFS都要短，通常为16微秒。SIFS的作用是在发送数据帧的过程中，保证高优先级的数据帧能够优先传输。在802.11协议中，SIFS主要用于ACK帧和CTS帧的发送。</li>
<li class="lvl-4">PIFS PCF InterFrame Space PCF 帧间间隔</li>
<li class="lvl-4"><strong>DIFS</strong> DCF InterFrame Space DCF 帧间间隔；GitHub Copilot: DIFS是DCF InterFrame Space的缩写，是一种DCF帧间间隔。在802.11协议中，DIFS是指在发送数据帧的过程中，需要等待的时间。DIFS的长度比SIFS长，比PIFS短，通常为34微秒。DIFS的作用是在发送数据帧的过程中，保证低优先级的数据帧能够等待一段时间，以便高优先级的数据帧能够优先传输。在802.11协议中，DIFS主要用于发送数据帧和ACK帧之间的间隔。</li>
<li class="lvl-4">EIFS Extended InterFrame Space 扩展帧间间隔</li>
</ul>
</li>
</ul>
<blockquote>
<p>协议的工作原理</p>
</blockquote>
<p><img src="./principal.png" alt></p>
<blockquote>
<p>协议的退避算法</p>
</blockquote>
<p><img src="./algorithm1.png" alt><br>
<img src="./algorithm2.png" alt></p>
<blockquote>
<p>信道预约与虚拟载波监听</p>
</blockquote>
<p>为了提高信道利用率，802.11 无线局域网采用了信道预约的方式，即在发送数据帧之前，先发送 RTS 帧，然后接收 CTS 帧，最后发送数据帧。</p>
<p><img src="./channelappointandvirtuallisten.png" alt><br>
<img src="./cavlpic.png" alt></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-06</title>
    <url>/2023/12/01/1/</url>
    <content><![CDATA[<h2 id="MAC-地址">MAC 地址</h2>
<p>MAC 地址是指网卡的物理地址，它是一个 48 位的二进制数，通常用 12 位的十六进制数表示。属于数据链路层的地址。</p>
<h3 id="MAC-地址的作用">MAC 地址的作用</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>当多个主机连接在同一个以太网中时，每个主机都必须有一个唯一的标识，即一个数据链路层地址。</p>
</li>
<li class="lvl-2">
<p>在每个主机发送的帧中，都必须包含目的主机的数据链路层地址。由于这类地址是用于媒体接入控制的，因此又称为 Media Access Control Address，简称 MAC 地址。</p>
<ul class="lvl-2">
<li class="lvl-4">MAC 地址一般由网卡的制造商来分配，被固化在 EEPROM 中，每个网卡都有一个唯一的 MAC 地址，这称之为<strong>硬件地址</strong>。但是，近年来，一些设备提供了随机生成 MAC 地址的功能，这样就可以保护用户的隐私。</li>
<li class="lvl-4">有时也被称为<strong>物理地址</strong>，但是这种说法不准确，因为 MAC 地址并不是物理上的地址，<strong>而是逻辑上的地址</strong>。</li>
</ul>
</li>
<li class="lvl-2">
<p>一般，用户有两个网络适配器，一个是有线网卡，一个是无线网卡，每个网卡都有一个唯一的 MAC 地址。<strong>这是对接口的唯一标识，而不是对设备的唯一标识</strong>。</p>
</li>
</ul>
<h3 id="IEEE-802-MAC-地址">IEEE 802 MAC 地址</h3>
<p>IEEE 802 MAC 地址是指在 IEEE 802 标准中定义的 MAC 地址，它是一个 48 位的二进制数，通常用 12 位的十六进制数表示。也是扩展的唯一标识符 EUI-48。</p>
<p>通过 MAC 地址，我们可以知道这个网卡是由哪个厂商生产的，这个网卡是什么型号，这个网卡是什么时候生产的。</p>
<p>IEEE 802 MAC 地址的前 24 位称为组织唯一标识符 OUI，由 IEEE 的注册管理机构分配给组织，用于标识组织。这 24位分成3个字段，每个字段包含 8 位，称为 OUI 的第一、第二、第三字节。</p>
<p>IEEE 802 MAC 地址的后 24 位称为扩展标识符 EI，由组织自行分配，用于标识组织内的设备。这 24 位分成 3 个字段，每个字段包含 8 位，称为 EI 的第一、第二、第三字节。也叫第四、第五、第六字节。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>标准表示法: XX-XX-XX-XX-XX-XX<br>
例如: 00-0C-29-3F-2C-1A<br>
这在 Windows 系统中使用的是最常见的表示法。</p>
</li>
<li class="lvl-2">
<p>以太网表示法: XX:XX:XX:XX:XX:XX<br>
例如: 00:0C:29:3F:2C:1A<br>
这在 Linux 系统中使用的是最常见的表示法。IOS、Mac OS X、Android 也使用这种表示法。</p>
</li>
<li class="lvl-2">
<p>无分隔符表示法: XXXXXXXXXXXX<br>
例如: 000C293F2C1A<br>
这种表示法在 Cisco IOS 中使用。</p>
</li>
<li class="lvl-2">
<p>其他表示法 1: XX.XX.XX.XX.XX.XX<br>
例如: 00.0C.29.3F.2C.1A</p>
</li>
<li class="lvl-2">
<p>其他表示法 2: XXXX-XXXX-XXXX<br>
例如: 000C-293F-2C1A</p>
</li>
<li class="lvl-2">
<p>其他表示法 3: XXXX.XXXX.XXXX<br>
例如: 000C.293F.2C1A</p>
</li>
</ul>
<p><img src="./IEEE-MAC.png" alt></p>
<blockquote>
<p>第一字节</p>
</blockquote>
<table>
<thead>
<tr>
<th>位</th>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>b0</td>
<td>0</td>
<td>单播地址</td>
</tr>
<tr>
<td>b0</td>
<td>1</td>
<td>组播地址</td>
</tr>
<tr>
<td>b1</td>
<td>0</td>
<td>全球管理</td>
</tr>
<tr>
<td>b1</td>
<td>1</td>
<td>本地管理</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>b0=0</th>
<th>b0=1</th>
<th>b1=0</th>
<th>b1=1</th>
<th>MAC 地址类型</th>
<th>地址占比</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td>全球管理单播地址</td>
<td>25%</td>
<td>厂商生产网络设备时固化</td>
</tr>
<tr>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td>本地管理单播地址</td>
<td>25%</td>
<td>由网络管理员分配</td>
</tr>
<tr>
<td></td>
<td>√</td>
<td>√</td>
<td></td>
<td>全球管理组播地址</td>
<td>25%</td>
<td></td>
</tr>
<tr>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td>本地管理组播地址</td>
<td>25%</td>
<td>用户对主机进行配置时使用，如果剩余46位全为1，则表示广播地址 FF-FF-FF-FF-FF-FF</td>
</tr>
</tbody>
</table>
<p>所以可以计算总地址数量为 $2^{48} = 281,474,976,710,656$ 个。</p>
<h2 id="IP-地址">IP 地址</h2>
<p>IP 地址是指互联网协议地址，它是一个 32 位的二进制数，通常用 4 个 8 位的十进制数表示。属于网络层的地址。</p>
<h3 id="IP-地址的作用">IP 地址的作用</h3>
<p>IP 地址是因特网上主机和路由器的标识符，用于标识两部分信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网络号：用于标识主机所在的网络</p>
</li>
<li class="lvl-2">
<p>主机号：用于标识主机</p>
</li>
</ul>
<p>所以，MAC 地址不具备区分网络的能力，而 IP 地址具备区分网络的能力。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果是单独网络，不接入因特网，那么只需要使用 MAC 地址就可以了。</p>
</li>
<li class="lvl-2">
<p>如果是接入因特网，那么就需要 IP 地址与 MAC 地址配合使用。</p>
</li>
</ul>
<h2 id="ARP-协议">ARP 协议</h2>
<p>ARP 协议是指地址解析协议，它是一种将 IP 地址解析为 MAC 地址的协议，属于网络层的协议。</p>
<p><img src="./conclude.png" alt></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-08</title>
    <url>/2023/12/08/1/</url>
    <content><![CDATA[<h2 id="网络层">网络层</h2>
<p>网络层的主要功能是将分组从源端传送到目的端，网络层的两个主要问题是路由和拥塞控制。</p>
<p>实现网络层需要解决的问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>向运输层提供的服务：尽最大努力交付、带宽保证、时延保证、安全性</p>
</li>
<li class="lvl-2">
<p>网络层寻址问题：IP地址</p>
</li>
<li class="lvl-2">
<p>路由选择问题：路由选择算法</p>
</li>
</ul>
<p>网络层在 TCP/IP 协议族中叫网际层，主要包括 IP 协议、ICMP 协议、ARP 协议和 RARP 协议。</p>
<h3 id="网络层的两种主要服务模式">网络层的两种主要服务模式</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>面向连接的虚电路服务</p>
</li>
<li class="lvl-2">
<p>无连接的数据报服务</p>
</li>
</ul>
<h4 id="虚电路">虚电路</h4>
<p>虚电路是一种面向连接的服务，虚电路的建立需要消耗网络资源，虚电路的拆除也需要消耗网络资源。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>可靠通信由网络层保证，网络层使用确认、超时重传、序号、流量控制等机制保证可靠通信</p>
</li>
<li class="lvl-2">
<p>必须建立网络层连接–虚电路 Virtual Circuit，虚电路由三部分组成：虚电路标识符、源和目的地址、沿途经过的路由器序列</p>
</li>
<li class="lvl-2">
<p>目的主机的地址仅在建立连接时使用，之后沿途的路由器使用虚电路标识符来识别虚电路</p>
</li>
<li class="lvl-2">
<p>通信结束后，必须拆除网络层连接，释放网络资源</p>
</li>
</ul>
<h4 id="数据报">数据报</h4>
<p>数据报是一种无连接的服务，数据报不需要建立连接，也不需要拆除连接，因此不需要消耗网络资源。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不可靠通信，网络层不保证数据报能够成功到达目的地</p>
</li>
<li class="lvl-2">
<p>不需要建立网络层连接，不需要消耗网络资源</p>
</li>
<li class="lvl-2">
<p>每个分组都携带完整的目的地址，因此每个分组都可以独立发送，沿途的路由器也可以独立转发</p>
</li>
<li class="lvl-2">
<p>每个分组的转发路由可以不同，因此分组可能不按序到达</p>
</li>
<li class="lvl-2">
<p>网络本身不提供端到端的可靠传输服务，使得路由器的设计和实现变得简单</p>
</li>
<li class="lvl-2">
<p>将复杂的网络处理功能放在端系统中，使得网络层的设计和实现变得简单</p>
</li>
</ul>
<h2 id="IP-协议">IP 协议</h2>
<p>有关 IP 协议中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>分类编址 IPv4 地址</p>
</li>
<li class="lvl-2">
<p>划分子网</p>
</li>
<li class="lvl-2">
<p>无分类编址 CIDR</p>
</li>
<li class="lvl-2">
<p>IPv4 地址应用规划</p>
</li>
</ul>
<p>详见 <span class="exturl" data-url="aHR0cHM6Ly95dXpoaWkwNzE4LmdpdGh1Yi5pby8yMDIzLzA2LzA0LzIv">计算机网络（IPv4部分）<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="IP-数据报的发送和转发">IP 数据报的发送和转发</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>主机发送 IP 数据报</p>
</li>
<li class="lvl-2">
<p>路由器转发 IP 数据报</p>
</li>
</ul>
<p>略…</p>
<h2 id="路由">路由</h2>
<p>路由是指从源到目的地的路径，路由选择是指在多个路由中选择一条路由的过程。</p>
<h3 id="静态路由配置以及可能产生的问题">静态路由配置以及可能产生的问题</h3>
<p>静态路由配置是指在路由器中手动配置路由表，静态路由配置的优点是简单、可靠，缺点是不适合大型网络。</p>
<p>静态路由配置的问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>静态路由配置不适合大型网络</p>
</li>
<li class="lvl-2">
<p>静态路由配置不适合网络拓扑变化频繁的网络</p>
</li>
<li class="lvl-2">
<p>静态路由配置不适合网络中的路由器故障频繁的网络</p>
</li>
</ul>
<p>静态路由的过程：</p>
<ol>
<li class="lvl-3">
<p>路由器收到数据报，检查目的地址，如果目的地址在路由表中，则转发数据报，否则执行下一步</p>
</li>
<li class="lvl-3">
<p>路由器将数据报转发给默认路由器，如果默认路由器不在，则丢弃数据报</p>
</li>
</ol>
<p>默认路由器是指当路由表中没有目的地址的路由时，路由器将数据报转发给默认路由器。</p>
<p>特定主机路由过程：</p>
<ol>
<li class="lvl-3">
<p>路由器收到数据报，检查目的地址，如果目的地址在路由表中，则转发数据报，否则执行下一步</p>
</li>
<li class="lvl-3">
<p>路由器将数据报转发给默认路由器，如果默认路由器不在，则丢弃数据报</p>
</li>
</ol>
<p>特定主机路由网络前缀是 32 位，默认路由网络前缀是 0 位。</p>
<p>所以，特定主机路由网络前缀最长，路由最具体；默认路由网络前缀最短，路由最笼统。</p>
<p>为了<strong>防止 IP 数据报在路由环路中永久循环</strong>，IP 协议规定每个 IP 数据报的<strong>生存时间字段 TTL</strong>，每经过一个路由器，TTL 减 1，当 TTL 为 0 时，路由器丢弃该数据报。</p>
<p>聚合了不存在的网络前缀的路由称为黑洞路由，黑洞路由的作用是丢弃数据报，不向源主机发送任何 ICMP 消息。</p>
<p>黑洞路由的下一跳地址是 null0，null0 是一个虚拟接口，它不属于任何网络，它的作用是丢弃数据报。</p>
<h2 id="路由选择协议">路由选择协议</h2>
<table>
<thead>
<tr>
<th style="text-align:center">静态路由</th>
<th style="text-align:center">动态路由</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">人工配置</td>
<td style="text-align:center">自动配置</td>
</tr>
<tr>
<td style="text-align:center">适合小型网络</td>
<td style="text-align:center">适合大型网络</td>
</tr>
<tr>
<td style="text-align:center">不适合网络拓扑变化频繁的网络</td>
<td style="text-align:center">适合网络拓扑变化频繁的网络</td>
</tr>
<tr>
<td style="text-align:center">不适合网络中的路由器故障频繁的网络</td>
<td style="text-align:center">适合网络中的路由器故障频繁的网络</td>
</tr>
</tbody>
</table>
<p>因特网所采用的路由选择协议的特点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>自适应：动态路由选择，能较好的适应网络拓扑变化</p>
</li>
<li class="lvl-2">
<p>分布式：路由器之间交换路由信息</p>
</li>
<li class="lvl-2">
<p>分层次：整个因特网划分为多个自治系统(Autonomous System)，每个自治系统内部使用某种路由选择协议，自治系统之间使用某种路由选择协议</p>
</li>
</ul>
<blockquote>
<p>自治系统内部使用 <code>IGP</code>（Interior Gateway Protocol）协议，自治系统之间使用 <code>EGP</code>（Exterior Gateway Protocol）协议；<code>IGP</code> 协议有 <strong>RIP、OSPF</strong>、IS-IS、IGRP、EIGRP 等；<code>EGP</code> 协议有 <strong>BGP</strong> 等。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>RIP 协议：路由信息协议；基于<strong>距离向量</strong></p>
<ul class="lvl-2">
<li class="lvl-4">在因特网最早使用</li>
</ul>
</li>
<li class="lvl-2">
<p>IGRP 协议：内部网关路由选择协议；基于<strong>距离向量</strong></p>
<ul class="lvl-2">
<li class="lvl-4">用于 Cisco 路由器</li>
<li class="lvl-4">但是 IGRP 协议是私有协议，不是开放协议，现在已被 EIGRP 协议取代</li>
</ul>
</li>
<li class="lvl-2">
<p>OSPF 协议：开放最短路径优先协议；基于<strong>链路状态</strong></p>
<ul class="lvl-2">
<li class="lvl-4">用于大型网络，在因特网中使用较多</li>
</ul>
</li>
<li class="lvl-2">
<p>IS-IS 协议：中间系统到中间系统协议；基于<strong>链路状态</strong></p>
<ul class="lvl-2">
<li class="lvl-4">集成化 IS-IS 协议是 ISP 网络中使用的一种 IGP 协议</li>
</ul>
</li>
</ul>
<hr>
<p>路由器的基本结构：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>输入端口</p>
</li>
<li class="lvl-2">
<p>交换结构</p>
</li>
<li class="lvl-2">
<p>输出端口</p>
</li>
</ul>
<blockquote>
<ol>
<li class="lvl-3">
<p>路由表一般包含两个部分：目的地址和下一跳地址</p>
</li>
<li class="lvl-3">
<p>路由表需要对网络拓扑变化做出响应，因此路由表需要动态更新</p>
</li>
<li class="lvl-3">
<p>转发表是路由表的一部分</p>
</li>
<li class="lvl-3">
<p>转发表的结构应当使查找过程尽可能快速</p>
</li>
</ol>
</blockquote>
<h2 id="RIP-协议-距离向量路由选择协议">RIP 协议 - 距离向量路由选择协议</h2>
<p>路由信息协议 RIP（Routing Information Protocol）是一种距离向量路由选择协议，RIP 协议使用距离作为路由选择的度量，距离的度量单位是跳数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>RIP 协议是内部网关协议 IGP 中最先得到广泛应用的一种协议，相关文档是 RFC 1058</p>
</li>
<li class="lvl-2">
<p>该协议要求 AS 内的所有路由器都运行 RIP 协议，维护从它到其他所有目的网络的距离向量(距离向量 D-V Distance Vector)</p>
</li>
<li class="lvl-2">
<p>使用跳数(Hop Count)作为距离的度量单位</p>
<ul class="lvl-2">
<li class="lvl-4">最大跳数为 15，超过 15 跳的网络被认为是不可达的</li>
<li class="lvl-4">路由器到直连网络的距离为 1</li>
<li class="lvl-4">路由器到其他网络的距离为 1 加上到达该路由器的距离</li>
</ul>
</li>
<li class="lvl-2">
<p>RIP 协议使用 UDP 端口号 520</p>
</li>
</ul>
<blockquote>
<p>RIP 认为，跳数越少，路径越短，因此跳数越少的路径越好。当到达同一目的网络的两条路径的跳数相同时，RIP 协议可以进行等价<strong>负载均衡</strong>。</p>
</blockquote>
<p>RIP 包含 3 个要点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>和邻居交换路由信息(和谁)</p>
</li>
<li class="lvl-2">
<p>路由信息的更新(什么)</p>
</li>
<li class="lvl-2">
<p>周期性交换信息(何时)</p>
</li>
</ul>
<hr>
<h3 id="RIP-协议的基本工作过程">RIP 协议的基本工作过程</h3>
<ol>
<li class="lvl-3">
<p>路由器收到 RIP 报文，检查报文类型，如果是请求报文，则执行下一步，否则丢弃该报文</p>
</li>
<li class="lvl-3">
<p>路由器检查请求报文中的目的地址，如果目的地址是本路由器，则执行下一步，否则丢弃该报文</p>
</li>
<li class="lvl-3">
<p>路由器将本路由器的路由表中的所有路由信息封装在响应报文中，发送给请求报文的源路由器</p>
</li>
</ol>
<blockquote>
<ol>
<li class="lvl-3">
<p>路由器刚开始工作时，只知道自己到直连网络的距离为 1，其他网络的距离为 16</p>
</li>
<li class="lvl-3">
<p>路由器仅和直接相连的路由器交换路由信息</p>
</li>
<li class="lvl-3">
<p>若干次交换后，路由器就可以获得到达其他网络的距离，称之为收敛</p>
</li>
</ol>
</blockquote>
<hr>
<p>RIP 协议的缺点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>RIP 协议的最大跳数为 15，因此 RIP 协议只适合小型网络</p>
</li>
<li class="lvl-2">
<p>RIP 协议的收敛速度慢，因为 RIP 协议的更新时间间隔为 30 秒，因此 RIP 协议的收敛时间为 90 秒</p>
</li>
<li class="lvl-2">
<p>RIP 协议的路由选择不是最优的，因为 RIP 协议的路由选择是基于距离的，而不是基于带宽的</p>
</li>
</ul>
<h2 id="OSPF-协议-开放最短路径优先协议">OSPF 协议 - 开放最短路径优先协议</h2>
<p>开放最短路径优先协议 OSPF（Open Shortest Path First）是一种链路状态路由选择协议，OSPF 协议使用最短路径作为路由选择的度量，最短路径的度量单位是代价。最短路径优先算法是 Dijkstra 提出的 SPF 算法。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>OSPF 协议是内部网关协议 IGP 中最先得到广泛应用的一种协议，相关文档是 RFC 2328</p>
</li>
<li class="lvl-2">
<p>该协议要求 AS 内的所有路由器都运行 OSPF 协议，维护从它到其他所有目的网络的链路状态(链路状态 L-S Link State)</p>
</li>
<li class="lvl-2">
<p>使用代价(Cost)作为距离的度量单位</p>
<ul class="lvl-2">
<li class="lvl-4">代价越小，路径越短，因此代价越小的路径越好</li>
<li class="lvl-4">代价的计算公式：代价 = 100Mbps / 带宽</li>
</ul>
</li>
<li class="lvl-2">
<p>OSPF 协议使用 IP 协议号 89</p>
</li>
</ul>
<hr>
<p>该协议相邻路由器之间通过交互问候(Hello)报文来建立邻居关系，通过交互链路状态(LS)报文来交换链路状态信息。</p>
<p>OSPF 有五种分组：</p>
<ol>
<li class="lvl-3">
<p>问候(Hello)分组：用于建立邻居关系</p>
</li>
<li class="lvl-3">
<p>数据库描述(Database Description)分组：用于交换链路状态数据库</p>
</li>
<li class="lvl-3">
<p>链路状态请求(Link State Request)分组：用于请求链路状态信息</p>
</li>
<li class="lvl-3">
<p>链路状态更新(Link State Update)分组：用于发送链路状态信息</p>
</li>
<li class="lvl-3">
<p>链路状态确认(Link State Acknowledgement)分组：用于确认链路状态信息</p>
</li>
</ol>
<h2 id="BGP-协议-边界网关协议">BGP 协议 - 边界网关协议</h2>
<p>边界网关协议 BGP（Border Gateway Protocol）是一种路径矢量路由选择协议，BGP 协议使用路径作为路由选择的度量，路径的度量单位是 AS。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在不同的自治系统内，度量路由的代价是不同的，因此代价不适合作为路由选择的度量单位。</p>
</li>
<li class="lvl-2">
<p>自治系统间的路由选择需要考虑自治系统间的策略，比如政治、经济、安全等因素。</p>
</li>
<li class="lvl-2">
<p>BGP 协议是外部网关协议 EGP 中最先得到广泛应用的一种协议，相关文档是 RFC 4271</p>
</li>
</ul>
<h3 id="BGP-协议的基本工作过程">BGP 协议的基本工作过程</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>管理员在配置 BGP 协议时，需要配置至少一个路由器作为该自治系统的 <code>BGP 发言人</code>，该路由器负责和其他自治系统的 <code>BGP 发言人</code> 交换路由信息</p>
</li>
<li class="lvl-2">
<p>不同自治系统的 <code>BGP 发言人</code> 之间交换信息，必须建立 TCP 连接，使用 TCP 端口号 179</p>
</li>
<li class="lvl-2">
<p>使用TCP 连接交换路由信息的两个 <code>BGP 发言人</code> 之间称为 <code>BGP 对等体</code>/<code>邻站</code>/<code>对等点</code>/<code>对等路由器</code></p>
</li>
<li class="lvl-2">
<p><code>BGP 发言人</code> 除了运行 BGP 协议，还需要运行 IGP 协议，IGP 协议用于在自治系统内部交换路由信息，BGP 协议用于在自治系统之间交换路由信息</p>
</li>
</ul>
<hr>
<p>BGP-4 的四种分组：</p>
<ol>
<li class="lvl-3">
<p>打开(Open)分组：用于建立 TCP 连接</p>
</li>
<li class="lvl-3">
<p>更新(Update)分组：用于交换路由信息</p>
</li>
<li class="lvl-3">
<p>通知(Notification)分组：用于通知错误信息</p>
</li>
<li class="lvl-3">
<p>空闲(Keepalive)分组：用于保持 TCP 连接</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-07</title>
    <url>/2023/12/02/1/</url>
    <content><![CDATA[<h2 id="集线器与交换机">集线器与交换机</h2>
<blockquote>
<p>使用双绞线和集线器 HUB 的星形以太网</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用集线器的以太网在<strong>逻辑上仍然是一个总线网</strong>，各站共享总线资源，使用的是 CSMA/CD 协议。</p>
</li>
<li class="lvl-2">
<p>集线器<strong>工作在物理层</strong>，只是将收到的信号放大后再转发，不具备任何的逻辑功能。</p>
</li>
<li class="lvl-2">
<p>集线器一般拥有少量容错能力以及故障管理能力，但是这些功能都是<strong>基于物理层</strong>的，而不是基于数据链路层的。</p>
</li>
</ul>
<p>使用集线器 HUB 在物理层扩展以太网。但是，存在以下问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>以太网的带宽是共享的，当网络中的主机数量增多时，带宽会越来越小。</p>
</li>
<li class="lvl-2">
<p>以太网的冲突域是共享的，当网络中的主机数量增多时，冲突域会越来越大，冲突会越来越多，网络的性能会越来越差。</p>
</li>
</ul>
<blockquote>
<p>使用交换机 SWITCH 的以太网</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>以太网交换机通常有 24 个或 48 个端口，每个端口都是一个独立的冲突域，因此，以太网交换机可以将一个以太网划分成多个冲突域，从而提高网络的性能。</p>
</li>
<li class="lvl-2">
<p>一般工作在<strong>全双工模式</strong>，因此，可以同时发送和接收数据，不会发生冲突。</p>
</li>
<li class="lvl-2">
<p>一般工作在<strong>数据链路层</strong>，具有数据链路层的逻辑功能，可以<strong>识别以太网帧的 MAC 地址</strong>，从而可以根据 MAC 地址转发数据帧。</p>
</li>
<li class="lvl-2">
<p>具有<strong>并行性</strong>，能同时连通多个端口，因此，可以同时转发多个数据帧。</p>
</li>
<li class="lvl-2">
<p>交换机是一种即插即用的设备，其内部帧交换表是<strong>自学习</strong>的，不需要管理员配置。</p>
</li>
<li class="lvl-2">
<p>使用两种交换方式：<strong>存储转发</strong>和<strong>直通转发</strong></p>
</li>
</ul>
<p><img src="./hubVSswitch.png" alt></p>
<p>现在，以太网交换机已经成为以太网的主流设备，集线器已经被淘汰。</p>
<h2 id="交换机自学习与转发">交换机自学习与转发</h2>
<p>交换机是一种即插即用的设备，刚刚启动时，交换机的帧交换表是空的，交换机不知道哪个端口连接哪个主机，也不知道哪个 MAC 地址在哪个端口，因此，交换机需要学习。</p>
<p>流程：</p>
<ol>
<li class="lvl-3">
<p>当交换机收到一个数据帧时，交换机会提取数据帧中的源 MAC 地址，然后将源 MAC 地址和接收到该数据帧的端口号记录在交换机的帧交换表中。</p>
</li>
<li class="lvl-3">
<p>当交换机收到一个数据帧时，交换机会提取数据帧中的目的 MAC 地址，然后在交换机的帧交换表中查找该目的 MAC 地址对应的端口号。</p>
</li>
<li class="lvl-3">
<p>如果找到了，交换机就将该数据帧转发到该端口，否则，交换机就将该数据帧转发到所有的端口（广播）。</p>
</li>
</ol>
<p>然而，交换机的帧交换表是会自动删除的，这是因为，当主机断开连接时，交换机就无法再收到该主机发送的数据帧，因此，交换机就无法再学习该主机的 MAC 地址，因此，交换机需要定期删除帧交换表中的记录。</p>
<h2 id="交换机生成树协议-STP">交换机生成树协议 STP</h2>
<p>交换机生成树协议 Spanning Tree Protocol，简称 STP，是一种<strong>链路层</strong>的<strong>网络协议</strong>，用于在<strong>有环路</strong>的<strong>以太网</strong>中防止<strong>广播风暴</strong>。</p>
<p>添加冗余链路，提高网络的可靠性。但是，添加冗余链路会导致环路，导致以下问题</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>广播风暴</strong>：大量消耗网络资源，导致网络瘫痪。</p>
</li>
<li class="lvl-2">
<p>主机收到<strong>重复的广播帧</strong>，导致网络性能下降。</p>
</li>
<li class="lvl-2">
<p>交换机的<strong>帧交换震荡</strong>：交换机的帧交换表中的记录不断变化，导致网络性能下降。</p>
</li>
</ul>
<p>所以，需要一种协议来解决这些问题，这就是 STP。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不论网络中有多少个交换机，STP 都能够自动计算出一棵<strong>无环路</strong>的<strong>生成树</strong>，从而防止广播风暴。</p>
</li>
</ul>
<blockquote>
<p>最终生成的树型拓扑结构要<strong>连通整个网络</strong>；首次连接交换机或网络物理拓扑结构发生变化时，STP 会<strong>重新计算生成树</strong>。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>STP 通过<strong>端口状态</strong>来防止<strong>帧交换震荡</strong>，从而提高网络性能。</p>
</li>
</ul>
<h2 id="虚拟局域网-VLAN">虚拟局域网 VLAN</h2>
<p>虚拟局域网 Virtual Local Area Network，简称 VLAN，是一种<strong>链路层</strong>的<strong>网络协议</strong>，用于在<strong>物理上</strong>将<strong>一个局域网</strong>分割成<strong>多个虚拟局域网</strong>，从而实现<strong>逻辑上的隔离</strong>。</p>
<h3 id="巨大的广播域">巨大的广播域</h3>
<p>以太网交换机可以将一个以太网划分成多个冲突域，从而提高网络的性能。但是，以太网交换机不能将一个以太网划分成多个广播域，因此，以太网交换机不能实现逻辑上的隔离。巨大的广播域会导致以下问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安全性差：网络中的主机可以通过 ARP 欺骗攻击等方式攻击其他主机。</p>
</li>
<li class="lvl-2">
<p>网络性能差：网络中的主机可以通过大量的广播帧来消耗网络资源，导致网络瘫痪。</p>
</li>
<li class="lvl-2">
<p>网络管理困难：网络管理员无法对网络中的主机进行有效的管理。</p>
</li>
</ul>
<h3 id="网络中会频繁出现广播信息">网络中会频繁出现广播信息</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>TCP/IP</strong></p>
<ul class="lvl-2">
<li class="lvl-4">ARP 已知 IP 地址获取 MAC 地址</li>
<li class="lvl-4">DHCP 动态主机配置协议</li>
<li class="lvl-4">ICMP 互联网控制报文协议</li>
<li class="lvl-4">RIP 路由信息协议</li>
</ul>
</li>
<li class="lvl-2">
<p>NetBIOS</p>
<ul class="lvl-2">
<li class="lvl-4">NetBIOS Name Service</li>
<li class="lvl-4">NetBIOS Datagram Service</li>
<li class="lvl-4">NetBIOS Session Service</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>NetBEUI</strong></p>
<ul class="lvl-2">
<li class="lvl-4">NetBEUI Name Service</li>
<li class="lvl-4">NetBEUI Datagram Service</li>
<li class="lvl-4">NetBEUI Session Service</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>IPX/SPX</strong></p>
<ul class="lvl-2">
<li class="lvl-4">SAP 服务广播协议</li>
<li class="lvl-4">RIPX 路由信息协议</li>
<li class="lvl-4">NCP NetWare 核心协议</li>
<li class="lvl-4">SPX NetWare 传输协议</li>
</ul>
</li>
<li class="lvl-2">
<p>AppleTalk 苹果公司的网络协议</p>
</li>
</ul>
<h3 id="虚拟局域网-VLAN-技术">虚拟局域网 VLAN 技术</h3>
<p>分割广播域的方法，可以使用路由器隔离广播域，但是路由器成本高，性能差，不适合在局域网中使用。</p>
<p>VLAN 可以将一个以太网划分成多个广播域，从而实现逻辑上的隔离。</p>
<h2 id="VLAN-的实现方法">VLAN 的实现方法</h2>
<p>这需要交换机支持 VLAN 功能，交换机需要支持以下两种功能：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>IEEE 802.1Q 协议</p>
</li>
<li class="lvl-2">
<p>交换机端口类型</p>
</li>
</ul>
<p><img src="./802Q.png" alt></p>
<h3 id="端口类型">端口类型</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Access 端口：连接主机的端口，只能属于一个 VLAN。</p>
</li>
<li class="lvl-2">
<p>Trunk 端口：连接交换机的端口，可以属于多个 VLAN。</p>
</li>
<li class="lvl-2">
<p>Hybrid 端口：连接主机的端口，可以属于多个 VLAN。但是思科交换机不支持该端口类型。</p>
</li>
</ul>
<p>交换机各端口的省缺 VLAN ID</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>思科交换机：Native VLAN，即本征 VLAN</p>
</li>
<li class="lvl-2">
<p>华为交换机：Port VLAN ID，即端口 VLAN ID, PVID</p>
</li>
</ul>
<h4 id="Access-端口">Access 端口</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>Access 端口只能属于一个 VLAN，因此，Access 端口只能接收属于该 VLAN 的数据帧。</p>
</li>
<li class="lvl-2">
<p>Access 端口可以连接主机，也可以连接路由器。</p>
</li>
<li class="lvl-2">
<p>Access 端口可以连接另一个交换机，但是，另一个交换机的端口必须是 Trunk 端口。</p>
</li>
</ul>
<p><img src="./access.png" alt></p>
<h4 id="Trunk-端口">Trunk 端口</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>Trunk 端口可以属于多个 VLAN，因此，Trunk 端口可以接收多个 VLAN 的数据帧。</p>
</li>
<li class="lvl-2">
<p>Trunk 端口只能连接交换机，不能连接主机。</p>
</li>
<li class="lvl-2">
<p>Trunk 端口可以连接另一个交换机，但是，另一个交换机的端口必须是 Trunk 端口。</p>
</li>
</ul>
<p>Trunk 端口发送处理方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对于等于本征 VLAN ID 的数据帧，交换机会将其发送到本征 VLAN 中。</p>
</li>
<li class="lvl-2">
<p>对于不等于本征 VLAN ID 的数据帧，交换机会将其发送到所有的 VLAN 中。</p>
</li>
</ul>
<p>Trunk 端口接收处理方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对于等于本征 VLAN ID 的数据帧，交换机会将其发送到本征 VLAN 中。</p>
</li>
<li class="lvl-2">
<p>对于不等于本征 VLAN ID 的数据帧，交换机会将其丢弃。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-09</title>
    <url>/2023/12/21/1/</url>
    <content><![CDATA[<h2 id="IPv4-数据报的首部格式">IPv4 数据报的首部格式</h2>
<p><img src="./IPv4-DataGram-Header-Format.png" alt></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>版本：4 位，指明 IP 协议的版本，IPv4 的版本号为 4</p>
</li>
<li class="lvl-2">
<p>首部长度：4 位，指明首部的长度，单位为 4 字节，最大值为 15，即最大长度为 60 字节</p>
</li>
<li class="lvl-2">
<p>区分服务：8 位，用于指明数据报的优先级，最高 3 位为优先级，最低 3 位为服务类型，中间 2 位保留</p>
</li>
<li class="lvl-2">
<p>总长度：16 位，指明整个数据报的长度，单位为字节，最大值为 65535 字节</p>
</li>
<li class="lvl-2">
<p>可选项：可选项的长度为 0 或 4 的倍数，最大长度为 40 字节，可选项的长度由首部长度字段指明</p>
</li>
<li class="lvl-2">
<p>填充：填充字段的长度为 0 或 4 的倍数，最大长度为 40 字节，填充字段的长度由首部长度字段指明</p>
</li>
<li class="lvl-2">
<p>标识：16 位，用于唯一标识主机发送的每一个数据报，当数据报被分片时，每个分片的标识字段相同</p>
</li>
<li class="lvl-2">
<p>标志：3 位，用于指明数据报是否被分片，最高位为保留位，中间位为 DF，最低位为 MF(DF: Don’t Fragment, MF: More Fragment)</p>
</li>
<li class="lvl-2">
<p>片偏移：13 位，用于指明分片的偏移量，单位为 8 字节，最大值为 8191，即最大偏移量为 65528 字节</p>
</li>
</ul>
<blockquote>
<p>这三个字段共同指明了分片的偏移量，当数据报被分片时，每个分片的标识字段相同，标志字段的 MF 位为 1，最后一个分片的 MF 位为 0，每个分片的片偏移字段指明了分片的偏移量，单位为 8 字节，最大值为 8191，即最大偏移量为 65528 字节</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>生存时间：8 位，用于指明数据报在网络中的存活时间，单位为秒，最大值为 255，即最大存活时间为 255 秒(TTL: Time To Live)</p>
</li>
<li class="lvl-2">
<p>协议：8 位，用于指明数据报的上层协议，如 TCP、UDP、ICMP、IGMP 等</p>
</li>
<li class="lvl-2">
<p>首部校验和：16 位，用于校验首部的正确性，不校验数据部分，校验和的计算方法为：将首部中的所有 16 位字相加，然后取反得到校验和，如果计算结果中有进位，则将进位加到最低位中</p>
</li>
<li class="lvl-2">
<p>源地址：32 位，指明发送数据报的主机的 IP 地址</p>
</li>
<li class="lvl-2">
<p>目的地址：32 位，指明接收数据报的主机的 IP 地址</p>
</li>
</ul>
<h2 id="网际控制报文协议-ICMP">网际控制报文协议 ICMP</h2>
<p>ICMP (Internet Control Message Protocol) 是一个网络层协议，它用于在主机和路由器之间传递控制消息，它是 IP 协议的一个子协议，ICMP 报文被封装在 IP 数据报中，ICMP 报文的首部长度为 8 字节</p>
<h3 id="IMCP-差错报文种类">IMCP 差错报文种类</h3>
<ol>
<li class="lvl-3">
<p>目的不可达差错报文目的不可达差错报文用于指明主机或路由器无法将数据报交付给目的主机，目的不可达差错报文的类型字段为 3</p>
</li>
<li class="lvl-3">
<p>源抑制差错报文源抑制差错报文用于指明主机或路由器因为拥塞而丢弃数据报，源抑制差错报文的类型字段为 4</p>
</li>
<li class="lvl-3">
<p>时间超过差错报文时间超过差错报文用于指明数据报在网络中的存活时间超过了生存时间，时间超过差错报文的类型字段为 11</p>
</li>
<li class="lvl-3">
<p>参数问题差错报文参数问题差错报文用于指明主机或路由器收到的数据报中有一些字段的值不正确，参数问题差错报文的类型字段为 12</p>
</li>
<li class="lvl-3">
<p>改变路由差错报文改变路由差错报文用于指明主机或路由器收到的数据报的路由发生了改变，改变路由差错报文的类型字段为 5</p>
</li>
<li class="lvl-3">
<p>重定向差错报文(在某些资料中，重定向差错报文不属于 ICMP 差错报文)<br>
重定向差错报文用于指明主机或路由器收到的数据报的路由发生了改变，重定向差错报文的类型字段为 5</p>
</li>
</ol>
<h3 id="不发送差错报文的情况">不发送差错报文的情况</h3>
<ol>
<li class="lvl-3">
<p>如果数据报的首部校验和不正确，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的生存时间为 0，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的首部长度字段的值小于 5，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是广播地址或多播地址，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是本机地址，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是回环地址，则丢弃数据报，不发送差错报文</p>
</li>
<li class="lvl-3">
<p>如果数据报的目的地址是</p>
<ul class="lvl-2">
<li class="lvl-6">127.0.0.0</li>
<li class="lvl-6">0.0.0.0</li>
</ul>
</li>
</ol>
<h3 id="常用的-ICMP-询问报文">常用的 ICMP 询问报文</h3>
<ol>
<li class="lvl-3">
<p>回送请求报文回送请求报文用于询问目的主机是否可达，回送请求报文的类型字段为 8</p>
</li>
<li class="lvl-3">
<p>回送应答报文回送应答报文用于回答回送请求报文，回送应答报文的类型字段为 0</p>
</li>
<li class="lvl-3">
<p>时间戳请求报文时间戳请求报文用于询问目的主机的时间，时间戳请求报文的类型字段为 13</p>
</li>
<li class="lvl-3">
<p>时间戳应答报文时间戳应答报文用于回答时间戳请求报文，时间戳应答报文的类型字段为 14</p>
</li>
<li class="lvl-3">
<p>网络掩码请求报文网络掩码请求报文用于询问目的主机的子网掩码，网络掩码请求报文的类型字段为 17</p>
</li>
<li class="lvl-3">
<p>网络掩码应答报文网络掩码应答报文用于回答网络掩码请求报文，网络掩码应答报文的类型字段为 18</p>
</li>
</ol>
<p>其中，第 1、2 种报文是必须的，第 3、4 种报文是可选的，第 5、6 种报文是必须的</p>
<h3 id="典型应用">典型应用</h3>
<ol>
<li class="lvl-3">
<p>ping<br>
ping 是一个常用的网络工具，它用于测试目的主机是否可达，它的原理是向目的主机发送回送请求报文，如果目的主机可达，则目的主机会回答回送应答报文，如果目的主机不可达，则目的主机不会回答回送应答报文简言之：</p>
<ul class="lvl-2">
<li class="lvl-6">ping 用来测试目的主机是否可达</li>
<li class="lvl-6">应用层向网络层发送回送请求报文</li>
<li class="lvl-6">网络层向应用层发送回送应答报文</li>
</ul>
</li>
<li class="lvl-3">
<p>traceroute<br>
traceroute 是一个常用的网络工具，它用于测试数据报从源主机到目的主机经过的路由，它的原理是向目的主机发送回送请求报文，如果目的主机可达，则目的主机会回答回送应答报文，如果目的主机不可达，则目的主机不会回答回送应答报文，traceroute 会向目的主机发送多个回送请求报文，每个回送请求报文的生存时间不同，当数据报的生存时间为 1 时，数据报只能到达第一个路由器，当数据报的生存时间为 2 时，数据报只能到达第二个路由器，以此类推，当数据报的生存时间为 n 时，数据报只能到达第 n 个路由器，当数据报的生存时间为 n+1 时，数据报到达目的主机，traceroute 通过这种方式来确定数据报经过的路由简言之：</p>
<ul class="lvl-2">
<li class="lvl-6">traceroute 用来测试数据报从源主机到目的主机经过的路由</li>
<li class="lvl-6">应用层向网络层发送回送请求报文</li>
<li class="lvl-6">网络层向应用层发送回送应答报文</li>
<li class="lvl-6">每个回送请求报文的生存时间不同</li>
<li class="lvl-6">通过生存时间来确定数据报经过的路由</li>
</ul>
</li>
</ol>
<blockquote>
<p>在 Windows 系统中，ping 和 traceroute (tracert) 都是使用 ICMP 协议，但是在 Linux 系统中，ping 使用 ICMP 协议，traceroute 使用 UDP 协议</p>
</blockquote>
<h2 id="虚拟专用网-VPN-Virtual-Private-Network-以及-网络地址转换-NAT-Network-Address-Translation">虚拟专用网 VPN (Virtual Private Network) 以及 网络地址转换 NAT (Network Address Translation)</h2>
<h3 id="虚拟专用网-VPN">虚拟专用网 VPN</h3>
<p>虚拟专用网 VPN 是一种通过公用网络来搭建专用网络的技术，它的原理是通过加密技术将数据报加密，然后将加密后的数据报封装在 IP 数据报中，再将 IP 数据报封装在 IP 数据报中，最后将 IP 数据报发送到目的主机，目的主机收到 IP 数据报后，将 IP 数据报解封装，然后将解封装后的 IP 数据报发送到目的主机，目的主机收到 IP 数据报后，将 IP 数据报解封装，然后将解封装后的数据报发送到目的主机，这样，源主机和目的主机之间就建立了一条专用的加密通道，这条专用的加密通道就是虚拟专用网 VPN。</p>
<p>虚拟专用网中的各主机所分配到的地址应该是本机构可自由分配的专用地址，而无需申请</p>
<p>在因特网数字分配机构 IANA (Internet Assigned Numbers Authority) 中，有三个地址段是专门用于虚拟专用网的，它们是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>10.0.0.0/8</p>
</li>
<li class="lvl-2">
<p>172.16.0.0/12</p>
</li>
<li class="lvl-2">
<p>192.168.0.0/16</p>
</li>
</ul>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvaXB2NC1hZGRyZXNzLXNwYWNlL2lwdjQtYWRkcmVzcy1zcGFjZS54aHRtbA==">IANA IPv4 Address Space Registry<i class="fa fa-external-link-alt"></i></span></p>
<p>外联网 VPN 的访问需要使用 IP 隧道技术，这里不做介绍。</p>
<h3 id="网络地址转换-NAT">网络地址转换 NAT</h3>
<p>网络地址转换 NAT 是一种通过公用网络来搭建专用网络的技术，它的原理是通过路由器将内部网络的 IP 地址转换为外部网络的 IP 地址，然后再将外部网络的 IP 地址转换为内部网络的 IP 地址，这样，内部网络的主机就可以通过路由器访问外部网络，外部网络的主机也可以通过路由器访问内部网络，这样，内部网络和外部网络之间就建立了一条专用的通道，这条专用的通道就是网络地址转换 NAT。</p>
<p>NAT 的发明是为了解决 IPv4 地址不足的问题，NAT 有三种类型，它们分别是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>静态 NAT</p>
</li>
<li class="lvl-2">
<p>动态 NAT</p>
</li>
<li class="lvl-2">
<p>PAT (Port Address Translation)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-10</title>
    <url>/2024/03/24/1/</url>
    <content><![CDATA[<h2 id="运输层">运输层</h2>
<p>运输层的主要任务是为应用层提供端到端的通信服务，运输层的协议有 TCP 和 UDP，TCP 提供面向连接的可靠的数据传输服务，UDP 提供无连接的不可靠的数据传输服务。</p>
<p>UDP (User Datagram Protocol) 是无连接的，不可靠的数据传输服务，UDP 不提供可靠的数据传输服务，UDP 不提供拥塞控制，UDP 不提供流量控制，UDP 不提供差错恢复。</p>
<p>TCP (Transmission Control Protocol) 是面向连接的，可靠的数据传输服务，TCP 提供可靠的数据传输服务，TCP 提供拥塞控制，TCP 提供流量控制，TCP 提供差错恢复。</p>
<p>物理层、数据链路层、网络层共同完成了主机之间的通信，但实际上主机之间的通信是进程之间的通信，运输层的主要任务就是为进程之间的通信提供端到端的通信服务。</p>
<p>运输层向高层用户屏蔽了下层通信的细节，运输层向高层用户提供的是<strong>逻辑通信</strong>，而不是物理通信，运输层的逻辑通信是端到端的逻辑通信，而不是主机到主机的逻辑通信。</p>
<h2 id="端口号、复用与分用">端口号、复用与分用</h2>
<p>端口号是一个 16 位的无符号整数，端口号的范围是 0~65535，端口号的范围是 0~1023 的端口号是保留端口号，1024~49151 的端口号是注册端口号，49152~65535 的端口号是动态端口号。</p>
<p>端口号只具有本地意义，端口号只在本地主机中具有唯一性，不同主机中的端口号可以相同，在因特网中，不同计算机中的端口号是没有联系的。</p>
<hr>
<p>复用是指多个应用层进程可以使用同一个运输层协议，分用是指运输层协议可以将收到的分组交付到正确的应用层进程。</p>
<p>在发送方中：</p>
<p>使用 UDP 协议封装的数据报是 UDP 复用，协议号为 17，使用 TCP 协议封装的数据报是 TCP 复用，协议号为 6。</p>
<p>IP 复用是指多个应用层进程可以使用同一个 IP 地址，IP 分用是指 IP 协议可以将收到的数据报交付到正确的主机。</p>
<p>在接接收方中：</p>
<p>使用 UDP 协议封装的数据报是 UDP 分用，使用 TCP 协议封装的数据报是 TCP 分用。</p>
<h3 id="常用的端口号">常用的端口号</h3>
<p>UDP 协议使用的端口号：</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:left">服务</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">520</td>
<td style="text-align:left">RIP (路由信息协议)</td>
</tr>
<tr>
<td style="text-align:center">161</td>
<td style="text-align:left">SNMP (简单网络管理协议)</td>
</tr>
<tr>
<td style="text-align:center">69</td>
<td style="text-align:left">TFTP (简单文件传输协议)</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:left">DNS (域名系统)</td>
</tr>
<tr>
<td style="text-align:center">67/68</td>
<td style="text-align:left">DHCP (动态主机配置协议)</td>
</tr>
</tbody>
</table>
<p>TCP 协议使用的端口号：</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:left">服务</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:left">HTTP (超文本传输协议)</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:left">SMTP (简单邮件传输协议)</td>
</tr>
<tr>
<td style="text-align:center">21/20</td>
<td style="text-align:left">FTP (文件传输协议)</td>
</tr>
<tr>
<td style="text-align:center">179</td>
<td style="text-align:left">BGP (边界网关协议)</td>
</tr>
<tr>
<td style="text-align:center">443</td>
<td style="text-align:left">HTTPS (安全超文本传输协议)</td>
</tr>
</tbody>
</table>
<h2 id="UDP-与-TCP-的对比">UDP 与 TCP 的对比</h2>
<table>
<thead>
<tr>
<th style="text-align:center">UDP</th>
<th style="text-align:left">TCP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无连接</td>
<td style="text-align:left">面向连接</td>
</tr>
<tr>
<td style="text-align:center">不可靠</td>
<td style="text-align:left">可靠</td>
</tr>
<tr>
<td style="text-align:center">不提供拥塞控制</td>
<td style="text-align:left">提供拥塞控制</td>
</tr>
<tr>
<td style="text-align:center">不提供流量控制</td>
<td style="text-align:left">提供流量控制</td>
</tr>
<tr>
<td style="text-align:center">不提供差错恢复</td>
<td style="text-align:left">提供差错恢复</td>
</tr>
<tr>
<td style="text-align:center">适用于实时应用</td>
<td style="text-align:left">适用于可靠传输的应用</td>
</tr>
<tr>
<td style="text-align:center">支持一对一、一对多、多对一、多对多的通信</td>
<td style="text-align:left">只支持一对一的通信</td>
</tr>
<tr>
<td style="text-align:center">首部开销小</td>
<td style="text-align:left">首部开销大</td>
</tr>
</tbody>
</table>
<h2 id="TCP-流量控制">TCP 流量控制</h2>
<p>一般，我们希望数据传输的速度尽可能的快，但是如果发送方的发送速度过快，接收方的接收速度跟不上，那么接收方的缓冲区就会溢出，这就是流量控制的问题。</p>
<p>TCP 通过滑动窗口机制来解决流量控制的问题，滑动窗口是接收方告诉发送方自己的缓冲区还有多少空间，发送方根据接收方的滑动窗口大小来发送数据。</p>
<h2 id="TCP-拥塞控制">TCP 拥塞控制</h2>
<p>拥塞控制是指当网络中的数据包过多时，网络的性能就会下降，这就是拥塞控制的问题。</p>
<p>TCP 通过拥塞窗口来解决拥塞控制的问题，拥塞窗口是发送方告诉接收方网络的拥塞程度，接收方根据发送方的拥塞窗口大小来接收数据。</p>
<p>有4种算法可以用来解决拥塞控制的问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>慢开始算法</p>
</li>
<li class="lvl-2">
<p>拥塞避免算法</p>
</li>
<li class="lvl-2">
<p>快重传算法</p>
</li>
<li class="lvl-2">
<p>快恢复算法</p>
</li>
</ul>
<p>一般，第一种算法与第二种算法结合使用，第三种算法与第四种算法结合使用。</p>
<p>我们创造一个理想环境</p>
<ol>
<li class="lvl-3">
<p>数据单向传输，另一方只传送确认</p>
</li>
<li class="lvl-3">
<p>接收方有足够大的缓冲区，而发送方发送窗口大小由网络拥塞程度决定</p>
</li>
<li class="lvl-3">
<p>以 TCP 最大报文段长度 MSS 个数为单位计算</p>
</li>
</ol>
<h3 id="慢开始算法">慢开始算法</h3>
<p>慢开始算法是指发送方在开始发送数据时，先将拥塞窗口的大小设置为 1，然后每经过一个往返时间 RTT 就将拥塞窗口的大小加倍，直到拥塞窗口的大小达到一个阈值，然后进入拥塞避免算法。</p>
<h3 id="拥塞避免算法">拥塞避免算法</h3>
<p>拥塞避免算法是指发送方在拥塞窗口的大小达到一个阈值之后，每经过一个往返时间 RTT 就将拥塞窗口的大小加 1，直到拥塞窗口的大小达到一个阈值，然后进入快重传算法。</p>
<h3 id="快重传算法">快重传算法</h3>
<p>快重传算法是指接收方在接收到一个失序的数据包时，就立即发送一个重复确认，发送方在接收到 3 个重复确认时就立即重传丢失的数据包。</p>
<h3 id="快恢复算法">快恢复算法</h3>
<p>快恢复算法是指发送方在接收到 3 个重复确认时，就将拥塞窗口的大小减半，然后进入拥塞避免算法。</p>
<h2 id="TCP-超时重传的时间选择">TCP 超时重传的时间选择</h2>
<p>超时重传是TCP协议中的一个重要机制，当发送方发送数据后，如果在一个往返时间 RTT 内没有收到接收方的确认，那么发送方就会重传数据。</p>
<p>RFC 6298 中提出了一个计算超时重传时间的算法：</p>
<p><code>RTO = RTT + 4 * RTTVar</code></p>
<p>RTT 是一个往返时间，RTTVar 是一个往返时间的方差，RTO 是一个超时重传时间。</p>
<p>RTT 的计算公式如下：</p>
<p><code>RTT = (1 - α) * RTT + α * SampleRTT</code></p>
<p>RTTVar 的计算公式如下：</p>
<p><code>RTTVar = (1 - β) * RTTVar + β * |SampleRTT - RTT|</code></p>
<p>α 和 β 是两个参数，一般取值为 0.125。</p>
<hr>
<p>出现超时重传时无法准确计算 RTT 的问题，Karn 算法是解决这个问题的一个方法，在计算加权平均 RTT 时，只要报文段重传了，就不计算这个报文段的 RTT。也就是说，出现重传时，不计算 RTT。而超时重传时间RTO也不会被更新。</p>
<p>但是这样引发了新的问题：如果报文段的时延突然增大了许多，并且长时间不变，那么这个时延就会被忽略，在原来的重传时间内，不会收到确认，导致重传。重传时间无法更新，导致报文段反复重传。</p>
<p>所以要对 Karn 算法进行改进，当报文段重传时，把超时重传时间RTO增大一些，经典的做法是将 RTO 增大一倍。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络杂记-11</title>
    <url>/2024/09/04/1/</url>
    <content><![CDATA[<h2 id="参考资料">参考资料</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="cmVsaWFiaWxpdHlodHRwczovL2hvdWJiLmdpdGh1Yi5pby8yMDE5LzA0LzA1L3Byb3RvY29sLXRjcC1pcC0wNS10Y3AtcmVsaWFiaWxpdHkjOn46dGV4dD1UQ1AlMjAlRTglQTYlODElRTYlQjElODIlRTQlQjglOEQlRTglQUUlQkE=">TCP/IP 协议-05-TCP 如何保证传输的可靠性<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl4dWVkdWFuLmNvbS9wb3N0cy9uZXR3b3JrLzAzLXRjcC1yZWxpYWJpbGl0eS8=">计算机网络(三)–TCP如何保证传输可靠性<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9ob3ViYi5naXRodWIuaW8vMjAyMy8wMi8yMi9uZXQtMDYtbmV0LXRjcC0xMi10aW1lX3dhaXRfcmVjdl9zeW4=">NET 网络专题汇总-06-12-在 TIME_WAIT 状态的 TCP 连接，收到 SYN 后会发生什么？<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="TCP-可靠传输的实现">TCP 可靠传输的实现</h2>
<p>TCP 基于<strong>以字节为单位的滑动窗口</strong>机制实现可靠传输，TCP 的滑动窗口机制是 TCP 实现可靠传输的核心机制。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>发送方的发送窗口是根据接收方的接收窗口大小和网络拥塞程度动态调整的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口大小相等的</p>
<ul class="lvl-2">
<li class="lvl-4">网络传送窗口值需要经历一定时间滞后，并且这个时间不是固定的，而是动态变化的</li>
<li class="lvl-4">发送方还可能根据网络拥塞程度调整发送窗口的大小，发送方的发送窗口大小并不总是和接收方的接收窗口大小相等的</li>
</ul>
</li>
<li class="lvl-2">
<p>对于不按序到达的数据的处理,并无明确的说明</p>
<ul class="lvl-2">
<li class="lvl-4">接收方把不按序到达的数据丢弃，那么发送方会重传这些数据，虽然接受窗口的管理比较简单，但是这种方式会导致网络资源的浪费</li>
<li class="lvl-4">通常将不按序到达的数据缓存起来，等待缺失的数据到达后再交付给应用层，这种方式会增加接收方的复杂度，但是可以减少网络资源的浪费</li>
</ul>
</li>
<li class="lvl-2">
<p>TCP 要求接收方必须有累计确认和捎带确认两种确认方式</p>
<ul class="lvl-2">
<li class="lvl-4">这样可以减少传输开销，接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息捎带上去</li>
<li class="lvl-4">但接收方不应该过分延迟确认，否则会导致发送方重传数据，浪费网络资源</li>
<li class="lvl-4">捎带不常用，因为大多数应用程序很少同时在两个方向上传输数据</li>
</ul>
</li>
<li class="lvl-2">
<p>TCP 是全双工通信的，发送方和接收方都有自己的发送窗口和接收窗口</p>
<ul class="lvl-2">
<li class="lvl-4">发送方的发送窗口是根据接收方的接收窗口大小和网络拥塞程度动态调整的</li>
<li class="lvl-4">接收方的接收窗口是根据发送方的发送窗口大小和接收方的处理能力动态调整的</li>
</ul>
</li>
</ul>
<h2 id="TCP-运输连接管理">TCP 运输连接管理</h2>
<h3 id="TCP-连接的建立">TCP 连接的建立</h3>
<p>TCP 连接的建立是三次握手的过程，三次握手的过程是为了确保双方都能够发送和接收数据。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一次握手：客户端发送一个 SYN 报文段给服务器端，请求建立连接</p>
</li>
<li class="lvl-2">
<p>第二次握手：服务器端接收到客户端发送的 SYN 报文段后，发送一个 SYN 报文段和一个 ACK 报文段给客户端，确认客户端的请求</p>
</li>
<li class="lvl-2">
<p>第三次握手：客户端接收到服务器端发送的 SYN 报文段和 ACK 报文段后，发送一个 ACK 报文段给服务器端，确认服务器端的请求</p>
</li>
</ul>
<h3 id="TCP-连接的释放">TCP 连接的释放</h3>
<p>TCP 连接的释放是四次挥手的过程，四次挥手的过程是为了确保双方都能够正确关闭连接。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一次挥手：客户端发送一个 FIN 报文段给服务器端，请求关闭连接</p>
</li>
<li class="lvl-2">
<p>第二次挥手：服务器端接收到客户端发送的 FIN 报文段后，发送一个 ACK 报文段给客户端，确认客户端的请求</p>
</li>
<li class="lvl-2">
<p>第三次挥手：服务器端发送一个 FIN 报文段给客户端，请求关闭连接</p>
</li>
<li class="lvl-2">
<p>第四次挥手：客户端接收到服务器端发送的 FIN 报文段后，发送一个 ACK 报文段给服务器端，确认服务器端的请求</p>
</li>
</ul>
<h2 id="TCP-报文段的首部格式">TCP 报文段的首部格式</h2>
<p>TCP 报文段的首部格式如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>源端口号：16 位，标识发送方的端口号</p>
</li>
<li class="lvl-2">
<p>目的端口号：16 位，标识接收方的端口号</p>
</li>
<li class="lvl-2">
<p>序列号：32 位，标识数据的顺序</p>
</li>
<li class="lvl-2">
<p>确认号：32 位，标识数据的确认</p>
</li>
<li class="lvl-2">
<p>首部长度：4 位，标识首部的长度</p>
</li>
<li class="lvl-2">
<p>URG：1 位，标识紧急指针是否有效</p>
</li>
<li class="lvl-2">
<p>ACK：1 位，标识确认号是否有效</p>
</li>
<li class="lvl-2">
<p>PSH：1 位，标识接收方是否应该立即交付数据</p>
</li>
<li class="lvl-2">
<p>RST：1 位，标识连接是否重置</p>
</li>
<li class="lvl-2">
<p>SYN：1 位，标识连接是否建立</p>
</li>
<li class="lvl-2">
<p>FIN：1 位，标识连接是否释放</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计模式总结 01</title>
    <url>/2024/10/14/1/</url>
    <content><![CDATA[<h2 id="什么是设计模式">什么是设计模式</h2>
<p>设计模式是一套被反复使用、多数人知晓、经过分类编目的代码设计经验的总结。使用设计模式是为了重用代码，让代码更容易被他人理解，保证代码可靠性。</p>
<h3 id="基本要素">基本要素</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>模式名称(Pattern Name)</p>
</li>
<li class="lvl-2">
<p>问题(Problem)</p>
</li>
<li class="lvl-2">
<p>解决方案(Solution)</p>
</li>
<li class="lvl-2">
<p>效果(Consequences)</p>
</li>
</ul>
<h3 id="分类">分类</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>目的</p>
<ul class="lvl-2">
<li class="lvl-4">创建型模式</li>
<li class="lvl-4">结构型模式</li>
<li class="lvl-4">行为型模式</li>
</ul>
</li>
<li class="lvl-2">
<p>作用范围</p>
<ul class="lvl-2">
<li class="lvl-4">类模式</li>
<li class="lvl-4">对象模式</li>
</ul>
</li>
</ul>
<h2 id="OOP-设计原则">OOP 设计原则</h2>
<ol>
<li class="lvl-3">
<p>Single Responsibility Principle 单一职责原则</p>
</li>
<li class="lvl-3">
<p>Open Closed Principle 开闭原则</p>
</li>
<li class="lvl-3">
<p>Liskov Substitution Principle 里氏替换原则</p>
</li>
<li class="lvl-3">
<p>Interface Segregation Principle 接口隔离原则</p>
</li>
<li class="lvl-3">
<p>Dependency Inversion Principle 依赖倒置原则</p>
</li>
<li class="lvl-3">
<p>Composite Reuse Principle 合成复用原则</p>
</li>
<li class="lvl-3">
<p>Law of Demeter 迪米特法则</p>
</li>
</ol>
<p>参考：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU09MSUQ=">SOLID - wikipedia<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9nZWVrLWRvY3MuY29tL2Rlc2lnbi1wYXR0ZXJuL2Rlc2lnbi1wcmluY2lwbGUvZGVzaWduLXByaW5jaXBsZS1pbmRleC5odG1s">设计原则 - 极客教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="认识-ClassDiagram">认识 ClassDiagram</h2>
<p>参考链接：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkLm5vZGVqcy5jbi9zeW50YXgvY2xhc3NEaWFncmFtLmh0bWw=">中文<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkLmpzLm9yZy9zeW50YXgvY2xhc3NEaWFncmFtLmh0bWw=">英文<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>要素：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>标题</p>
</li>
<li class="lvl-2">
<p>类</p>
</li>
<li class="lvl-2">
<p>符号</p>
</li>
<li class="lvl-2">
<p>连线</p>
</li>
<li class="lvl-2">
<p>箭头</p>
</li>
<li class="lvl-2">
<p>注释</p>
</li>
</ul>
<pre><code class="highlight mermaid">---
title: Animal example
---
classDiagram
    note &quot;From Duck till Zebra&quot;
    Animal &lt;|-- Duck
    note for Duck &quot;can fly\ncan swim\ncan dive\ncan help in debugging&quot;
    Animal &lt;|-- Fish
    Animal &lt;|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck&#123;
        +String beakColor
        +swim()
        +quack()
    &#125;
    class Fish&#123;
        -int sizeInFeet
        -canEat()
    &#125;
    class Zebra&#123;
        +bool is_wild
        +run()
    &#125;
</code></pre>
<h3 id="类、接口、抽象类">类、接口、抽象类</h3>
<pre><code class="highlight mermaid">classDiagram
    class NormalClass1&#123;
        +int age
        +String
        +isMammal() boolean
        +mate() void
    &#125;
    class interface1&#123;
        &lt;&lt;interface&gt;&gt;
        +int age
        +String
        +isMammal() boolean
        +mate() void
    &#125;
    class abstract1&#123;
        &lt;&lt;abstract&gt;&gt;
        +int age
        +String
        +isMammal() boolean
        +mate() void
    &#125;</code></pre>
<blockquote>
<p>在一些图中，接口会显示为一个 -o 的标记，不是直接显示 <code>&lt;&lt;interface&gt;&gt;</code>。</p>
</blockquote>
<h3 id="符号">符号</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ Public // 公共</span><br><span class="line">- Private // 私有</span><br><span class="line"># Protected // 保护</span><br><span class="line">~ Package/Internal // 包内</span><br></pre></td></tr></table></figure>
<h3 id="连线">连线</h3>
<pre><code class="highlight mermaid">classDiagram
    class A
    class B
    A -- B

    class C
    class D
    C .. D</code></pre>
<blockquote>
<p>连线可以使用 <code>--</code> 或 <code>..</code>，前者表示实线，后者表示虚线。代表不同的关系。</p>
</blockquote>
<h3 id="箭头">箭头</h3>
<pre><code class="highlight mermaid">classDiagram
    class A
    class B
    A --&gt; B

    class C
    class D
    C --o D

    class E
    class F
    E --|&gt; F

    class G
    class H
    G --* H</code></pre>
<blockquote>
<p>箭头有多种类型，代表不同的关系。配合不同的连线，代表不同的关系，目前有 8 种不同的关系。</p>
</blockquote>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>中文</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;|–</td>
<td>Inheritance</td>
<td>继承</td>
</tr>
<tr>
<td>*–</td>
<td>Composition</td>
<td>组合</td>
</tr>
<tr>
<td>o–</td>
<td>Aggregation</td>
<td>聚合</td>
</tr>
<tr>
<td>–&gt;</td>
<td>Association</td>
<td>关联</td>
</tr>
<tr>
<td>–</td>
<td>Link (Solid)</td>
<td>链接（实线）</td>
</tr>
<tr>
<td>…&gt;</td>
<td>Dependency</td>
<td>依赖</td>
</tr>
<tr>
<td>…|&gt;</td>
<td>Realization</td>
<td>实现</td>
</tr>
<tr>
<td>…</td>
<td>Link (Dashed)</td>
<td>链接（虚线）</td>
</tr>
</tbody>
</table>
<pre><code class="highlight mermaid">classDiagram
classA &lt;|-- classB : Inheritance继承
classC *-- classD : Composition组合
classE o-- classF : Aggregation聚合
classG &lt;-- classH : Association关联</code></pre>
<pre><code class="highlight mermaid">classDiagram
classI -- classJ : Link实线
classK &lt;.. classL : Dependency依赖
classM &lt;|.. classN : Realization实现
classO .. classP : Link虚线</code></pre>
<blockquote>
<p>一条带有箭头的线表示两个类之间的关系，一条连线可以有2个箭头，分别指向不同的类。</p>
</blockquote>
<h2 id="简单工厂模式">简单工厂模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class chart &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;
    class HistogramChart &#123;
        +HistogramChart()
        +display() void
    &#125;
    class PieChart &#123;
        +PieChart()
        +display() void
    &#125;
    class LineChart &#123;
        +LineChart()
        +display() void
    &#125;
    class ChartFactory &#123;
        +getChart(String type) chart
    &#125;

    chart &lt;|.. HistogramChart
    chart &lt;|.. PieChart
    chart &lt;|.. LineChart
    ChartFactory ..&gt; HistogramChart : create
    ChartFactory ..&gt; PieChart : create
    ChartFactory ..&gt; LineChart : create</code></pre>
<blockquote>
<p>简单工厂模式：一个工厂类根据传入的参数决定创建哪一种产品类的实例。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>工厂</p>
</li>
<li class="lvl-2">
<p>抽象产品</p>
</li>
<li class="lvl-2">
<p>具体产品</p>
</li>
</ul>
<h2 id="工厂方法模式">工厂方法模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Client
    class Factory &#123;
        &lt;&lt;interface&gt;&gt;
        +create() Product
    &#125;
    class ConcreteFactoryA &#123;
        +create() Product
    &#125;
    class ConcreteFactoryB &#123;
        +create() Product
    &#125;
    class Product &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;
    class ConcreteProductA &#123;
        +display() void
    &#125;
    class ConcreteProductB &#123;
        +display() void
    &#125;

    Factory &lt;|.. ConcreteFactoryA
    Factory &lt;|.. ConcreteFactoryB
    Product &lt;|.. ConcreteProductA
    Product &lt;|.. ConcreteProductB
    ConcreteProductA &lt;.. ConcreteFactoryA : create
    ConcreteProductB &lt;.. ConcreteFactoryB : create
    Client --&gt; Factory : factory
    Client --&gt; Product : product</code></pre>
<blockquote>
<p>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象工厂</p>
</li>
<li class="lvl-2">
<p>具体工厂</p>
</li>
<li class="lvl-2">
<p>抽象产品</p>
</li>
<li class="lvl-2">
<p>具体产品</p>
</li>
</ul>
<h3 id="反射与配置文件">反射与配置文件</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>反射：在运行状态中，动态获取类的信息并创建对象。</p>
</li>
<li class="lvl-2">
<p>配置文件：将参数放置在配置文件中，用户通过输入数字来决定选择哪个具体的工厂对象。</p>
</li>
</ul>
<h3 id="工厂方法的重载与隐藏">工厂方法的重载与隐藏</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>重载：在一个类中定义多个同名方法，参数列表不同。</p>
</li>
<li class="lvl-2">
<p>隐藏：在工厂中直接调用产品类业务方法，客户端无需调用工厂方法创建产品对象。</p>
</li>
</ul>
<h2 id="抽象工厂模式">抽象工厂模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Client
    class SkinFactory &#123;
        &lt;&lt;interface&gt;&gt;
        +createButton() Button
        +createTextField() TextField
    &#125;

    class SpringSkinFactory &#123;
        +createButton() : Button
        +createTextField() TextField
    &#125;

    class SummerSkinFactory &#123;
        +createButton() : Button
        +createTextField() TextField
    &#125;

    class Button &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;

    class SpringButton &#123;
        +display() void
    &#125;

    class SummerButton &#123;
        +display() void
    &#125;

    class TextField &#123;
        &lt;&lt;interface&gt;&gt;
        +display() void
    &#125;

    class SpringTextField &#123;
        +display() void
    &#125;

    class SummerTextField &#123;
        +display() void
    &#125;

    SkinFactory &lt;|.. SpringSkinFactory
    SkinFactory &lt;|.. SummerSkinFactory
    Button &lt;|.. SpringButton
    Button &lt;|.. SummerButton
    TextField &lt;|.. SpringTextField
    TextField &lt;|.. SummerTextField

    SpringButton &lt;.. SpringSkinFactory : create
    SpringTextField &lt;.. SpringSkinFactory : create
    SummerButton &lt;.. SummerSkinFactory : create
    SummerTextField &lt;.. SummerSkinFactory : create

    Client ..&gt; SkinFactory : factory
    Client ..&gt; Button
    Client ..&gt; TextField</code></pre>
<blockquote>
<p>抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象工厂</p>
</li>
<li class="lvl-2">
<p>具体工厂</p>
</li>
<li class="lvl-2">
<p>抽象产品</p>
</li>
<li class="lvl-2">
<p>具体产品</p>
</li>
</ul>
<h3 id="开闭原则的倾斜性">开闭原则的倾斜性</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>开闭原则：对扩展开放，对修改关闭。</p>
</li>
<li class="lvl-2">
<p>倾斜性：抽象工厂模式在增加新产品时，需要修改抽象工厂接口和所有具体工厂类。</p>
</li>
</ul>
<h2 id="建造者模式">建造者模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Actor &#123;
        +type : String
        +gender : String
        +face : String
        +costume : String
        +hairstyle : String
        +setType(String type) void
        +setGender(String gender) void
        +setFace(String face) void
        +setCostume(String costume) void
        +setHairstyle(String hairstyle) void
        +getType() String
        +getGender() String
        +getFace() String
        +getCostume() String
        +getHairstyle() String
    &#125;
    class ActorBuilder &#123;
        &lt;&lt;abstract&gt;&gt;
        #actor : Actor
        +buildType() void
        +buildGender() void
        +buildFace() void
        +buildCostume() void
        +buildHairstyle() void
        +createActor() Actor
    &#125;
    class HeroBuilder &#123;
        +buildType() void
        +buildGender() void
        +buildFace() void
        +buildCostume() void
        +buildHairstyle() void
    &#125;
    class AngelBuilder &#123;
        +buildType() void
        +buildGender() void
        +buildFace() void
        +buildCostume() void
        +buildHairstyle() void
    &#125;
    class ActorController &#123;
        +construct(ActorBuilder ab) Actor
    &#125;

    Actor &lt;--* ActorBuilder
    ActorBuilder &lt;|-- HeroBuilder
    ActorBuilder &lt;|-- AngelBuilder
    ActorController ..&gt; ActorBuilder : builder</code></pre>
<blockquote>
<p>建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象建造者</p>
</li>
<li class="lvl-2">
<p>具体建造者</p>
</li>
<li class="lvl-2">
<p>产品</p>
</li>
<li class="lvl-2">
<p>指挥者</p>
</li>
</ul>
<h3 id="Hook方法">Hook方法</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Hook方法：在抽象建造者中定义一个或多个方法，让子类实现。</p>
</li>
</ul>
<h2 id="原型模式">原型模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Cloneable &#123;
        &lt;&lt;interface&gt;&gt;
    &#125;
    class Object &#123;
        +clone() Object
    &#125;
    class ConcretePrototype &#123;
        +clone() Object
    &#125;
    class Client &#123;
        +operation(Prototype prototype) void
    &#125;

    Object &lt;|-- ConcretePrototype
    Cloneable &lt;|.. ConcretePrototype
    Client &lt;--o ConcretePrototype : prototype</code></pre>
<blockquote>
<p>原型模式：用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p>
</blockquote>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽象原型</p>
</li>
<li class="lvl-2">
<p>具体原型</p>
</li>
<li class="lvl-2">
<p>客户端</p>
</li>
</ul>
<h3 id="序列化与反序列化">序列化与反序列化</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>序列化：将对象转换为字节序列。</p>
</li>
<li class="lvl-2">
<p>反序列化：将字节序列转换为对象。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SoftwareEngineering</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计模式总结 02</title>
    <url>/2024/12/31/1/</url>
    <content><![CDATA[<h2 id="单例模式">单例模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Singleton &#123;
        - instance: Singleton
        - Singleton()
        + getInstance(): Singleton
    &#125;
    note for Singleton &quot;if (instance == null) &#123;
        instance = new Singleton();
        return instance; &#125;&quot;
    Singleton o--&gt; Singleton : instance</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Singleton</p>
</li>
</ul>
<p>单例模式只有一个类，没有接口。</p>
<blockquote>
<p>单例模式是一种创建型设计模式，让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。</p>
</blockquote>
<h2 id="适配器模式">适配器模式</h2>
<pre><code class="highlight mermaid">---
title: class adapter
---
classDiagram
    class Target &#123;
        &lt;&lt;interface&gt;&gt;
        + request()
    &#125;
    class Adaptee &#123;
        + request()
    &#125;
    class Adapter &#123;
        - specificRequest()
    &#125;
    note for Adapter &quot;super.request();&quot;
    class Client
    Client ..&gt; Target
    Target &lt;|.. Adapter
    Adapter --&gt; Adaptee</code></pre>
<pre><code class="highlight mermaid">---
title: object adapter
---
classDiagram
    class Target &#123;
        + request()
    &#125;
    class Adaptee &#123;
        + request()
    &#125;
    class Adapter &#123;
        + specificRequest()
    &#125;
    note for Adapter &quot;adaptee.specificRequest();&quot;
    class Client
    Client ..&gt; Target
    Target &lt;|-- Adapter
    Adapter --&gt; Adaptee</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Target</p>
</li>
<li class="lvl-2">
<p>Adaptee</p>
</li>
<li class="lvl-2">
<p>Adapter</p>
</li>
</ul>
<p>Target 是客户端所期待的接口，Adaptee 是需要适配的类，Adapter 是适配器。</p>
<blockquote>
<p>适配器模式是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。</p>
</blockquote>
<h2 id="桥接模式">桥接模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Implementor &#123;
        &lt;&lt;interface&gt;&gt;
        + operationImpl()
    &#125;
    class ConcreteImplementorA &#123;
        + operationImpl()
    &#125;
    class ConcreteImplementorB &#123;
        + operationImpl()
    &#125;
    class Abstraction &#123;
        + operation()
    &#125;
    class Client
    note for Abstraction &quot;impl.operationImpl();&quot;
    class RefinedAbstraction &#123;
        + operation()
    &#125;
    Abstraction &lt;|-- RefinedAbstraction
    Abstraction o--&gt; Implementor : impl
    ConcreteImplementorA ..|&gt; Implementor
    ConcreteImplementorB ..|&gt; Implementor

    class Client
    Client ..&gt; Abstraction
    Client ..&gt; Implementor</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Implementor - 实现者接口</p>
</li>
<li class="lvl-2">
<p>ConcreteImplementor - 具体实现者</p>
</li>
<li class="lvl-2">
<p>Abstraction - 抽象类</p>
</li>
<li class="lvl-2">
<p>RefinedAbstraction - 扩充抽象类</p>
</li>
</ul>
<blockquote>
<p>桥接模式是一种结构型设计模式，可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用。</p>
</blockquote>
<h2 id="组合模式">组合模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Component &#123;
        &lt;&lt;interface&gt;&gt;
        + operation()
    &#125;
    class Leaf &#123;
        + operation()
    &#125;
    class Composite &#123;
        + operation()
        + add(Component c)
        + remove(Component c)
        + getChild(int index): Component
    &#125;
    note for Composite &quot;for (Component c : children) &#123;
        c.operation(); &#125;&quot;
    class Client
    Component &lt;|-- Leaf
    Component &lt;|-- Composite
    Composite o--&gt; Component : children
    Client ..&gt; Component</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Component - 抽象构件</p>
</li>
<li class="lvl-2">
<p>Leaf - 叶节点</p>
</li>
<li class="lvl-2">
<p>Composite - 容器构件</p>
</li>
</ul>
<blockquote>
<p>组合模式是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。</p>
</blockquote>
<h2 id="装饰器模式">装饰器模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Component &#123;
        + operation()
    &#125;
    class ConcreteComponent &#123;
        + operation()
    &#125;
    class Decorator &#123;
        + operation()
    &#125;
    note for Decorator &quot;component.operation();&quot;
    class ConcreteDecoratorA &#123;
        - addedState
        + operation()
    &#125;
    class ConcreteDecoratorB &#123;
        - addedBehavior
        + operation()
    &#125;
    note for ConcreteDecoratorA &quot;super.operation();
    addedBehavior();&quot;
    Component &lt;|-- ConcreteComponent
    Component &lt;|-- Decorator
    Component &lt;--o Decorator : component
    Decorator &lt;|-- ConcreteDecoratorA
    Decorator &lt;|-- ConcreteDecoratorB</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Component - 抽象构件</p>
</li>
<li class="lvl-2">
<p>ConcreteComponent - 具体构件</p>
</li>
<li class="lvl-2">
<p>Decorator - 抽象装饰器</p>
</li>
<li class="lvl-2">
<p>ConcreteDecorator - 具体装饰器</p>
</li>
</ul>
<blockquote>
<p>装饰器模式是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。</p>
</blockquote>
<h2 id="外观模式">外观模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Subsystem1 &#123;
        + operation1()
    &#125;
    class Subsystem2 &#123;
        + operation2()
    &#125;
    class Subsystem3 &#123;
        + operation3()
    &#125;
    class Facade &#123;
        + operation()
    &#125;
    note for Facade &quot;subsystem1.operation1();
    subsystem2.operation2();
    subsystem3.operation3();&quot;
    Client ..&gt; Facade
    Facade --&gt; Subsystem1 : subsystem1
    Facade --&gt; Subsystem2 : subsystem2
    Facade --&gt; Subsystem3 : subsystem3</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Subsystem - 子系统</p>
</li>
<li class="lvl-2">
<p>Facade - 外观</p>
</li>
</ul>
<blockquote>
<p>外观模式是一种结构型设计模式，它为复杂子系统提供一个简单接口，使其更易于使用。</p>
</blockquote>
<h2 id="代理模式">代理模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Subject &#123;
        &lt;&lt;interface&gt;&gt;
        + request()
    &#125;
    class RealSubject &#123;
        + request()
    &#125;
    class Proxy &#123;
        - realSubject: RealSubject
        + preRequest()
        + request()
        + postRequest()
    &#125;
    note for Proxy &quot;preRequest();
    realSubject.request();
    postRequest();&quot;
    Subject &lt;|-- RealSubject
    Subject &lt;|-- Proxy
    Proxy --&gt; RealSubject : realSubject
    Client ..&gt; Subject</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Subject - 抽象主题</p>
</li>
<li class="lvl-2">
<p>RealSubject - 真实主题</p>
</li>
<li class="lvl-2">
<p>Proxy - 代理</p>
</li>
</ul>
<blockquote>
<p>代理模式是一种结构型设计模式，让你能提供对象的替代品或其占位符。代理控制对于原始对象的访问，并允许在将请求提交给对象前后进行一些处理。</p>
</blockquote>
<h2 id="迭代器模式">迭代器模式</h2>
<pre><code class="highlight mermaid">classDiagram
    class Iterator &#123;
        &lt;&lt;interface&gt;&gt;
        + first()
        + next()
        + isDone()
        + currentItem()
    &#125;
    class ConcreteIterator &#123;
        + first()
        + next()
        + isDone()
        + currentItem()
    &#125;
    class Aggregate &#123;
        &lt;&lt;interface&gt;&gt;
        + createIterator()
    &#125;
    class ConcreteAggregate &#123;
        + createIterator()
    &#125;
    Iterator &lt;|.. ConcreteIterator
    Aggregate &lt;|.. ConcreteAggregate
    ConcreteAggregate ..&gt; ConcreteIterator
    ConcreteAggregate &lt;-- ConcreteIterator : aggregate</code></pre>
<p>结构</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Iterator - 迭代器</p>
</li>
<li class="lvl-2">
<p>ConcreteIterator - 具体迭代器</p>
</li>
<li class="lvl-2">
<p>Aggregate - 抽象聚合</p>
</li>
<li class="lvl-2">
<p>ConcreteAggregate - 具体聚合</p>
</li>
</ul>
<blockquote>
<p>迭代器模式是一种行为设计模式， 让你能在不暴露集合底层表现形式（列表、栈和树等）的情况下遍历集合中所有的元素。</p>
</blockquote>
]]></content>
      <categories>
        <category>SoftwareEngineering</category>
      </categories>
  </entry>
  <entry>
    <title>Csharp-01</title>
    <url>/2024/01/25/1/</url>
    <content><![CDATA[<h2 id="开发环境以及-IDE-的使用">开发环境以及 IDE 的使用</h2>
<p>IDE：Visual Studio 2022</p>
<p>选择工作负荷：.NET 桌面开发</p>
<h3 id="创建一个控制台应用程序">创建一个控制台应用程序</h3>
<ol>
<li class="lvl-3">
<p>打开 Visual Studio 2022</p>
</li>
<li class="lvl-3">
<p>选择“创建新项目”</p>
</li>
<li class="lvl-3">
<p>选择“控制台应用程序 (.NET Framework)”</p>
</li>
<li class="lvl-3">
<p>填写项目名称</p>
</li>
<li class="lvl-3">
<p>点击“创建”</p>
</li>
</ol>
<blockquote>
<p>项目名称与解决方案的关系项目名称：项目的名称解决方案：项目的容器，一个解决方案可以包含多个项目</p>
</blockquote>
<h3 id="项目结构">项目结构</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Properties：项目属性</p>
</li>
<li class="lvl-2">
<p>References：引用</p>
</li>
<li class="lvl-2">
<p>Program.cs：程序入口</p>
</li>
<li class="lvl-2">
<p>App.config：配置文件</p>
</li>
<li class="lvl-2">
<p>Packages.config：NuGet 包管理</p>
</li>
<li class="lvl-2">
<p>.vs：Visual Studio 配置文件</p>
</li>
<li class="lvl-2">
<p>bin：编译后的文件</p>
</li>
<li class="lvl-2">
<p>obj：编译过程中的文件</p>
</li>
</ul>
<h2 id="Hello-World">Hello World</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorldCS</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 类型</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">// 函数、方法</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基础结构">基础结构</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>命名空间：namespace</p>
</li>
<li class="lvl-2">
<p>类型：class、struct、interface、enum</p>
</li>
<li class="lvl-2">
<p>函数、方法：static void Main(string[] args)</p>
</li>
<li class="lvl-2">
<p>语句块：{}</p>
</li>
<li class="lvl-2">
<p>语句：;</p>
</li>
<li class="lvl-2">
<p>注释：//、/* */</p>
</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最小结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基础语法">基础语法</h2>
<h3 id="注释">注释</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="标识符">标识符</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>由字母、数字、下划线组成</p>
</li>
<li class="lvl-2">
<p>不能以数字开头</p>
</li>
<li class="lvl-2">
<p>不能是关键字</p>
</li>
</ul>
<h3 id="关键字">关键字</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>保留的关键字，不能用作标识符</p>
</li>
<li class="lvl-2">
<p>保留的关键字</p>
<blockquote>
<p>abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long namespace new null object operator out override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual void volatile while</p>
</blockquote>
</li>
</ul>
<h2 id="变量">变量</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>变量的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="built_in">int</span> a;</span><br><span class="line"><span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="built_in">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="built_in">int</span> c, d, e;</span><br><span class="line"><span class="comment">// 声明多个变量并赋值</span></span><br><span class="line"><span class="built_in">int</span> f = <span class="number">1</span>, g = <span class="number">2</span>, h = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>变量的命名规范</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>驼峰命名法</p>
</li>
<li class="lvl-4">
<p>大驼峰：每个单词首字母大写</p>
</li>
<li class="lvl-4">
<p>小驼峰：第一个单词首字母小写，其他单词首字母大写</p>
</li>
<li class="lvl-4">
<p>命名规范</p>
</li>
<li class="lvl-4">
<p>变量名要有意义</p>
</li>
<li class="lvl-4">
<p>变量名不能是关键字</p>
</li>
<li class="lvl-4">
<p>变量名不能以数字开头</p>
</li>
<li class="lvl-4">
<p>变量名不能包含空格</p>
</li>
<li class="lvl-4">
<p>变量名不能包含特殊字符</p>
</li>
<li class="lvl-4">
<p>变量名不能包含中文</p>
</li>
<li class="lvl-4">
<p>变量名不能包含下划线</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p>变量的作用域</p>
<ul class="lvl-2">
<li class="lvl-4">局部变量：在方法中声明的变量</li>
<li class="lvl-4">成员变量：在类中声明的变量</li>
</ul>
</li>
<li class="lvl-2">
<p>变量的类型</p>
<ul class="lvl-2">
<li class="lvl-4">值类型：存储在栈中，直接存储数据</li>
<li class="lvl-4">整型：byte、short、int、long</li>
<li class="lvl-4">浮点型：float、double</li>
<li class="lvl-4">字符型：char</li>
<li class="lvl-4">布尔型：bool</li>
<li class="lvl-4">引用类型：存储在堆中，存储数据的地址</li>
<li class="lvl-4">字符串：string</li>
<li class="lvl-4">数组：int[]</li>
</ul>
</li>
<li class="lvl-2">
<p>变量的转换</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>隐式转换：小类型转换为大类型</p>
</li>
<li class="lvl-4">
<p>显式转换：大类型转换为小类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐式转换</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">double</span> b = a;</span><br><span class="line"><span class="comment">// 显式转换</span></span><br><span class="line"><span class="built_in">double</span> c = <span class="number">1.1</span>;</span><br><span class="line"><span class="built_in">int</span> d = (<span class="built_in">int</span>)c;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>变量的默认值</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0</td>
</tr>
<tr>
<td>float</td>
<td>0</td>
</tr>
<tr>
<td>double</td>
<td>0</td>
</tr>
<tr>
<td>char</td>
<td>\0</td>
</tr>
<tr>
<td>bool</td>
<td>false</td>
</tr>
<tr>
<td>string</td>
<td>null</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<h2 id="常量">常量</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>常量的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 声明多个常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> b = <span class="number">1</span>, c = <span class="number">2</span>, d = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>常量的命名规范</p>
<ul class="lvl-2">
<li class="lvl-4">常量名要有意义</li>
<li class="lvl-4">常量名不能是关键字</li>
<li class="lvl-4">常量名不能以数字开头</li>
<li class="lvl-4">常量名不能包含空格</li>
<li class="lvl-4">常量名不能包含特殊字符</li>
<li class="lvl-4">常量名不能包含中文</li>
<li class="lvl-4">常量名不能包含下划线</li>
</ul>
</li>
<li class="lvl-2">
<p>常量的作用域</p>
<ul class="lvl-2">
<li class="lvl-4">局部常量：在方法中声明的常量</li>
<li class="lvl-4">成员常量：在类中声明的常量</li>
</ul>
</li>
</ul>
<h2 id="运算符">运算符</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>算术运算符</p>
<ul class="lvl-2">
<li class="lvl-4">加法：+</li>
<li class="lvl-4">减法：-</li>
<li class="lvl-4">乘法：*</li>
<li class="lvl-4">除法：/</li>
<li class="lvl-4">取余：%</li>
<li class="lvl-4">自增：++</li>
<li class="lvl-4">自减：–</li>
</ul>
</li>
<li class="lvl-2">
<p>赋值运算符</p>
<ul class="lvl-2">
<li class="lvl-4">赋值：=</li>
<li class="lvl-4">加法赋值：+=</li>
<li class="lvl-4">减法赋值：-=</li>
<li class="lvl-4">乘法赋值：*=</li>
<li class="lvl-4">除法赋值：/=</li>
<li class="lvl-4">取余赋值：%=</li>
</ul>
</li>
<li class="lvl-2">
<p>比较运算符</p>
<ul class="lvl-2">
<li class="lvl-4">等于：==</li>
<li class="lvl-4">不等于：!=</li>
<li class="lvl-4">大于：&gt;</li>
<li class="lvl-4">小于：&lt;</li>
<li class="lvl-4">大于等于：&gt;=</li>
<li class="lvl-4">小于等于：&lt;=</li>
</ul>
</li>
<li class="lvl-2">
<p>逻辑运算符</p>
<ul class="lvl-2">
<li class="lvl-4">与：&amp;&amp;</li>
<li class="lvl-4">或：||</li>
<li class="lvl-4">非：!</li>
</ul>
</li>
<li class="lvl-2">
<p>位运算符</p>
<ul class="lvl-2">
<li class="lvl-4">与：&amp;</li>
<li class="lvl-4">或：|</li>
<li class="lvl-4">非：~</li>
<li class="lvl-4">异或：^</li>
<li class="lvl-4">左移：&lt;&lt;</li>
<li class="lvl-4">右移：&gt;&gt;</li>
</ul>
</li>
<li class="lvl-2">
<p>条件运算符</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>三元运算符：?:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> c = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li class="lvl-2">
<p>其他运算符</p>
<ul class="lvl-2">
<li class="lvl-4">is：判断类型</li>
<li class="lvl-4">as：类型转换</li>
<li class="lvl-4">sizeof：获取类型的大小</li>
<li class="lvl-4">typeof：获取类型</li>
<li class="lvl-4">default：获取类型的默认值</li>
<li class="lvl-4">checked：检查溢出</li>
<li class="lvl-4">unchecked：不检查溢出</li>
</ul>
</li>
</ul>
<h2 id="流程控制">流程控制</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>if 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;a &gt; b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;a &lt; b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;a = b&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>switch 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;a = 1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;a = 2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;a = 3&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>while 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>do while 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">    a++;</span><br><span class="line">&#125; <span class="keyword">while</span> (a &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>for 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>foreach 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arr)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>break 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>continue 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>goto 语句</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> label;</span><br><span class="line">    &#125;   </span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line">label:</span><br><span class="line">Console.WriteLine(<span class="string">&quot;goto&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp-02</title>
    <url>/2024/01/29/1/</url>
    <content><![CDATA[<h2 id="方法">方法</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>方法的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值无参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Method1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无返回值有参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method2</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值无参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method3</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值有参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method4</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>方法的调用</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值无参数</span></span><br><span class="line">Method1();</span><br><span class="line"><span class="comment">// 无返回值有参数</span></span><br><span class="line">Method2(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 有返回值无参数</span></span><br><span class="line"><span class="built_in">int</span> a = Method3();</span><br><span class="line"><span class="comment">// 有返回值有参数</span></span><br><span class="line"><span class="built_in">int</span> b = Method4(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>方法的重载</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值无参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Method1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无返回值有参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值无参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有返回值有参数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>方法的参数</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>值参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>引用参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>输出参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>可选参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">int</span> a = <span class="number">1</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>参数数组</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li class="lvl-2">
<p>方法的修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">public：公开的</li>
<li class="lvl-4">private：私有的</li>
<li class="lvl-4">internal：内部的</li>
<li class="lvl-4">protected：受保护的</li>
<li class="lvl-4">static：静态的</li>
<li class="lvl-4">virtual：虚方法</li>
<li class="lvl-4">override：重写方法</li>
<li class="lvl-4">abstract：抽象方法</li>
<li class="lvl-4">sealed：密封方法</li>
<li class="lvl-4">extern：外部方法</li>
</ul>
</li>
</ul>
<h2 id="类">类</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>类的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>类的实例化</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">p.age = <span class="number">18</span>;</span><br><span class="line">p.Say();</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>类的访问修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">public：公开的</li>
<li class="lvl-4">private：私有的</li>
<li class="lvl-4">internal：内部的</li>
<li class="lvl-4">protected：受保护的</li>
</ul>
</li>
<li class="lvl-2">
<p>类的成员修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">static：静态的</li>
<li class="lvl-4">virtual：虚方法</li>
<li class="lvl-4">override：重写方法</li>
<li class="lvl-4">abstract：抽象方法</li>
<li class="lvl-4">sealed：密封方法</li>
<li class="lvl-4">extern：外部方法</li>
</ul>
</li>
<li class="lvl-2">
<p>类的构造函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>类的析构函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Person()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;析构 Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="结构体">结构体</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>结构体的声明</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>结构体的实例化</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">p.age = <span class="number">18</span>;</span><br><span class="line">p.Say();</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>结构体的访问修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">public：公开的</li>
<li class="lvl-4">private：私有的</li>
<li class="lvl-4">internal：内部的</li>
<li class="lvl-4">protected：受保护的</li>
</ul>
</li>
<li class="lvl-2">
<p>结构体的成员修饰符</p>
<ul class="lvl-2">
<li class="lvl-4">static：静态的</li>
<li class="lvl-4">virtual：虚方法</li>
<li class="lvl-4">override：重写方法</li>
<li class="lvl-4">abstract：抽象方法</li>
<li class="lvl-4">sealed：密封方法</li>
<li class="lvl-4">extern：外部方法</li>
</ul>
</li>
<li class="lvl-2">
<p>结构体的构造函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>结构体的析构函数</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Person: &quot;</span> + name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Person()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;析构 Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp-03</title>
    <url>/2024/01/31/1/</url>
    <content><![CDATA[<h2 id="错误处理">错误处理</h2>
<p>如果程序中出现了错误，就会抛出异常。如果没有处理异常，程序就会终止。</p>
<h3 id="try-catch">try-catch</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能会出现异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 出现异常时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="finally">finally</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能会出现异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 出现异常时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不管是否出现异常都会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="throw">throw</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可能会出现异常的代码</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 出现异常时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不管是否出现异常都会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义异常">自定义异常</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span>(<span class="params"><span class="built_in">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g-除数为-0-时会抛出异常">e.g.  除数为 0 时会抛出异常</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> c = a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(ex.Message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OOP">OOP</h2>
<p>在面向对象编程中，类是一种模板，用于创建对象。对象是类的实例。</p>
<p>面向对象是一种思想，它将对象作为程序的基本单元，将程序和数据封装在对象中。</p>
<p>我学习了很多门语言了，故我对面向对象编程有了一定的了解。</p>
<p>不再赘述。</p>
<h2 id="类">类</h2>
<h3 id="定义类">定义类</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建对象">创建对象</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">p.age = <span class="number">20</span>;</span><br><span class="line">p.SayHello();</span><br></pre></td></tr></table></figure>
<h3 id="构造函数">构造函数</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Static">Static</h2>
<p>静态成员属于类，而不属于类的实例。静态成员在类加载时就会被初始化。</p>
<h3 id="静态字段">静态字段</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">Console.WriteLine(Person.count);</span><br></pre></td></tr></table></figure>
<h3 id="静态方法">静态方法</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Person.SayHello();</span><br></pre></td></tr></table></figure>
<h2 id="代码抽离">代码抽离</h2>
<h3 id="命名空间">命名空间</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用命名空间">引用命名空间</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> MyNamespace;</span><br></pre></td></tr></table></figure>
<h3 id="e-g">e.g.</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyClass mc = <span class="keyword">new</span> MyClass();</span><br><span class="line">        mc.SayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp-04</title>
    <url>/2024/02/07/1/</url>
    <content><![CDATA[<h2 id="DLL">DLL</h2>
<p>DLL（Dynamic Link Library）是动态链接库的缩写。它是一种包含可供程序调用的函数和数据的文件。DLL 文件可以包含多个函数，这些函数可以被多个程序调用。DLL 文件的扩展名是 .dll。</p>
<h3 id="创建-DLL">创建 DLL</h3>
<ol>
<li class="lvl-3">
<p>新建一个类库项目。</p>
</li>
<li class="lvl-3">
<p>在类库项目中添加类。</p>
</li>
<li class="lvl-3">
<p>在类库项目中编写类的代码。</p>
</li>
<li class="lvl-3">
<p>在类库项目中编译代码。</p>
</li>
<li class="lvl-3">
<p>在类库项目的输出目录中找到编译后的 DLL 文件。</p>
</li>
</ol>
<h3 id="使用-DLL">使用 DLL</h3>
<ol>
<li class="lvl-3">
<p>在项目中添加引用。</p>
</li>
<li class="lvl-3">
<p>在项目中使用引用的类。</p>
</li>
</ol>
<p>比如，我需要引用一个 <code>example.dll</code> 文件，我可以在项目中添加引用，然后使用引用的类。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Example;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="文件操作">文件操作</h2>
<h3 id="文件读取">文件读取</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = File.ReadAllText(path);</span><br><span class="line">        Console.WriteLine(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件写入">文件写入</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        File.WriteAllText(path, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件追加">文件追加</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        File.AppendAllText(path, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件删除">文件删除</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        File.Delete(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-g">e.g</h3>
<p>编写一个程序，读取一个文件，然后将文件内容倒序写入另一个文件，比如 <code>example.txt</code> 内容为 <code>Hello, World!</code>，则 <code>example-reverse.txt</code> 内容为 <code>!dlroW ,olleH</code>。</p>
<ol>
<li class="lvl-3">
<p>创建 example.txt 文件。</p>
</li>
<li class="lvl-3">
<p>给 example.txt 写入内容为 `Hello, World!</p>
</li>
<li class="lvl-3">
<p>读取 example.txt 文件。</p>
</li>
<li class="lvl-3">
<p>将读取的内容打印到控制台。</p>
</li>
<li class="lvl-3">
<p>将读取的内容倒序写入 example-reverse.txt 文件。</p>
</li>
<li class="lvl-3">
<p>查看 example-reverse.txt 文件。</p>
</li>
<li class="lvl-3">
<p>删除 example.txt 和 example-reverse.txt 文件。</p>
</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;example.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> content = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        File.WriteAllText(path, content);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> readContent = File.ReadAllText(path);</span><br><span class="line">        Console.WriteLine(readContent);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> reverseContent = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = readContent.Length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            reverseContent += readContent[i];</span><br><span class="line">        &#125;</span><br><span class="line">        File.WriteAllText(<span class="string">&quot;example-reverse.txt&quot;</span>, reverseContent);</span><br><span class="line"></span><br><span class="line">        File.Delete(path);</span><br><span class="line">        File.Delete(<span class="string">&quot;example-reverse.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他文件操作">其他文件操作</h3>
<blockquote>
<p>文件操作类 <code>File</code>。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>File.Copy</code> 复制文件。</p>
</li>
<li class="lvl-2">
<p><code>File.Move</code> 移动文件。</p>
</li>
<li class="lvl-2">
<p><code>File.Exists</code> 判断文件是否存在。</p>
</li>
<li class="lvl-2">
<p><code>File.GetCreationTime</code> 获取文件创建时间。</p>
</li>
<li class="lvl-2">
<p><code>File.GetLastAccessTime</code> 获取文件最后访问时间。</p>
</li>
<li class="lvl-2">
<p><code>File.GetLastWriteTime</code> 获取文件最后写入时间。</p>
</li>
</ul>
<blockquote>
<p>获取文件夹内容可以使用 <code>Directory</code> 类。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>Directory.GetFiles</code> 获取文件夹中的文件。</p>
</li>
<li class="lvl-2">
<p><code>Directory.GetDirectories</code> 获取文件夹中的文件夹。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 教程</title>
    <url>/2023/06/30/2/</url>
    <content><![CDATA[<h2 id="Docker-简介">Docker 简介</h2>
<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。<br>
Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。</p>
<h2 id="Docker-架构">Docker 架构</h2>
<p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。<br>
Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。</p>
<h2 id="为什么要使用-Docker？">为什么要使用 Docker？</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>更高效的利用系统资源</p>
</li>
<li class="lvl-2">
<p>更快速的启动时间</p>
</li>
<li class="lvl-2">
<p>一致的运行环境</p>
</li>
<li class="lvl-2">
<p>持续交付和部署</p>
</li>
<li class="lvl-2">
<p>更轻松的迁移</p>
</li>
<li class="lvl-2">
<p>更轻松的维护和扩展</p>
</li>
</ul>
<h2 id="Docker-与传统虚拟化的区别">Docker 与传统虚拟化的区别</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，而容器内的应用直接运行在宿主机的操作系统上。</p>
</li>
<li class="lvl-2">
<p>容器不需要进行硬件虚拟以及操作系统虚拟，因此容器的性能开销极小。</p>
</li>
<li class="lvl-2">
<p>Docker 属于操作系统层面的虚拟化技术。</p>
</li>
</ul>
<h2 id="容器与虚拟机的区别">容器与虚拟机的区别</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>容器是用户态的进程，而虚拟机是内核态的进程。</p>
</li>
<li class="lvl-2">
<p>容器是不需要虚拟出一套硬件，不需要进行硬件虚拟以及操作系统虚拟，因此容器的性能开销极小。</p>
</li>
<li class="lvl-2">
<p>容器是直接运行在宿主机的操作系统上，而虚拟机是运行在虚拟机监控器（VMM）上。</p>
</li>
</ul>
<h2 id="Docker-基本原理和概念">Docker 基本原理和概念</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>镜像（Image）</p>
</li>
<li class="lvl-2">
<p>容器（Container）</p>
</li>
<li class="lvl-2">
<p>仓库（Repository）</p>
</li>
</ul>
<h2 id="Docker-安装">Docker 安装</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=">Docker 官网<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20v">Docker 官方文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li class="lvl-2">
<p><span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=">Docker Hub<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>注意：Docker for Windows 要求系统打开 Hyper-V，而 VMware Workstation 和 VirtualBox 等虚拟机软件也需要使用到虚拟化技术，因此这些软件不能在同一台机器上同时运行。详见链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhYnJpZWxsZV9PeU8vYXJ0aWNsZS9kZXRhaWxzLzEyMDM2MTIxOA==">Windows 下 Docker 与 VMware 共存<i class="fa fa-external-link-alt"></i></span></p>
