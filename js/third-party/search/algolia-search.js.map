{"version":3,"names":["document","addEventListener","indexName","appID","apiKey","hits","CONFIG","algolia","index","algoliasearch","initIndex","input","querySelector","container","formatHits","data","title","excerpt","excerptStrip","contentStripTruncate","_highlightResult","result","permalink","value","content","div","createElement","innerHTML","textContent","substring","isSearching","pendingQuery","searchAlgolia","async","searchText","page","startTime","Date","now","search","attributesToRetrieve","attributesToHighlight","hitsPerPage","per_page","highlightPreTag","highlightPostTag","nbHits","stats","i18n","hits_time","replace","pagination","nbPages","i","images","map","join","pjax","refresh","querySelectorAll","forEach","element","event","preventDefault","Number","dataset","debouncedSearch","NexT","utils","debounce","trim","body","classList","add","setTimeout","focus","onPopupClose","remove","target","window","ctrlKey","metaKey","key"],"sources":["algolia-search.js.map"],"sourcesContent":["/* global CONFIG, NexT, pjax, algoliasearch */\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const { indexName, appID, apiKey, hits } = CONFIG.algolia;\n  const client = algoliasearch(appID, apiKey);\n  const index = client.initIndex(indexName);\n\n  const input = document.querySelector('.search-input');\n  const container = document.querySelector('.search-result-container');\n\n  const formatHits = data => {\n    const { title, excerpt, excerptStrip, contentStripTruncate } = data._highlightResult;\n    let result = `<li><a href=\"${data.permalink}\" class=\"search-result-title\">${title.value}</a>`;\n    const content = excerpt || excerptStrip || contentStripTruncate;\n    if (content && content.value) {\n      const div = document.createElement('div');\n      div.innerHTML = content.value;\n      result += `<a href=\"${data.permalink}\"><p class=\"search-result\">${div.textContent.substring(0, 100)}...</p></a></li>`;\n    }\n    return result;\n  };\n\n  let isSearching = false;\n  let pendingQuery = null;\n\n  const searchAlgolia = async(searchText, page = 0) => {\n    if (isSearching) {\n      pendingQuery = { searchText, page };\n      return;\n    }\n    isSearching = true;\n    const startTime = Date.now();\n    const data = await index.search(searchText, {\n      page,\n      attributesToRetrieve : ['permalink'],\n      attributesToHighlight: ['title', 'excerpt', 'excerptStrip', 'contentStripTruncate'],\n      hitsPerPage          : hits.per_page || 10,\n      highlightPreTag      : '<mark class=\"search-keyword\">',\n      highlightPostTag     : '</mark>'\n    });\n    if (data.nbHits === 0) {\n      container.innerHTML = '<div class=\"search-result-icon\"><i class=\"far fa-frown fa-5x\"></i></div>';\n    } else {\n      const stats = CONFIG.i18n.hits_time\n        .replace('${hits}', data.nbHits)\n        .replace('${time}', Date.now() - startTime);\n      let pagination = '';\n      if (data.nbPages > 1) {\n        pagination += '<nav class=\"pagination algolia-pagination\">';\n        for (let i = 0; i < data.nbPages; i++) {\n          if (i === page) {\n            pagination += `<span class=\"page-number current\">${i + 1}</span>`;\n          } else {\n            pagination += `<a class=\"page-number\" href=\"#\" data-index=${i}>${i + 1}</a>`;\n          }\n        }\n        pagination += '</nav>';\n      }\n\n      container.innerHTML = `<div class=\"search-stats\">\n          <span>${stats}</span>\n          <img src=\"${CONFIG.images}/logo-algolia-nebula-blue-full.svg\" alt=\"Algolia\">\n        </div>\n        <hr>\n        <ul class=\"search-result-list\">${data.hits.map(formatHits).join('')}</ul>\n        ${pagination}`;\n      if (typeof pjax === 'object') pjax.refresh(container);\n      container.querySelectorAll('.page-number').forEach(element => {\n        element.addEventListener('click', async event => {\n          event.preventDefault();\n          await searchAlgolia(searchText, Number(element.dataset.index));\n        });\n      });\n    }\n    isSearching = false;\n    if (pendingQuery !== null && (pendingQuery.searchText !== searchText || pendingQuery.page !== page)) {\n      const { searchText, page } = pendingQuery;\n      pendingQuery = null;\n      searchAlgolia(searchText, page);\n    }\n  };\n\n  const inputEventFunction = async() => {\n    const searchText = input.value.trim();\n    if (searchText === '') {\n      container.innerHTML = '<div class=\"search-result-icon\"><i class=\"fab fa-algolia fa-5x\"></i></div>';\n      return;\n    }\n    // Algolia client will automatically cache the data for same queries\n    await searchAlgolia(searchText, 0);\n  };\n\n  const debouncedSearch = NexT.utils.debounce(inputEventFunction, 500);\n  input.addEventListener('input', debouncedSearch);\n\n  // Handle and trigger popup window\n  document.querySelectorAll('.popup-trigger').forEach(element => {\n    element.addEventListener('click', () => {\n      document.body.classList.add('search-active');\n      // Wait for search-popup animation to complete\n      setTimeout(() => input.focus(), 500);\n    });\n  });\n\n  // Monitor main search box\n  const onPopupClose = () => {\n    document.body.classList.remove('search-active');\n  };\n\n  document.querySelector('.search-pop-overlay').addEventListener('click', event => {\n    if (event.target === document.querySelector('.search-pop-overlay')) {\n      onPopupClose();\n    }\n  });\n  document.querySelector('.popup-btn-close').addEventListener('click', onPopupClose);\n  document.addEventListener('pjax:success', onPopupClose);\n  window.addEventListener('keydown', event => {\n    if ((event.ctrlKey || event.metaKey) && event.key === 'k') {\n      event.preventDefault();\n      document.body.classList.add('search-active');\n      setTimeout(() => input.focus(), 500);\n    }\n  });\n  window.addEventListener('keyup', event => {\n    if (event.key === 'Escape') {\n      onPopupClose();\n    }\n  });\n});\n"],"mappings":"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","ignoreList":[]}